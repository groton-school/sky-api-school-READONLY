<?php
/**
 * OpponentUpdateModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * OpponentUpdateModel Class Doc Comment
 *
 * @category Class
 * @description
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OpponentUpdateModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OpponentUpdateModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'phone1' => 'string',
        'adFirstName' => 'string',
        'adLastName' => 'string',
        'adEmail' => 'string',
        'fax' => 'string',
        'phone2' => 'string',
        'asstAdFirstName' => 'string',
        'asstAdLastName' => 'string',
        'asstAdEmail' => 'string',
        'addressId' => 'int',
        'addressLine1' => 'string',
        'addressLine2' => 'string',
        'addressLine3' => 'string',
        'city' => 'string',
        'stateShort' => 'string',
        'country' => 'string',
        'province' => 'string',
        'zip' => 'string',
        'conferenceId' => 'int',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'phone1' => null,
        'adFirstName' => null,
        'adLastName' => null,
        'adEmail' => null,
        'fax' => null,
        'phone2' => null,
        'asstAdFirstName' => null,
        'asstAdLastName' => null,
        'asstAdEmail' => null,
        'addressId' => 'int32',
        'addressLine1' => null,
        'addressLine2' => null,
        'addressLine3' => null,
        'city' => null,
        'stateShort' => null,
        'country' => null,
        'province' => null,
        'zip' => null,
        'conferenceId' => 'int32',
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'phone1' => true,
        'adFirstName' => true,
        'adLastName' => true,
        'adEmail' => true,
        'fax' => true,
        'phone2' => true,
        'asstAdFirstName' => true,
        'asstAdLastName' => true,
        'asstAdEmail' => true,
        'addressId' => true,
        'addressLine1' => true,
        'addressLine2' => true,
        'addressLine3' => true,
        'city' => true,
        'stateShort' => true,
        'country' => true,
        'province' => true,
        'zip' => true,
        'conferenceId' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'phone1' => 'phone1',
        'adFirstName' => 'ad_first_name',
        'adLastName' => 'ad_last_name',
        'adEmail' => 'ad_email',
        'fax' => 'fax',
        'phone2' => 'phone2',
        'asstAdFirstName' => 'asst_ad_first_name',
        'asstAdLastName' => 'asst_ad_last_name',
        'asstAdEmail' => 'asst_ad_email',
        'addressId' => 'address_id',
        'addressLine1' => 'address_line1',
        'addressLine2' => 'address_line2',
        'addressLine3' => 'address_line3',
        'city' => 'city',
        'stateShort' => 'state_short',
        'country' => 'country',
        'province' => 'province',
        'zip' => 'zip',
        'conferenceId' => 'conference_id',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'phone1' => 'setPhone1',
        'adFirstName' => 'setAdFirstName',
        'adLastName' => 'setAdLastName',
        'adEmail' => 'setAdEmail',
        'fax' => 'setFax',
        'phone2' => 'setPhone2',
        'asstAdFirstName' => 'setAsstAdFirstName',
        'asstAdLastName' => 'setAsstAdLastName',
        'asstAdEmail' => 'setAsstAdEmail',
        'addressId' => 'setAddressId',
        'addressLine1' => 'setAddressLine1',
        'addressLine2' => 'setAddressLine2',
        'addressLine3' => 'setAddressLine3',
        'city' => 'setCity',
        'stateShort' => 'setStateShort',
        'country' => 'setCountry',
        'province' => 'setProvince',
        'zip' => 'setZip',
        'conferenceId' => 'setConferenceId',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'phone1' => 'getPhone1',
        'adFirstName' => 'getAdFirstName',
        'adLastName' => 'getAdLastName',
        'adEmail' => 'getAdEmail',
        'fax' => 'getFax',
        'phone2' => 'getPhone2',
        'asstAdFirstName' => 'getAsstAdFirstName',
        'asstAdLastName' => 'getAsstAdLastName',
        'asstAdEmail' => 'getAsstAdEmail',
        'addressId' => 'getAddressId',
        'addressLine1' => 'getAddressLine1',
        'addressLine2' => 'getAddressLine2',
        'addressLine3' => 'getAddressLine3',
        'city' => 'getCity',
        'stateShort' => 'getStateShort',
        'country' => 'getCountry',
        'province' => 'getProvince',
        'zip' => 'getZip',
        'conferenceId' => 'getConferenceId',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('phone1', $data ?? [], null);
        $this->setIfExists('adFirstName', $data ?? [], null);
        $this->setIfExists('adLastName', $data ?? [], null);
        $this->setIfExists('adEmail', $data ?? [], null);
        $this->setIfExists('fax', $data ?? [], null);
        $this->setIfExists('phone2', $data ?? [], null);
        $this->setIfExists('asstAdFirstName', $data ?? [], null);
        $this->setIfExists('asstAdLastName', $data ?? [], null);
        $this->setIfExists('asstAdEmail', $data ?? [], null);
        $this->setIfExists('addressId', $data ?? [], null);
        $this->setIfExists('addressLine1', $data ?? [], null);
        $this->setIfExists('addressLine2', $data ?? [], null);
        $this->setIfExists('addressLine3', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('stateShort', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('province', $data ?? [], null);
        $this->setIfExists('zip', $data ?? [], null);
        $this->setIfExists('conferenceId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Opponents name. Required.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets phone1
     *
     * @return string|null
     */
    public function getPhone1()
    {
        return $this->container['phone1'];
    }

    /**
     * Sets phone1
     *
     * @param string|null $phone1 Opponents phone1
     *
     * @return self
     */
    public function setPhone1($phone1)
    {
        if (is_null($phone1)) {
            array_push($this->openAPINullablesSetToNull, 'phone1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone1', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phone1'] = $phone1;

        return $this;
    }

    /**
     * Gets adFirstName
     *
     * @return string|null
     */
    public function getAdFirstName()
    {
        return $this->container['adFirstName'];
    }

    /**
     * Sets adFirstName
     *
     * @param string|null $adFirstName Athletic Directors first name
     *
     * @return self
     */
    public function setAdFirstName($adFirstName)
    {
        if (is_null($adFirstName)) {
            array_push($this->openAPINullablesSetToNull, 'adFirstName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('adFirstName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['adFirstName'] = $adFirstName;

        return $this;
    }

    /**
     * Gets adLastName
     *
     * @return string|null
     */
    public function getAdLastName()
    {
        return $this->container['adLastName'];
    }

    /**
     * Sets adLastName
     *
     * @param string|null $adLastName Athletic Directors last name
     *
     * @return self
     */
    public function setAdLastName($adLastName)
    {
        if (is_null($adLastName)) {
            array_push($this->openAPINullablesSetToNull, 'adLastName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('adLastName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['adLastName'] = $adLastName;

        return $this;
    }

    /**
     * Gets adEmail
     *
     * @return string|null
     */
    public function getAdEmail()
    {
        return $this->container['adEmail'];
    }

    /**
     * Sets adEmail
     *
     * @param string|null $adEmail Athletic Directors email
     *
     * @return self
     */
    public function setAdEmail($adEmail)
    {
        if (is_null($adEmail)) {
            array_push($this->openAPINullablesSetToNull, 'adEmail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('adEmail', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['adEmail'] = $adEmail;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string|null $fax Opponent fax
     *
     * @return self
     */
    public function setFax($fax)
    {
        if (is_null($fax)) {
            array_push($this->openAPINullablesSetToNull, 'fax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fax', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets phone2
     *
     * @return string|null
     */
    public function getPhone2()
    {
        return $this->container['phone2'];
    }

    /**
     * Sets phone2
     *
     * @param string|null $phone2 Opponent phone2
     *
     * @return self
     */
    public function setPhone2($phone2)
    {
        if (is_null($phone2)) {
            array_push($this->openAPINullablesSetToNull, 'phone2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone2', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phone2'] = $phone2;

        return $this;
    }

    /**
     * Gets asstAdFirstName
     *
     * @return string|null
     */
    public function getAsstAdFirstName()
    {
        return $this->container['asstAdFirstName'];
    }

    /**
     * Sets asstAdFirstName
     *
     * @param string|null $asstAdFirstName Asst. Athletic Directors first name
     *
     * @return self
     */
    public function setAsstAdFirstName($asstAdFirstName)
    {
        if (is_null($asstAdFirstName)) {
            array_push($this->openAPINullablesSetToNull, 'asstAdFirstName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('asstAdFirstName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['asstAdFirstName'] = $asstAdFirstName;

        return $this;
    }

    /**
     * Gets asstAdLastName
     *
     * @return string|null
     */
    public function getAsstAdLastName()
    {
        return $this->container['asstAdLastName'];
    }

    /**
     * Sets asstAdLastName
     *
     * @param string|null $asstAdLastName Asst. Athletic Directors last name
     *
     * @return self
     */
    public function setAsstAdLastName($asstAdLastName)
    {
        if (is_null($asstAdLastName)) {
            array_push($this->openAPINullablesSetToNull, 'asstAdLastName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('asstAdLastName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['asstAdLastName'] = $asstAdLastName;

        return $this;
    }

    /**
     * Gets asstAdEmail
     *
     * @return string|null
     */
    public function getAsstAdEmail()
    {
        return $this->container['asstAdEmail'];
    }

    /**
     * Sets asstAdEmail
     *
     * @param string|null $asstAdEmail Asst. Athletic Directors email
     *
     * @return self
     */
    public function setAsstAdEmail($asstAdEmail)
    {
        if (is_null($asstAdEmail)) {
            array_push($this->openAPINullablesSetToNull, 'asstAdEmail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('asstAdEmail', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['asstAdEmail'] = $asstAdEmail;

        return $this;
    }

    /**
     * Gets addressId
     *
     * @return int|null
     */
    public function getAddressId()
    {
        return $this->container['addressId'];
    }

    /**
     * Sets addressId
     *
     * @param int|null $addressId Opponents Address Id
     *
     * @return self
     */
    public function setAddressId($addressId)
    {
        if (is_null($addressId)) {
            array_push($this->openAPINullablesSetToNull, 'addressId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addressId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['addressId'] = $addressId;

        return $this;
    }

    /**
     * Gets addressLine1
     *
     * @return string|null
     */
    public function getAddressLine1()
    {
        return $this->container['addressLine1'];
    }

    /**
     * Sets addressLine1
     *
     * @param string|null $addressLine1 Opponents Address Line 1
     *
     * @return self
     */
    public function setAddressLine1($addressLine1)
    {
        if (is_null($addressLine1)) {
            array_push($this->openAPINullablesSetToNull, 'addressLine1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addressLine1', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['addressLine1'] = $addressLine1;

        return $this;
    }

    /**
     * Gets addressLine2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['addressLine2'];
    }

    /**
     * Sets addressLine2
     *
     * @param string|null $addressLine2 Opponents Address Line 2
     *
     * @return self
     */
    public function setAddressLine2($addressLine2)
    {
        if (is_null($addressLine2)) {
            array_push($this->openAPINullablesSetToNull, 'addressLine2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addressLine2', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['addressLine2'] = $addressLine2;

        return $this;
    }

    /**
     * Gets addressLine3
     *
     * @return string|null
     */
    public function getAddressLine3()
    {
        return $this->container['addressLine3'];
    }

    /**
     * Sets addressLine3
     *
     * @param string|null $addressLine3 Opponents Address Line 3
     *
     * @return self
     */
    public function setAddressLine3($addressLine3)
    {
        if (is_null($addressLine3)) {
            array_push($this->openAPINullablesSetToNull, 'addressLine3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addressLine3', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['addressLine3'] = $addressLine3;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city Opponents City
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            array_push($this->openAPINullablesSetToNull, 'city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets stateShort
     *
     * @return string|null
     */
    public function getStateShort()
    {
        return $this->container['stateShort'];
    }

    /**
     * Sets stateShort
     *
     * @param string|null $stateShort Opponents State
     *
     * @return self
     */
    public function setStateShort($stateShort)
    {
        if (is_null($stateShort)) {
            array_push($this->openAPINullablesSetToNull, 'stateShort');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stateShort', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stateShort'] = $stateShort;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Opponents Country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets province
     *
     * @return string|null
     */
    public function getProvince()
    {
        return $this->container['province'];
    }

    /**
     * Sets province
     *
     * @param string|null $province Opponents Province
     *
     * @return self
     */
    public function setProvince($province)
    {
        if (is_null($province)) {
            array_push($this->openAPINullablesSetToNull, 'province');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('province', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['province'] = $province;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip Opponents Zip
     *
     * @return self
     */
    public function setZip($zip)
    {
        if (is_null($zip)) {
            array_push($this->openAPINullablesSetToNull, 'zip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zip', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets conferenceId
     *
     * @return int|null
     */
    public function getConferenceId()
    {
        return $this->container['conferenceId'];
    }

    /**
     * Sets conferenceId
     *
     * @param int|null $conferenceId Opponents Conference Id
     *
     * @return self
     */
    public function setConferenceId($conferenceId)
    {
        if (is_null($conferenceId)) {
            array_push($this->openAPINullablesSetToNull, 'conferenceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('conferenceId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['conferenceId'] = $conferenceId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
