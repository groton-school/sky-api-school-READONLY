<?php
/**
 * ScheduleSetDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * ScheduleSetDetails Class Doc Comment
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ScheduleSetDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ScheduleSetDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'scheduleSetId' => 'int',
        'scheduleSetDescription' => 'string',
        'shortDescription' => 'string',
        'offeringType' => 'string',
        'schoolYearLabel' => 'string',
        'levelNum' => 'int',
        'effdate' => '\DateTime',
        'enddate' => '\DateTime',
        'startDay' => 'int',
        'startWeek' => 'int',
        'maxDay' => 'int',
        'maxWeek' => 'int',
        'meetingList' => '\SKY\School\Model\ScheduleSetMettingPattern[]',
        'accessList' => '\SKY\School\Model\ScheduleSetAccess[]',
        'rotationList' => '\SKY\School\Model\ScheduleSetRotation[]',
        'definedRotationPattern' => 'bool',
        'meetingTimeCreated' => 'bool',
        'blockRotationCreated' => 'bool',
        'sun' => 'bool',
        'mon' => 'bool',
        'tue' => 'bool',
        'wed' => 'bool',
        'thu' => 'bool',
        'fri' => 'bool',
        'sat' => 'bool',
        'sunInUse' => 'bool',
        'monInUse' => 'bool',
        'tueInUse' => 'bool',
        'wedInUse' => 'bool',
        'thuInUse' => 'bool',
        'friInUse' => 'bool',
        'satInUse' => 'bool',
        'blockGroupId' => 'int',
        'meetingTimeId' => 'int',
        'insertDate' => '\DateTime',
        'lastModifyDate' => '\DateTime',
        'lastModifyUserId' => 'int',
        'fieldsToNull' => 'string[]',
        'vendorExternalId' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'scheduleSetId' => 'int32',
        'scheduleSetDescription' => null,
        'shortDescription' => null,
        'offeringType' => null,
        'schoolYearLabel' => null,
        'levelNum' => 'int32',
        'effdate' => 'date-time',
        'enddate' => 'date-time',
        'startDay' => 'int32',
        'startWeek' => 'int32',
        'maxDay' => 'int32',
        'maxWeek' => 'int32',
        'meetingList' => null,
        'accessList' => null,
        'rotationList' => null,
        'definedRotationPattern' => null,
        'meetingTimeCreated' => null,
        'blockRotationCreated' => null,
        'sun' => null,
        'mon' => null,
        'tue' => null,
        'wed' => null,
        'thu' => null,
        'fri' => null,
        'sat' => null,
        'sunInUse' => null,
        'monInUse' => null,
        'tueInUse' => null,
        'wedInUse' => null,
        'thuInUse' => null,
        'friInUse' => null,
        'satInUse' => null,
        'blockGroupId' => 'int32',
        'meetingTimeId' => 'int32',
        'insertDate' => 'date-time',
        'lastModifyDate' => 'date-time',
        'lastModifyUserId' => 'int32',
        'fieldsToNull' => null,
        'vendorExternalId' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'scheduleSetId' => true,
        'scheduleSetDescription' => true,
        'shortDescription' => true,
        'offeringType' => true,
        'schoolYearLabel' => true,
        'levelNum' => true,
        'effdate' => true,
        'enddate' => true,
        'startDay' => true,
        'startWeek' => true,
        'maxDay' => true,
        'maxWeek' => true,
        'meetingList' => true,
        'accessList' => true,
        'rotationList' => true,
        'definedRotationPattern' => true,
        'meetingTimeCreated' => true,
        'blockRotationCreated' => true,
        'sun' => true,
        'mon' => true,
        'tue' => true,
        'wed' => true,
        'thu' => true,
        'fri' => true,
        'sat' => true,
        'sunInUse' => true,
        'monInUse' => true,
        'tueInUse' => true,
        'wedInUse' => true,
        'thuInUse' => true,
        'friInUse' => true,
        'satInUse' => true,
        'blockGroupId' => true,
        'meetingTimeId' => true,
        'insertDate' => true,
        'lastModifyDate' => true,
        'lastModifyUserId' => true,
        'fieldsToNull' => true,
        'vendorExternalId' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'scheduleSetId' => 'ScheduleSetId',
        'scheduleSetDescription' => 'ScheduleSetDescription',
        'shortDescription' => 'ShortDescription',
        'offeringType' => 'OfferingType',
        'schoolYearLabel' => 'SchoolYearLabel',
        'levelNum' => 'LevelNum',
        'effdate' => 'Effdate',
        'enddate' => 'Enddate',
        'startDay' => 'StartDay',
        'startWeek' => 'StartWeek',
        'maxDay' => 'MaxDay',
        'maxWeek' => 'MaxWeek',
        'meetingList' => 'MeetingList',
        'accessList' => 'AccessList',
        'rotationList' => 'RotationList',
        'definedRotationPattern' => 'DefinedRotationPattern',
        'meetingTimeCreated' => 'MeetingTimeCreated',
        'blockRotationCreated' => 'BlockRotationCreated',
        'sun' => 'Sun',
        'mon' => 'Mon',
        'tue' => 'Tue',
        'wed' => 'Wed',
        'thu' => 'Thu',
        'fri' => 'Fri',
        'sat' => 'Sat',
        'sunInUse' => 'SunInUse',
        'monInUse' => 'MonInUse',
        'tueInUse' => 'TueInUse',
        'wedInUse' => 'WedInUse',
        'thuInUse' => 'ThuInUse',
        'friInUse' => 'FriInUse',
        'satInUse' => 'SatInUse',
        'blockGroupId' => 'BlockGroupId',
        'meetingTimeId' => 'MeetingTimeId',
        'insertDate' => 'InsertDate',
        'lastModifyDate' => 'LastModifyDate',
        'lastModifyUserId' => 'LastModifyUserId',
        'fieldsToNull' => 'FieldsToNull',
        'vendorExternalId' => 'vendor_external_id',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'scheduleSetId' => 'setScheduleSetId',
        'scheduleSetDescription' => 'setScheduleSetDescription',
        'shortDescription' => 'setShortDescription',
        'offeringType' => 'setOfferingType',
        'schoolYearLabel' => 'setSchoolYearLabel',
        'levelNum' => 'setLevelNum',
        'effdate' => 'setEffdate',
        'enddate' => 'setEnddate',
        'startDay' => 'setStartDay',
        'startWeek' => 'setStartWeek',
        'maxDay' => 'setMaxDay',
        'maxWeek' => 'setMaxWeek',
        'meetingList' => 'setMeetingList',
        'accessList' => 'setAccessList',
        'rotationList' => 'setRotationList',
        'definedRotationPattern' => 'setDefinedRotationPattern',
        'meetingTimeCreated' => 'setMeetingTimeCreated',
        'blockRotationCreated' => 'setBlockRotationCreated',
        'sun' => 'setSun',
        'mon' => 'setMon',
        'tue' => 'setTue',
        'wed' => 'setWed',
        'thu' => 'setThu',
        'fri' => 'setFri',
        'sat' => 'setSat',
        'sunInUse' => 'setSunInUse',
        'monInUse' => 'setMonInUse',
        'tueInUse' => 'setTueInUse',
        'wedInUse' => 'setWedInUse',
        'thuInUse' => 'setThuInUse',
        'friInUse' => 'setFriInUse',
        'satInUse' => 'setSatInUse',
        'blockGroupId' => 'setBlockGroupId',
        'meetingTimeId' => 'setMeetingTimeId',
        'insertDate' => 'setInsertDate',
        'lastModifyDate' => 'setLastModifyDate',
        'lastModifyUserId' => 'setLastModifyUserId',
        'fieldsToNull' => 'setFieldsToNull',
        'vendorExternalId' => 'setVendorExternalId',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'scheduleSetId' => 'getScheduleSetId',
        'scheduleSetDescription' => 'getScheduleSetDescription',
        'shortDescription' => 'getShortDescription',
        'offeringType' => 'getOfferingType',
        'schoolYearLabel' => 'getSchoolYearLabel',
        'levelNum' => 'getLevelNum',
        'effdate' => 'getEffdate',
        'enddate' => 'getEnddate',
        'startDay' => 'getStartDay',
        'startWeek' => 'getStartWeek',
        'maxDay' => 'getMaxDay',
        'maxWeek' => 'getMaxWeek',
        'meetingList' => 'getMeetingList',
        'accessList' => 'getAccessList',
        'rotationList' => 'getRotationList',
        'definedRotationPattern' => 'getDefinedRotationPattern',
        'meetingTimeCreated' => 'getMeetingTimeCreated',
        'blockRotationCreated' => 'getBlockRotationCreated',
        'sun' => 'getSun',
        'mon' => 'getMon',
        'tue' => 'getTue',
        'wed' => 'getWed',
        'thu' => 'getThu',
        'fri' => 'getFri',
        'sat' => 'getSat',
        'sunInUse' => 'getSunInUse',
        'monInUse' => 'getMonInUse',
        'tueInUse' => 'getTueInUse',
        'wedInUse' => 'getWedInUse',
        'thuInUse' => 'getThuInUse',
        'friInUse' => 'getFriInUse',
        'satInUse' => 'getSatInUse',
        'blockGroupId' => 'getBlockGroupId',
        'meetingTimeId' => 'getMeetingTimeId',
        'insertDate' => 'getInsertDate',
        'lastModifyDate' => 'getLastModifyDate',
        'lastModifyUserId' => 'getLastModifyUserId',
        'fieldsToNull' => 'getFieldsToNull',
        'vendorExternalId' => 'getVendorExternalId',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const OFFERING_TYPE__0 = '_0';
    public const OFFERING_TYPE__1 = '_1';
    public const OFFERING_TYPE__2 = '_2';
    public const OFFERING_TYPE__3 = '_3';
    public const OFFERING_TYPE__4 = '_4';
    public const OFFERING_TYPE__5 = '_5';
    public const OFFERING_TYPE__6 = '_6';
    public const OFFERING_TYPE__8 = '_8';
    public const OFFERING_TYPE__9 = '_9';
    public const OFFERING_TYPE__10 = '_10';
    public const OFFERING_TYPE__11 = '_11';
    public const OFFERING_TYPE__12 = '_12';
    public const OFFERING_TYPE__13 = '_13';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOfferingTypeAllowableValues()
    {
        return [
            self::OFFERING_TYPE__0,
            self::OFFERING_TYPE__1,
            self::OFFERING_TYPE__2,
            self::OFFERING_TYPE__3,
            self::OFFERING_TYPE__4,
            self::OFFERING_TYPE__5,
            self::OFFERING_TYPE__6,
            self::OFFERING_TYPE__8,
            self::OFFERING_TYPE__9,
            self::OFFERING_TYPE__10,
            self::OFFERING_TYPE__11,
            self::OFFERING_TYPE__12,
            self::OFFERING_TYPE__13,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('scheduleSetId', $data ?? [], null);
        $this->setIfExists('scheduleSetDescription', $data ?? [], null);
        $this->setIfExists('shortDescription', $data ?? [], null);
        $this->setIfExists('offeringType', $data ?? [], null);
        $this->setIfExists('schoolYearLabel', $data ?? [], null);
        $this->setIfExists('levelNum', $data ?? [], null);
        $this->setIfExists('effdate', $data ?? [], null);
        $this->setIfExists('enddate', $data ?? [], null);
        $this->setIfExists('startDay', $data ?? [], null);
        $this->setIfExists('startWeek', $data ?? [], null);
        $this->setIfExists('maxDay', $data ?? [], null);
        $this->setIfExists('maxWeek', $data ?? [], null);
        $this->setIfExists('meetingList', $data ?? [], null);
        $this->setIfExists('accessList', $data ?? [], null);
        $this->setIfExists('rotationList', $data ?? [], null);
        $this->setIfExists('definedRotationPattern', $data ?? [], null);
        $this->setIfExists('meetingTimeCreated', $data ?? [], null);
        $this->setIfExists('blockRotationCreated', $data ?? [], null);
        $this->setIfExists('sun', $data ?? [], null);
        $this->setIfExists('mon', $data ?? [], null);
        $this->setIfExists('tue', $data ?? [], null);
        $this->setIfExists('wed', $data ?? [], null);
        $this->setIfExists('thu', $data ?? [], null);
        $this->setIfExists('fri', $data ?? [], null);
        $this->setIfExists('sat', $data ?? [], null);
        $this->setIfExists('sunInUse', $data ?? [], null);
        $this->setIfExists('monInUse', $data ?? [], null);
        $this->setIfExists('tueInUse', $data ?? [], null);
        $this->setIfExists('wedInUse', $data ?? [], null);
        $this->setIfExists('thuInUse', $data ?? [], null);
        $this->setIfExists('friInUse', $data ?? [], null);
        $this->setIfExists('satInUse', $data ?? [], null);
        $this->setIfExists('blockGroupId', $data ?? [], null);
        $this->setIfExists('meetingTimeId', $data ?? [], null);
        $this->setIfExists('insertDate', $data ?? [], null);
        $this->setIfExists('lastModifyDate', $data ?? [], null);
        $this->setIfExists('lastModifyUserId', $data ?? [], null);
        $this->setIfExists('fieldsToNull', $data ?? [], null);
        $this->setIfExists('vendorExternalId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOfferingTypeAllowableValues();
        if (!is_null($this->container['offeringType']) && !in_array($this->container['offeringType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'offeringType', must be one of '%s'",
                $this->container['offeringType'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets scheduleSetId
     *
     * @return int|null
     */
    public function getScheduleSetId()
    {
        return $this->container['scheduleSetId'];
    }

    /**
     * Sets scheduleSetId
     *
     * @param int|null $scheduleSetId scheduleSetId
     *
     * @return self
     */
    public function setScheduleSetId($scheduleSetId)
    {
        if (is_null($scheduleSetId)) {
            array_push($this->openAPINullablesSetToNull, 'scheduleSetId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scheduleSetId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scheduleSetId'] = $scheduleSetId;

        return $this;
    }

    /**
     * Gets scheduleSetDescription
     *
     * @return string|null
     */
    public function getScheduleSetDescription()
    {
        return $this->container['scheduleSetDescription'];
    }

    /**
     * Sets scheduleSetDescription
     *
     * @param string|null $scheduleSetDescription scheduleSetDescription
     *
     * @return self
     */
    public function setScheduleSetDescription($scheduleSetDescription)
    {
        if (is_null($scheduleSetDescription)) {
            array_push($this->openAPINullablesSetToNull, 'scheduleSetDescription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scheduleSetDescription', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scheduleSetDescription'] = $scheduleSetDescription;

        return $this;
    }

    /**
     * Gets shortDescription
     *
     * @return string|null
     */
    public function getShortDescription()
    {
        return $this->container['shortDescription'];
    }

    /**
     * Sets shortDescription
     *
     * @param string|null $shortDescription shortDescription
     *
     * @return self
     */
    public function setShortDescription($shortDescription)
    {
        if (is_null($shortDescription)) {
            array_push($this->openAPINullablesSetToNull, 'shortDescription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shortDescription', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shortDescription'] = $shortDescription;

        return $this;
    }

    /**
     * Gets offeringType
     *
     * @return string|null
     */
    public function getOfferingType()
    {
        return $this->container['offeringType'];
    }

    /**
     * Sets offeringType
     *
     * @param string|null $offeringType offeringType
     *
     * @return self
     */
    public function setOfferingType($offeringType)
    {
        if (is_null($offeringType)) {
            array_push($this->openAPINullablesSetToNull, 'offeringType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('offeringType', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getOfferingTypeAllowableValues();
        if (!is_null($offeringType) && !in_array($offeringType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'offeringType', must be one of '%s'",
                    $offeringType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['offeringType'] = $offeringType;

        return $this;
    }

    /**
     * Gets schoolYearLabel
     *
     * @return string|null
     */
    public function getSchoolYearLabel()
    {
        return $this->container['schoolYearLabel'];
    }

    /**
     * Sets schoolYearLabel
     *
     * @param string|null $schoolYearLabel schoolYearLabel
     *
     * @return self
     */
    public function setSchoolYearLabel($schoolYearLabel)
    {
        if (is_null($schoolYearLabel)) {
            array_push($this->openAPINullablesSetToNull, 'schoolYearLabel');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('schoolYearLabel', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['schoolYearLabel'] = $schoolYearLabel;

        return $this;
    }

    /**
     * Gets levelNum
     *
     * @return int|null
     */
    public function getLevelNum()
    {
        return $this->container['levelNum'];
    }

    /**
     * Sets levelNum
     *
     * @param int|null $levelNum levelNum
     *
     * @return self
     */
    public function setLevelNum($levelNum)
    {
        if (is_null($levelNum)) {
            array_push($this->openAPINullablesSetToNull, 'levelNum');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('levelNum', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['levelNum'] = $levelNum;

        return $this;
    }

    /**
     * Gets effdate
     *
     * @return \DateTime|null
     */
    public function getEffdate()
    {
        return $this->container['effdate'];
    }

    /**
     * Sets effdate
     *
     * @param \DateTime|null $effdate effdate
     *
     * @return self
     */
    public function setEffdate($effdate)
    {
        if (is_null($effdate)) {
            array_push($this->openAPINullablesSetToNull, 'effdate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effdate', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effdate'] = $effdate;

        return $this;
    }

    /**
     * Gets enddate
     *
     * @return \DateTime|null
     */
    public function getEnddate()
    {
        return $this->container['enddate'];
    }

    /**
     * Sets enddate
     *
     * @param \DateTime|null $enddate enddate
     *
     * @return self
     */
    public function setEnddate($enddate)
    {
        if (is_null($enddate)) {
            array_push($this->openAPINullablesSetToNull, 'enddate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enddate', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enddate'] = $enddate;

        return $this;
    }

    /**
     * Gets startDay
     *
     * @return int|null
     */
    public function getStartDay()
    {
        return $this->container['startDay'];
    }

    /**
     * Sets startDay
     *
     * @param int|null $startDay startDay
     *
     * @return self
     */
    public function setStartDay($startDay)
    {
        if (is_null($startDay)) {
            array_push($this->openAPINullablesSetToNull, 'startDay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('startDay', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['startDay'] = $startDay;

        return $this;
    }

    /**
     * Gets startWeek
     *
     * @return int|null
     */
    public function getStartWeek()
    {
        return $this->container['startWeek'];
    }

    /**
     * Sets startWeek
     *
     * @param int|null $startWeek startWeek
     *
     * @return self
     */
    public function setStartWeek($startWeek)
    {
        if (is_null($startWeek)) {
            array_push($this->openAPINullablesSetToNull, 'startWeek');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('startWeek', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['startWeek'] = $startWeek;

        return $this;
    }

    /**
     * Gets maxDay
     *
     * @return int|null
     */
    public function getMaxDay()
    {
        return $this->container['maxDay'];
    }

    /**
     * Sets maxDay
     *
     * @param int|null $maxDay maxDay
     *
     * @return self
     */
    public function setMaxDay($maxDay)
    {
        if (is_null($maxDay)) {
            array_push($this->openAPINullablesSetToNull, 'maxDay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maxDay', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maxDay'] = $maxDay;

        return $this;
    }

    /**
     * Gets maxWeek
     *
     * @return int|null
     */
    public function getMaxWeek()
    {
        return $this->container['maxWeek'];
    }

    /**
     * Sets maxWeek
     *
     * @param int|null $maxWeek maxWeek
     *
     * @return self
     */
    public function setMaxWeek($maxWeek)
    {
        if (is_null($maxWeek)) {
            array_push($this->openAPINullablesSetToNull, 'maxWeek');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maxWeek', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maxWeek'] = $maxWeek;

        return $this;
    }

    /**
     * Gets meetingList
     *
     * @return \SKY\School\Model\ScheduleSetMettingPattern[]|null
     */
    public function getMeetingList()
    {
        return $this->container['meetingList'];
    }

    /**
     * Sets meetingList
     *
     * @param \SKY\School\Model\ScheduleSetMettingPattern[]|null $meetingList meetingList
     *
     * @return self
     */
    public function setMeetingList($meetingList)
    {
        if (is_null($meetingList)) {
            array_push($this->openAPINullablesSetToNull, 'meetingList');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('meetingList', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['meetingList'] = $meetingList;

        return $this;
    }

    /**
     * Gets accessList
     *
     * @return \SKY\School\Model\ScheduleSetAccess[]|null
     */
    public function getAccessList()
    {
        return $this->container['accessList'];
    }

    /**
     * Sets accessList
     *
     * @param \SKY\School\Model\ScheduleSetAccess[]|null $accessList accessList
     *
     * @return self
     */
    public function setAccessList($accessList)
    {
        if (is_null($accessList)) {
            array_push($this->openAPINullablesSetToNull, 'accessList');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accessList', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['accessList'] = $accessList;

        return $this;
    }

    /**
     * Gets rotationList
     *
     * @return \SKY\School\Model\ScheduleSetRotation[]|null
     */
    public function getRotationList()
    {
        return $this->container['rotationList'];
    }

    /**
     * Sets rotationList
     *
     * @param \SKY\School\Model\ScheduleSetRotation[]|null $rotationList rotationList
     *
     * @return self
     */
    public function setRotationList($rotationList)
    {
        if (is_null($rotationList)) {
            array_push($this->openAPINullablesSetToNull, 'rotationList');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rotationList', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rotationList'] = $rotationList;

        return $this;
    }

    /**
     * Gets definedRotationPattern
     *
     * @return bool|null
     */
    public function getDefinedRotationPattern()
    {
        return $this->container['definedRotationPattern'];
    }

    /**
     * Sets definedRotationPattern
     *
     * @param bool|null $definedRotationPattern definedRotationPattern
     *
     * @return self
     */
    public function setDefinedRotationPattern($definedRotationPattern)
    {
        if (is_null($definedRotationPattern)) {
            array_push($this->openAPINullablesSetToNull, 'definedRotationPattern');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('definedRotationPattern', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['definedRotationPattern'] = $definedRotationPattern;

        return $this;
    }

    /**
     * Gets meetingTimeCreated
     *
     * @return bool|null
     */
    public function getMeetingTimeCreated()
    {
        return $this->container['meetingTimeCreated'];
    }

    /**
     * Sets meetingTimeCreated
     *
     * @param bool|null $meetingTimeCreated meetingTimeCreated
     *
     * @return self
     */
    public function setMeetingTimeCreated($meetingTimeCreated)
    {
        if (is_null($meetingTimeCreated)) {
            array_push($this->openAPINullablesSetToNull, 'meetingTimeCreated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('meetingTimeCreated', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['meetingTimeCreated'] = $meetingTimeCreated;

        return $this;
    }

    /**
     * Gets blockRotationCreated
     *
     * @return bool|null
     */
    public function getBlockRotationCreated()
    {
        return $this->container['blockRotationCreated'];
    }

    /**
     * Sets blockRotationCreated
     *
     * @param bool|null $blockRotationCreated blockRotationCreated
     *
     * @return self
     */
    public function setBlockRotationCreated($blockRotationCreated)
    {
        if (is_null($blockRotationCreated)) {
            array_push($this->openAPINullablesSetToNull, 'blockRotationCreated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('blockRotationCreated', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['blockRotationCreated'] = $blockRotationCreated;

        return $this;
    }

    /**
     * Gets sun
     *
     * @return bool|null
     */
    public function getSun()
    {
        return $this->container['sun'];
    }

    /**
     * Sets sun
     *
     * @param bool|null $sun sun
     *
     * @return self
     */
    public function setSun($sun)
    {
        if (is_null($sun)) {
            array_push($this->openAPINullablesSetToNull, 'sun');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sun', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sun'] = $sun;

        return $this;
    }

    /**
     * Gets mon
     *
     * @return bool|null
     */
    public function getMon()
    {
        return $this->container['mon'];
    }

    /**
     * Sets mon
     *
     * @param bool|null $mon mon
     *
     * @return self
     */
    public function setMon($mon)
    {
        if (is_null($mon)) {
            array_push($this->openAPINullablesSetToNull, 'mon');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mon', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mon'] = $mon;

        return $this;
    }

    /**
     * Gets tue
     *
     * @return bool|null
     */
    public function getTue()
    {
        return $this->container['tue'];
    }

    /**
     * Sets tue
     *
     * @param bool|null $tue tue
     *
     * @return self
     */
    public function setTue($tue)
    {
        if (is_null($tue)) {
            array_push($this->openAPINullablesSetToNull, 'tue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tue', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tue'] = $tue;

        return $this;
    }

    /**
     * Gets wed
     *
     * @return bool|null
     */
    public function getWed()
    {
        return $this->container['wed'];
    }

    /**
     * Sets wed
     *
     * @param bool|null $wed wed
     *
     * @return self
     */
    public function setWed($wed)
    {
        if (is_null($wed)) {
            array_push($this->openAPINullablesSetToNull, 'wed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('wed', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['wed'] = $wed;

        return $this;
    }

    /**
     * Gets thu
     *
     * @return bool|null
     */
    public function getThu()
    {
        return $this->container['thu'];
    }

    /**
     * Sets thu
     *
     * @param bool|null $thu thu
     *
     * @return self
     */
    public function setThu($thu)
    {
        if (is_null($thu)) {
            array_push($this->openAPINullablesSetToNull, 'thu');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('thu', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['thu'] = $thu;

        return $this;
    }

    /**
     * Gets fri
     *
     * @return bool|null
     */
    public function getFri()
    {
        return $this->container['fri'];
    }

    /**
     * Sets fri
     *
     * @param bool|null $fri fri
     *
     * @return self
     */
    public function setFri($fri)
    {
        if (is_null($fri)) {
            array_push($this->openAPINullablesSetToNull, 'fri');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fri', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fri'] = $fri;

        return $this;
    }

    /**
     * Gets sat
     *
     * @return bool|null
     */
    public function getSat()
    {
        return $this->container['sat'];
    }

    /**
     * Sets sat
     *
     * @param bool|null $sat sat
     *
     * @return self
     */
    public function setSat($sat)
    {
        if (is_null($sat)) {
            array_push($this->openAPINullablesSetToNull, 'sat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sat', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sat'] = $sat;

        return $this;
    }

    /**
     * Gets sunInUse
     *
     * @return bool|null
     */
    public function getSunInUse()
    {
        return $this->container['sunInUse'];
    }

    /**
     * Sets sunInUse
     *
     * @param bool|null $sunInUse sunInUse
     *
     * @return self
     */
    public function setSunInUse($sunInUse)
    {
        if (is_null($sunInUse)) {
            array_push($this->openAPINullablesSetToNull, 'sunInUse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sunInUse', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sunInUse'] = $sunInUse;

        return $this;
    }

    /**
     * Gets monInUse
     *
     * @return bool|null
     */
    public function getMonInUse()
    {
        return $this->container['monInUse'];
    }

    /**
     * Sets monInUse
     *
     * @param bool|null $monInUse monInUse
     *
     * @return self
     */
    public function setMonInUse($monInUse)
    {
        if (is_null($monInUse)) {
            array_push($this->openAPINullablesSetToNull, 'monInUse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('monInUse', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['monInUse'] = $monInUse;

        return $this;
    }

    /**
     * Gets tueInUse
     *
     * @return bool|null
     */
    public function getTueInUse()
    {
        return $this->container['tueInUse'];
    }

    /**
     * Sets tueInUse
     *
     * @param bool|null $tueInUse tueInUse
     *
     * @return self
     */
    public function setTueInUse($tueInUse)
    {
        if (is_null($tueInUse)) {
            array_push($this->openAPINullablesSetToNull, 'tueInUse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tueInUse', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tueInUse'] = $tueInUse;

        return $this;
    }

    /**
     * Gets wedInUse
     *
     * @return bool|null
     */
    public function getWedInUse()
    {
        return $this->container['wedInUse'];
    }

    /**
     * Sets wedInUse
     *
     * @param bool|null $wedInUse wedInUse
     *
     * @return self
     */
    public function setWedInUse($wedInUse)
    {
        if (is_null($wedInUse)) {
            array_push($this->openAPINullablesSetToNull, 'wedInUse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('wedInUse', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['wedInUse'] = $wedInUse;

        return $this;
    }

    /**
     * Gets thuInUse
     *
     * @return bool|null
     */
    public function getThuInUse()
    {
        return $this->container['thuInUse'];
    }

    /**
     * Sets thuInUse
     *
     * @param bool|null $thuInUse thuInUse
     *
     * @return self
     */
    public function setThuInUse($thuInUse)
    {
        if (is_null($thuInUse)) {
            array_push($this->openAPINullablesSetToNull, 'thuInUse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('thuInUse', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['thuInUse'] = $thuInUse;

        return $this;
    }

    /**
     * Gets friInUse
     *
     * @return bool|null
     */
    public function getFriInUse()
    {
        return $this->container['friInUse'];
    }

    /**
     * Sets friInUse
     *
     * @param bool|null $friInUse friInUse
     *
     * @return self
     */
    public function setFriInUse($friInUse)
    {
        if (is_null($friInUse)) {
            array_push($this->openAPINullablesSetToNull, 'friInUse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('friInUse', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['friInUse'] = $friInUse;

        return $this;
    }

    /**
     * Gets satInUse
     *
     * @return bool|null
     */
    public function getSatInUse()
    {
        return $this->container['satInUse'];
    }

    /**
     * Sets satInUse
     *
     * @param bool|null $satInUse satInUse
     *
     * @return self
     */
    public function setSatInUse($satInUse)
    {
        if (is_null($satInUse)) {
            array_push($this->openAPINullablesSetToNull, 'satInUse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('satInUse', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['satInUse'] = $satInUse;

        return $this;
    }

    /**
     * Gets blockGroupId
     *
     * @return int|null
     */
    public function getBlockGroupId()
    {
        return $this->container['blockGroupId'];
    }

    /**
     * Sets blockGroupId
     *
     * @param int|null $blockGroupId blockGroupId
     *
     * @return self
     */
    public function setBlockGroupId($blockGroupId)
    {
        if (is_null($blockGroupId)) {
            array_push($this->openAPINullablesSetToNull, 'blockGroupId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('blockGroupId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['blockGroupId'] = $blockGroupId;

        return $this;
    }

    /**
     * Gets meetingTimeId
     *
     * @return int|null
     */
    public function getMeetingTimeId()
    {
        return $this->container['meetingTimeId'];
    }

    /**
     * Sets meetingTimeId
     *
     * @param int|null $meetingTimeId meetingTimeId
     *
     * @return self
     */
    public function setMeetingTimeId($meetingTimeId)
    {
        if (is_null($meetingTimeId)) {
            array_push($this->openAPINullablesSetToNull, 'meetingTimeId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('meetingTimeId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['meetingTimeId'] = $meetingTimeId;

        return $this;
    }

    /**
     * Gets insertDate
     *
     * @return \DateTime|null
     */
    public function getInsertDate()
    {
        return $this->container['insertDate'];
    }

    /**
     * Sets insertDate
     *
     * @param \DateTime|null $insertDate insertDate
     *
     * @return self
     */
    public function setInsertDate($insertDate)
    {
        if (is_null($insertDate)) {
            array_push($this->openAPINullablesSetToNull, 'insertDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('insertDate', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['insertDate'] = $insertDate;

        return $this;
    }

    /**
     * Gets lastModifyDate
     *
     * @return \DateTime|null
     */
    public function getLastModifyDate()
    {
        return $this->container['lastModifyDate'];
    }

    /**
     * Sets lastModifyDate
     *
     * @param \DateTime|null $lastModifyDate lastModifyDate
     *
     * @return self
     */
    public function setLastModifyDate($lastModifyDate)
    {
        if (is_null($lastModifyDate)) {
            array_push($this->openAPINullablesSetToNull, 'lastModifyDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastModifyDate', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastModifyDate'] = $lastModifyDate;

        return $this;
    }

    /**
     * Gets lastModifyUserId
     *
     * @return int|null
     */
    public function getLastModifyUserId()
    {
        return $this->container['lastModifyUserId'];
    }

    /**
     * Sets lastModifyUserId
     *
     * @param int|null $lastModifyUserId lastModifyUserId
     *
     * @return self
     */
    public function setLastModifyUserId($lastModifyUserId)
    {
        if (is_null($lastModifyUserId)) {
            array_push($this->openAPINullablesSetToNull, 'lastModifyUserId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastModifyUserId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastModifyUserId'] = $lastModifyUserId;

        return $this;
    }

    /**
     * Gets fieldsToNull
     *
     * @return string[]|null
     */
    public function getFieldsToNull()
    {
        return $this->container['fieldsToNull'];
    }

    /**
     * Sets fieldsToNull
     *
     * @param string[]|null $fieldsToNull fieldsToNull
     *
     * @return self
     */
    public function setFieldsToNull($fieldsToNull)
    {
        if (is_null($fieldsToNull)) {
            array_push($this->openAPINullablesSetToNull, 'fieldsToNull');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fieldsToNull', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fieldsToNull'] = $fieldsToNull;

        return $this;
    }

    /**
     * Gets vendorExternalId
     *
     * @return string|null
     */
    public function getVendorExternalId()
    {
        return $this->container['vendorExternalId'];
    }

    /**
     * Sets vendorExternalId
     *
     * @param string|null $vendorExternalId vendorExternalId
     *
     * @return self
     */
    public function setVendorExternalId($vendorExternalId)
    {
        if (is_null($vendorExternalId)) {
            array_push($this->openAPINullablesSetToNull, 'vendorExternalId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vendorExternalId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vendorExternalId'] = $vendorExternalId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
