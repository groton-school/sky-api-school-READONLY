<?php
/**
 * ScheduleSetDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * ScheduleSetDetails Class Doc Comment
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ScheduleSetDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ScheduleSetDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'schedule_set_id' => 'int',
        'schedule_set_description' => 'string',
        'short_description' => 'string',
        'offering_type' => 'string',
        'school_year_label' => 'string',
        'level_num' => 'int',
        'effdate' => '\DateTime',
        'enddate' => '\DateTime',
        'start_day' => 'int',
        'start_week' => 'int',
        'max_day' => 'int',
        'max_week' => 'int',
        'meeting_list' => '\SKY\School\Model\ScheduleSetMettingPattern[]',
        'access_list' => '\SKY\School\Model\ScheduleSetAccess[]',
        'rotation_list' => '\SKY\School\Model\ScheduleSetRotation[]',
        'defined_rotation_pattern' => 'bool',
        'meeting_time_created' => 'bool',
        'block_rotation_created' => 'bool',
        'sun' => 'bool',
        'mon' => 'bool',
        'tue' => 'bool',
        'wed' => 'bool',
        'thu' => 'bool',
        'fri' => 'bool',
        'sat' => 'bool',
        'sun_in_use' => 'bool',
        'mon_in_use' => 'bool',
        'tue_in_use' => 'bool',
        'wed_in_use' => 'bool',
        'thu_in_use' => 'bool',
        'fri_in_use' => 'bool',
        'sat_in_use' => 'bool',
        'block_group_id' => 'int',
        'meeting_time_id' => 'int',
        'insert_date' => '\DateTime',
        'last_modify_date' => '\DateTime',
        'last_modify_user_id' => 'int',
        'fields_to_null' => 'string[]',
        'vendor_external_id' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'schedule_set_id' => 'int32',
        'schedule_set_description' => null,
        'short_description' => null,
        'offering_type' => null,
        'school_year_label' => null,
        'level_num' => 'int32',
        'effdate' => 'date-time',
        'enddate' => 'date-time',
        'start_day' => 'int32',
        'start_week' => 'int32',
        'max_day' => 'int32',
        'max_week' => 'int32',
        'meeting_list' => null,
        'access_list' => null,
        'rotation_list' => null,
        'defined_rotation_pattern' => null,
        'meeting_time_created' => null,
        'block_rotation_created' => null,
        'sun' => null,
        'mon' => null,
        'tue' => null,
        'wed' => null,
        'thu' => null,
        'fri' => null,
        'sat' => null,
        'sun_in_use' => null,
        'mon_in_use' => null,
        'tue_in_use' => null,
        'wed_in_use' => null,
        'thu_in_use' => null,
        'fri_in_use' => null,
        'sat_in_use' => null,
        'block_group_id' => 'int32',
        'meeting_time_id' => 'int32',
        'insert_date' => 'date-time',
        'last_modify_date' => 'date-time',
        'last_modify_user_id' => 'int32',
        'fields_to_null' => null,
        'vendor_external_id' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'schedule_set_id' => true,
        'schedule_set_description' => true,
        'short_description' => true,
        'offering_type' => true,
        'school_year_label' => true,
        'level_num' => true,
        'effdate' => true,
        'enddate' => true,
        'start_day' => true,
        'start_week' => true,
        'max_day' => true,
        'max_week' => true,
        'meeting_list' => true,
        'access_list' => true,
        'rotation_list' => true,
        'defined_rotation_pattern' => true,
        'meeting_time_created' => true,
        'block_rotation_created' => true,
        'sun' => true,
        'mon' => true,
        'tue' => true,
        'wed' => true,
        'thu' => true,
        'fri' => true,
        'sat' => true,
        'sun_in_use' => true,
        'mon_in_use' => true,
        'tue_in_use' => true,
        'wed_in_use' => true,
        'thu_in_use' => true,
        'fri_in_use' => true,
        'sat_in_use' => true,
        'block_group_id' => true,
        'meeting_time_id' => true,
        'insert_date' => true,
        'last_modify_date' => true,
        'last_modify_user_id' => true,
        'fields_to_null' => true,
        'vendor_external_id' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'schedule_set_id' => 'ScheduleSetId',
        'schedule_set_description' => 'ScheduleSetDescription',
        'short_description' => 'ShortDescription',
        'offering_type' => 'OfferingType',
        'school_year_label' => 'SchoolYearLabel',
        'level_num' => 'LevelNum',
        'effdate' => 'Effdate',
        'enddate' => 'Enddate',
        'start_day' => 'StartDay',
        'start_week' => 'StartWeek',
        'max_day' => 'MaxDay',
        'max_week' => 'MaxWeek',
        'meeting_list' => 'MeetingList',
        'access_list' => 'AccessList',
        'rotation_list' => 'RotationList',
        'defined_rotation_pattern' => 'DefinedRotationPattern',
        'meeting_time_created' => 'MeetingTimeCreated',
        'block_rotation_created' => 'BlockRotationCreated',
        'sun' => 'Sun',
        'mon' => 'Mon',
        'tue' => 'Tue',
        'wed' => 'Wed',
        'thu' => 'Thu',
        'fri' => 'Fri',
        'sat' => 'Sat',
        'sun_in_use' => 'SunInUse',
        'mon_in_use' => 'MonInUse',
        'tue_in_use' => 'TueInUse',
        'wed_in_use' => 'WedInUse',
        'thu_in_use' => 'ThuInUse',
        'fri_in_use' => 'FriInUse',
        'sat_in_use' => 'SatInUse',
        'block_group_id' => 'BlockGroupId',
        'meeting_time_id' => 'MeetingTimeId',
        'insert_date' => 'InsertDate',
        'last_modify_date' => 'LastModifyDate',
        'last_modify_user_id' => 'LastModifyUserId',
        'fields_to_null' => 'FieldsToNull',
        'vendor_external_id' => 'vendor_external_id',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'schedule_set_id' => 'setScheduleSetId',
        'schedule_set_description' => 'setScheduleSetDescription',
        'short_description' => 'setShortDescription',
        'offering_type' => 'setOfferingType',
        'school_year_label' => 'setSchoolYearLabel',
        'level_num' => 'setLevelNum',
        'effdate' => 'setEffdate',
        'enddate' => 'setEnddate',
        'start_day' => 'setStartDay',
        'start_week' => 'setStartWeek',
        'max_day' => 'setMaxDay',
        'max_week' => 'setMaxWeek',
        'meeting_list' => 'setMeetingList',
        'access_list' => 'setAccessList',
        'rotation_list' => 'setRotationList',
        'defined_rotation_pattern' => 'setDefinedRotationPattern',
        'meeting_time_created' => 'setMeetingTimeCreated',
        'block_rotation_created' => 'setBlockRotationCreated',
        'sun' => 'setSun',
        'mon' => 'setMon',
        'tue' => 'setTue',
        'wed' => 'setWed',
        'thu' => 'setThu',
        'fri' => 'setFri',
        'sat' => 'setSat',
        'sun_in_use' => 'setSunInUse',
        'mon_in_use' => 'setMonInUse',
        'tue_in_use' => 'setTueInUse',
        'wed_in_use' => 'setWedInUse',
        'thu_in_use' => 'setThuInUse',
        'fri_in_use' => 'setFriInUse',
        'sat_in_use' => 'setSatInUse',
        'block_group_id' => 'setBlockGroupId',
        'meeting_time_id' => 'setMeetingTimeId',
        'insert_date' => 'setInsertDate',
        'last_modify_date' => 'setLastModifyDate',
        'last_modify_user_id' => 'setLastModifyUserId',
        'fields_to_null' => 'setFieldsToNull',
        'vendor_external_id' => 'setVendorExternalId',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'schedule_set_id' => 'getScheduleSetId',
        'schedule_set_description' => 'getScheduleSetDescription',
        'short_description' => 'getShortDescription',
        'offering_type' => 'getOfferingType',
        'school_year_label' => 'getSchoolYearLabel',
        'level_num' => 'getLevelNum',
        'effdate' => 'getEffdate',
        'enddate' => 'getEnddate',
        'start_day' => 'getStartDay',
        'start_week' => 'getStartWeek',
        'max_day' => 'getMaxDay',
        'max_week' => 'getMaxWeek',
        'meeting_list' => 'getMeetingList',
        'access_list' => 'getAccessList',
        'rotation_list' => 'getRotationList',
        'defined_rotation_pattern' => 'getDefinedRotationPattern',
        'meeting_time_created' => 'getMeetingTimeCreated',
        'block_rotation_created' => 'getBlockRotationCreated',
        'sun' => 'getSun',
        'mon' => 'getMon',
        'tue' => 'getTue',
        'wed' => 'getWed',
        'thu' => 'getThu',
        'fri' => 'getFri',
        'sat' => 'getSat',
        'sun_in_use' => 'getSunInUse',
        'mon_in_use' => 'getMonInUse',
        'tue_in_use' => 'getTueInUse',
        'wed_in_use' => 'getWedInUse',
        'thu_in_use' => 'getThuInUse',
        'fri_in_use' => 'getFriInUse',
        'sat_in_use' => 'getSatInUse',
        'block_group_id' => 'getBlockGroupId',
        'meeting_time_id' => 'getMeetingTimeId',
        'insert_date' => 'getInsertDate',
        'last_modify_date' => 'getLastModifyDate',
        'last_modify_user_id' => 'getLastModifyUserId',
        'fields_to_null' => 'getFieldsToNull',
        'vendor_external_id' => 'getVendorExternalId',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const OFFERING_TYPE__0 = '_0';
    public const OFFERING_TYPE__1 = '_1';
    public const OFFERING_TYPE__2 = '_2';
    public const OFFERING_TYPE__3 = '_3';
    public const OFFERING_TYPE__4 = '_4';
    public const OFFERING_TYPE__5 = '_5';
    public const OFFERING_TYPE__6 = '_6';
    public const OFFERING_TYPE__8 = '_8';
    public const OFFERING_TYPE__9 = '_9';
    public const OFFERING_TYPE__10 = '_10';
    public const OFFERING_TYPE__11 = '_11';
    public const OFFERING_TYPE__12 = '_12';
    public const OFFERING_TYPE__13 = '_13';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOfferingTypeAllowableValues()
    {
        return [
            self::OFFERING_TYPE__0,
            self::OFFERING_TYPE__1,
            self::OFFERING_TYPE__2,
            self::OFFERING_TYPE__3,
            self::OFFERING_TYPE__4,
            self::OFFERING_TYPE__5,
            self::OFFERING_TYPE__6,
            self::OFFERING_TYPE__8,
            self::OFFERING_TYPE__9,
            self::OFFERING_TYPE__10,
            self::OFFERING_TYPE__11,
            self::OFFERING_TYPE__12,
            self::OFFERING_TYPE__13,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('schedule_set_id', $data ?? [], null);
        $this->setIfExists('schedule_set_description', $data ?? [], null);
        $this->setIfExists('short_description', $data ?? [], null);
        $this->setIfExists('offering_type', $data ?? [], null);
        $this->setIfExists('school_year_label', $data ?? [], null);
        $this->setIfExists('level_num', $data ?? [], null);
        $this->setIfExists('effdate', $data ?? [], null);
        $this->setIfExists('enddate', $data ?? [], null);
        $this->setIfExists('start_day', $data ?? [], null);
        $this->setIfExists('start_week', $data ?? [], null);
        $this->setIfExists('max_day', $data ?? [], null);
        $this->setIfExists('max_week', $data ?? [], null);
        $this->setIfExists('meeting_list', $data ?? [], null);
        $this->setIfExists('access_list', $data ?? [], null);
        $this->setIfExists('rotation_list', $data ?? [], null);
        $this->setIfExists('defined_rotation_pattern', $data ?? [], null);
        $this->setIfExists('meeting_time_created', $data ?? [], null);
        $this->setIfExists('block_rotation_created', $data ?? [], null);
        $this->setIfExists('sun', $data ?? [], null);
        $this->setIfExists('mon', $data ?? [], null);
        $this->setIfExists('tue', $data ?? [], null);
        $this->setIfExists('wed', $data ?? [], null);
        $this->setIfExists('thu', $data ?? [], null);
        $this->setIfExists('fri', $data ?? [], null);
        $this->setIfExists('sat', $data ?? [], null);
        $this->setIfExists('sun_in_use', $data ?? [], null);
        $this->setIfExists('mon_in_use', $data ?? [], null);
        $this->setIfExists('tue_in_use', $data ?? [], null);
        $this->setIfExists('wed_in_use', $data ?? [], null);
        $this->setIfExists('thu_in_use', $data ?? [], null);
        $this->setIfExists('fri_in_use', $data ?? [], null);
        $this->setIfExists('sat_in_use', $data ?? [], null);
        $this->setIfExists('block_group_id', $data ?? [], null);
        $this->setIfExists('meeting_time_id', $data ?? [], null);
        $this->setIfExists('insert_date', $data ?? [], null);
        $this->setIfExists('last_modify_date', $data ?? [], null);
        $this->setIfExists('last_modify_user_id', $data ?? [], null);
        $this->setIfExists('fields_to_null', $data ?? [], null);
        $this->setIfExists('vendor_external_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOfferingTypeAllowableValues();
        if (!is_null($this->container['offering_type']) && !in_array($this->container['offering_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'offering_type', must be one of '%s'",
                $this->container['offering_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets schedule_set_id
     *
     * @return int|null
     */
    public function getScheduleSetId()
    {
        return $this->container['schedule_set_id'];
    }

    /**
     * Sets schedule_set_id
     *
     * @param int|null $schedule_set_id schedule_set_id
     *
     * @return self
     */
    public function setScheduleSetId($schedule_set_id)
    {
        if (is_null($schedule_set_id)) {
            array_push($this->openAPINullablesSetToNull, 'schedule_set_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('schedule_set_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['schedule_set_id'] = $schedule_set_id;

        return $this;
    }

    /**
     * Gets schedule_set_description
     *
     * @return string|null
     */
    public function getScheduleSetDescription()
    {
        return $this->container['schedule_set_description'];
    }

    /**
     * Sets schedule_set_description
     *
     * @param string|null $schedule_set_description schedule_set_description
     *
     * @return self
     */
    public function setScheduleSetDescription($schedule_set_description)
    {
        if (is_null($schedule_set_description)) {
            array_push($this->openAPINullablesSetToNull, 'schedule_set_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('schedule_set_description', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['schedule_set_description'] = $schedule_set_description;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string|null
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string|null $short_description short_description
     *
     * @return self
     */
    public function setShortDescription($short_description)
    {
        if (is_null($short_description)) {
            array_push($this->openAPINullablesSetToNull, 'short_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_description', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets offering_type
     *
     * @return string|null
     */
    public function getOfferingType()
    {
        return $this->container['offering_type'];
    }

    /**
     * Sets offering_type
     *
     * @param string|null $offering_type offering_type
     *
     * @return self
     */
    public function setOfferingType($offering_type)
    {
        if (is_null($offering_type)) {
            array_push($this->openAPINullablesSetToNull, 'offering_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('offering_type', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getOfferingTypeAllowableValues();
        if (!is_null($offering_type) && !in_array($offering_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'offering_type', must be one of '%s'",
                    $offering_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['offering_type'] = $offering_type;

        return $this;
    }

    /**
     * Gets school_year_label
     *
     * @return string|null
     */
    public function getSchoolYearLabel()
    {
        return $this->container['school_year_label'];
    }

    /**
     * Sets school_year_label
     *
     * @param string|null $school_year_label school_year_label
     *
     * @return self
     */
    public function setSchoolYearLabel($school_year_label)
    {
        if (is_null($school_year_label)) {
            array_push($this->openAPINullablesSetToNull, 'school_year_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('school_year_label', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['school_year_label'] = $school_year_label;

        return $this;
    }

    /**
     * Gets level_num
     *
     * @return int|null
     */
    public function getLevelNum()
    {
        return $this->container['level_num'];
    }

    /**
     * Sets level_num
     *
     * @param int|null $level_num level_num
     *
     * @return self
     */
    public function setLevelNum($level_num)
    {
        if (is_null($level_num)) {
            array_push($this->openAPINullablesSetToNull, 'level_num');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('level_num', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['level_num'] = $level_num;

        return $this;
    }

    /**
     * Gets effdate
     *
     * @return \DateTime|null
     */
    public function getEffdate()
    {
        return $this->container['effdate'];
    }

    /**
     * Sets effdate
     *
     * @param \DateTime|null $effdate effdate
     *
     * @return self
     */
    public function setEffdate($effdate)
    {
        if (is_null($effdate)) {
            array_push($this->openAPINullablesSetToNull, 'effdate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effdate', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effdate'] = $effdate;

        return $this;
    }

    /**
     * Gets enddate
     *
     * @return \DateTime|null
     */
    public function getEnddate()
    {
        return $this->container['enddate'];
    }

    /**
     * Sets enddate
     *
     * @param \DateTime|null $enddate enddate
     *
     * @return self
     */
    public function setEnddate($enddate)
    {
        if (is_null($enddate)) {
            array_push($this->openAPINullablesSetToNull, 'enddate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enddate', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enddate'] = $enddate;

        return $this;
    }

    /**
     * Gets start_day
     *
     * @return int|null
     */
    public function getStartDay()
    {
        return $this->container['start_day'];
    }

    /**
     * Sets start_day
     *
     * @param int|null $start_day start_day
     *
     * @return self
     */
    public function setStartDay($start_day)
    {
        if (is_null($start_day)) {
            array_push($this->openAPINullablesSetToNull, 'start_day');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_day', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['start_day'] = $start_day;

        return $this;
    }

    /**
     * Gets start_week
     *
     * @return int|null
     */
    public function getStartWeek()
    {
        return $this->container['start_week'];
    }

    /**
     * Sets start_week
     *
     * @param int|null $start_week start_week
     *
     * @return self
     */
    public function setStartWeek($start_week)
    {
        if (is_null($start_week)) {
            array_push($this->openAPINullablesSetToNull, 'start_week');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_week', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['start_week'] = $start_week;

        return $this;
    }

    /**
     * Gets max_day
     *
     * @return int|null
     */
    public function getMaxDay()
    {
        return $this->container['max_day'];
    }

    /**
     * Sets max_day
     *
     * @param int|null $max_day max_day
     *
     * @return self
     */
    public function setMaxDay($max_day)
    {
        if (is_null($max_day)) {
            array_push($this->openAPINullablesSetToNull, 'max_day');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_day', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_day'] = $max_day;

        return $this;
    }

    /**
     * Gets max_week
     *
     * @return int|null
     */
    public function getMaxWeek()
    {
        return $this->container['max_week'];
    }

    /**
     * Sets max_week
     *
     * @param int|null $max_week max_week
     *
     * @return self
     */
    public function setMaxWeek($max_week)
    {
        if (is_null($max_week)) {
            array_push($this->openAPINullablesSetToNull, 'max_week');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_week', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_week'] = $max_week;

        return $this;
    }

    /**
     * Gets meeting_list
     *
     * @return \SKY\School\Model\ScheduleSetMettingPattern[]|null
     */
    public function getMeetingList()
    {
        return $this->container['meeting_list'];
    }

    /**
     * Sets meeting_list
     *
     * @param \SKY\School\Model\ScheduleSetMettingPattern[]|null $meeting_list meeting_list
     *
     * @return self
     */
    public function setMeetingList($meeting_list)
    {
        if (is_null($meeting_list)) {
            array_push($this->openAPINullablesSetToNull, 'meeting_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('meeting_list', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['meeting_list'] = $meeting_list;

        return $this;
    }

    /**
     * Gets access_list
     *
     * @return \SKY\School\Model\ScheduleSetAccess[]|null
     */
    public function getAccessList()
    {
        return $this->container['access_list'];
    }

    /**
     * Sets access_list
     *
     * @param \SKY\School\Model\ScheduleSetAccess[]|null $access_list access_list
     *
     * @return self
     */
    public function setAccessList($access_list)
    {
        if (is_null($access_list)) {
            array_push($this->openAPINullablesSetToNull, 'access_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('access_list', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['access_list'] = $access_list;

        return $this;
    }

    /**
     * Gets rotation_list
     *
     * @return \SKY\School\Model\ScheduleSetRotation[]|null
     */
    public function getRotationList()
    {
        return $this->container['rotation_list'];
    }

    /**
     * Sets rotation_list
     *
     * @param \SKY\School\Model\ScheduleSetRotation[]|null $rotation_list rotation_list
     *
     * @return self
     */
    public function setRotationList($rotation_list)
    {
        if (is_null($rotation_list)) {
            array_push($this->openAPINullablesSetToNull, 'rotation_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rotation_list', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rotation_list'] = $rotation_list;

        return $this;
    }

    /**
     * Gets defined_rotation_pattern
     *
     * @return bool|null
     */
    public function getDefinedRotationPattern()
    {
        return $this->container['defined_rotation_pattern'];
    }

    /**
     * Sets defined_rotation_pattern
     *
     * @param bool|null $defined_rotation_pattern defined_rotation_pattern
     *
     * @return self
     */
    public function setDefinedRotationPattern($defined_rotation_pattern)
    {
        if (is_null($defined_rotation_pattern)) {
            array_push($this->openAPINullablesSetToNull, 'defined_rotation_pattern');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('defined_rotation_pattern', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['defined_rotation_pattern'] = $defined_rotation_pattern;

        return $this;
    }

    /**
     * Gets meeting_time_created
     *
     * @return bool|null
     */
    public function getMeetingTimeCreated()
    {
        return $this->container['meeting_time_created'];
    }

    /**
     * Sets meeting_time_created
     *
     * @param bool|null $meeting_time_created meeting_time_created
     *
     * @return self
     */
    public function setMeetingTimeCreated($meeting_time_created)
    {
        if (is_null($meeting_time_created)) {
            array_push($this->openAPINullablesSetToNull, 'meeting_time_created');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('meeting_time_created', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['meeting_time_created'] = $meeting_time_created;

        return $this;
    }

    /**
     * Gets block_rotation_created
     *
     * @return bool|null
     */
    public function getBlockRotationCreated()
    {
        return $this->container['block_rotation_created'];
    }

    /**
     * Sets block_rotation_created
     *
     * @param bool|null $block_rotation_created block_rotation_created
     *
     * @return self
     */
    public function setBlockRotationCreated($block_rotation_created)
    {
        if (is_null($block_rotation_created)) {
            array_push($this->openAPINullablesSetToNull, 'block_rotation_created');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('block_rotation_created', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['block_rotation_created'] = $block_rotation_created;

        return $this;
    }

    /**
     * Gets sun
     *
     * @return bool|null
     */
    public function getSun()
    {
        return $this->container['sun'];
    }

    /**
     * Sets sun
     *
     * @param bool|null $sun sun
     *
     * @return self
     */
    public function setSun($sun)
    {
        if (is_null($sun)) {
            array_push($this->openAPINullablesSetToNull, 'sun');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sun', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sun'] = $sun;

        return $this;
    }

    /**
     * Gets mon
     *
     * @return bool|null
     */
    public function getMon()
    {
        return $this->container['mon'];
    }

    /**
     * Sets mon
     *
     * @param bool|null $mon mon
     *
     * @return self
     */
    public function setMon($mon)
    {
        if (is_null($mon)) {
            array_push($this->openAPINullablesSetToNull, 'mon');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mon', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mon'] = $mon;

        return $this;
    }

    /**
     * Gets tue
     *
     * @return bool|null
     */
    public function getTue()
    {
        return $this->container['tue'];
    }

    /**
     * Sets tue
     *
     * @param bool|null $tue tue
     *
     * @return self
     */
    public function setTue($tue)
    {
        if (is_null($tue)) {
            array_push($this->openAPINullablesSetToNull, 'tue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tue', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tue'] = $tue;

        return $this;
    }

    /**
     * Gets wed
     *
     * @return bool|null
     */
    public function getWed()
    {
        return $this->container['wed'];
    }

    /**
     * Sets wed
     *
     * @param bool|null $wed wed
     *
     * @return self
     */
    public function setWed($wed)
    {
        if (is_null($wed)) {
            array_push($this->openAPINullablesSetToNull, 'wed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('wed', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['wed'] = $wed;

        return $this;
    }

    /**
     * Gets thu
     *
     * @return bool|null
     */
    public function getThu()
    {
        return $this->container['thu'];
    }

    /**
     * Sets thu
     *
     * @param bool|null $thu thu
     *
     * @return self
     */
    public function setThu($thu)
    {
        if (is_null($thu)) {
            array_push($this->openAPINullablesSetToNull, 'thu');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('thu', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['thu'] = $thu;

        return $this;
    }

    /**
     * Gets fri
     *
     * @return bool|null
     */
    public function getFri()
    {
        return $this->container['fri'];
    }

    /**
     * Sets fri
     *
     * @param bool|null $fri fri
     *
     * @return self
     */
    public function setFri($fri)
    {
        if (is_null($fri)) {
            array_push($this->openAPINullablesSetToNull, 'fri');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fri', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fri'] = $fri;

        return $this;
    }

    /**
     * Gets sat
     *
     * @return bool|null
     */
    public function getSat()
    {
        return $this->container['sat'];
    }

    /**
     * Sets sat
     *
     * @param bool|null $sat sat
     *
     * @return self
     */
    public function setSat($sat)
    {
        if (is_null($sat)) {
            array_push($this->openAPINullablesSetToNull, 'sat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sat', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sat'] = $sat;

        return $this;
    }

    /**
     * Gets sun_in_use
     *
     * @return bool|null
     */
    public function getSunInUse()
    {
        return $this->container['sun_in_use'];
    }

    /**
     * Sets sun_in_use
     *
     * @param bool|null $sun_in_use sun_in_use
     *
     * @return self
     */
    public function setSunInUse($sun_in_use)
    {
        if (is_null($sun_in_use)) {
            array_push($this->openAPINullablesSetToNull, 'sun_in_use');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sun_in_use', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sun_in_use'] = $sun_in_use;

        return $this;
    }

    /**
     * Gets mon_in_use
     *
     * @return bool|null
     */
    public function getMonInUse()
    {
        return $this->container['mon_in_use'];
    }

    /**
     * Sets mon_in_use
     *
     * @param bool|null $mon_in_use mon_in_use
     *
     * @return self
     */
    public function setMonInUse($mon_in_use)
    {
        if (is_null($mon_in_use)) {
            array_push($this->openAPINullablesSetToNull, 'mon_in_use');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mon_in_use', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mon_in_use'] = $mon_in_use;

        return $this;
    }

    /**
     * Gets tue_in_use
     *
     * @return bool|null
     */
    public function getTueInUse()
    {
        return $this->container['tue_in_use'];
    }

    /**
     * Sets tue_in_use
     *
     * @param bool|null $tue_in_use tue_in_use
     *
     * @return self
     */
    public function setTueInUse($tue_in_use)
    {
        if (is_null($tue_in_use)) {
            array_push($this->openAPINullablesSetToNull, 'tue_in_use');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tue_in_use', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tue_in_use'] = $tue_in_use;

        return $this;
    }

    /**
     * Gets wed_in_use
     *
     * @return bool|null
     */
    public function getWedInUse()
    {
        return $this->container['wed_in_use'];
    }

    /**
     * Sets wed_in_use
     *
     * @param bool|null $wed_in_use wed_in_use
     *
     * @return self
     */
    public function setWedInUse($wed_in_use)
    {
        if (is_null($wed_in_use)) {
            array_push($this->openAPINullablesSetToNull, 'wed_in_use');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('wed_in_use', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['wed_in_use'] = $wed_in_use;

        return $this;
    }

    /**
     * Gets thu_in_use
     *
     * @return bool|null
     */
    public function getThuInUse()
    {
        return $this->container['thu_in_use'];
    }

    /**
     * Sets thu_in_use
     *
     * @param bool|null $thu_in_use thu_in_use
     *
     * @return self
     */
    public function setThuInUse($thu_in_use)
    {
        if (is_null($thu_in_use)) {
            array_push($this->openAPINullablesSetToNull, 'thu_in_use');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('thu_in_use', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['thu_in_use'] = $thu_in_use;

        return $this;
    }

    /**
     * Gets fri_in_use
     *
     * @return bool|null
     */
    public function getFriInUse()
    {
        return $this->container['fri_in_use'];
    }

    /**
     * Sets fri_in_use
     *
     * @param bool|null $fri_in_use fri_in_use
     *
     * @return self
     */
    public function setFriInUse($fri_in_use)
    {
        if (is_null($fri_in_use)) {
            array_push($this->openAPINullablesSetToNull, 'fri_in_use');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fri_in_use', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fri_in_use'] = $fri_in_use;

        return $this;
    }

    /**
     * Gets sat_in_use
     *
     * @return bool|null
     */
    public function getSatInUse()
    {
        return $this->container['sat_in_use'];
    }

    /**
     * Sets sat_in_use
     *
     * @param bool|null $sat_in_use sat_in_use
     *
     * @return self
     */
    public function setSatInUse($sat_in_use)
    {
        if (is_null($sat_in_use)) {
            array_push($this->openAPINullablesSetToNull, 'sat_in_use');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sat_in_use', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sat_in_use'] = $sat_in_use;

        return $this;
    }

    /**
     * Gets block_group_id
     *
     * @return int|null
     */
    public function getBlockGroupId()
    {
        return $this->container['block_group_id'];
    }

    /**
     * Sets block_group_id
     *
     * @param int|null $block_group_id block_group_id
     *
     * @return self
     */
    public function setBlockGroupId($block_group_id)
    {
        if (is_null($block_group_id)) {
            array_push($this->openAPINullablesSetToNull, 'block_group_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('block_group_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['block_group_id'] = $block_group_id;

        return $this;
    }

    /**
     * Gets meeting_time_id
     *
     * @return int|null
     */
    public function getMeetingTimeId()
    {
        return $this->container['meeting_time_id'];
    }

    /**
     * Sets meeting_time_id
     *
     * @param int|null $meeting_time_id meeting_time_id
     *
     * @return self
     */
    public function setMeetingTimeId($meeting_time_id)
    {
        if (is_null($meeting_time_id)) {
            array_push($this->openAPINullablesSetToNull, 'meeting_time_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('meeting_time_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['meeting_time_id'] = $meeting_time_id;

        return $this;
    }

    /**
     * Gets insert_date
     *
     * @return \DateTime|null
     */
    public function getInsertDate()
    {
        return $this->container['insert_date'];
    }

    /**
     * Sets insert_date
     *
     * @param \DateTime|null $insert_date insert_date
     *
     * @return self
     */
    public function setInsertDate($insert_date)
    {
        if (is_null($insert_date)) {
            array_push($this->openAPINullablesSetToNull, 'insert_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('insert_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['insert_date'] = $insert_date;

        return $this;
    }

    /**
     * Gets last_modify_date
     *
     * @return \DateTime|null
     */
    public function getLastModifyDate()
    {
        return $this->container['last_modify_date'];
    }

    /**
     * Sets last_modify_date
     *
     * @param \DateTime|null $last_modify_date last_modify_date
     *
     * @return self
     */
    public function setLastModifyDate($last_modify_date)
    {
        if (is_null($last_modify_date)) {
            array_push($this->openAPINullablesSetToNull, 'last_modify_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_modify_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_modify_date'] = $last_modify_date;

        return $this;
    }

    /**
     * Gets last_modify_user_id
     *
     * @return int|null
     */
    public function getLastModifyUserId()
    {
        return $this->container['last_modify_user_id'];
    }

    /**
     * Sets last_modify_user_id
     *
     * @param int|null $last_modify_user_id last_modify_user_id
     *
     * @return self
     */
    public function setLastModifyUserId($last_modify_user_id)
    {
        if (is_null($last_modify_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'last_modify_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_modify_user_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_modify_user_id'] = $last_modify_user_id;

        return $this;
    }

    /**
     * Gets fields_to_null
     *
     * @return string[]|null
     */
    public function getFieldsToNull()
    {
        return $this->container['fields_to_null'];
    }

    /**
     * Sets fields_to_null
     *
     * @param string[]|null $fields_to_null fields_to_null
     *
     * @return self
     */
    public function setFieldsToNull($fields_to_null)
    {
        if (is_null($fields_to_null)) {
            array_push($this->openAPINullablesSetToNull, 'fields_to_null');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fields_to_null', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fields_to_null'] = $fields_to_null;

        return $this;
    }

    /**
     * Gets vendor_external_id
     *
     * @return string|null
     */
    public function getVendorExternalId()
    {
        return $this->container['vendor_external_id'];
    }

    /**
     * Sets vendor_external_id
     *
     * @param string|null $vendor_external_id vendor_external_id
     *
     * @return self
     */
    public function setVendorExternalId($vendor_external_id)
    {
        if (is_null($vendor_external_id)) {
            array_push($this->openAPINullablesSetToNull, 'vendor_external_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vendor_external_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vendor_external_id'] = $vendor_external_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
