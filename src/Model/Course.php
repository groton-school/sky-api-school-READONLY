<?php
/**
 * Course
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * Course Class Doc Comment
 *
 * @category Class
 * @description
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Course implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Course';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'offering_id' => 'int',
        'course_length' => 'int',
        'course_code' => 'string',
        'course_title' => 'string',
        'course_description' => 'string',
        'inactive' => 'bool',
        'level_num' => 'int',
        'block_type_id' => 'string',
        'room_type_id' => 'int',
        'room_id' => 'int',
        'building_id' => 'int',
        'credits' => 'float',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'offering_id' => 'int32',
        'course_length' => 'int32',
        'course_code' => null,
        'course_title' => null,
        'course_description' => null,
        'inactive' => null,
        'level_num' => 'int32',
        'block_type_id' => null,
        'room_type_id' => 'int32',
        'room_id' => 'int32',
        'building_id' => 'int32',
        'credits' => 'float',
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'offering_id' => false,
        'course_length' => true,
        'course_code' => true,
        'course_title' => true,
        'course_description' => true,
        'inactive' => false,
        'level_num' => true,
        'block_type_id' => true,
        'room_type_id' => true,
        'room_id' => true,
        'building_id' => true,
        'credits' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'offering_id' => 'offering_id',
        'course_length' => 'course_length',
        'course_code' => 'course_code',
        'course_title' => 'course_title',
        'course_description' => 'course_description',
        'inactive' => 'inactive',
        'level_num' => 'level_num',
        'block_type_id' => 'block_type_id',
        'room_type_id' => 'room_type_id',
        'room_id' => 'room_id',
        'building_id' => 'building_id',
        'credits' => 'credits',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'offering_id' => 'setOfferingId',
        'course_length' => 'setCourseLength',
        'course_code' => 'setCourseCode',
        'course_title' => 'setCourseTitle',
        'course_description' => 'setCourseDescription',
        'inactive' => 'setInactive',
        'level_num' => 'setLevelNum',
        'block_type_id' => 'setBlockTypeId',
        'room_type_id' => 'setRoomTypeId',
        'room_id' => 'setRoomId',
        'building_id' => 'setBuildingId',
        'credits' => 'setCredits',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'offering_id' => 'getOfferingId',
        'course_length' => 'getCourseLength',
        'course_code' => 'getCourseCode',
        'course_title' => 'getCourseTitle',
        'course_description' => 'getCourseDescription',
        'inactive' => 'getInactive',
        'level_num' => 'getLevelNum',
        'block_type_id' => 'getBlockTypeId',
        'room_type_id' => 'getRoomTypeId',
        'room_id' => 'getRoomId',
        'building_id' => 'getBuildingId',
        'credits' => 'getCredits',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BLOCK_TYPE_ID_HOMEROOM = 'Homeroom';
    public const BLOCK_TYPE_ID_ACADEMIC = 'Academic';
    public const BLOCK_TYPE_ID_LUNCH = 'Lunch';
    public const BLOCK_TYPE_ID_DOUBLE = 'Double';
    public const BLOCK_TYPE_ID_NON_ACADEMIC = 'NonAcademic';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockTypeIdAllowableValues()
    {
        return [
            self::BLOCK_TYPE_ID_HOMEROOM,
            self::BLOCK_TYPE_ID_ACADEMIC,
            self::BLOCK_TYPE_ID_LUNCH,
            self::BLOCK_TYPE_ID_DOUBLE,
            self::BLOCK_TYPE_ID_NON_ACADEMIC,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('offering_id', $data ?? [], null);
        $this->setIfExists('course_length', $data ?? [], null);
        $this->setIfExists('course_code', $data ?? [], null);
        $this->setIfExists('course_title', $data ?? [], null);
        $this->setIfExists('course_description', $data ?? [], null);
        $this->setIfExists('inactive', $data ?? [], null);
        $this->setIfExists('level_num', $data ?? [], null);
        $this->setIfExists('block_type_id', $data ?? [], null);
        $this->setIfExists('room_type_id', $data ?? [], null);
        $this->setIfExists('room_id', $data ?? [], null);
        $this->setIfExists('building_id', $data ?? [], null);
        $this->setIfExists('credits', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBlockTypeIdAllowableValues();
        if (!is_null($this->container['block_type_id']) && !in_array($this->container['block_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'block_type_id', must be one of '%s'",
                $this->container['block_type_id'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets offering_id
     *
     * @return int|null
     */
    public function getOfferingId()
    {
        return $this->container['offering_id'];
    }

    /**
     * Sets offering_id
     *
     * @param int|null $offering_id
     *
     * @return self
     */
    public function setOfferingId($offering_id)
    {
        if (is_null($offering_id)) {
            throw new \InvalidArgumentException('non-nullable offering_id cannot be null');
        }
        $this->container['offering_id'] = $offering_id;

        return $this;
    }

    /**
     * Gets course_length
     *
     * @return int|null
     */
    public function getCourseLength()
    {
        return $this->container['course_length'];
    }

    /**
     * Sets course_length
     *
     * @param int|null $course_length
     *
     * @return self
     */
    public function setCourseLength($course_length)
    {
        if (is_null($course_length)) {
            array_push($this->openAPINullablesSetToNull, 'course_length');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('course_length', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['course_length'] = $course_length;

        return $this;
    }

    /**
     * Gets course_code
     *
     * @return string|null
     */
    public function getCourseCode()
    {
        return $this->container['course_code'];
    }

    /**
     * Sets course_code
     *
     * @param string|null $course_code
     *
     * @return self
     */
    public function setCourseCode($course_code)
    {
        if (is_null($course_code)) {
            array_push($this->openAPINullablesSetToNull, 'course_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('course_code', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['course_code'] = $course_code;

        return $this;
    }

    /**
     * Gets course_title
     *
     * @return string|null
     */
    public function getCourseTitle()
    {
        return $this->container['course_title'];
    }

    /**
     * Sets course_title
     *
     * @param string|null $course_title
     *
     * @return self
     */
    public function setCourseTitle($course_title)
    {
        if (is_null($course_title)) {
            array_push($this->openAPINullablesSetToNull, 'course_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('course_title', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['course_title'] = $course_title;

        return $this;
    }

    /**
     * Gets course_description
     *
     * @return string|null
     */
    public function getCourseDescription()
    {
        return $this->container['course_description'];
    }

    /**
     * Sets course_description
     *
     * @param string|null $course_description
     *
     * @return self
     */
    public function setCourseDescription($course_description)
    {
        if (is_null($course_description)) {
            array_push($this->openAPINullablesSetToNull, 'course_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('course_description', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['course_description'] = $course_description;

        return $this;
    }

    /**
     * Gets inactive
     *
     * @return bool|null
     */
    public function getInactive()
    {
        return $this->container['inactive'];
    }

    /**
     * Sets inactive
     *
     * @param bool|null $inactive
     *
     * @return self
     */
    public function setInactive($inactive)
    {
        if (is_null($inactive)) {
            throw new \InvalidArgumentException('non-nullable inactive cannot be null');
        }
        $this->container['inactive'] = $inactive;

        return $this;
    }

    /**
     * Gets level_num
     *
     * @return int|null
     */
    public function getLevelNum()
    {
        return $this->container['level_num'];
    }

    /**
     * Sets level_num
     *
     * @param int|null $level_num
     *
     * @return self
     */
    public function setLevelNum($level_num)
    {
        if (is_null($level_num)) {
            array_push($this->openAPINullablesSetToNull, 'level_num');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('level_num', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['level_num'] = $level_num;

        return $this;
    }

    /**
     * Gets block_type_id
     *
     * @return string|null
     */
    public function getBlockTypeId()
    {
        return $this->container['block_type_id'];
    }

    /**
     * Sets block_type_id
     *
     * @param string|null $block_type_id
     *
     * @return self
     */
    public function setBlockTypeId($block_type_id)
    {
        if (is_null($block_type_id)) {
            array_push($this->openAPINullablesSetToNull, 'block_type_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('block_type_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getBlockTypeIdAllowableValues();
        if (!is_null($block_type_id) && !in_array($block_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'block_type_id', must be one of '%s'",
                    $block_type_id,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['block_type_id'] = $block_type_id;

        return $this;
    }

    /**
     * Gets room_type_id
     *
     * @return int|null
     */
    public function getRoomTypeId()
    {
        return $this->container['room_type_id'];
    }

    /**
     * Sets room_type_id
     *
     * @param int|null $room_type_id
     *
     * @return self
     */
    public function setRoomTypeId($room_type_id)
    {
        if (is_null($room_type_id)) {
            array_push($this->openAPINullablesSetToNull, 'room_type_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('room_type_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['room_type_id'] = $room_type_id;

        return $this;
    }

    /**
     * Gets room_id
     *
     * @return int|null
     */
    public function getRoomId()
    {
        return $this->container['room_id'];
    }

    /**
     * Sets room_id
     *
     * @param int|null $room_id
     *
     * @return self
     */
    public function setRoomId($room_id)
    {
        if (is_null($room_id)) {
            array_push($this->openAPINullablesSetToNull, 'room_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('room_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['room_id'] = $room_id;

        return $this;
    }

    /**
     * Gets building_id
     *
     * @return int|null
     */
    public function getBuildingId()
    {
        return $this->container['building_id'];
    }

    /**
     * Sets building_id
     *
     * @param int|null $building_id
     *
     * @return self
     */
    public function setBuildingId($building_id)
    {
        if (is_null($building_id)) {
            array_push($this->openAPINullablesSetToNull, 'building_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('building_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['building_id'] = $building_id;

        return $this;
    }

    /**
     * Gets credits
     *
     * @return float|null
     */
    public function getCredits()
    {
        return $this->container['credits'];
    }

    /**
     * Sets credits
     *
     * @param float|null $credits
     *
     * @return self
     */
    public function setCredits($credits)
    {
        if (is_null($credits)) {
            array_push($this->openAPINullablesSetToNull, 'credits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('credits', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['credits'] = $credits;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
