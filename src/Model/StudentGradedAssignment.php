<?php
/**
 * StudentGradedAssignment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * StudentGradedAssignment Class Doc Comment
 *
 * @category Class
 * @description Student Graded Assignments Model
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StudentGradedAssignment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StudentGradedAssignment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'assignmentId' => 'int',
        'assignmentIndexId' => 'int',
        'shortDescription' => 'string',
        'dateAssigned' => '\DateTime',
        'dateDue' => '\DateTime',
        'maxPoints' => 'float',
        'points' => 'float',
        'assignmentPercentage' => 'float',
        'letter' => 'string',
        'sectionGrade' => 'float',
        'formative' => 'bool',
        'missing' => 'bool',
        'late' => 'bool',
        'incomplete' => 'bool',
        'exempt' => 'bool',
        'comment' => 'string',
        'assignmentType' => '\SKY\School\Model\AssignmentType',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'assignmentId' => 'int32',
        'assignmentIndexId' => 'int32',
        'shortDescription' => null,
        'dateAssigned' => 'date-time',
        'dateDue' => 'date-time',
        'maxPoints' => 'float',
        'points' => 'float',
        'assignmentPercentage' => 'float',
        'letter' => null,
        'sectionGrade' => 'float',
        'formative' => null,
        'missing' => null,
        'late' => null,
        'incomplete' => null,
        'exempt' => null,
        'comment' => null,
        'assignmentType' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'assignmentId' => true,
        'assignmentIndexId' => true,
        'shortDescription' => true,
        'dateAssigned' => true,
        'dateDue' => true,
        'maxPoints' => true,
        'points' => true,
        'assignmentPercentage' => true,
        'letter' => true,
        'sectionGrade' => true,
        'formative' => true,
        'missing' => true,
        'late' => true,
        'incomplete' => true,
        'exempt' => true,
        'comment' => true,
        'assignmentType' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assignmentId' => 'assignment_id',
        'assignmentIndexId' => 'assignment_index_id',
        'shortDescription' => 'short_description',
        'dateAssigned' => 'date_assigned',
        'dateDue' => 'date_due',
        'maxPoints' => 'max_points',
        'points' => 'points',
        'assignmentPercentage' => 'assignment_percentage',
        'letter' => 'letter',
        'sectionGrade' => 'section_grade',
        'formative' => 'formative',
        'missing' => 'missing',
        'late' => 'late',
        'incomplete' => 'incomplete',
        'exempt' => 'exempt',
        'comment' => 'comment',
        'assignmentType' => 'assignment_type',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assignmentId' => 'setAssignmentId',
        'assignmentIndexId' => 'setAssignmentIndexId',
        'shortDescription' => 'setShortDescription',
        'dateAssigned' => 'setDateAssigned',
        'dateDue' => 'setDateDue',
        'maxPoints' => 'setMaxPoints',
        'points' => 'setPoints',
        'assignmentPercentage' => 'setAssignmentPercentage',
        'letter' => 'setLetter',
        'sectionGrade' => 'setSectionGrade',
        'formative' => 'setFormative',
        'missing' => 'setMissing',
        'late' => 'setLate',
        'incomplete' => 'setIncomplete',
        'exempt' => 'setExempt',
        'comment' => 'setComment',
        'assignmentType' => 'setAssignmentType',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assignmentId' => 'getAssignmentId',
        'assignmentIndexId' => 'getAssignmentIndexId',
        'shortDescription' => 'getShortDescription',
        'dateAssigned' => 'getDateAssigned',
        'dateDue' => 'getDateDue',
        'maxPoints' => 'getMaxPoints',
        'points' => 'getPoints',
        'assignmentPercentage' => 'getAssignmentPercentage',
        'letter' => 'getLetter',
        'sectionGrade' => 'getSectionGrade',
        'formative' => 'getFormative',
        'missing' => 'getMissing',
        'late' => 'getLate',
        'incomplete' => 'getIncomplete',
        'exempt' => 'getExempt',
        'comment' => 'getComment',
        'assignmentType' => 'getAssignmentType',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('assignmentId', $data ?? [], null);
        $this->setIfExists('assignmentIndexId', $data ?? [], null);
        $this->setIfExists('shortDescription', $data ?? [], null);
        $this->setIfExists('dateAssigned', $data ?? [], null);
        $this->setIfExists('dateDue', $data ?? [], null);
        $this->setIfExists('maxPoints', $data ?? [], null);
        $this->setIfExists('points', $data ?? [], null);
        $this->setIfExists('assignmentPercentage', $data ?? [], null);
        $this->setIfExists('letter', $data ?? [], null);
        $this->setIfExists('sectionGrade', $data ?? [], null);
        $this->setIfExists('formative', $data ?? [], null);
        $this->setIfExists('missing', $data ?? [], null);
        $this->setIfExists('late', $data ?? [], null);
        $this->setIfExists('incomplete', $data ?? [], null);
        $this->setIfExists('exempt', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('assignmentType', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assignmentId
     *
     * @return int|null
     */
    public function getAssignmentId()
    {
        return $this->container['assignmentId'];
    }

    /**
     * Sets assignmentId
     *
     * @param int|null $assignmentId The ID of the assignment
     *
     * @return self
     */
    public function setAssignmentId($assignmentId)
    {
        if (is_null($assignmentId)) {
            array_push($this->openAPINullablesSetToNull, 'assignmentId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assignmentId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assignmentId'] = $assignmentId;

        return $this;
    }

    /**
     * Gets assignmentIndexId
     *
     * @return int|null
     */
    public function getAssignmentIndexId()
    {
        return $this->container['assignmentIndexId'];
    }

    /**
     * Sets assignmentIndexId
     *
     * @param int|null $assignmentIndexId The index ID of the assignment
     *
     * @return self
     */
    public function setAssignmentIndexId($assignmentIndexId)
    {
        if (is_null($assignmentIndexId)) {
            array_push($this->openAPINullablesSetToNull, 'assignmentIndexId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assignmentIndexId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assignmentIndexId'] = $assignmentIndexId;

        return $this;
    }

    /**
     * Gets shortDescription
     *
     * @return string|null
     */
    public function getShortDescription()
    {
        return $this->container['shortDescription'];
    }

    /**
     * Sets shortDescription
     *
     * @param string|null $shortDescription The short description for the assignment
     *
     * @return self
     */
    public function setShortDescription($shortDescription)
    {
        if (is_null($shortDescription)) {
            array_push($this->openAPINullablesSetToNull, 'shortDescription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shortDescription', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shortDescription'] = $shortDescription;

        return $this;
    }

    /**
     * Gets dateAssigned
     *
     * @return \DateTime|null
     */
    public function getDateAssigned()
    {
        return $this->container['dateAssigned'];
    }

    /**
     * Sets dateAssigned
     *
     * @param \DateTime|null $dateAssigned The date the assignment was assigned
     *
     * @return self
     */
    public function setDateAssigned($dateAssigned)
    {
        if (is_null($dateAssigned)) {
            array_push($this->openAPINullablesSetToNull, 'dateAssigned');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dateAssigned', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dateAssigned'] = $dateAssigned;

        return $this;
    }

    /**
     * Gets dateDue
     *
     * @return \DateTime|null
     */
    public function getDateDue()
    {
        return $this->container['dateDue'];
    }

    /**
     * Sets dateDue
     *
     * @param \DateTime|null $dateDue The date the assignment is due
     *
     * @return self
     */
    public function setDateDue($dateDue)
    {
        if (is_null($dateDue)) {
            array_push($this->openAPINullablesSetToNull, 'dateDue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dateDue', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dateDue'] = $dateDue;

        return $this;
    }

    /**
     * Gets maxPoints
     *
     * @return float|null
     */
    public function getMaxPoints()
    {
        return $this->container['maxPoints'];
    }

    /**
     * Sets maxPoints
     *
     * @param float|null $maxPoints The maximum points for the assignment
     *
     * @return self
     */
    public function setMaxPoints($maxPoints)
    {
        if (is_null($maxPoints)) {
            array_push($this->openAPINullablesSetToNull, 'maxPoints');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maxPoints', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maxPoints'] = $maxPoints;

        return $this;
    }

    /**
     * Gets points
     *
     * @return float|null
     */
    public function getPoints()
    {
        return $this->container['points'];
    }

    /**
     * Sets points
     *
     * @param float|null $points The graded number of points for the assignment
     *
     * @return self
     */
    public function setPoints($points)
    {
        if (is_null($points)) {
            array_push($this->openAPINullablesSetToNull, 'points');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('points', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['points'] = $points;

        return $this;
    }

    /**
     * Gets assignmentPercentage
     *
     * @return float|null
     */
    public function getAssignmentPercentage()
    {
        return $this->container['assignmentPercentage'];
    }

    /**
     * Sets assignmentPercentage
     *
     * @param float|null $assignmentPercentage The percentage grade for the assignment
     *
     * @return self
     */
    public function setAssignmentPercentage($assignmentPercentage)
    {
        if (is_null($assignmentPercentage)) {
            array_push($this->openAPINullablesSetToNull, 'assignmentPercentage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assignmentPercentage', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assignmentPercentage'] = $assignmentPercentage;

        return $this;
    }

    /**
     * Gets letter
     *
     * @return string|null
     */
    public function getLetter()
    {
        return $this->container['letter'];
    }

    /**
     * Sets letter
     *
     * @param string|null $letter The letter grade for the assignment
     *
     * @return self
     */
    public function setLetter($letter)
    {
        if (is_null($letter)) {
            array_push($this->openAPINullablesSetToNull, 'letter');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('letter', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['letter'] = $letter;

        return $this;
    }

    /**
     * Gets sectionGrade
     *
     * @return float|null
     */
    public function getSectionGrade()
    {
        return $this->container['sectionGrade'];
    }

    /**
     * Sets sectionGrade
     *
     * @param float|null $sectionGrade The cumulative grade for the section
     *
     * @return self
     */
    public function setSectionGrade($sectionGrade)
    {
        if (is_null($sectionGrade)) {
            array_push($this->openAPINullablesSetToNull, 'sectionGrade');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sectionGrade', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sectionGrade'] = $sectionGrade;

        return $this;
    }

    /**
     * Gets formative
     *
     * @return bool|null
     */
    public function getFormative()
    {
        return $this->container['formative'];
    }

    /**
     * Sets formative
     *
     * @param bool|null $formative Returns true if the assignment is formative
     *
     * @return self
     */
    public function setFormative($formative)
    {
        if (is_null($formative)) {
            array_push($this->openAPINullablesSetToNull, 'formative');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('formative', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['formative'] = $formative;

        return $this;
    }

    /**
     * Gets missing
     *
     * @return bool|null
     */
    public function getMissing()
    {
        return $this->container['missing'];
    }

    /**
     * Sets missing
     *
     * @param bool|null $missing Returns true if the assignment is missing
     *
     * @return self
     */
    public function setMissing($missing)
    {
        if (is_null($missing)) {
            array_push($this->openAPINullablesSetToNull, 'missing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('missing', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['missing'] = $missing;

        return $this;
    }

    /**
     * Gets late
     *
     * @return bool|null
     */
    public function getLate()
    {
        return $this->container['late'];
    }

    /**
     * Sets late
     *
     * @param bool|null $late Returns true if the assignment is late
     *
     * @return self
     */
    public function setLate($late)
    {
        if (is_null($late)) {
            array_push($this->openAPINullablesSetToNull, 'late');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('late', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['late'] = $late;

        return $this;
    }

    /**
     * Gets incomplete
     *
     * @return bool|null
     */
    public function getIncomplete()
    {
        return $this->container['incomplete'];
    }

    /**
     * Sets incomplete
     *
     * @param bool|null $incomplete Returns true if the assignment is incomplete
     *
     * @return self
     */
    public function setIncomplete($incomplete)
    {
        if (is_null($incomplete)) {
            array_push($this->openAPINullablesSetToNull, 'incomplete');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incomplete', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['incomplete'] = $incomplete;

        return $this;
    }

    /**
     * Gets exempt
     *
     * @return bool|null
     */
    public function getExempt()
    {
        return $this->container['exempt'];
    }

    /**
     * Sets exempt
     *
     * @param bool|null $exempt Returns true if the assignment is exempt
     *
     * @return self
     */
    public function setExempt($exempt)
    {
        if (is_null($exempt)) {
            array_push($this->openAPINullablesSetToNull, 'exempt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exempt', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['exempt'] = $exempt;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comment for the assignment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            array_push($this->openAPINullablesSetToNull, 'comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets assignmentType
     *
     * @return \SKY\School\Model\AssignmentType|null
     */
    public function getAssignmentType()
    {
        return $this->container['assignmentType'];
    }

    /**
     * Sets assignmentType
     *
     * @param \SKY\School\Model\AssignmentType|null $assignmentType assignmentType
     *
     * @return self
     */
    public function setAssignmentType($assignmentType)
    {
        if (is_null($assignmentType)) {
            throw new \InvalidArgumentException('non-nullable assignmentType cannot be null');
        }
        $this->container['assignmentType'] = $assignmentType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
