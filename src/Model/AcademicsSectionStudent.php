<?php
/**
 * AcademicsSectionStudent
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * AcademicsSectionStudent Class Doc Comment
 *
 * @category Class
 * @description Student Academic Section Model
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AcademicsSectionStudent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AcademicsSectionStudent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sectionId' => 'int',
        'sectionDisplayName' => 'string',
        'schoolLevelName' => 'string',
        'roomName' => 'string',
        'blockName' => 'string',
        'leadSectionId' => 'int',
        'markingPeriodId' => 'int',
        'durationId' => 'int',
        'cumulativeGrade' => 'float',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sectionId' => 'int32',
        'sectionDisplayName' => null,
        'schoolLevelName' => null,
        'roomName' => null,
        'blockName' => null,
        'leadSectionId' => 'int32',
        'markingPeriodId' => 'int32',
        'durationId' => 'int32',
        'cumulativeGrade' => 'double',
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sectionId' => false,
        'sectionDisplayName' => true,
        'schoolLevelName' => true,
        'roomName' => true,
        'blockName' => true,
        'leadSectionId' => true,
        'markingPeriodId' => true,
        'durationId' => true,
        'cumulativeGrade' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sectionId' => 'section_id',
        'sectionDisplayName' => 'section_display_name',
        'schoolLevelName' => 'school_level_name',
        'roomName' => 'room_name',
        'blockName' => 'block_name',
        'leadSectionId' => 'lead_section_id',
        'markingPeriodId' => 'marking_period_id',
        'durationId' => 'duration_id',
        'cumulativeGrade' => 'cumulative_grade',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sectionId' => 'setSectionId',
        'sectionDisplayName' => 'setSectionDisplayName',
        'schoolLevelName' => 'setSchoolLevelName',
        'roomName' => 'setRoomName',
        'blockName' => 'setBlockName',
        'leadSectionId' => 'setLeadSectionId',
        'markingPeriodId' => 'setMarkingPeriodId',
        'durationId' => 'setDurationId',
        'cumulativeGrade' => 'setCumulativeGrade',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sectionId' => 'getSectionId',
        'sectionDisplayName' => 'getSectionDisplayName',
        'schoolLevelName' => 'getSchoolLevelName',
        'roomName' => 'getRoomName',
        'blockName' => 'getBlockName',
        'leadSectionId' => 'getLeadSectionId',
        'markingPeriodId' => 'getMarkingPeriodId',
        'durationId' => 'getDurationId',
        'cumulativeGrade' => 'getCumulativeGrade',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sectionId', $data ?? [], null);
        $this->setIfExists('sectionDisplayName', $data ?? [], null);
        $this->setIfExists('schoolLevelName', $data ?? [], null);
        $this->setIfExists('roomName', $data ?? [], null);
        $this->setIfExists('blockName', $data ?? [], null);
        $this->setIfExists('leadSectionId', $data ?? [], null);
        $this->setIfExists('markingPeriodId', $data ?? [], null);
        $this->setIfExists('durationId', $data ?? [], null);
        $this->setIfExists('cumulativeGrade', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sectionId
     *
     * @return int|null
     */
    public function getSectionId()
    {
        return $this->container['sectionId'];
    }

    /**
     * Sets sectionId
     *
     * @param int|null $sectionId The ID of the section
     *
     * @return self
     */
    public function setSectionId($sectionId)
    {
        if (is_null($sectionId)) {
            throw new \InvalidArgumentException('non-nullable sectionId cannot be null');
        }
        $this->container['sectionId'] = $sectionId;

        return $this;
    }

    /**
     * Gets sectionDisplayName
     *
     * @return string|null
     */
    public function getSectionDisplayName()
    {
        return $this->container['sectionDisplayName'];
    }

    /**
     * Sets sectionDisplayName
     *
     * @param string|null $sectionDisplayName The section display value (name and block)
     *
     * @return self
     */
    public function setSectionDisplayName($sectionDisplayName)
    {
        if (is_null($sectionDisplayName)) {
            array_push($this->openAPINullablesSetToNull, 'sectionDisplayName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sectionDisplayName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sectionDisplayName'] = $sectionDisplayName;

        return $this;
    }

    /**
     * Gets schoolLevelName
     *
     * @return string|null
     */
    public function getSchoolLevelName()
    {
        return $this->container['schoolLevelName'];
    }

    /**
     * Sets schoolLevelName
     *
     * @param string|null $schoolLevelName The name of the room where the section takes place
     *
     * @return self
     */
    public function setSchoolLevelName($schoolLevelName)
    {
        if (is_null($schoolLevelName)) {
            array_push($this->openAPINullablesSetToNull, 'schoolLevelName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('schoolLevelName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['schoolLevelName'] = $schoolLevelName;

        return $this;
    }

    /**
     * Gets roomName
     *
     * @return string|null
     */
    public function getRoomName()
    {
        return $this->container['roomName'];
    }

    /**
     * Sets roomName
     *
     * @param string|null $roomName The name of the room where the section takes place
     *
     * @return self
     */
    public function setRoomName($roomName)
    {
        if (is_null($roomName)) {
            array_push($this->openAPINullablesSetToNull, 'roomName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roomName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roomName'] = $roomName;

        return $this;
    }

    /**
     * Gets blockName
     *
     * @return string|null
     */
    public function getBlockName()
    {
        return $this->container['blockName'];
    }

    /**
     * Sets blockName
     *
     * @param string|null $blockName The name of the schedule block for this section
     *
     * @return self
     */
    public function setBlockName($blockName)
    {
        if (is_null($blockName)) {
            array_push($this->openAPINullablesSetToNull, 'blockName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('blockName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['blockName'] = $blockName;

        return $this;
    }

    /**
     * Gets leadSectionId
     *
     * @return int|null
     */
    public function getLeadSectionId()
    {
        return $this->container['leadSectionId'];
    }

    /**
     * Sets leadSectionId
     *
     * @param int|null $leadSectionId The ID of the first section in a series of terms
     *
     * @return self
     */
    public function setLeadSectionId($leadSectionId)
    {
        if (is_null($leadSectionId)) {
            array_push($this->openAPINullablesSetToNull, 'leadSectionId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('leadSectionId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['leadSectionId'] = $leadSectionId;

        return $this;
    }

    /**
     * Gets markingPeriodId
     *
     * @return int|null
     */
    public function getMarkingPeriodId()
    {
        return $this->container['markingPeriodId'];
    }

    /**
     * Sets markingPeriodId
     *
     * @param int|null $markingPeriodId The ID of the marking period for this section
     *
     * @return self
     */
    public function setMarkingPeriodId($markingPeriodId)
    {
        if (is_null($markingPeriodId)) {
            array_push($this->openAPINullablesSetToNull, 'markingPeriodId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('markingPeriodId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['markingPeriodId'] = $markingPeriodId;

        return $this;
    }

    /**
     * Gets durationId
     *
     * @return int|null
     */
    public function getDurationId()
    {
        return $this->container['durationId'];
    }

    /**
     * Sets durationId
     *
     * @param int|null $durationId The duration ID for a section
     *
     * @return self
     */
    public function setDurationId($durationId)
    {
        if (is_null($durationId)) {
            array_push($this->openAPINullablesSetToNull, 'durationId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('durationId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['durationId'] = $durationId;

        return $this;
    }

    /**
     * Gets cumulativeGrade
     *
     * @return float|null
     */
    public function getCumulativeGrade()
    {
        return $this->container['cumulativeGrade'];
    }

    /**
     * Sets cumulativeGrade
     *
     * @param float|null $cumulativeGrade The cumulative grade for this section and student
     *
     * @return self
     */
    public function setCumulativeGrade($cumulativeGrade)
    {
        if (is_null($cumulativeGrade)) {
            array_push($this->openAPINullablesSetToNull, 'cumulativeGrade');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulativeGrade', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cumulativeGrade'] = $cumulativeGrade;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
