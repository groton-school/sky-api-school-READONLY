<?php
/**
 * Meeting
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * Meeting Class Doc Comment
 *
 * @category Class
 * @description Meeting
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Meeting implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Meeting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'section_id' => 'int',
        'section_identifier' => 'string',
        'course_title' => 'string',
        'group_name' => 'string',
        'block_id' => 'int',
        'block_name' => 'string',
        'room_id' => 'int',
        'room_name' => 'string',
        'room_number' => 'int',
        'room_capacity' => 'int',
        'room_code' => 'string',
        'faculty_user_id' => 'int',
        'faculty_name' => 'string',
        'faculty_firstname' => 'string',
        'faculty_lastname' => 'string',
        'start_time' => '\DateTime',
        'end_time' => '\DateTime',
        'meeting_date' => '\DateTime',
        'attendance_required' => 'bool',
        'attendance_taken' => 'bool',
        'num_absent' => 'int',
        'attendance_id' => 'int',
        'level_number' => 'int',
        'offering_type' => '\SKY\School\Model\OfferingType',
        'created_date' => '\DateTime',
        'modified_date' => '\DateTime',
        'last_modified_user_id' => 'int',
        'teachers' => '\SKY\School\Model\Teacher[]',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'section_id' => 'int32',
        'section_identifier' => null,
        'course_title' => null,
        'group_name' => null,
        'block_id' => 'int32',
        'block_name' => null,
        'room_id' => 'int32',
        'room_name' => null,
        'room_number' => 'int32',
        'room_capacity' => 'int32',
        'room_code' => null,
        'faculty_user_id' => 'int32',
        'faculty_name' => null,
        'faculty_firstname' => null,
        'faculty_lastname' => null,
        'start_time' => 'date-time',
        'end_time' => 'date-time',
        'meeting_date' => 'date-time',
        'attendance_required' => null,
        'attendance_taken' => null,
        'num_absent' => 'int32',
        'attendance_id' => 'int32',
        'level_number' => 'int32',
        'offering_type' => null,
        'created_date' => 'date-time',
        'modified_date' => 'date-time',
        'last_modified_user_id' => 'int32',
        'teachers' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'section_id' => false,
        'section_identifier' => true,
        'course_title' => true,
        'group_name' => true,
        'block_id' => false,
        'block_name' => true,
        'room_id' => false,
        'room_name' => true,
        'room_number' => false,
        'room_capacity' => false,
        'room_code' => true,
        'faculty_user_id' => false,
        'faculty_name' => true,
        'faculty_firstname' => true,
        'faculty_lastname' => true,
        'start_time' => false,
        'end_time' => false,
        'meeting_date' => false,
        'attendance_required' => false,
        'attendance_taken' => false,
        'num_absent' => false,
        'attendance_id' => false,
        'level_number' => false,
        'offering_type' => false,
        'created_date' => false,
        'modified_date' => false,
        'last_modified_user_id' => false,
        'teachers' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'section_id' => 'section_id',
        'section_identifier' => 'section_identifier',
        'course_title' => 'course_title',
        'group_name' => 'group_name',
        'block_id' => 'block_id',
        'block_name' => 'block_name',
        'room_id' => 'room_id',
        'room_name' => 'room_name',
        'room_number' => 'room_number',
        'room_capacity' => 'room_capacity',
        'room_code' => 'room_code',
        'faculty_user_id' => 'faculty_user_id',
        'faculty_name' => 'faculty_name',
        'faculty_firstname' => 'faculty_firstname',
        'faculty_lastname' => 'faculty_lastname',
        'start_time' => 'start_time',
        'end_time' => 'end_time',
        'meeting_date' => 'meeting_date',
        'attendance_required' => 'attendance_required',
        'attendance_taken' => 'attendance_taken',
        'num_absent' => 'num_absent',
        'attendance_id' => 'attendance_id',
        'level_number' => 'level_number',
        'offering_type' => 'offering_type',
        'created_date' => 'created_date',
        'modified_date' => 'modified_date',
        'last_modified_user_id' => 'last_modified_user_id',
        'teachers' => 'teachers',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'section_id' => 'setSectionId',
        'section_identifier' => 'setSectionIdentifier',
        'course_title' => 'setCourseTitle',
        'group_name' => 'setGroupName',
        'block_id' => 'setBlockId',
        'block_name' => 'setBlockName',
        'room_id' => 'setRoomId',
        'room_name' => 'setRoomName',
        'room_number' => 'setRoomNumber',
        'room_capacity' => 'setRoomCapacity',
        'room_code' => 'setRoomCode',
        'faculty_user_id' => 'setFacultyUserId',
        'faculty_name' => 'setFacultyName',
        'faculty_firstname' => 'setFacultyFirstname',
        'faculty_lastname' => 'setFacultyLastname',
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'meeting_date' => 'setMeetingDate',
        'attendance_required' => 'setAttendanceRequired',
        'attendance_taken' => 'setAttendanceTaken',
        'num_absent' => 'setNumAbsent',
        'attendance_id' => 'setAttendanceId',
        'level_number' => 'setLevelNumber',
        'offering_type' => 'setOfferingType',
        'created_date' => 'setCreatedDate',
        'modified_date' => 'setModifiedDate',
        'last_modified_user_id' => 'setLastModifiedUserId',
        'teachers' => 'setTeachers',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'section_id' => 'getSectionId',
        'section_identifier' => 'getSectionIdentifier',
        'course_title' => 'getCourseTitle',
        'group_name' => 'getGroupName',
        'block_id' => 'getBlockId',
        'block_name' => 'getBlockName',
        'room_id' => 'getRoomId',
        'room_name' => 'getRoomName',
        'room_number' => 'getRoomNumber',
        'room_capacity' => 'getRoomCapacity',
        'room_code' => 'getRoomCode',
        'faculty_user_id' => 'getFacultyUserId',
        'faculty_name' => 'getFacultyName',
        'faculty_firstname' => 'getFacultyFirstname',
        'faculty_lastname' => 'getFacultyLastname',
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'meeting_date' => 'getMeetingDate',
        'attendance_required' => 'getAttendanceRequired',
        'attendance_taken' => 'getAttendanceTaken',
        'num_absent' => 'getNumAbsent',
        'attendance_id' => 'getAttendanceId',
        'level_number' => 'getLevelNumber',
        'offering_type' => 'getOfferingType',
        'created_date' => 'getCreatedDate',
        'modified_date' => 'getModifiedDate',
        'last_modified_user_id' => 'getLastModifiedUserId',
        'teachers' => 'getTeachers',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('section_id', $data ?? [], null);
        $this->setIfExists('section_identifier', $data ?? [], null);
        $this->setIfExists('course_title', $data ?? [], null);
        $this->setIfExists('group_name', $data ?? [], null);
        $this->setIfExists('block_id', $data ?? [], null);
        $this->setIfExists('block_name', $data ?? [], null);
        $this->setIfExists('room_id', $data ?? [], null);
        $this->setIfExists('room_name', $data ?? [], null);
        $this->setIfExists('room_number', $data ?? [], null);
        $this->setIfExists('room_capacity', $data ?? [], null);
        $this->setIfExists('room_code', $data ?? [], null);
        $this->setIfExists('faculty_user_id', $data ?? [], null);
        $this->setIfExists('faculty_name', $data ?? [], null);
        $this->setIfExists('faculty_firstname', $data ?? [], null);
        $this->setIfExists('faculty_lastname', $data ?? [], null);
        $this->setIfExists('start_time', $data ?? [], null);
        $this->setIfExists('end_time', $data ?? [], null);
        $this->setIfExists('meeting_date', $data ?? [], null);
        $this->setIfExists('attendance_required', $data ?? [], null);
        $this->setIfExists('attendance_taken', $data ?? [], null);
        $this->setIfExists('num_absent', $data ?? [], null);
        $this->setIfExists('attendance_id', $data ?? [], null);
        $this->setIfExists('level_number', $data ?? [], null);
        $this->setIfExists('offering_type', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('modified_date', $data ?? [], null);
        $this->setIfExists('last_modified_user_id', $data ?? [], null);
        $this->setIfExists('teachers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets section_id
     *
     * @return int|null
     */
    public function getSectionId()
    {
        return $this->container['section_id'];
    }

    /**
     * Sets section_id
     *
     * @param int|null $section_id The id of the section
     *
     * @return self
     */
    public function setSectionId($section_id)
    {
        if (is_null($section_id)) {
            throw new \InvalidArgumentException('non-nullable section_id cannot be null');
        }
        $this->container['section_id'] = $section_id;

        return $this;
    }

    /**
     * Gets section_identifier
     *
     * @return string|null
     */
    public function getSectionIdentifier()
    {
        return $this->container['section_identifier'];
    }

    /**
     * Sets section_identifier
     *
     * @param string|null $section_identifier The section identifier
     *
     * @return self
     */
    public function setSectionIdentifier($section_identifier)
    {
        if (is_null($section_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'section_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('section_identifier', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['section_identifier'] = $section_identifier;

        return $this;
    }

    /**
     * Gets course_title
     *
     * @return string|null
     */
    public function getCourseTitle()
    {
        return $this->container['course_title'];
    }

    /**
     * Sets course_title
     *
     * @param string|null $course_title The title of the course
     *
     * @return self
     */
    public function setCourseTitle($course_title)
    {
        if (is_null($course_title)) {
            array_push($this->openAPINullablesSetToNull, 'course_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('course_title', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['course_title'] = $course_title;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string|null
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string|null $group_name The auto generated name of the group
     *
     * @return self
     */
    public function setGroupName($group_name)
    {
        if (is_null($group_name)) {
            array_push($this->openAPINullablesSetToNull, 'group_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('group_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets block_id
     *
     * @return int|null
     */
    public function getBlockId()
    {
        return $this->container['block_id'];
    }

    /**
     * Sets block_id
     *
     * @param int|null $block_id The id of the block
     *
     * @return self
     */
    public function setBlockId($block_id)
    {
        if (is_null($block_id)) {
            throw new \InvalidArgumentException('non-nullable block_id cannot be null');
        }
        $this->container['block_id'] = $block_id;

        return $this;
    }

    /**
     * Gets block_name
     *
     * @return string|null
     */
    public function getBlockName()
    {
        return $this->container['block_name'];
    }

    /**
     * Sets block_name
     *
     * @param string|null $block_name The name of the block
     *
     * @return self
     */
    public function setBlockName($block_name)
    {
        if (is_null($block_name)) {
            array_push($this->openAPINullablesSetToNull, 'block_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('block_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['block_name'] = $block_name;

        return $this;
    }

    /**
     * Gets room_id
     *
     * @return int|null
     */
    public function getRoomId()
    {
        return $this->container['room_id'];
    }

    /**
     * Sets room_id
     *
     * @param int|null $room_id The id of the room where the meeting takes place
     *
     * @return self
     */
    public function setRoomId($room_id)
    {
        if (is_null($room_id)) {
            throw new \InvalidArgumentException('non-nullable room_id cannot be null');
        }
        $this->container['room_id'] = $room_id;

        return $this;
    }

    /**
     * Gets room_name
     *
     * @return string|null
     */
    public function getRoomName()
    {
        return $this->container['room_name'];
    }

    /**
     * Sets room_name
     *
     * @param string|null $room_name The name of the room where the meeting takes place
     *
     * @return self
     */
    public function setRoomName($room_name)
    {
        if (is_null($room_name)) {
            array_push($this->openAPINullablesSetToNull, 'room_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('room_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['room_name'] = $room_name;

        return $this;
    }

    /**
     * Gets room_number
     *
     * @return int|null
     */
    public function getRoomNumber()
    {
        return $this->container['room_number'];
    }

    /**
     * Sets room_number
     *
     * @param int|null $room_number The room number where the meeting takes place
     *
     * @return self
     */
    public function setRoomNumber($room_number)
    {
        if (is_null($room_number)) {
            throw new \InvalidArgumentException('non-nullable room_number cannot be null');
        }
        $this->container['room_number'] = $room_number;

        return $this;
    }

    /**
     * Gets room_capacity
     *
     * @return int|null
     */
    public function getRoomCapacity()
    {
        return $this->container['room_capacity'];
    }

    /**
     * Sets room_capacity
     *
     * @param int|null $room_capacity The room capacity
     *
     * @return self
     */
    public function setRoomCapacity($room_capacity)
    {
        if (is_null($room_capacity)) {
            throw new \InvalidArgumentException('non-nullable room_capacity cannot be null');
        }
        $this->container['room_capacity'] = $room_capacity;

        return $this;
    }

    /**
     * Gets room_code
     *
     * @return string|null
     */
    public function getRoomCode()
    {
        return $this->container['room_code'];
    }

    /**
     * Sets room_code
     *
     * @param string|null $room_code The room code
     *
     * @return self
     */
    public function setRoomCode($room_code)
    {
        if (is_null($room_code)) {
            array_push($this->openAPINullablesSetToNull, 'room_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('room_code', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['room_code'] = $room_code;

        return $this;
    }

    /**
     * Gets faculty_user_id
     *
     * @return int|null
     */
    public function getFacultyUserId()
    {
        return $this->container['faculty_user_id'];
    }

    /**
     * Sets faculty_user_id
     *
     * @param int|null $faculty_user_id The user id of the faculty member
     *
     * @return self
     */
    public function setFacultyUserId($faculty_user_id)
    {
        if (is_null($faculty_user_id)) {
            throw new \InvalidArgumentException('non-nullable faculty_user_id cannot be null');
        }
        $this->container['faculty_user_id'] = $faculty_user_id;

        return $this;
    }

    /**
     * Gets faculty_name
     *
     * @return string|null
     */
    public function getFacultyName()
    {
        return $this->container['faculty_name'];
    }

    /**
     * Sets faculty_name
     *
     * @param string|null $faculty_name The combined name of the head faculty member
     *
     * @return self
     */
    public function setFacultyName($faculty_name)
    {
        if (is_null($faculty_name)) {
            array_push($this->openAPINullablesSetToNull, 'faculty_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('faculty_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['faculty_name'] = $faculty_name;

        return $this;
    }

    /**
     * Gets faculty_firstname
     *
     * @return string|null
     */
    public function getFacultyFirstname()
    {
        return $this->container['faculty_firstname'];
    }

    /**
     * Sets faculty_firstname
     *
     * @param string|null $faculty_firstname The faculty member's first name
     *
     * @return self
     */
    public function setFacultyFirstname($faculty_firstname)
    {
        if (is_null($faculty_firstname)) {
            array_push($this->openAPINullablesSetToNull, 'faculty_firstname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('faculty_firstname', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['faculty_firstname'] = $faculty_firstname;

        return $this;
    }

    /**
     * Gets faculty_lastname
     *
     * @return string|null
     */
    public function getFacultyLastname()
    {
        return $this->container['faculty_lastname'];
    }

    /**
     * Sets faculty_lastname
     *
     * @param string|null $faculty_lastname The faculty member's last name
     *
     * @return self
     */
    public function setFacultyLastname($faculty_lastname)
    {
        if (is_null($faculty_lastname)) {
            array_push($this->openAPINullablesSetToNull, 'faculty_lastname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('faculty_lastname', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['faculty_lastname'] = $faculty_lastname;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return \DateTime|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param \DateTime|null $start_time The start time of the meeting
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        if (is_null($start_time)) {
            throw new \InvalidArgumentException('non-nullable start_time cannot be null');
        }
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return \DateTime|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param \DateTime|null $end_time The end time of the meeting
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        if (is_null($end_time)) {
            throw new \InvalidArgumentException('non-nullable end_time cannot be null');
        }
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets meeting_date
     *
     * @return \DateTime|null
     */
    public function getMeetingDate()
    {
        return $this->container['meeting_date'];
    }

    /**
     * Sets meeting_date
     *
     * @param \DateTime|null $meeting_date The date the meeting takes place
     *
     * @return self
     */
    public function setMeetingDate($meeting_date)
    {
        if (is_null($meeting_date)) {
            throw new \InvalidArgumentException('non-nullable meeting_date cannot be null');
        }
        $this->container['meeting_date'] = $meeting_date;

        return $this;
    }

    /**
     * Gets attendance_required
     *
     * @return bool|null
     */
    public function getAttendanceRequired()
    {
        return $this->container['attendance_required'];
    }

    /**
     * Sets attendance_required
     *
     * @param bool|null $attendance_required Returns true if attendance is required to be taken for this meeting
     *
     * @return self
     */
    public function setAttendanceRequired($attendance_required)
    {
        if (is_null($attendance_required)) {
            throw new \InvalidArgumentException('non-nullable attendance_required cannot be null');
        }
        $this->container['attendance_required'] = $attendance_required;

        return $this;
    }

    /**
     * Gets attendance_taken
     *
     * @return bool|null
     */
    public function getAttendanceTaken()
    {
        return $this->container['attendance_taken'];
    }

    /**
     * Sets attendance_taken
     *
     * @param bool|null $attendance_taken Return true if attendance was taken
     *
     * @return self
     */
    public function setAttendanceTaken($attendance_taken)
    {
        if (is_null($attendance_taken)) {
            throw new \InvalidArgumentException('non-nullable attendance_taken cannot be null');
        }
        $this->container['attendance_taken'] = $attendance_taken;

        return $this;
    }

    /**
     * Gets num_absent
     *
     * @return int|null
     */
    public function getNumAbsent()
    {
        return $this->container['num_absent'];
    }

    /**
     * Sets num_absent
     *
     * @param int|null $num_absent The number of absent students for this meeting
     *
     * @return self
     */
    public function setNumAbsent($num_absent)
    {
        if (is_null($num_absent)) {
            throw new \InvalidArgumentException('non-nullable num_absent cannot be null');
        }
        $this->container['num_absent'] = $num_absent;

        return $this;
    }

    /**
     * Gets attendance_id
     *
     * @return int|null
     */
    public function getAttendanceId()
    {
        return $this->container['attendance_id'];
    }

    /**
     * Sets attendance_id
     *
     * @param int|null $attendance_id the id of the attendance record
     *
     * @return self
     */
    public function setAttendanceId($attendance_id)
    {
        if (is_null($attendance_id)) {
            throw new \InvalidArgumentException('non-nullable attendance_id cannot be null');
        }
        $this->container['attendance_id'] = $attendance_id;

        return $this;
    }

    /**
     * Gets level_number
     *
     * @return int|null
     */
    public function getLevelNumber()
    {
        return $this->container['level_number'];
    }

    /**
     * Sets level_number
     *
     * @param int|null $level_number The level number the meeting belongs to
     *
     * @return self
     */
    public function setLevelNumber($level_number)
    {
        if (is_null($level_number)) {
            throw new \InvalidArgumentException('non-nullable level_number cannot be null');
        }
        $this->container['level_number'] = $level_number;

        return $this;
    }

    /**
     * Gets offering_type
     *
     * @return \SKY\School\Model\OfferingType|null
     */
    public function getOfferingType()
    {
        return $this->container['offering_type'];
    }

    /**
     * Sets offering_type
     *
     * @param \SKY\School\Model\OfferingType|null $offering_type offering_type
     *
     * @return self
     */
    public function setOfferingType($offering_type)
    {
        if (is_null($offering_type)) {
            throw new \InvalidArgumentException('non-nullable offering_type cannot be null');
        }
        $this->container['offering_type'] = $offering_type;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date The date the section was created
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return \DateTime|null
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param \DateTime|null $modified_date The date the section was last modified
     *
     * @return self
     */
    public function setModifiedDate($modified_date)
    {
        if (is_null($modified_date)) {
            throw new \InvalidArgumentException('non-nullable modified_date cannot be null');
        }
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets last_modified_user_id
     *
     * @return int|null
     */
    public function getLastModifiedUserId()
    {
        return $this->container['last_modified_user_id'];
    }

    /**
     * Sets last_modified_user_id
     *
     * @param int|null $last_modified_user_id The identifier of the user that last modified the section
     *
     * @return self
     */
    public function setLastModifiedUserId($last_modified_user_id)
    {
        if (is_null($last_modified_user_id)) {
            throw new \InvalidArgumentException('non-nullable last_modified_user_id cannot be null');
        }
        $this->container['last_modified_user_id'] = $last_modified_user_id;

        return $this;
    }

    /**
     * Gets teachers
     *
     * @return \SKY\School\Model\Teacher[]|null
     */
    public function getTeachers()
    {
        return $this->container['teachers'];
    }

    /**
     * Sets teachers
     *
     * @param \SKY\School\Model\Teacher[]|null $teachers The list of teachers for the meeting
     *
     * @return self
     */
    public function setTeachers($teachers)
    {
        if (is_null($teachers)) {
            array_push($this->openAPINullablesSetToNull, 'teachers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('teachers', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['teachers'] = $teachers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
