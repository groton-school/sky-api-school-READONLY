<?php
/**
 * Meeting
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * Meeting Class Doc Comment
 *
 * @category Class
 * @description Meeting
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Meeting implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Meeting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sectionId' => 'int',
        'sectionIdentifier' => 'string',
        'courseTitle' => 'string',
        'groupName' => 'string',
        'blockId' => 'int',
        'blockName' => 'string',
        'roomId' => 'int',
        'roomName' => 'string',
        'roomNumber' => 'int',
        'roomCapacity' => 'int',
        'roomCode' => 'string',
        'facultyUserId' => 'int',
        'facultyName' => 'string',
        'facultyFirstname' => 'string',
        'facultyLastname' => 'string',
        'startTime' => '\DateTime',
        'endTime' => '\DateTime',
        'meetingDate' => '\DateTime',
        'attendanceRequired' => 'bool',
        'attendanceTaken' => 'bool',
        'numAbsent' => 'int',
        'attendanceId' => 'int',
        'levelNumber' => 'int',
        'offeringType' => '\SKY\School\Model\OfferingType',
        'createdDate' => '\DateTime',
        'modifiedDate' => '\DateTime',
        'lastModifiedUserId' => 'int',
        'teachers' => '\SKY\School\Model\Teacher[]',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sectionId' => 'int32',
        'sectionIdentifier' => null,
        'courseTitle' => null,
        'groupName' => null,
        'blockId' => 'int32',
        'blockName' => null,
        'roomId' => 'int32',
        'roomName' => null,
        'roomNumber' => 'int32',
        'roomCapacity' => 'int32',
        'roomCode' => null,
        'facultyUserId' => 'int32',
        'facultyName' => null,
        'facultyFirstname' => null,
        'facultyLastname' => null,
        'startTime' => 'date-time',
        'endTime' => 'date-time',
        'meetingDate' => 'date-time',
        'attendanceRequired' => null,
        'attendanceTaken' => null,
        'numAbsent' => 'int32',
        'attendanceId' => 'int32',
        'levelNumber' => 'int32',
        'offeringType' => null,
        'createdDate' => 'date-time',
        'modifiedDate' => 'date-time',
        'lastModifiedUserId' => 'int32',
        'teachers' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sectionId' => false,
        'sectionIdentifier' => true,
        'courseTitle' => true,
        'groupName' => true,
        'blockId' => false,
        'blockName' => true,
        'roomId' => false,
        'roomName' => true,
        'roomNumber' => false,
        'roomCapacity' => false,
        'roomCode' => true,
        'facultyUserId' => false,
        'facultyName' => true,
        'facultyFirstname' => true,
        'facultyLastname' => true,
        'startTime' => false,
        'endTime' => false,
        'meetingDate' => false,
        'attendanceRequired' => false,
        'attendanceTaken' => false,
        'numAbsent' => false,
        'attendanceId' => false,
        'levelNumber' => false,
        'offeringType' => false,
        'createdDate' => false,
        'modifiedDate' => false,
        'lastModifiedUserId' => false,
        'teachers' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sectionId' => 'section_id',
        'sectionIdentifier' => 'section_identifier',
        'courseTitle' => 'course_title',
        'groupName' => 'group_name',
        'blockId' => 'block_id',
        'blockName' => 'block_name',
        'roomId' => 'room_id',
        'roomName' => 'room_name',
        'roomNumber' => 'room_number',
        'roomCapacity' => 'room_capacity',
        'roomCode' => 'room_code',
        'facultyUserId' => 'faculty_user_id',
        'facultyName' => 'faculty_name',
        'facultyFirstname' => 'faculty_firstname',
        'facultyLastname' => 'faculty_lastname',
        'startTime' => 'start_time',
        'endTime' => 'end_time',
        'meetingDate' => 'meeting_date',
        'attendanceRequired' => 'attendance_required',
        'attendanceTaken' => 'attendance_taken',
        'numAbsent' => 'num_absent',
        'attendanceId' => 'attendance_id',
        'levelNumber' => 'level_number',
        'offeringType' => 'offering_type',
        'createdDate' => 'created_date',
        'modifiedDate' => 'modified_date',
        'lastModifiedUserId' => 'last_modified_user_id',
        'teachers' => 'teachers',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sectionId' => 'setSectionId',
        'sectionIdentifier' => 'setSectionIdentifier',
        'courseTitle' => 'setCourseTitle',
        'groupName' => 'setGroupName',
        'blockId' => 'setBlockId',
        'blockName' => 'setBlockName',
        'roomId' => 'setRoomId',
        'roomName' => 'setRoomName',
        'roomNumber' => 'setRoomNumber',
        'roomCapacity' => 'setRoomCapacity',
        'roomCode' => 'setRoomCode',
        'facultyUserId' => 'setFacultyUserId',
        'facultyName' => 'setFacultyName',
        'facultyFirstname' => 'setFacultyFirstname',
        'facultyLastname' => 'setFacultyLastname',
        'startTime' => 'setStartTime',
        'endTime' => 'setEndTime',
        'meetingDate' => 'setMeetingDate',
        'attendanceRequired' => 'setAttendanceRequired',
        'attendanceTaken' => 'setAttendanceTaken',
        'numAbsent' => 'setNumAbsent',
        'attendanceId' => 'setAttendanceId',
        'levelNumber' => 'setLevelNumber',
        'offeringType' => 'setOfferingType',
        'createdDate' => 'setCreatedDate',
        'modifiedDate' => 'setModifiedDate',
        'lastModifiedUserId' => 'setLastModifiedUserId',
        'teachers' => 'setTeachers',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sectionId' => 'getSectionId',
        'sectionIdentifier' => 'getSectionIdentifier',
        'courseTitle' => 'getCourseTitle',
        'groupName' => 'getGroupName',
        'blockId' => 'getBlockId',
        'blockName' => 'getBlockName',
        'roomId' => 'getRoomId',
        'roomName' => 'getRoomName',
        'roomNumber' => 'getRoomNumber',
        'roomCapacity' => 'getRoomCapacity',
        'roomCode' => 'getRoomCode',
        'facultyUserId' => 'getFacultyUserId',
        'facultyName' => 'getFacultyName',
        'facultyFirstname' => 'getFacultyFirstname',
        'facultyLastname' => 'getFacultyLastname',
        'startTime' => 'getStartTime',
        'endTime' => 'getEndTime',
        'meetingDate' => 'getMeetingDate',
        'attendanceRequired' => 'getAttendanceRequired',
        'attendanceTaken' => 'getAttendanceTaken',
        'numAbsent' => 'getNumAbsent',
        'attendanceId' => 'getAttendanceId',
        'levelNumber' => 'getLevelNumber',
        'offeringType' => 'getOfferingType',
        'createdDate' => 'getCreatedDate',
        'modifiedDate' => 'getModifiedDate',
        'lastModifiedUserId' => 'getLastModifiedUserId',
        'teachers' => 'getTeachers',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sectionId', $data ?? [], null);
        $this->setIfExists('sectionIdentifier', $data ?? [], null);
        $this->setIfExists('courseTitle', $data ?? [], null);
        $this->setIfExists('groupName', $data ?? [], null);
        $this->setIfExists('blockId', $data ?? [], null);
        $this->setIfExists('blockName', $data ?? [], null);
        $this->setIfExists('roomId', $data ?? [], null);
        $this->setIfExists('roomName', $data ?? [], null);
        $this->setIfExists('roomNumber', $data ?? [], null);
        $this->setIfExists('roomCapacity', $data ?? [], null);
        $this->setIfExists('roomCode', $data ?? [], null);
        $this->setIfExists('facultyUserId', $data ?? [], null);
        $this->setIfExists('facultyName', $data ?? [], null);
        $this->setIfExists('facultyFirstname', $data ?? [], null);
        $this->setIfExists('facultyLastname', $data ?? [], null);
        $this->setIfExists('startTime', $data ?? [], null);
        $this->setIfExists('endTime', $data ?? [], null);
        $this->setIfExists('meetingDate', $data ?? [], null);
        $this->setIfExists('attendanceRequired', $data ?? [], null);
        $this->setIfExists('attendanceTaken', $data ?? [], null);
        $this->setIfExists('numAbsent', $data ?? [], null);
        $this->setIfExists('attendanceId', $data ?? [], null);
        $this->setIfExists('levelNumber', $data ?? [], null);
        $this->setIfExists('offeringType', $data ?? [], null);
        $this->setIfExists('createdDate', $data ?? [], null);
        $this->setIfExists('modifiedDate', $data ?? [], null);
        $this->setIfExists('lastModifiedUserId', $data ?? [], null);
        $this->setIfExists('teachers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sectionId
     *
     * @return int|null
     */
    public function getSectionId()
    {
        return $this->container['sectionId'];
    }

    /**
     * Sets sectionId
     *
     * @param int|null $sectionId The id of the section
     *
     * @return self
     */
    public function setSectionId($sectionId)
    {
        if (is_null($sectionId)) {
            throw new \InvalidArgumentException('non-nullable sectionId cannot be null');
        }
        $this->container['sectionId'] = $sectionId;

        return $this;
    }

    /**
     * Gets sectionIdentifier
     *
     * @return string|null
     */
    public function getSectionIdentifier()
    {
        return $this->container['sectionIdentifier'];
    }

    /**
     * Sets sectionIdentifier
     *
     * @param string|null $sectionIdentifier The section identifier
     *
     * @return self
     */
    public function setSectionIdentifier($sectionIdentifier)
    {
        if (is_null($sectionIdentifier)) {
            array_push($this->openAPINullablesSetToNull, 'sectionIdentifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sectionIdentifier', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sectionIdentifier'] = $sectionIdentifier;

        return $this;
    }

    /**
     * Gets courseTitle
     *
     * @return string|null
     */
    public function getCourseTitle()
    {
        return $this->container['courseTitle'];
    }

    /**
     * Sets courseTitle
     *
     * @param string|null $courseTitle The title of the course
     *
     * @return self
     */
    public function setCourseTitle($courseTitle)
    {
        if (is_null($courseTitle)) {
            array_push($this->openAPINullablesSetToNull, 'courseTitle');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('courseTitle', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['courseTitle'] = $courseTitle;

        return $this;
    }

    /**
     * Gets groupName
     *
     * @return string|null
     */
    public function getGroupName()
    {
        return $this->container['groupName'];
    }

    /**
     * Sets groupName
     *
     * @param string|null $groupName The auto generated name of the group
     *
     * @return self
     */
    public function setGroupName($groupName)
    {
        if (is_null($groupName)) {
            array_push($this->openAPINullablesSetToNull, 'groupName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('groupName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['groupName'] = $groupName;

        return $this;
    }

    /**
     * Gets blockId
     *
     * @return int|null
     */
    public function getBlockId()
    {
        return $this->container['blockId'];
    }

    /**
     * Sets blockId
     *
     * @param int|null $blockId The id of the block
     *
     * @return self
     */
    public function setBlockId($blockId)
    {
        if (is_null($blockId)) {
            throw new \InvalidArgumentException('non-nullable blockId cannot be null');
        }
        $this->container['blockId'] = $blockId;

        return $this;
    }

    /**
     * Gets blockName
     *
     * @return string|null
     */
    public function getBlockName()
    {
        return $this->container['blockName'];
    }

    /**
     * Sets blockName
     *
     * @param string|null $blockName The name of the block
     *
     * @return self
     */
    public function setBlockName($blockName)
    {
        if (is_null($blockName)) {
            array_push($this->openAPINullablesSetToNull, 'blockName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('blockName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['blockName'] = $blockName;

        return $this;
    }

    /**
     * Gets roomId
     *
     * @return int|null
     */
    public function getRoomId()
    {
        return $this->container['roomId'];
    }

    /**
     * Sets roomId
     *
     * @param int|null $roomId The id of the room where the meeting takes place
     *
     * @return self
     */
    public function setRoomId($roomId)
    {
        if (is_null($roomId)) {
            throw new \InvalidArgumentException('non-nullable roomId cannot be null');
        }
        $this->container['roomId'] = $roomId;

        return $this;
    }

    /**
     * Gets roomName
     *
     * @return string|null
     */
    public function getRoomName()
    {
        return $this->container['roomName'];
    }

    /**
     * Sets roomName
     *
     * @param string|null $roomName The name of the room where the meeting takes place
     *
     * @return self
     */
    public function setRoomName($roomName)
    {
        if (is_null($roomName)) {
            array_push($this->openAPINullablesSetToNull, 'roomName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roomName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roomName'] = $roomName;

        return $this;
    }

    /**
     * Gets roomNumber
     *
     * @return int|null
     */
    public function getRoomNumber()
    {
        return $this->container['roomNumber'];
    }

    /**
     * Sets roomNumber
     *
     * @param int|null $roomNumber The room number where the meeting takes place
     *
     * @return self
     */
    public function setRoomNumber($roomNumber)
    {
        if (is_null($roomNumber)) {
            throw new \InvalidArgumentException('non-nullable roomNumber cannot be null');
        }
        $this->container['roomNumber'] = $roomNumber;

        return $this;
    }

    /**
     * Gets roomCapacity
     *
     * @return int|null
     */
    public function getRoomCapacity()
    {
        return $this->container['roomCapacity'];
    }

    /**
     * Sets roomCapacity
     *
     * @param int|null $roomCapacity The room capacity
     *
     * @return self
     */
    public function setRoomCapacity($roomCapacity)
    {
        if (is_null($roomCapacity)) {
            throw new \InvalidArgumentException('non-nullable roomCapacity cannot be null');
        }
        $this->container['roomCapacity'] = $roomCapacity;

        return $this;
    }

    /**
     * Gets roomCode
     *
     * @return string|null
     */
    public function getRoomCode()
    {
        return $this->container['roomCode'];
    }

    /**
     * Sets roomCode
     *
     * @param string|null $roomCode The room code
     *
     * @return self
     */
    public function setRoomCode($roomCode)
    {
        if (is_null($roomCode)) {
            array_push($this->openAPINullablesSetToNull, 'roomCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roomCode', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roomCode'] = $roomCode;

        return $this;
    }

    /**
     * Gets facultyUserId
     *
     * @return int|null
     */
    public function getFacultyUserId()
    {
        return $this->container['facultyUserId'];
    }

    /**
     * Sets facultyUserId
     *
     * @param int|null $facultyUserId The user id of the faculty member
     *
     * @return self
     */
    public function setFacultyUserId($facultyUserId)
    {
        if (is_null($facultyUserId)) {
            throw new \InvalidArgumentException('non-nullable facultyUserId cannot be null');
        }
        $this->container['facultyUserId'] = $facultyUserId;

        return $this;
    }

    /**
     * Gets facultyName
     *
     * @return string|null
     */
    public function getFacultyName()
    {
        return $this->container['facultyName'];
    }

    /**
     * Sets facultyName
     *
     * @param string|null $facultyName The combined name of the head faculty member
     *
     * @return self
     */
    public function setFacultyName($facultyName)
    {
        if (is_null($facultyName)) {
            array_push($this->openAPINullablesSetToNull, 'facultyName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('facultyName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['facultyName'] = $facultyName;

        return $this;
    }

    /**
     * Gets facultyFirstname
     *
     * @return string|null
     */
    public function getFacultyFirstname()
    {
        return $this->container['facultyFirstname'];
    }

    /**
     * Sets facultyFirstname
     *
     * @param string|null $facultyFirstname The faculty member's first name
     *
     * @return self
     */
    public function setFacultyFirstname($facultyFirstname)
    {
        if (is_null($facultyFirstname)) {
            array_push($this->openAPINullablesSetToNull, 'facultyFirstname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('facultyFirstname', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['facultyFirstname'] = $facultyFirstname;

        return $this;
    }

    /**
     * Gets facultyLastname
     *
     * @return string|null
     */
    public function getFacultyLastname()
    {
        return $this->container['facultyLastname'];
    }

    /**
     * Sets facultyLastname
     *
     * @param string|null $facultyLastname The faculty member's last name
     *
     * @return self
     */
    public function setFacultyLastname($facultyLastname)
    {
        if (is_null($facultyLastname)) {
            array_push($this->openAPINullablesSetToNull, 'facultyLastname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('facultyLastname', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['facultyLastname'] = $facultyLastname;

        return $this;
    }

    /**
     * Gets startTime
     *
     * @return \DateTime|null
     */
    public function getStartTime()
    {
        return $this->container['startTime'];
    }

    /**
     * Sets startTime
     *
     * @param \DateTime|null $startTime The start time of the meeting
     *
     * @return self
     */
    public function setStartTime($startTime)
    {
        if (is_null($startTime)) {
            throw new \InvalidArgumentException('non-nullable startTime cannot be null');
        }
        $this->container['startTime'] = $startTime;

        return $this;
    }

    /**
     * Gets endTime
     *
     * @return \DateTime|null
     */
    public function getEndTime()
    {
        return $this->container['endTime'];
    }

    /**
     * Sets endTime
     *
     * @param \DateTime|null $endTime The end time of the meeting
     *
     * @return self
     */
    public function setEndTime($endTime)
    {
        if (is_null($endTime)) {
            throw new \InvalidArgumentException('non-nullable endTime cannot be null');
        }
        $this->container['endTime'] = $endTime;

        return $this;
    }

    /**
     * Gets meetingDate
     *
     * @return \DateTime|null
     */
    public function getMeetingDate()
    {
        return $this->container['meetingDate'];
    }

    /**
     * Sets meetingDate
     *
     * @param \DateTime|null $meetingDate The date the meeting takes place
     *
     * @return self
     */
    public function setMeetingDate($meetingDate)
    {
        if (is_null($meetingDate)) {
            throw new \InvalidArgumentException('non-nullable meetingDate cannot be null');
        }
        $this->container['meetingDate'] = $meetingDate;

        return $this;
    }

    /**
     * Gets attendanceRequired
     *
     * @return bool|null
     */
    public function getAttendanceRequired()
    {
        return $this->container['attendanceRequired'];
    }

    /**
     * Sets attendanceRequired
     *
     * @param bool|null $attendanceRequired Returns true if attendance is required to be taken for this meeting
     *
     * @return self
     */
    public function setAttendanceRequired($attendanceRequired)
    {
        if (is_null($attendanceRequired)) {
            throw new \InvalidArgumentException('non-nullable attendanceRequired cannot be null');
        }
        $this->container['attendanceRequired'] = $attendanceRequired;

        return $this;
    }

    /**
     * Gets attendanceTaken
     *
     * @return bool|null
     */
    public function getAttendanceTaken()
    {
        return $this->container['attendanceTaken'];
    }

    /**
     * Sets attendanceTaken
     *
     * @param bool|null $attendanceTaken Return true if attendance was taken
     *
     * @return self
     */
    public function setAttendanceTaken($attendanceTaken)
    {
        if (is_null($attendanceTaken)) {
            throw new \InvalidArgumentException('non-nullable attendanceTaken cannot be null');
        }
        $this->container['attendanceTaken'] = $attendanceTaken;

        return $this;
    }

    /**
     * Gets numAbsent
     *
     * @return int|null
     */
    public function getNumAbsent()
    {
        return $this->container['numAbsent'];
    }

    /**
     * Sets numAbsent
     *
     * @param int|null $numAbsent The number of absent students for this meeting
     *
     * @return self
     */
    public function setNumAbsent($numAbsent)
    {
        if (is_null($numAbsent)) {
            throw new \InvalidArgumentException('non-nullable numAbsent cannot be null');
        }
        $this->container['numAbsent'] = $numAbsent;

        return $this;
    }

    /**
     * Gets attendanceId
     *
     * @return int|null
     */
    public function getAttendanceId()
    {
        return $this->container['attendanceId'];
    }

    /**
     * Sets attendanceId
     *
     * @param int|null $attendanceId the id of the attendance record
     *
     * @return self
     */
    public function setAttendanceId($attendanceId)
    {
        if (is_null($attendanceId)) {
            throw new \InvalidArgumentException('non-nullable attendanceId cannot be null');
        }
        $this->container['attendanceId'] = $attendanceId;

        return $this;
    }

    /**
     * Gets levelNumber
     *
     * @return int|null
     */
    public function getLevelNumber()
    {
        return $this->container['levelNumber'];
    }

    /**
     * Sets levelNumber
     *
     * @param int|null $levelNumber The level number the meeting belongs to
     *
     * @return self
     */
    public function setLevelNumber($levelNumber)
    {
        if (is_null($levelNumber)) {
            throw new \InvalidArgumentException('non-nullable levelNumber cannot be null');
        }
        $this->container['levelNumber'] = $levelNumber;

        return $this;
    }

    /**
     * Gets offeringType
     *
     * @return \SKY\School\Model\OfferingType|null
     */
    public function getOfferingType()
    {
        return $this->container['offeringType'];
    }

    /**
     * Sets offeringType
     *
     * @param \SKY\School\Model\OfferingType|null $offeringType offeringType
     *
     * @return self
     */
    public function setOfferingType($offeringType)
    {
        if (is_null($offeringType)) {
            throw new \InvalidArgumentException('non-nullable offeringType cannot be null');
        }
        $this->container['offeringType'] = $offeringType;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime|null $createdDate The date the section was created
     *
     * @return self
     */
    public function setCreatedDate($createdDate)
    {
        if (is_null($createdDate)) {
            throw new \InvalidArgumentException('non-nullable createdDate cannot be null');
        }
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets modifiedDate
     *
     * @return \DateTime|null
     */
    public function getModifiedDate()
    {
        return $this->container['modifiedDate'];
    }

    /**
     * Sets modifiedDate
     *
     * @param \DateTime|null $modifiedDate The date the section was last modified
     *
     * @return self
     */
    public function setModifiedDate($modifiedDate)
    {
        if (is_null($modifiedDate)) {
            throw new \InvalidArgumentException('non-nullable modifiedDate cannot be null');
        }
        $this->container['modifiedDate'] = $modifiedDate;

        return $this;
    }

    /**
     * Gets lastModifiedUserId
     *
     * @return int|null
     */
    public function getLastModifiedUserId()
    {
        return $this->container['lastModifiedUserId'];
    }

    /**
     * Sets lastModifiedUserId
     *
     * @param int|null $lastModifiedUserId The identifier of the user that last modified the section
     *
     * @return self
     */
    public function setLastModifiedUserId($lastModifiedUserId)
    {
        if (is_null($lastModifiedUserId)) {
            throw new \InvalidArgumentException('non-nullable lastModifiedUserId cannot be null');
        }
        $this->container['lastModifiedUserId'] = $lastModifiedUserId;

        return $this;
    }

    /**
     * Gets teachers
     *
     * @return \SKY\School\Model\Teacher[]|null
     */
    public function getTeachers()
    {
        return $this->container['teachers'];
    }

    /**
     * Sets teachers
     *
     * @param \SKY\School\Model\Teacher[]|null $teachers The list of teachers for the meeting
     *
     * @return self
     */
    public function setTeachers($teachers)
    {
        if (is_null($teachers)) {
            array_push($this->openAPINullablesSetToNull, 'teachers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('teachers', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['teachers'] = $teachers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
