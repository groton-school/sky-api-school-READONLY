<?php
/**
 * AdminCustomFields
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * AdminCustomFields Class Doc Comment
 *
 * @category Class
 * @description
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AdminCustomFields implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdminCustomFields';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fieldId' => 'int',
        'fieldName' => 'string',
        'tableId' => 'int',
        'tableName' => 'string',
        'dataTypeId' => 'int',
        'dataType' => 'string',
        'locationIndexId' => 'int',
        'location' => 'string',
        'active' => 'bool',
        'unique' => 'bool',
        'required' => 'bool',
        'inUse' => 'bool',
        'usageNotUnique' => 'bool',
        'locationId' => 'int',
        'subLocationId' => 'int',
        'subLocation' => 'string',
        'useAbbreviation' => 'bool',
        'vendorId' => 'int',
        'table' => '\SKY\School\Model\UserDefinedTable',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fieldId' => 'int32',
        'fieldName' => null,
        'tableId' => 'int32',
        'tableName' => null,
        'dataTypeId' => 'int32',
        'dataType' => null,
        'locationIndexId' => 'int32',
        'location' => null,
        'active' => null,
        'unique' => null,
        'required' => null,
        'inUse' => null,
        'usageNotUnique' => null,
        'locationId' => 'int32',
        'subLocationId' => 'int32',
        'subLocation' => null,
        'useAbbreviation' => null,
        'vendorId' => 'int32',
        'table' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'fieldId' => true,
        'fieldName' => true,
        'tableId' => true,
        'tableName' => true,
        'dataTypeId' => true,
        'dataType' => true,
        'locationIndexId' => true,
        'location' => true,
        'active' => true,
        'unique' => true,
        'required' => true,
        'inUse' => true,
        'usageNotUnique' => true,
        'locationId' => true,
        'subLocationId' => true,
        'subLocation' => true,
        'useAbbreviation' => true,
        'vendorId' => true,
        'table' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fieldId' => 'field_id',
        'fieldName' => 'field_name',
        'tableId' => 'table_id',
        'tableName' => 'table_name',
        'dataTypeId' => 'data_type_id',
        'dataType' => 'data_type',
        'locationIndexId' => 'location_index_id',
        'location' => 'location',
        'active' => 'active',
        'unique' => 'unique',
        'required' => 'required',
        'inUse' => 'in_use',
        'usageNotUnique' => 'usage_not_unique',
        'locationId' => 'location_id',
        'subLocationId' => 'sub_location_id',
        'subLocation' => 'sub_location',
        'useAbbreviation' => 'use_abbreviation',
        'vendorId' => 'vendor_id',
        'table' => 'table',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fieldId' => 'setFieldId',
        'fieldName' => 'setFieldName',
        'tableId' => 'setTableId',
        'tableName' => 'setTableName',
        'dataTypeId' => 'setDataTypeId',
        'dataType' => 'setDataType',
        'locationIndexId' => 'setLocationIndexId',
        'location' => 'setLocation',
        'active' => 'setActive',
        'unique' => 'setUnique',
        'required' => 'setRequired',
        'inUse' => 'setInUse',
        'usageNotUnique' => 'setUsageNotUnique',
        'locationId' => 'setLocationId',
        'subLocationId' => 'setSubLocationId',
        'subLocation' => 'setSubLocation',
        'useAbbreviation' => 'setUseAbbreviation',
        'vendorId' => 'setVendorId',
        'table' => 'setTable',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fieldId' => 'getFieldId',
        'fieldName' => 'getFieldName',
        'tableId' => 'getTableId',
        'tableName' => 'getTableName',
        'dataTypeId' => 'getDataTypeId',
        'dataType' => 'getDataType',
        'locationIndexId' => 'getLocationIndexId',
        'location' => 'getLocation',
        'active' => 'getActive',
        'unique' => 'getUnique',
        'required' => 'getRequired',
        'inUse' => 'getInUse',
        'usageNotUnique' => 'getUsageNotUnique',
        'locationId' => 'getLocationId',
        'subLocationId' => 'getSubLocationId',
        'subLocation' => 'getSubLocation',
        'useAbbreviation' => 'getUseAbbreviation',
        'vendorId' => 'getVendorId',
        'table' => 'getTable',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('fieldId', $data ?? [], null);
        $this->setIfExists('fieldName', $data ?? [], null);
        $this->setIfExists('tableId', $data ?? [], null);
        $this->setIfExists('tableName', $data ?? [], null);
        $this->setIfExists('dataTypeId', $data ?? [], null);
        $this->setIfExists('dataType', $data ?? [], null);
        $this->setIfExists('locationIndexId', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('unique', $data ?? [], null);
        $this->setIfExists('required', $data ?? [], null);
        $this->setIfExists('inUse', $data ?? [], null);
        $this->setIfExists('usageNotUnique', $data ?? [], null);
        $this->setIfExists('locationId', $data ?? [], null);
        $this->setIfExists('subLocationId', $data ?? [], null);
        $this->setIfExists('subLocation', $data ?? [], null);
        $this->setIfExists('useAbbreviation', $data ?? [], null);
        $this->setIfExists('vendorId', $data ?? [], null);
        $this->setIfExists('table', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fieldId
     *
     * @return int|null
     */
    public function getFieldId()
    {
        return $this->container['fieldId'];
    }

    /**
     * Sets fieldId
     *
     * @param int|null $fieldId
     *
     * @return self
     */
    public function setFieldId($fieldId)
    {
        if (is_null($fieldId)) {
            array_push($this->openAPINullablesSetToNull, 'fieldId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fieldId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fieldId'] = $fieldId;

        return $this;
    }

    /**
     * Gets fieldName
     *
     * @return string|null
     */
    public function getFieldName()
    {
        return $this->container['fieldName'];
    }

    /**
     * Sets fieldName
     *
     * @param string|null $fieldName
     *
     * @return self
     */
    public function setFieldName($fieldName)
    {
        if (is_null($fieldName)) {
            array_push($this->openAPINullablesSetToNull, 'fieldName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fieldName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fieldName'] = $fieldName;

        return $this;
    }

    /**
     * Gets tableId
     *
     * @return int|null
     */
    public function getTableId()
    {
        return $this->container['tableId'];
    }

    /**
     * Sets tableId
     *
     * @param int|null $tableId
     *
     * @return self
     */
    public function setTableId($tableId)
    {
        if (is_null($tableId)) {
            array_push($this->openAPINullablesSetToNull, 'tableId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tableId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tableId'] = $tableId;

        return $this;
    }

    /**
     * Gets tableName
     *
     * @return string|null
     */
    public function getTableName()
    {
        return $this->container['tableName'];
    }

    /**
     * Sets tableName
     *
     * @param string|null $tableName
     *
     * @return self
     */
    public function setTableName($tableName)
    {
        if (is_null($tableName)) {
            array_push($this->openAPINullablesSetToNull, 'tableName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tableName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tableName'] = $tableName;

        return $this;
    }

    /**
     * Gets dataTypeId
     *
     * @return int|null
     */
    public function getDataTypeId()
    {
        return $this->container['dataTypeId'];
    }

    /**
     * Sets dataTypeId
     *
     * @param int|null $dataTypeId
     *
     * @return self
     */
    public function setDataTypeId($dataTypeId)
    {
        if (is_null($dataTypeId)) {
            array_push($this->openAPINullablesSetToNull, 'dataTypeId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dataTypeId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dataTypeId'] = $dataTypeId;

        return $this;
    }

    /**
     * Gets dataType
     *
     * @return string|null
     */
    public function getDataType()
    {
        return $this->container['dataType'];
    }

    /**
     * Sets dataType
     *
     * @param string|null $dataType
     *
     * @return self
     */
    public function setDataType($dataType)
    {
        if (is_null($dataType)) {
            array_push($this->openAPINullablesSetToNull, 'dataType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dataType', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dataType'] = $dataType;

        return $this;
    }

    /**
     * Gets locationIndexId
     *
     * @return int|null
     */
    public function getLocationIndexId()
    {
        return $this->container['locationIndexId'];
    }

    /**
     * Sets locationIndexId
     *
     * @param int|null $locationIndexId
     *
     * @return self
     */
    public function setLocationIndexId($locationIndexId)
    {
        if (is_null($locationIndexId)) {
            array_push($this->openAPINullablesSetToNull, 'locationIndexId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('locationIndexId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['locationIndexId'] = $locationIndexId;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            array_push($this->openAPINullablesSetToNull, 'location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            array_push($this->openAPINullablesSetToNull, 'active');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('active', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets unique
     *
     * @return bool|null
     */
    public function getUnique()
    {
        return $this->container['unique'];
    }

    /**
     * Sets unique
     *
     * @param bool|null $unique
     *
     * @return self
     */
    public function setUnique($unique)
    {
        if (is_null($unique)) {
            array_push($this->openAPINullablesSetToNull, 'unique');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unique', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unique'] = $unique;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool|null
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool|null $required
     *
     * @return self
     */
    public function setRequired($required)
    {
        if (is_null($required)) {
            array_push($this->openAPINullablesSetToNull, 'required');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('required', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets inUse
     *
     * @return bool|null
     */
    public function getInUse()
    {
        return $this->container['inUse'];
    }

    /**
     * Sets inUse
     *
     * @param bool|null $inUse
     *
     * @return self
     */
    public function setInUse($inUse)
    {
        if (is_null($inUse)) {
            array_push($this->openAPINullablesSetToNull, 'inUse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inUse', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['inUse'] = $inUse;

        return $this;
    }

    /**
     * Gets usageNotUnique
     *
     * @return bool|null
     */
    public function getUsageNotUnique()
    {
        return $this->container['usageNotUnique'];
    }

    /**
     * Sets usageNotUnique
     *
     * @param bool|null $usageNotUnique
     *
     * @return self
     */
    public function setUsageNotUnique($usageNotUnique)
    {
        if (is_null($usageNotUnique)) {
            array_push($this->openAPINullablesSetToNull, 'usageNotUnique');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usageNotUnique', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['usageNotUnique'] = $usageNotUnique;

        return $this;
    }

    /**
     * Gets locationId
     *
     * @return int|null
     */
    public function getLocationId()
    {
        return $this->container['locationId'];
    }

    /**
     * Sets locationId
     *
     * @param int|null $locationId
     *
     * @return self
     */
    public function setLocationId($locationId)
    {
        if (is_null($locationId)) {
            array_push($this->openAPINullablesSetToNull, 'locationId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('locationId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['locationId'] = $locationId;

        return $this;
    }

    /**
     * Gets subLocationId
     *
     * @return int|null
     */
    public function getSubLocationId()
    {
        return $this->container['subLocationId'];
    }

    /**
     * Sets subLocationId
     *
     * @param int|null $subLocationId
     *
     * @return self
     */
    public function setSubLocationId($subLocationId)
    {
        if (is_null($subLocationId)) {
            array_push($this->openAPINullablesSetToNull, 'subLocationId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subLocationId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subLocationId'] = $subLocationId;

        return $this;
    }

    /**
     * Gets subLocation
     *
     * @return string|null
     */
    public function getSubLocation()
    {
        return $this->container['subLocation'];
    }

    /**
     * Sets subLocation
     *
     * @param string|null $subLocation
     *
     * @return self
     */
    public function setSubLocation($subLocation)
    {
        if (is_null($subLocation)) {
            array_push($this->openAPINullablesSetToNull, 'subLocation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subLocation', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subLocation'] = $subLocation;

        return $this;
    }

    /**
     * Gets useAbbreviation
     *
     * @return bool|null
     */
    public function getUseAbbreviation()
    {
        return $this->container['useAbbreviation'];
    }

    /**
     * Sets useAbbreviation
     *
     * @param bool|null $useAbbreviation
     *
     * @return self
     */
    public function setUseAbbreviation($useAbbreviation)
    {
        if (is_null($useAbbreviation)) {
            array_push($this->openAPINullablesSetToNull, 'useAbbreviation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('useAbbreviation', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['useAbbreviation'] = $useAbbreviation;

        return $this;
    }

    /**
     * Gets vendorId
     *
     * @return int|null
     */
    public function getVendorId()
    {
        return $this->container['vendorId'];
    }

    /**
     * Sets vendorId
     *
     * @param int|null $vendorId
     *
     * @return self
     */
    public function setVendorId($vendorId)
    {
        if (is_null($vendorId)) {
            array_push($this->openAPINullablesSetToNull, 'vendorId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vendorId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vendorId'] = $vendorId;

        return $this;
    }

    /**
     * Gets table
     *
     * @return \SKY\School\Model\UserDefinedTable|null
     */
    public function getTable()
    {
        return $this->container['table'];
    }

    /**
     * Sets table
     *
     * @param \SKY\School\Model\UserDefinedTable|null $table table
     *
     * @return self
     */
    public function setTable($table)
    {
        if (is_null($table)) {
            throw new \InvalidArgumentException('non-nullable table cannot be null');
        }
        $this->container['table'] = $table;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
