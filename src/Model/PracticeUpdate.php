<?php
/**
 * PracticeUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * PracticeUpdate Class Doc Comment
 *
 * @category Class
 * @description
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PracticeUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PracticeUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'send_notification' => 'bool',
        'title' => 'string',
        'practice_start_date' => '\DateTime',
        'practice_end_date' => '\DateTime',
        'location_id' => 'int',
        'room_id' => 'int',
        'transportation_id' => 'int',
        'dismissal_time' => '\DateTime',
        'departure_time' => '\DateTime',
        'pickup_time' => '\DateTime',
        'practice_note' => 'string',
        'skip_validation' => 'bool',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'send_notification' => null,
        'title' => null,
        'practice_start_date' => 'date-time',
        'practice_end_date' => 'date-time',
        'location_id' => 'int32',
        'room_id' => 'int32',
        'transportation_id' => 'int32',
        'dismissal_time' => 'date-time',
        'departure_time' => 'date-time',
        'pickup_time' => 'date-time',
        'practice_note' => null,
        'skip_validation' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'send_notification' => true,
        'title' => true,
        'practice_start_date' => false,
        'practice_end_date' => true,
        'location_id' => true,
        'room_id' => true,
        'transportation_id' => true,
        'dismissal_time' => true,
        'departure_time' => true,
        'pickup_time' => true,
        'practice_note' => true,
        'skip_validation' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'send_notification' => 'send_notification',
        'title' => 'title',
        'practice_start_date' => 'practice_start_date',
        'practice_end_date' => 'practice_end_date',
        'location_id' => 'location_id',
        'room_id' => 'room_id',
        'transportation_id' => 'transportation_id',
        'dismissal_time' => 'dismissal_time',
        'departure_time' => 'departure_time',
        'pickup_time' => 'pickup_time',
        'practice_note' => 'practice_note',
        'skip_validation' => 'skip_validation',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'send_notification' => 'setSendNotification',
        'title' => 'setTitle',
        'practice_start_date' => 'setPracticeStartDate',
        'practice_end_date' => 'setPracticeEndDate',
        'location_id' => 'setLocationId',
        'room_id' => 'setRoomId',
        'transportation_id' => 'setTransportationId',
        'dismissal_time' => 'setDismissalTime',
        'departure_time' => 'setDepartureTime',
        'pickup_time' => 'setPickupTime',
        'practice_note' => 'setPracticeNote',
        'skip_validation' => 'setSkipValidation',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'send_notification' => 'getSendNotification',
        'title' => 'getTitle',
        'practice_start_date' => 'getPracticeStartDate',
        'practice_end_date' => 'getPracticeEndDate',
        'location_id' => 'getLocationId',
        'room_id' => 'getRoomId',
        'transportation_id' => 'getTransportationId',
        'dismissal_time' => 'getDismissalTime',
        'departure_time' => 'getDepartureTime',
        'pickup_time' => 'getPickupTime',
        'practice_note' => 'getPracticeNote',
        'skip_validation' => 'getSkipValidation',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('send_notification', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('practice_start_date', $data ?? [], null);
        $this->setIfExists('practice_end_date', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('room_id', $data ?? [], null);
        $this->setIfExists('transportation_id', $data ?? [], null);
        $this->setIfExists('dismissal_time', $data ?? [], null);
        $this->setIfExists('departure_time', $data ?? [], null);
        $this->setIfExists('pickup_time', $data ?? [], null);
        $this->setIfExists('practice_note', $data ?? [], null);
        $this->setIfExists('skip_validation', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['practice_start_date'] === null) {
            $invalidProperties[] = "'practice_start_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the practice
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets send_notification
     *
     * @return bool|null
     */
    public function getSendNotification()
    {
        return $this->container['send_notification'];
    }

    /**
     * Sets send_notification
     *
     * @param bool|null $send_notification Toggle to true to send a notification of this event
     *
     * @return self
     */
    public function setSendNotification($send_notification)
    {
        if (is_null($send_notification)) {
            array_push($this->openAPINullablesSetToNull, 'send_notification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('send_notification', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['send_notification'] = $send_notification;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title of the practice
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets practice_start_date
     *
     * @return \DateTime
     */
    public function getPracticeStartDate()
    {
        return $this->container['practice_start_date'];
    }

    /**
     * Sets practice_start_date
     *
     * @param \DateTime $practice_start_date Date and time for practice to start <br />  Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
     *
     * @return self
     */
    public function setPracticeStartDate($practice_start_date)
    {
        if (is_null($practice_start_date)) {
            throw new \InvalidArgumentException('non-nullable practice_start_date cannot be null');
        }
        $this->container['practice_start_date'] = $practice_start_date;

        return $this;
    }

    /**
     * Gets practice_end_date
     *
     * @return \DateTime|null
     */
    public function getPracticeEndDate()
    {
        return $this->container['practice_end_date'];
    }

    /**
     * Sets practice_end_date
     *
     * @param \DateTime|null $practice_end_date Date and time for practice to end <br />  Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
     *
     * @return self
     */
    public function setPracticeEndDate($practice_end_date)
    {
        if (is_null($practice_end_date)) {
            array_push($this->openAPINullablesSetToNull, 'practice_end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('practice_end_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['practice_end_date'] = $practice_end_date;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int|null
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int|null $location_id ID of the location of the practice
     *
     * @return self
     */
    public function setLocationId($location_id)
    {
        if (is_null($location_id)) {
            array_push($this->openAPINullablesSetToNull, 'location_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets room_id
     *
     * @return int|null
     */
    public function getRoomId()
    {
        return $this->container['room_id'];
    }

    /**
     * Sets room_id
     *
     * @param int|null $room_id ID of the venue of the practice
     *
     * @return self
     */
    public function setRoomId($room_id)
    {
        if (is_null($room_id)) {
            array_push($this->openAPINullablesSetToNull, 'room_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('room_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['room_id'] = $room_id;

        return $this;
    }

    /**
     * Gets transportation_id
     *
     * @return int|null
     */
    public function getTransportationId()
    {
        return $this->container['transportation_id'];
    }

    /**
     * Sets transportation_id
     *
     * @param int|null $transportation_id ID of the transportation method for the practice
     *
     * @return self
     */
    public function setTransportationId($transportation_id)
    {
        if (is_null($transportation_id)) {
            array_push($this->openAPINullablesSetToNull, 'transportation_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transportation_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transportation_id'] = $transportation_id;

        return $this;
    }

    /**
     * Gets dismissal_time
     *
     * @return \DateTime|null
     */
    public function getDismissalTime()
    {
        return $this->container['dismissal_time'];
    }

    /**
     * Sets dismissal_time
     *
     * @param \DateTime|null $dismissal_time Time that participants should be dismissed <br />  Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
     *
     * @return self
     */
    public function setDismissalTime($dismissal_time)
    {
        if (is_null($dismissal_time)) {
            array_push($this->openAPINullablesSetToNull, 'dismissal_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dismissal_time', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dismissal_time'] = $dismissal_time;

        return $this;
    }

    /**
     * Gets departure_time
     *
     * @return \DateTime|null
     */
    public function getDepartureTime()
    {
        return $this->container['departure_time'];
    }

    /**
     * Sets departure_time
     *
     * @param \DateTime|null $departure_time Time that team will depart for practice <br />  Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
     *
     * @return self
     */
    public function setDepartureTime($departure_time)
    {
        if (is_null($departure_time)) {
            array_push($this->openAPINullablesSetToNull, 'departure_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('departure_time', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['departure_time'] = $departure_time;

        return $this;
    }

    /**
     * Gets pickup_time
     *
     * @return \DateTime|null
     */
    public function getPickupTime()
    {
        return $this->container['pickup_time'];
    }

    /**
     * Sets pickup_time
     *
     * @param \DateTime|null $pickup_time Time that participants should be picked up <br />  Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
     *
     * @return self
     */
    public function setPickupTime($pickup_time)
    {
        if (is_null($pickup_time)) {
            array_push($this->openAPINullablesSetToNull, 'pickup_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pickup_time', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pickup_time'] = $pickup_time;

        return $this;
    }

    /**
     * Gets practice_note
     *
     * @return string|null
     */
    public function getPracticeNote()
    {
        return $this->container['practice_note'];
    }

    /**
     * Sets practice_note
     *
     * @param string|null $practice_note Free form notes about this practice
     *
     * @return self
     */
    public function setPracticeNote($practice_note)
    {
        if (is_null($practice_note)) {
            array_push($this->openAPINullablesSetToNull, 'practice_note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('practice_note', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['practice_note'] = $practice_note;

        return $this;
    }

    /**
     * Gets skip_validation
     *
     * @return bool|null
     */
    public function getSkipValidation()
    {
        return $this->container['skip_validation'];
    }

    /**
     * Sets skip_validation
     *
     * @param bool|null $skip_validation Set to true to skip validation of this event
     *
     * @return self
     */
    public function setSkipValidation($skip_validation)
    {
        if (is_null($skip_validation)) {
            array_push($this->openAPINullablesSetToNull, 'skip_validation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('skip_validation', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['skip_validation'] = $skip_validation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
