<?php
/**
 * UserAdd
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * UserAdd Class Doc Comment
 *
 * @category Class
 * @description UserAdd Model
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserAdd implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserAdd';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'affiliation' => 'string',
        'birth_place' => 'string',
        'boarding_or_day' => 'string',
        'cc_email' => 'string',
        'citizenship' => 'string',
        'custom_field_eight' => 'string',
        'custom_field_five' => 'string',
        'custom_field_four' => 'string',
        'custom_field_nine' => 'string',
        'custom_field_one' => 'string',
        'custom_field_seven' => 'string',
        'custom_field_six' => 'string',
        'custom_field_ten' => 'string',
        'custom_field_three' => 'string',
        'custom_field_two' => 'string',
        'deceased' => 'bool',
        'deceased_date' => '\DateTime',
        'dob' => '\DateTime',
        'email' => 'string',
        'email_active' => 'bool',
        'ethnicity' => 'string',
        'first_name' => 'string',
        'gender' => 'string',
        'greeting' => 'string',
        'home_languages' => '\SKY\School\Model\HomeLanguageAdd[]',
        'host_id' => 'string',
        'international' => 'string',
        'is_abroad' => 'bool',
        'is_international' => 'bool',
        'is_latino_hispanic' => 'bool',
        'latino_hispanic' => 'string',
        'is_responsible_signer' => 'bool',
        'in_state' => '\SKY\School\Model\UserInState',
        'last_name' => 'string',
        'living_status' => 'string',
        'locker' => '\SKY\School\Model\UserLocker',
        'lost' => 'bool',
        'maiden_name' => 'string',
        'mailbox' => '\SKY\School\Model\UserMailbox',
        'middle_name' => 'string',
        'passport' => '\SKY\School\Model\UserPassport',
        'primary_language' => 'string',
        'preferred_name' => 'string',
        'prefix' => 'string',
        'pronouns' => 'string',
        'races' => '\SKY\School\Model\UserAddRace[]',
        'religion' => 'string',
        'school_program' => 'string',
        'state_id' => 'string',
        'student_id' => 'string',
        'suffix' => 'string',
        'visa' => '\SKY\School\Model\UserVisaAdd',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'affiliation' => null,
        'birth_place' => null,
        'boarding_or_day' => null,
        'cc_email' => null,
        'citizenship' => null,
        'custom_field_eight' => null,
        'custom_field_five' => null,
        'custom_field_four' => null,
        'custom_field_nine' => null,
        'custom_field_one' => null,
        'custom_field_seven' => null,
        'custom_field_six' => null,
        'custom_field_ten' => null,
        'custom_field_three' => null,
        'custom_field_two' => null,
        'deceased' => null,
        'deceased_date' => 'date-time',
        'dob' => 'date-time',
        'email' => null,
        'email_active' => null,
        'ethnicity' => null,
        'first_name' => null,
        'gender' => null,
        'greeting' => null,
        'home_languages' => null,
        'host_id' => null,
        'international' => null,
        'is_abroad' => null,
        'is_international' => null,
        'is_latino_hispanic' => null,
        'latino_hispanic' => null,
        'is_responsible_signer' => null,
        'in_state' => null,
        'last_name' => null,
        'living_status' => null,
        'locker' => null,
        'lost' => null,
        'maiden_name' => null,
        'mailbox' => null,
        'middle_name' => null,
        'passport' => null,
        'primary_language' => null,
        'preferred_name' => null,
        'prefix' => null,
        'pronouns' => null,
        'races' => null,
        'religion' => null,
        'school_program' => null,
        'state_id' => null,
        'student_id' => null,
        'suffix' => null,
        'visa' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'affiliation' => true,
        'birth_place' => true,
        'boarding_or_day' => true,
        'cc_email' => true,
        'citizenship' => true,
        'custom_field_eight' => true,
        'custom_field_five' => true,
        'custom_field_four' => true,
        'custom_field_nine' => true,
        'custom_field_one' => true,
        'custom_field_seven' => true,
        'custom_field_six' => true,
        'custom_field_ten' => true,
        'custom_field_three' => true,
        'custom_field_two' => true,
        'deceased' => false,
        'deceased_date' => true,
        'dob' => false,
        'email' => true,
        'email_active' => false,
        'ethnicity' => true,
        'first_name' => true,
        'gender' => true,
        'greeting' => true,
        'home_languages' => true,
        'host_id' => true,
        'international' => true,
        'is_abroad' => true,
        'is_international' => true,
        'is_latino_hispanic' => true,
        'latino_hispanic' => true,
        'is_responsible_signer' => false,
        'in_state' => false,
        'last_name' => true,
        'living_status' => true,
        'locker' => false,
        'lost' => false,
        'maiden_name' => true,
        'mailbox' => false,
        'middle_name' => true,
        'passport' => false,
        'primary_language' => true,
        'preferred_name' => true,
        'prefix' => true,
        'pronouns' => true,
        'races' => true,
        'religion' => true,
        'school_program' => true,
        'state_id' => true,
        'student_id' => true,
        'suffix' => true,
        'visa' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'affiliation' => 'affiliation',
        'birth_place' => 'birth_place',
        'boarding_or_day' => 'boarding_or_day',
        'cc_email' => 'cc_email',
        'citizenship' => 'citizenship',
        'custom_field_eight' => 'custom_field_eight',
        'custom_field_five' => 'custom_field_five',
        'custom_field_four' => 'custom_field_four',
        'custom_field_nine' => 'custom_field_nine',
        'custom_field_one' => 'custom_field_one',
        'custom_field_seven' => 'custom_field_seven',
        'custom_field_six' => 'custom_field_six',
        'custom_field_ten' => 'custom_field_ten',
        'custom_field_three' => 'custom_field_three',
        'custom_field_two' => 'custom_field_two',
        'deceased' => 'deceased',
        'deceased_date' => 'deceased_date',
        'dob' => 'dob',
        'email' => 'email',
        'email_active' => 'email_active',
        'ethnicity' => 'ethnicity',
        'first_name' => 'first_name',
        'gender' => 'gender',
        'greeting' => 'greeting',
        'home_languages' => 'home_languages',
        'host_id' => 'host_id',
        'international' => 'international',
        'is_abroad' => 'is_abroad',
        'is_international' => 'is_international',
        'is_latino_hispanic' => 'is_latino_hispanic',
        'latino_hispanic' => 'latino_hispanic',
        'is_responsible_signer' => 'is_responsible_signer',
        'in_state' => 'in_state',
        'last_name' => 'last_name',
        'living_status' => 'living_status',
        'locker' => 'locker',
        'lost' => 'lost',
        'maiden_name' => 'maiden_name',
        'mailbox' => 'mailbox',
        'middle_name' => 'middle_name',
        'passport' => 'passport',
        'primary_language' => 'primary_language',
        'preferred_name' => 'preferred_name',
        'prefix' => 'prefix',
        'pronouns' => 'pronouns',
        'races' => 'races',
        'religion' => 'religion',
        'school_program' => 'school_program',
        'state_id' => 'state_id',
        'student_id' => 'student_id',
        'suffix' => 'suffix',
        'visa' => 'visa',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'affiliation' => 'setAffiliation',
        'birth_place' => 'setBirthPlace',
        'boarding_or_day' => 'setBoardingOrDay',
        'cc_email' => 'setCcEmail',
        'citizenship' => 'setCitizenship',
        'custom_field_eight' => 'setCustomFieldEight',
        'custom_field_five' => 'setCustomFieldFive',
        'custom_field_four' => 'setCustomFieldFour',
        'custom_field_nine' => 'setCustomFieldNine',
        'custom_field_one' => 'setCustomFieldOne',
        'custom_field_seven' => 'setCustomFieldSeven',
        'custom_field_six' => 'setCustomFieldSix',
        'custom_field_ten' => 'setCustomFieldTen',
        'custom_field_three' => 'setCustomFieldThree',
        'custom_field_two' => 'setCustomFieldTwo',
        'deceased' => 'setDeceased',
        'deceased_date' => 'setDeceasedDate',
        'dob' => 'setDob',
        'email' => 'setEmail',
        'email_active' => 'setEmailActive',
        'ethnicity' => 'setEthnicity',
        'first_name' => 'setFirstName',
        'gender' => 'setGender',
        'greeting' => 'setGreeting',
        'home_languages' => 'setHomeLanguages',
        'host_id' => 'setHostId',
        'international' => 'setInternational',
        'is_abroad' => 'setIsAbroad',
        'is_international' => 'setIsInternational',
        'is_latino_hispanic' => 'setIsLatinoHispanic',
        'latino_hispanic' => 'setLatinoHispanic',
        'is_responsible_signer' => 'setIsResponsibleSigner',
        'in_state' => 'setInState',
        'last_name' => 'setLastName',
        'living_status' => 'setLivingStatus',
        'locker' => 'setLocker',
        'lost' => 'setLost',
        'maiden_name' => 'setMaidenName',
        'mailbox' => 'setMailbox',
        'middle_name' => 'setMiddleName',
        'passport' => 'setPassport',
        'primary_language' => 'setPrimaryLanguage',
        'preferred_name' => 'setPreferredName',
        'prefix' => 'setPrefix',
        'pronouns' => 'setPronouns',
        'races' => 'setRaces',
        'religion' => 'setReligion',
        'school_program' => 'setSchoolProgram',
        'state_id' => 'setStateId',
        'student_id' => 'setStudentId',
        'suffix' => 'setSuffix',
        'visa' => 'setVisa',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'affiliation' => 'getAffiliation',
        'birth_place' => 'getBirthPlace',
        'boarding_or_day' => 'getBoardingOrDay',
        'cc_email' => 'getCcEmail',
        'citizenship' => 'getCitizenship',
        'custom_field_eight' => 'getCustomFieldEight',
        'custom_field_five' => 'getCustomFieldFive',
        'custom_field_four' => 'getCustomFieldFour',
        'custom_field_nine' => 'getCustomFieldNine',
        'custom_field_one' => 'getCustomFieldOne',
        'custom_field_seven' => 'getCustomFieldSeven',
        'custom_field_six' => 'getCustomFieldSix',
        'custom_field_ten' => 'getCustomFieldTen',
        'custom_field_three' => 'getCustomFieldThree',
        'custom_field_two' => 'getCustomFieldTwo',
        'deceased' => 'getDeceased',
        'deceased_date' => 'getDeceasedDate',
        'dob' => 'getDob',
        'email' => 'getEmail',
        'email_active' => 'getEmailActive',
        'ethnicity' => 'getEthnicity',
        'first_name' => 'getFirstName',
        'gender' => 'getGender',
        'greeting' => 'getGreeting',
        'home_languages' => 'getHomeLanguages',
        'host_id' => 'getHostId',
        'international' => 'getInternational',
        'is_abroad' => 'getIsAbroad',
        'is_international' => 'getIsInternational',
        'is_latino_hispanic' => 'getIsLatinoHispanic',
        'latino_hispanic' => 'getLatinoHispanic',
        'is_responsible_signer' => 'getIsResponsibleSigner',
        'in_state' => 'getInState',
        'last_name' => 'getLastName',
        'living_status' => 'getLivingStatus',
        'locker' => 'getLocker',
        'lost' => 'getLost',
        'maiden_name' => 'getMaidenName',
        'mailbox' => 'getMailbox',
        'middle_name' => 'getMiddleName',
        'passport' => 'getPassport',
        'primary_language' => 'getPrimaryLanguage',
        'preferred_name' => 'getPreferredName',
        'prefix' => 'getPrefix',
        'pronouns' => 'getPronouns',
        'races' => 'getRaces',
        'religion' => 'getReligion',
        'school_program' => 'getSchoolProgram',
        'state_id' => 'getStateId',
        'student_id' => 'getStudentId',
        'suffix' => 'getSuffix',
        'visa' => 'getVisa',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('affiliation', $data ?? [], null);
        $this->setIfExists('birth_place', $data ?? [], null);
        $this->setIfExists('boarding_or_day', $data ?? [], null);
        $this->setIfExists('cc_email', $data ?? [], null);
        $this->setIfExists('citizenship', $data ?? [], null);
        $this->setIfExists('custom_field_eight', $data ?? [], null);
        $this->setIfExists('custom_field_five', $data ?? [], null);
        $this->setIfExists('custom_field_four', $data ?? [], null);
        $this->setIfExists('custom_field_nine', $data ?? [], null);
        $this->setIfExists('custom_field_one', $data ?? [], null);
        $this->setIfExists('custom_field_seven', $data ?? [], null);
        $this->setIfExists('custom_field_six', $data ?? [], null);
        $this->setIfExists('custom_field_ten', $data ?? [], null);
        $this->setIfExists('custom_field_three', $data ?? [], null);
        $this->setIfExists('custom_field_two', $data ?? [], null);
        $this->setIfExists('deceased', $data ?? [], null);
        $this->setIfExists('deceased_date', $data ?? [], null);
        $this->setIfExists('dob', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('email_active', $data ?? [], null);
        $this->setIfExists('ethnicity', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('greeting', $data ?? [], null);
        $this->setIfExists('home_languages', $data ?? [], null);
        $this->setIfExists('host_id', $data ?? [], null);
        $this->setIfExists('international', $data ?? [], null);
        $this->setIfExists('is_abroad', $data ?? [], null);
        $this->setIfExists('is_international', $data ?? [], null);
        $this->setIfExists('is_latino_hispanic', $data ?? [], null);
        $this->setIfExists('latino_hispanic', $data ?? [], null);
        $this->setIfExists('is_responsible_signer', $data ?? [], null);
        $this->setIfExists('in_state', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('living_status', $data ?? [], null);
        $this->setIfExists('locker', $data ?? [], null);
        $this->setIfExists('lost', $data ?? [], null);
        $this->setIfExists('maiden_name', $data ?? [], null);
        $this->setIfExists('mailbox', $data ?? [], null);
        $this->setIfExists('middle_name', $data ?? [], null);
        $this->setIfExists('passport', $data ?? [], null);
        $this->setIfExists('primary_language', $data ?? [], null);
        $this->setIfExists('preferred_name', $data ?? [], null);
        $this->setIfExists('prefix', $data ?? [], null);
        $this->setIfExists('pronouns', $data ?? [], null);
        $this->setIfExists('races', $data ?? [], null);
        $this->setIfExists('religion', $data ?? [], null);
        $this->setIfExists('school_program', $data ?? [], null);
        $this->setIfExists('state_id', $data ?? [], null);
        $this->setIfExists('student_id', $data ?? [], null);
        $this->setIfExists('suffix', $data ?? [], null);
        $this->setIfExists('visa', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets affiliation
     *
     * @return string|null
     */
    public function getAffiliation()
    {
        return $this->container['affiliation'];
    }

    /**
     * Sets affiliation
     *
     * @param string|null $affiliation The affiliation of a user
     *
     * @return self
     */
    public function setAffiliation($affiliation)
    {
        if (is_null($affiliation)) {
            array_push($this->openAPINullablesSetToNull, 'affiliation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('affiliation', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['affiliation'] = $affiliation;

        return $this;
    }

    /**
     * Gets birth_place
     *
     * @return string|null
     */
    public function getBirthPlace()
    {
        return $this->container['birth_place'];
    }

    /**
     * Sets birth_place
     *
     * @param string|null $birth_place The birthplace of the user
     *
     * @return self
     */
    public function setBirthPlace($birth_place)
    {
        if (is_null($birth_place)) {
            array_push($this->openAPINullablesSetToNull, 'birth_place');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birth_place', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['birth_place'] = $birth_place;

        return $this;
    }

    /**
     * Gets boarding_or_day
     *
     * @return string|null
     */
    public function getBoardingOrDay()
    {
        return $this->container['boarding_or_day'];
    }

    /**
     * Sets boarding_or_day
     *
     * @param string|null $boarding_or_day The boarding or day status. Accepted values: boarding, day, \"B\" and \"D\"
     *
     * @return self
     */
    public function setBoardingOrDay($boarding_or_day)
    {
        if (is_null($boarding_or_day)) {
            array_push($this->openAPINullablesSetToNull, 'boarding_or_day');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('boarding_or_day', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['boarding_or_day'] = $boarding_or_day;

        return $this;
    }

    /**
     * Gets cc_email
     *
     * @return string|null
     */
    public function getCcEmail()
    {
        return $this->container['cc_email'];
    }

    /**
     * Sets cc_email
     *
     * @param string|null $cc_email The cc email address of a user
     *
     * @return self
     */
    public function setCcEmail($cc_email)
    {
        if (is_null($cc_email)) {
            array_push($this->openAPINullablesSetToNull, 'cc_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cc_email', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cc_email'] = $cc_email;

        return $this;
    }

    /**
     * Gets citizenship
     *
     * @return string|null
     */
    public function getCitizenship()
    {
        return $this->container['citizenship'];
    }

    /**
     * Sets citizenship
     *
     * @param string|null $citizenship The descriptor or ID of the citizenship. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values.
     *
     * @return self
     */
    public function setCitizenship($citizenship)
    {
        if (is_null($citizenship)) {
            array_push($this->openAPINullablesSetToNull, 'citizenship');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('citizenship', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['citizenship'] = $citizenship;

        return $this;
    }

    /**
     * Gets custom_field_eight
     *
     * @return string|null
     */
    public function getCustomFieldEight()
    {
        return $this->container['custom_field_eight'];
    }

    /**
     * Sets custom_field_eight
     *
     * @param string|null $custom_field_eight A custom field on the user profile (eight of ten)
     *
     * @return self
     */
    public function setCustomFieldEight($custom_field_eight)
    {
        if (is_null($custom_field_eight)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_eight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_eight', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_eight'] = $custom_field_eight;

        return $this;
    }

    /**
     * Gets custom_field_five
     *
     * @return string|null
     */
    public function getCustomFieldFive()
    {
        return $this->container['custom_field_five'];
    }

    /**
     * Sets custom_field_five
     *
     * @param string|null $custom_field_five A custom field on the user profile (five of ten)
     *
     * @return self
     */
    public function setCustomFieldFive($custom_field_five)
    {
        if (is_null($custom_field_five)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_five');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_five', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_five'] = $custom_field_five;

        return $this;
    }

    /**
     * Gets custom_field_four
     *
     * @return string|null
     */
    public function getCustomFieldFour()
    {
        return $this->container['custom_field_four'];
    }

    /**
     * Sets custom_field_four
     *
     * @param string|null $custom_field_four A custom field on the user profile (four of ten)
     *
     * @return self
     */
    public function setCustomFieldFour($custom_field_four)
    {
        if (is_null($custom_field_four)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_four');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_four', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_four'] = $custom_field_four;

        return $this;
    }

    /**
     * Gets custom_field_nine
     *
     * @return string|null
     */
    public function getCustomFieldNine()
    {
        return $this->container['custom_field_nine'];
    }

    /**
     * Sets custom_field_nine
     *
     * @param string|null $custom_field_nine A custom field on the user profile (nine of ten)
     *
     * @return self
     */
    public function setCustomFieldNine($custom_field_nine)
    {
        if (is_null($custom_field_nine)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_nine');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_nine', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_nine'] = $custom_field_nine;

        return $this;
    }

    /**
     * Gets custom_field_one
     *
     * @return string|null
     */
    public function getCustomFieldOne()
    {
        return $this->container['custom_field_one'];
    }

    /**
     * Sets custom_field_one
     *
     * @param string|null $custom_field_one A custom field on the user profile (one of ten)
     *
     * @return self
     */
    public function setCustomFieldOne($custom_field_one)
    {
        if (is_null($custom_field_one)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_one');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_one', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_one'] = $custom_field_one;

        return $this;
    }

    /**
     * Gets custom_field_seven
     *
     * @return string|null
     */
    public function getCustomFieldSeven()
    {
        return $this->container['custom_field_seven'];
    }

    /**
     * Sets custom_field_seven
     *
     * @param string|null $custom_field_seven A custom field on the user profile (seven of ten)
     *
     * @return self
     */
    public function setCustomFieldSeven($custom_field_seven)
    {
        if (is_null($custom_field_seven)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_seven');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_seven', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_seven'] = $custom_field_seven;

        return $this;
    }

    /**
     * Gets custom_field_six
     *
     * @return string|null
     */
    public function getCustomFieldSix()
    {
        return $this->container['custom_field_six'];
    }

    /**
     * Sets custom_field_six
     *
     * @param string|null $custom_field_six A custom field on the user profile (six of ten)
     *
     * @return self
     */
    public function setCustomFieldSix($custom_field_six)
    {
        if (is_null($custom_field_six)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_six');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_six', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_six'] = $custom_field_six;

        return $this;
    }

    /**
     * Gets custom_field_ten
     *
     * @return string|null
     */
    public function getCustomFieldTen()
    {
        return $this->container['custom_field_ten'];
    }

    /**
     * Sets custom_field_ten
     *
     * @param string|null $custom_field_ten A custom field on the user profile (ten of ten)
     *
     * @return self
     */
    public function setCustomFieldTen($custom_field_ten)
    {
        if (is_null($custom_field_ten)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_ten');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_ten', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_ten'] = $custom_field_ten;

        return $this;
    }

    /**
     * Gets custom_field_three
     *
     * @return string|null
     */
    public function getCustomFieldThree()
    {
        return $this->container['custom_field_three'];
    }

    /**
     * Sets custom_field_three
     *
     * @param string|null $custom_field_three A custom field on the user profile (three of ten)
     *
     * @return self
     */
    public function setCustomFieldThree($custom_field_three)
    {
        if (is_null($custom_field_three)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_three');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_three', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_three'] = $custom_field_three;

        return $this;
    }

    /**
     * Gets custom_field_two
     *
     * @return string|null
     */
    public function getCustomFieldTwo()
    {
        return $this->container['custom_field_two'];
    }

    /**
     * Sets custom_field_two
     *
     * @param string|null $custom_field_two A custom field on the user profile (two of ten)
     *
     * @return self
     */
    public function setCustomFieldTwo($custom_field_two)
    {
        if (is_null($custom_field_two)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_two');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_two', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_two'] = $custom_field_two;

        return $this;
    }

    /**
     * Gets deceased
     *
     * @return bool|null
     */
    public function getDeceased()
    {
        return $this->container['deceased'];
    }

    /**
     * Sets deceased
     *
     * @param bool|null $deceased Set to true if the user is deceased. Allowed value: true, false. Defaults to false.
     *
     * @return self
     */
    public function setDeceased($deceased)
    {
        if (is_null($deceased)) {
            throw new \InvalidArgumentException('non-nullable deceased cannot be null');
        }
        $this->container['deceased'] = $deceased;

        return $this;
    }

    /**
     * Gets deceased_date
     *
     * @return \DateTime|null
     */
    public function getDeceasedDate()
    {
        return $this->container['deceased_date'];
    }

    /**
     * Sets deceased_date
     *
     * @param \DateTime|null $deceased_date The deceased date of the user. Use ISO-8601 date format: 2022-04-08.
     *
     * @return self
     */
    public function setDeceasedDate($deceased_date)
    {
        if (is_null($deceased_date)) {
            array_push($this->openAPINullablesSetToNull, 'deceased_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deceased_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deceased_date'] = $deceased_date;

        return $this;
    }

    /**
     * Gets dob
     *
     * @return \DateTime|null
     */
    public function getDob()
    {
        return $this->container['dob'];
    }

    /**
     * Sets dob
     *
     * @param \DateTime|null $dob The birthday of a user
     *
     * @return self
     */
    public function setDob($dob)
    {
        if (is_null($dob)) {
            throw new \InvalidArgumentException('non-nullable dob cannot be null');
        }
        $this->container['dob'] = $dob;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address of a user
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets email_active
     *
     * @return bool|null
     */
    public function getEmailActive()
    {
        return $this->container['email_active'];
    }

    /**
     * Sets email_active
     *
     * @param bool|null $email_active Set to true if email is usable. Allowed value: true, false. Defaults to true.
     *
     * @return self
     */
    public function setEmailActive($email_active)
    {
        if (is_null($email_active)) {
            throw new \InvalidArgumentException('non-nullable email_active cannot be null');
        }
        $this->container['email_active'] = $email_active;

        return $this;
    }

    /**
     * Gets ethnicity
     *
     * @return string|null
     */
    public function getEthnicity()
    {
        return $this->container['ethnicity'];
    }

    /**
     * Sets ethnicity
     *
     * @param string|null $ethnicity The descriptor or ID of the ethnicity. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values.
     *
     * @return self
     */
    public function setEthnicity($ethnicity)
    {
        if (is_null($ethnicity)) {
            array_push($this->openAPINullablesSetToNull, 'ethnicity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ethnicity', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ethnicity'] = $ethnicity;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name The first name of a user
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            array_push($this->openAPINullablesSetToNull, 'first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender The gender of a user
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            array_push($this->openAPINullablesSetToNull, 'gender');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets greeting
     *
     * @return string|null
     */
    public function getGreeting()
    {
        return $this->container['greeting'];
    }

    /**
     * Sets greeting
     *
     * @param string|null $greeting The greeting of a user
     *
     * @return self
     */
    public function setGreeting($greeting)
    {
        if (is_null($greeting)) {
            array_push($this->openAPINullablesSetToNull, 'greeting');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('greeting', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['greeting'] = $greeting;

        return $this;
    }

    /**
     * Gets home_languages
     *
     * @return \SKY\School\Model\HomeLanguageAdd[]|null
     */
    public function getHomeLanguages()
    {
        return $this->container['home_languages'];
    }

    /**
     * Sets home_languages
     *
     * @param \SKY\School\Model\HomeLanguageAdd[]|null $home_languages A list of languages the user speaks at home. Each entry is the description or ID of the language. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values.
     *
     * @return self
     */
    public function setHomeLanguages($home_languages)
    {
        if (is_null($home_languages)) {
            array_push($this->openAPINullablesSetToNull, 'home_languages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('home_languages', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['home_languages'] = $home_languages;

        return $this;
    }

    /**
     * Gets host_id
     *
     * @return string|null
     */
    public function getHostId()
    {
        return $this->container['host_id'];
    }

    /**
     * Sets host_id
     *
     * @param string|null $host_id The HostId of a user
     *
     * @return self
     */
    public function setHostId($host_id)
    {
        if (is_null($host_id)) {
            array_push($this->openAPINullablesSetToNull, 'host_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('host_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['host_id'] = $host_id;

        return $this;
    }

    /**
     * Gets international
     *
     * @return string|null
     */
    public function getInternational()
    {
        return $this->container['international'];
    }

    /**
     * Sets international
     *
     * @param string|null $international Whether the user is an international user. This will return: Yes, No, or No answer.
     *
     * @return self
     */
    public function setInternational($international)
    {
        if (is_null($international)) {
            array_push($this->openAPINullablesSetToNull, 'international');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('international', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['international'] = $international;

        return $this;
    }

    /**
     * Gets is_abroad
     *
     * @return bool|null
     */
    public function getIsAbroad()
    {
        return $this->container['is_abroad'];
    }

    /**
     * Sets is_abroad
     *
     * @param bool|null $is_abroad Set to true if user is currently abroad. Allowed value: true, false. Defaults to false.
     *
     * @return self
     */
    public function setIsAbroad($is_abroad)
    {
        if (is_null($is_abroad)) {
            array_push($this->openAPINullablesSetToNull, 'is_abroad');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_abroad', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_abroad'] = $is_abroad;

        return $this;
    }

    /**
     * Gets is_international
     *
     * @return bool|null
     */
    public function getIsInternational()
    {
        return $this->container['is_international'];
    }

    /**
     * Sets is_international
     *
     * @param bool|null $is_international Set to true if user is international (will be deprecated 02/15/2024)
     *
     * @return self
     */
    public function setIsInternational($is_international)
    {
        if (is_null($is_international)) {
            array_push($this->openAPINullablesSetToNull, 'is_international');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_international', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_international'] = $is_international;

        return $this;
    }

    /**
     * Gets is_latino_hispanic
     *
     * @return bool|null
     */
    public function getIsLatinoHispanic()
    {
        return $this->container['is_latino_hispanic'];
    }

    /**
     * Sets is_latino_hispanic
     *
     * @param bool|null $is_latino_hispanic Set to true if  user is latino or hispanic (will be deprecated 02/15/2024).
     *
     * @return self
     */
    public function setIsLatinoHispanic($is_latino_hispanic)
    {
        if (is_null($is_latino_hispanic)) {
            array_push($this->openAPINullablesSetToNull, 'is_latino_hispanic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_latino_hispanic', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_latino_hispanic'] = $is_latino_hispanic;

        return $this;
    }

    /**
     * Gets latino_hispanic
     *
     * @return string|null
     */
    public function getLatinoHispanic()
    {
        return $this->container['latino_hispanic'];
    }

    /**
     * Sets latino_hispanic
     *
     * @param string|null $latino_hispanic Whether the user is Latino/Hispanic. Allowed values: Yes, No, or No answer.
     *
     * @return self
     */
    public function setLatinoHispanic($latino_hispanic)
    {
        if (is_null($latino_hispanic)) {
            array_push($this->openAPINullablesSetToNull, 'latino_hispanic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('latino_hispanic', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['latino_hispanic'] = $latino_hispanic;

        return $this;
    }

    /**
     * Gets is_responsible_signer
     *
     * @return bool|null
     */
    public function getIsResponsibleSigner()
    {
        return $this->container['is_responsible_signer'];
    }

    /**
     * Sets is_responsible_signer
     *
     * @param bool|null $is_responsible_signer Set to true if user is a responsible signer. Allowed value: true, false. Defaults to false.
     *
     * @return self
     */
    public function setIsResponsibleSigner($is_responsible_signer)
    {
        if (is_null($is_responsible_signer)) {
            throw new \InvalidArgumentException('non-nullable is_responsible_signer cannot be null');
        }
        $this->container['is_responsible_signer'] = $is_responsible_signer;

        return $this;
    }

    /**
     * Gets in_state
     *
     * @return \SKY\School\Model\UserInState|null
     */
    public function getInState()
    {
        return $this->container['in_state'];
    }

    /**
     * Sets in_state
     *
     * @param \SKY\School\Model\UserInState|null $in_state in_state
     *
     * @return self
     */
    public function setInState($in_state)
    {
        if (is_null($in_state)) {
            throw new \InvalidArgumentException('non-nullable in_state cannot be null');
        }
        $this->container['in_state'] = $in_state;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name The last name of a user
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            array_push($this->openAPINullablesSetToNull, 'last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets living_status
     *
     * @return string|null
     */
    public function getLivingStatus()
    {
        return $this->container['living_status'];
    }

    /**
     * Sets living_status
     *
     * @param string|null $living_status The living status of a user. Valid values are Single, Married, Separated, Divorced, Widowed, Partner.
     *
     * @return self
     */
    public function setLivingStatus($living_status)
    {
        if (is_null($living_status)) {
            array_push($this->openAPINullablesSetToNull, 'living_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('living_status', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['living_status'] = $living_status;

        return $this;
    }

    /**
     * Gets locker
     *
     * @return \SKY\School\Model\UserLocker|null
     */
    public function getLocker()
    {
        return $this->container['locker'];
    }

    /**
     * Sets locker
     *
     * @param \SKY\School\Model\UserLocker|null $locker locker
     *
     * @return self
     */
    public function setLocker($locker)
    {
        if (is_null($locker)) {
            throw new \InvalidArgumentException('non-nullable locker cannot be null');
        }
        $this->container['locker'] = $locker;

        return $this;
    }

    /**
     * Gets lost
     *
     * @return bool|null
     */
    public function getLost()
    {
        return $this->container['lost'];
    }

    /**
     * Sets lost
     *
     * @param bool|null $lost Set to true if user is set as lost
     *
     * @return self
     */
    public function setLost($lost)
    {
        if (is_null($lost)) {
            throw new \InvalidArgumentException('non-nullable lost cannot be null');
        }
        $this->container['lost'] = $lost;

        return $this;
    }

    /**
     * Gets maiden_name
     *
     * @return string|null
     */
    public function getMaidenName()
    {
        return $this->container['maiden_name'];
    }

    /**
     * Sets maiden_name
     *
     * @param string|null $maiden_name The maiden name of a user
     *
     * @return self
     */
    public function setMaidenName($maiden_name)
    {
        if (is_null($maiden_name)) {
            array_push($this->openAPINullablesSetToNull, 'maiden_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maiden_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maiden_name'] = $maiden_name;

        return $this;
    }

    /**
     * Gets mailbox
     *
     * @return \SKY\School\Model\UserMailbox|null
     */
    public function getMailbox()
    {
        return $this->container['mailbox'];
    }

    /**
     * Sets mailbox
     *
     * @param \SKY\School\Model\UserMailbox|null $mailbox mailbox
     *
     * @return self
     */
    public function setMailbox($mailbox)
    {
        if (is_null($mailbox)) {
            throw new \InvalidArgumentException('non-nullable mailbox cannot be null');
        }
        $this->container['mailbox'] = $mailbox;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name The middle name of a user
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        if (is_null($middle_name)) {
            array_push($this->openAPINullablesSetToNull, 'middle_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('middle_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets passport
     *
     * @return \SKY\School\Model\UserPassport|null
     */
    public function getPassport()
    {
        return $this->container['passport'];
    }

    /**
     * Sets passport
     *
     * @param \SKY\School\Model\UserPassport|null $passport passport
     *
     * @return self
     */
    public function setPassport($passport)
    {
        if (is_null($passport)) {
            throw new \InvalidArgumentException('non-nullable passport cannot be null');
        }
        $this->container['passport'] = $passport;

        return $this;
    }

    /**
     * Gets primary_language
     *
     * @return string|null
     */
    public function getPrimaryLanguage()
    {
        return $this->container['primary_language'];
    }

    /**
     * Sets primary_language
     *
     * @param string|null $primary_language The descriptor or ID of the language. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values.
     *
     * @return self
     */
    public function setPrimaryLanguage($primary_language)
    {
        if (is_null($primary_language)) {
            array_push($this->openAPINullablesSetToNull, 'primary_language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primary_language', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primary_language'] = $primary_language;

        return $this;
    }

    /**
     * Gets preferred_name
     *
     * @return string|null
     */
    public function getPreferredName()
    {
        return $this->container['preferred_name'];
    }

    /**
     * Sets preferred_name
     *
     * @param string|null $preferred_name The preferred name of the user
     *
     * @return self
     */
    public function setPreferredName($preferred_name)
    {
        if (is_null($preferred_name)) {
            array_push($this->openAPINullablesSetToNull, 'preferred_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferred_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferred_name'] = $preferred_name;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix The prefix of a user
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (is_null($prefix)) {
            array_push($this->openAPINullablesSetToNull, 'prefix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prefix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets pronouns
     *
     * @return string|null
     */
    public function getPronouns()
    {
        return $this->container['pronouns'];
    }

    /**
     * Sets pronouns
     *
     * @param string|null $pronouns The descriptor or ID of the pronouns. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values.
     *
     * @return self
     */
    public function setPronouns($pronouns)
    {
        if (is_null($pronouns)) {
            array_push($this->openAPINullablesSetToNull, 'pronouns');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pronouns', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pronouns'] = $pronouns;

        return $this;
    }

    /**
     * Gets races
     *
     * @return \SKY\School\Model\UserAddRace[]|null
     */
    public function getRaces()
    {
        return $this->container['races'];
    }

    /**
     * Sets races
     *
     * @param \SKY\School\Model\UserAddRace[]|null $races A list of races. Each entry is the description or ID of the race. Descriptions are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values.
     *
     * @return self
     */
    public function setRaces($races)
    {
        if (is_null($races)) {
            array_push($this->openAPINullablesSetToNull, 'races');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('races', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['races'] = $races;

        return $this;
    }

    /**
     * Gets religion
     *
     * @return string|null
     */
    public function getReligion()
    {
        return $this->container['religion'];
    }

    /**
     * Sets religion
     *
     * @param string|null $religion The descriptor or ID of the religion. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values.
     *
     * @return self
     */
    public function setReligion($religion)
    {
        if (is_null($religion)) {
            array_push($this->openAPINullablesSetToNull, 'religion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('religion', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['religion'] = $religion;

        return $this;
    }

    /**
     * Gets school_program
     *
     * @return string|null
     */
    public function getSchoolProgram()
    {
        return $this->container['school_program'];
    }

    /**
     * Sets school_program
     *
     * @param string|null $school_program The descriptor or ID of the school program. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values.
     *
     * @return self
     */
    public function setSchoolProgram($school_program)
    {
        if (is_null($school_program)) {
            array_push($this->openAPINullablesSetToNull, 'school_program');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('school_program', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['school_program'] = $school_program;

        return $this;
    }

    /**
     * Gets state_id
     *
     * @return string|null
     */
    public function getStateId()
    {
        return $this->container['state_id'];
    }

    /**
     * Sets state_id
     *
     * @param string|null $state_id The state assigned ID of the user
     *
     * @return self
     */
    public function setStateId($state_id)
    {
        if (is_null($state_id)) {
            array_push($this->openAPINullablesSetToNull, 'state_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['state_id'] = $state_id;

        return $this;
    }

    /**
     * Gets student_id
     *
     * @return string|null
     */
    public function getStudentId()
    {
        return $this->container['student_id'];
    }

    /**
     * Sets student_id
     *
     * @param string|null $student_id The school assigned ID of the user
     *
     * @return self
     */
    public function setStudentId($student_id)
    {
        if (is_null($student_id)) {
            array_push($this->openAPINullablesSetToNull, 'student_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('student_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['student_id'] = $student_id;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string|null
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string|null $suffix The suffix of a user
     *
     * @return self
     */
    public function setSuffix($suffix)
    {
        if (is_null($suffix)) {
            array_push($this->openAPINullablesSetToNull, 'suffix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suffix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets visa
     *
     * @return \SKY\School\Model\UserVisaAdd|null
     */
    public function getVisa()
    {
        return $this->container['visa'];
    }

    /**
     * Sets visa
     *
     * @param \SKY\School\Model\UserVisaAdd|null $visa visa
     *
     * @return self
     */
    public function setVisa($visa)
    {
        if (is_null($visa)) {
            throw new \InvalidArgumentException('non-nullable visa cannot be null');
        }
        $this->container['visa'] = $visa;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
