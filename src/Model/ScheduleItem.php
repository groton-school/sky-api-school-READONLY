<?php
/**
 * ScheduleItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * ScheduleItem Class Doc Comment
 *
 * @category Class
 * @description
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ScheduleItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ScheduleItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'alumni' => 'bool',
        'cancelled' => 'bool',
        'created' => '\DateTime',
        'departure_location' => 'string',
        'departure_time' => 'string',
        'description' => 'string',
        'directions' => 'string',
        'dismissal_time' => 'string',
        'end_time' => 'string',
        'end_time_span' => 'string',
        'title' => 'string',
        'faculty' => 'bool',
        'game_date' => '\DateTime',
        'game_time' => '\SKY\School\Model\GameTime',
        'highlight_id' => 'int',
        'home_or_away' => 'string',
        'invitational' => 'bool',
        'last_modified' => '\DateTime',
        'league' => 'bool',
        'location' => 'string',
        'map_url' => 'string',
        'meet' => 'int',
        'opponents' => '\SKY\School\Model\Opponent[]',
        'pickup_time' => 'string',
        'playoff' => 'bool',
        'practice' => 'bool',
        'previous_schedule_id' => 'int',
        'published' => 'bool',
        'require_dinner' => 'bool',
        'require_lunch' => 'bool',
        'rescheduled' => 'bool',
        'rescheduled_date' => '\DateTime',
        'rescheduled_note' => 'string',
        'room_id' => 'int',
        'schedule_type' => 'int',
        'scrimmage' => 'bool',
        'section_id' => 'int',
        'show_details' => 'bool',
        'show_directions' => 'bool',
        'show_versus' => 'bool',
        'start_time' => 'string',
        'team_id' => 'int',
        'time' => 'string',
        'tournament' => 'bool',
        'uniform_color' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'alumni' => null,
        'cancelled' => null,
        'created' => 'date-time',
        'departure_location' => null,
        'departure_time' => null,
        'description' => null,
        'directions' => null,
        'dismissal_time' => null,
        'end_time' => null,
        'end_time_span' => null,
        'title' => null,
        'faculty' => null,
        'game_date' => 'date-time',
        'game_time' => null,
        'highlight_id' => 'int32',
        'home_or_away' => null,
        'invitational' => null,
        'last_modified' => 'date-time',
        'league' => null,
        'location' => null,
        'map_url' => null,
        'meet' => 'int32',
        'opponents' => null,
        'pickup_time' => null,
        'playoff' => null,
        'practice' => null,
        'previous_schedule_id' => 'int32',
        'published' => null,
        'require_dinner' => null,
        'require_lunch' => null,
        'rescheduled' => null,
        'rescheduled_date' => 'date-time',
        'rescheduled_note' => null,
        'room_id' => 'int32',
        'schedule_type' => 'int32',
        'scrimmage' => null,
        'section_id' => 'int32',
        'show_details' => null,
        'show_directions' => null,
        'show_versus' => null,
        'start_time' => null,
        'team_id' => 'int32',
        'time' => null,
        'tournament' => null,
        'uniform_color' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'alumni' => true,
        'cancelled' => true,
        'created' => true,
        'departure_location' => true,
        'departure_time' => true,
        'description' => true,
        'directions' => true,
        'dismissal_time' => true,
        'end_time' => true,
        'end_time_span' => true,
        'title' => true,
        'faculty' => true,
        'game_date' => true,
        'game_time' => false,
        'highlight_id' => true,
        'home_or_away' => true,
        'invitational' => true,
        'last_modified' => true,
        'league' => true,
        'location' => true,
        'map_url' => true,
        'meet' => true,
        'opponents' => true,
        'pickup_time' => true,
        'playoff' => true,
        'practice' => true,
        'previous_schedule_id' => true,
        'published' => true,
        'require_dinner' => true,
        'require_lunch' => true,
        'rescheduled' => true,
        'rescheduled_date' => true,
        'rescheduled_note' => true,
        'room_id' => true,
        'schedule_type' => true,
        'scrimmage' => true,
        'section_id' => true,
        'show_details' => true,
        'show_directions' => true,
        'show_versus' => true,
        'start_time' => true,
        'team_id' => false,
        'time' => true,
        'tournament' => true,
        'uniform_color' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'alumni' => 'alumni',
        'cancelled' => 'cancelled',
        'created' => 'created',
        'departure_location' => 'departure_location',
        'departure_time' => 'departure_time',
        'description' => 'description',
        'directions' => 'directions',
        'dismissal_time' => 'dismissal_time',
        'end_time' => 'end_time',
        'end_time_span' => 'end_time_span',
        'title' => 'title',
        'faculty' => 'faculty',
        'game_date' => 'game_date',
        'game_time' => 'game_time',
        'highlight_id' => 'highlight_id',
        'home_or_away' => 'home_or_away',
        'invitational' => 'invitational',
        'last_modified' => 'last_modified',
        'league' => 'league',
        'location' => 'location',
        'map_url' => 'map_url',
        'meet' => 'meet',
        'opponents' => 'opponents',
        'pickup_time' => 'pickup_time',
        'playoff' => 'playoff',
        'practice' => 'practice',
        'previous_schedule_id' => 'previous_schedule_id',
        'published' => 'published',
        'require_dinner' => 'require_dinner',
        'require_lunch' => 'require_lunch',
        'rescheduled' => 'rescheduled',
        'rescheduled_date' => 'rescheduled_date',
        'rescheduled_note' => 'rescheduled_note',
        'room_id' => 'room_id',
        'schedule_type' => 'schedule_type',
        'scrimmage' => 'scrimmage',
        'section_id' => 'section_id',
        'show_details' => 'show_details',
        'show_directions' => 'show_directions',
        'show_versus' => 'show_versus',
        'start_time' => 'start_time',
        'team_id' => 'team_id',
        'time' => 'time',
        'tournament' => 'tournament',
        'uniform_color' => 'uniform_color',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'alumni' => 'setAlumni',
        'cancelled' => 'setCancelled',
        'created' => 'setCreated',
        'departure_location' => 'setDepartureLocation',
        'departure_time' => 'setDepartureTime',
        'description' => 'setDescription',
        'directions' => 'setDirections',
        'dismissal_time' => 'setDismissalTime',
        'end_time' => 'setEndTime',
        'end_time_span' => 'setEndTimeSpan',
        'title' => 'setTitle',
        'faculty' => 'setFaculty',
        'game_date' => 'setGameDate',
        'game_time' => 'setGameTime',
        'highlight_id' => 'setHighlightId',
        'home_or_away' => 'setHomeOrAway',
        'invitational' => 'setInvitational',
        'last_modified' => 'setLastModified',
        'league' => 'setLeague',
        'location' => 'setLocation',
        'map_url' => 'setMapUrl',
        'meet' => 'setMeet',
        'opponents' => 'setOpponents',
        'pickup_time' => 'setPickupTime',
        'playoff' => 'setPlayoff',
        'practice' => 'setPractice',
        'previous_schedule_id' => 'setPreviousScheduleId',
        'published' => 'setPublished',
        'require_dinner' => 'setRequireDinner',
        'require_lunch' => 'setRequireLunch',
        'rescheduled' => 'setRescheduled',
        'rescheduled_date' => 'setRescheduledDate',
        'rescheduled_note' => 'setRescheduledNote',
        'room_id' => 'setRoomId',
        'schedule_type' => 'setScheduleType',
        'scrimmage' => 'setScrimmage',
        'section_id' => 'setSectionId',
        'show_details' => 'setShowDetails',
        'show_directions' => 'setShowDirections',
        'show_versus' => 'setShowVersus',
        'start_time' => 'setStartTime',
        'team_id' => 'setTeamId',
        'time' => 'setTime',
        'tournament' => 'setTournament',
        'uniform_color' => 'setUniformColor',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'alumni' => 'getAlumni',
        'cancelled' => 'getCancelled',
        'created' => 'getCreated',
        'departure_location' => 'getDepartureLocation',
        'departure_time' => 'getDepartureTime',
        'description' => 'getDescription',
        'directions' => 'getDirections',
        'dismissal_time' => 'getDismissalTime',
        'end_time' => 'getEndTime',
        'end_time_span' => 'getEndTimeSpan',
        'title' => 'getTitle',
        'faculty' => 'getFaculty',
        'game_date' => 'getGameDate',
        'game_time' => 'getGameTime',
        'highlight_id' => 'getHighlightId',
        'home_or_away' => 'getHomeOrAway',
        'invitational' => 'getInvitational',
        'last_modified' => 'getLastModified',
        'league' => 'getLeague',
        'location' => 'getLocation',
        'map_url' => 'getMapUrl',
        'meet' => 'getMeet',
        'opponents' => 'getOpponents',
        'pickup_time' => 'getPickupTime',
        'playoff' => 'getPlayoff',
        'practice' => 'getPractice',
        'previous_schedule_id' => 'getPreviousScheduleId',
        'published' => 'getPublished',
        'require_dinner' => 'getRequireDinner',
        'require_lunch' => 'getRequireLunch',
        'rescheduled' => 'getRescheduled',
        'rescheduled_date' => 'getRescheduledDate',
        'rescheduled_note' => 'getRescheduledNote',
        'room_id' => 'getRoomId',
        'schedule_type' => 'getScheduleType',
        'scrimmage' => 'getScrimmage',
        'section_id' => 'getSectionId',
        'show_details' => 'getShowDetails',
        'show_directions' => 'getShowDirections',
        'show_versus' => 'getShowVersus',
        'start_time' => 'getStartTime',
        'team_id' => 'getTeamId',
        'time' => 'getTime',
        'tournament' => 'getTournament',
        'uniform_color' => 'getUniformColor',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('alumni', $data ?? [], null);
        $this->setIfExists('cancelled', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('departure_location', $data ?? [], null);
        $this->setIfExists('departure_time', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('directions', $data ?? [], null);
        $this->setIfExists('dismissal_time', $data ?? [], null);
        $this->setIfExists('end_time', $data ?? [], null);
        $this->setIfExists('end_time_span', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('faculty', $data ?? [], null);
        $this->setIfExists('game_date', $data ?? [], null);
        $this->setIfExists('game_time', $data ?? [], null);
        $this->setIfExists('highlight_id', $data ?? [], null);
        $this->setIfExists('home_or_away', $data ?? [], null);
        $this->setIfExists('invitational', $data ?? [], null);
        $this->setIfExists('last_modified', $data ?? [], null);
        $this->setIfExists('league', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('map_url', $data ?? [], null);
        $this->setIfExists('meet', $data ?? [], null);
        $this->setIfExists('opponents', $data ?? [], null);
        $this->setIfExists('pickup_time', $data ?? [], null);
        $this->setIfExists('playoff', $data ?? [], null);
        $this->setIfExists('practice', $data ?? [], null);
        $this->setIfExists('previous_schedule_id', $data ?? [], null);
        $this->setIfExists('published', $data ?? [], null);
        $this->setIfExists('require_dinner', $data ?? [], null);
        $this->setIfExists('require_lunch', $data ?? [], null);
        $this->setIfExists('rescheduled', $data ?? [], null);
        $this->setIfExists('rescheduled_date', $data ?? [], null);
        $this->setIfExists('rescheduled_note', $data ?? [], null);
        $this->setIfExists('room_id', $data ?? [], null);
        $this->setIfExists('schedule_type', $data ?? [], null);
        $this->setIfExists('scrimmage', $data ?? [], null);
        $this->setIfExists('section_id', $data ?? [], null);
        $this->setIfExists('show_details', $data ?? [], null);
        $this->setIfExists('show_directions', $data ?? [], null);
        $this->setIfExists('show_versus', $data ?? [], null);
        $this->setIfExists('start_time', $data ?? [], null);
        $this->setIfExists('team_id', $data ?? [], null);
        $this->setIfExists('time', $data ?? [], null);
        $this->setIfExists('tournament', $data ?? [], null);
        $this->setIfExists('uniform_color', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id ID of the schedule item
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets alumni
     *
     * @return bool|null
     */
    public function getAlumni()
    {
        return $this->container['alumni'];
    }

    /**
     * Sets alumni
     *
     * @param bool|null $alumni Returns True if the game or practice is marked as alumni
     *
     * @return self
     */
    public function setAlumni($alumni)
    {
        if (is_null($alumni)) {
            array_push($this->openAPINullablesSetToNull, 'alumni');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('alumni', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['alumni'] = $alumni;

        return $this;
    }

    /**
     * Gets cancelled
     *
     * @return bool|null
     */
    public function getCancelled()
    {
        return $this->container['cancelled'];
    }

    /**
     * Sets cancelled
     *
     * @param bool|null $cancelled Returns True if the game or practice was cancelled
     *
     * @return self
     */
    public function setCancelled($cancelled)
    {
        if (is_null($cancelled)) {
            array_push($this->openAPINullablesSetToNull, 'cancelled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cancelled', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cancelled'] = $cancelled;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created Created date of the game or practice. Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            array_push($this->openAPINullablesSetToNull, 'created');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets departure_location
     *
     * @return string|null
     */
    public function getDepartureLocation()
    {
        return $this->container['departure_location'];
    }

    /**
     * Sets departure_location
     *
     * @param string|null $departure_location Departure location of the game or practice
     *
     * @return self
     */
    public function setDepartureLocation($departure_location)
    {
        if (is_null($departure_location)) {
            array_push($this->openAPINullablesSetToNull, 'departure_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('departure_location', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['departure_location'] = $departure_location;

        return $this;
    }

    /**
     * Gets departure_time
     *
     * @return string|null
     */
    public function getDepartureTime()
    {
        return $this->container['departure_time'];
    }

    /**
     * Sets departure_time
     *
     * @param string|null $departure_time The time of departure before the game or practice
     *
     * @return self
     */
    public function setDepartureTime($departure_time)
    {
        if (is_null($departure_time)) {
            array_push($this->openAPINullablesSetToNull, 'departure_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('departure_time', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['departure_time'] = $departure_time;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The game or practice description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets directions
     *
     * @return string|null
     */
    public function getDirections()
    {
        return $this->container['directions'];
    }

    /**
     * Sets directions
     *
     * @param string|null $directions Directions to the game or practice
     *
     * @return self
     */
    public function setDirections($directions)
    {
        if (is_null($directions)) {
            array_push($this->openAPINullablesSetToNull, 'directions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('directions', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['directions'] = $directions;

        return $this;
    }

    /**
     * Gets dismissal_time
     *
     * @return string|null
     */
    public function getDismissalTime()
    {
        return $this->container['dismissal_time'];
    }

    /**
     * Sets dismissal_time
     *
     * @param string|null $dismissal_time The time of dismissal before the game or practice
     *
     * @return self
     */
    public function setDismissalTime($dismissal_time)
    {
        if (is_null($dismissal_time)) {
            array_push($this->openAPINullablesSetToNull, 'dismissal_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dismissal_time', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dismissal_time'] = $dismissal_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return string|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param string|null $end_time The time a game or practice ends
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        if (is_null($end_time)) {
            array_push($this->openAPINullablesSetToNull, 'end_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_time', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets end_time_span
     *
     * @return string|null
     */
    public function getEndTimeSpan()
    {
        return $this->container['end_time_span'];
    }

    /**
     * Sets end_time_span
     *
     * @param string|null $end_time_span The end time of the game or practice
     *
     * @return self
     */
    public function setEndTimeSpan($end_time_span)
    {
        if (is_null($end_time_span)) {
            array_push($this->openAPINullablesSetToNull, 'end_time_span');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_time_span', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_time_span'] = $end_time_span;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title of the game or practice
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets faculty
     *
     * @return bool|null
     */
    public function getFaculty()
    {
        return $this->container['faculty'];
    }

    /**
     * Sets faculty
     *
     * @param bool|null $faculty Returns True if the game or practice is marked as faculty
     *
     * @return self
     */
    public function setFaculty($faculty)
    {
        if (is_null($faculty)) {
            array_push($this->openAPINullablesSetToNull, 'faculty');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('faculty', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['faculty'] = $faculty;

        return $this;
    }

    /**
     * Gets game_date
     *
     * @return \DateTime|null
     */
    public function getGameDate()
    {
        return $this->container['game_date'];
    }

    /**
     * Sets game_date
     *
     * @param \DateTime|null $game_date Date of the game or practice. Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setGameDate($game_date)
    {
        if (is_null($game_date)) {
            array_push($this->openAPINullablesSetToNull, 'game_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('game_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['game_date'] = $game_date;

        return $this;
    }

    /**
     * Gets game_time
     *
     * @return \SKY\School\Model\GameTime|null
     */
    public function getGameTime()
    {
        return $this->container['game_time'];
    }

    /**
     * Sets game_time
     *
     * @param \SKY\School\Model\GameTime|null $game_time game_time
     *
     * @return self
     */
    public function setGameTime($game_time)
    {
        if (is_null($game_time)) {
            throw new \InvalidArgumentException('non-nullable game_time cannot be null');
        }
        $this->container['game_time'] = $game_time;

        return $this;
    }

    /**
     * Gets highlight_id
     *
     * @return int|null
     */
    public function getHighlightId()
    {
        return $this->container['highlight_id'];
    }

    /**
     * Sets highlight_id
     *
     * @param int|null $highlight_id The ID of the game highlight
     *
     * @return self
     */
    public function setHighlightId($highlight_id)
    {
        if (is_null($highlight_id)) {
            array_push($this->openAPINullablesSetToNull, 'highlight_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('highlight_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['highlight_id'] = $highlight_id;

        return $this;
    }

    /**
     * Gets home_or_away
     *
     * @return string|null
     */
    public function getHomeOrAway()
    {
        return $this->container['home_or_away'];
    }

    /**
     * Sets home_or_away
     *
     * @param string|null $home_or_away Indicates whether the game is a home game or an away game
     *
     * @return self
     */
    public function setHomeOrAway($home_or_away)
    {
        if (is_null($home_or_away)) {
            array_push($this->openAPINullablesSetToNull, 'home_or_away');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('home_or_away', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['home_or_away'] = $home_or_away;

        return $this;
    }

    /**
     * Gets invitational
     *
     * @return bool|null
     */
    public function getInvitational()
    {
        return $this->container['invitational'];
    }

    /**
     * Sets invitational
     *
     * @param bool|null $invitational Returns True if the game or practice is an invitational
     *
     * @return self
     */
    public function setInvitational($invitational)
    {
        if (is_null($invitational)) {
            array_push($this->openAPINullablesSetToNull, 'invitational');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invitational', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invitational'] = $invitational;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return \DateTime|null
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param \DateTime|null $last_modified Modified date of the game or practice. Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setLastModified($last_modified)
    {
        if (is_null($last_modified)) {
            array_push($this->openAPINullablesSetToNull, 'last_modified');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_modified', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets league
     *
     * @return bool|null
     */
    public function getLeague()
    {
        return $this->container['league'];
    }

    /**
     * Sets league
     *
     * @param bool|null $league Returns True if the game is a league event
     *
     * @return self
     */
    public function setLeague($league)
    {
        if (is_null($league)) {
            array_push($this->openAPINullablesSetToNull, 'league');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('league', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['league'] = $league;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location Location of the game or practice
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            array_push($this->openAPINullablesSetToNull, 'location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets map_url
     *
     * @return string|null
     */
    public function getMapUrl()
    {
        return $this->container['map_url'];
    }

    /**
     * Sets map_url
     *
     * @param string|null $map_url Directions url to the game or practice
     *
     * @return self
     */
    public function setMapUrl($map_url)
    {
        if (is_null($map_url)) {
            array_push($this->openAPINullablesSetToNull, 'map_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('map_url', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['map_url'] = $map_url;

        return $this;
    }

    /**
     * Gets meet
     *
     * @return int|null
     */
    public function getMeet()
    {
        return $this->container['meet'];
    }

    /**
     * Sets meet
     *
     * @param int|null $meet Returns 1 if the game is a meet, otherwise returns 0
     *
     * @return self
     */
    public function setMeet($meet)
    {
        if (is_null($meet)) {
            array_push($this->openAPINullablesSetToNull, 'meet');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('meet', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['meet'] = $meet;

        return $this;
    }

    /**
     * Gets opponents
     *
     * @return \SKY\School\Model\Opponent[]|null
     */
    public function getOpponents()
    {
        return $this->container['opponents'];
    }

    /**
     * Sets opponents
     *
     * @param \SKY\School\Model\Opponent[]|null $opponents Opponents for the gsame or practice
     *
     * @return self
     */
    public function setOpponents($opponents)
    {
        if (is_null($opponents)) {
            array_push($this->openAPINullablesSetToNull, 'opponents');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('opponents', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['opponents'] = $opponents;

        return $this;
    }

    /**
     * Gets pickup_time
     *
     * @return string|null
     */
    public function getPickupTime()
    {
        return $this->container['pickup_time'];
    }

    /**
     * Sets pickup_time
     *
     * @param string|null $pickup_time The pickup time after the game or practice
     *
     * @return self
     */
    public function setPickupTime($pickup_time)
    {
        if (is_null($pickup_time)) {
            array_push($this->openAPINullablesSetToNull, 'pickup_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pickup_time', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pickup_time'] = $pickup_time;

        return $this;
    }

    /**
     * Gets playoff
     *
     * @return bool|null
     */
    public function getPlayoff()
    {
        return $this->container['playoff'];
    }

    /**
     * Sets playoff
     *
     * @param bool|null $playoff Returns True if the game or practice is a playoff
     *
     * @return self
     */
    public function setPlayoff($playoff)
    {
        if (is_null($playoff)) {
            array_push($this->openAPINullablesSetToNull, 'playoff');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('playoff', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['playoff'] = $playoff;

        return $this;
    }

    /**
     * Gets practice
     *
     * @return bool|null
     */
    public function getPractice()
    {
        return $this->container['practice'];
    }

    /**
     * Sets practice
     *
     * @param bool|null $practice Returns True if the event is a practice
     *
     * @return self
     */
    public function setPractice($practice)
    {
        if (is_null($practice)) {
            array_push($this->openAPINullablesSetToNull, 'practice');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('practice', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['practice'] = $practice;

        return $this;
    }

    /**
     * Gets previous_schedule_id
     *
     * @return int|null
     */
    public function getPreviousScheduleId()
    {
        return $this->container['previous_schedule_id'];
    }

    /**
     * Sets previous_schedule_id
     *
     * @param int|null $previous_schedule_id The id of the game or practice where this event was previously scheduled
     *
     * @return self
     */
    public function setPreviousScheduleId($previous_schedule_id)
    {
        if (is_null($previous_schedule_id)) {
            array_push($this->openAPINullablesSetToNull, 'previous_schedule_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('previous_schedule_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['previous_schedule_id'] = $previous_schedule_id;

        return $this;
    }

    /**
     * Gets published
     *
     * @return bool|null
     */
    public function getPublished()
    {
        return $this->container['published'];
    }

    /**
     * Sets published
     *
     * @param bool|null $published Returns True if the game schedule is published
     *
     * @return self
     */
    public function setPublished($published)
    {
        if (is_null($published)) {
            array_push($this->openAPINullablesSetToNull, 'published');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('published', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['published'] = $published;

        return $this;
    }

    /**
     * Gets require_dinner
     *
     * @return bool|null
     */
    public function getRequireDinner()
    {
        return $this->container['require_dinner'];
    }

    /**
     * Sets require_dinner
     *
     * @param bool|null $require_dinner Returns True if the game or practice requires dinner
     *
     * @return self
     */
    public function setRequireDinner($require_dinner)
    {
        if (is_null($require_dinner)) {
            array_push($this->openAPINullablesSetToNull, 'require_dinner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('require_dinner', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['require_dinner'] = $require_dinner;

        return $this;
    }

    /**
     * Gets require_lunch
     *
     * @return bool|null
     */
    public function getRequireLunch()
    {
        return $this->container['require_lunch'];
    }

    /**
     * Sets require_lunch
     *
     * @param bool|null $require_lunch Returns True if the game or practice requires a lunch
     *
     * @return self
     */
    public function setRequireLunch($require_lunch)
    {
        if (is_null($require_lunch)) {
            array_push($this->openAPINullablesSetToNull, 'require_lunch');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('require_lunch', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['require_lunch'] = $require_lunch;

        return $this;
    }

    /**
     * Gets rescheduled
     *
     * @return bool|null
     */
    public function getRescheduled()
    {
        return $this->container['rescheduled'];
    }

    /**
     * Sets rescheduled
     *
     * @param bool|null $rescheduled Returns True if the game or practice was rescheduled
     *
     * @return self
     */
    public function setRescheduled($rescheduled)
    {
        if (is_null($rescheduled)) {
            array_push($this->openAPINullablesSetToNull, 'rescheduled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rescheduled', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rescheduled'] = $rescheduled;

        return $this;
    }

    /**
     * Gets rescheduled_date
     *
     * @return \DateTime|null
     */
    public function getRescheduledDate()
    {
        return $this->container['rescheduled_date'];
    }

    /**
     * Sets rescheduled_date
     *
     * @param \DateTime|null $rescheduled_date The date and time a game or practice has been rescheduled. Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setRescheduledDate($rescheduled_date)
    {
        if (is_null($rescheduled_date)) {
            array_push($this->openAPINullablesSetToNull, 'rescheduled_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rescheduled_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rescheduled_date'] = $rescheduled_date;

        return $this;
    }

    /**
     * Gets rescheduled_note
     *
     * @return string|null
     */
    public function getRescheduledNote()
    {
        return $this->container['rescheduled_note'];
    }

    /**
     * Sets rescheduled_note
     *
     * @param string|null $rescheduled_note The resaon a game or practice was rescheduled
     *
     * @return self
     */
    public function setRescheduledNote($rescheduled_note)
    {
        if (is_null($rescheduled_note)) {
            array_push($this->openAPINullablesSetToNull, 'rescheduled_note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rescheduled_note', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rescheduled_note'] = $rescheduled_note;

        return $this;
    }

    /**
     * Gets room_id
     *
     * @return int|null
     */
    public function getRoomId()
    {
        return $this->container['room_id'];
    }

    /**
     * Sets room_id
     *
     * @param int|null $room_id The ID of the room a game or practice is being held
     *
     * @return self
     */
    public function setRoomId($room_id)
    {
        if (is_null($room_id)) {
            array_push($this->openAPINullablesSetToNull, 'room_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('room_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['room_id'] = $room_id;

        return $this;
    }

    /**
     * Gets schedule_type
     *
     * @return int|null
     */
    public function getScheduleType()
    {
        return $this->container['schedule_type'];
    }

    /**
     * Sets schedule_type
     *
     * @param int|null $schedule_type The schedule type
     *
     * @return self
     */
    public function setScheduleType($schedule_type)
    {
        if (is_null($schedule_type)) {
            array_push($this->openAPINullablesSetToNull, 'schedule_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('schedule_type', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['schedule_type'] = $schedule_type;

        return $this;
    }

    /**
     * Gets scrimmage
     *
     * @return bool|null
     */
    public function getScrimmage()
    {
        return $this->container['scrimmage'];
    }

    /**
     * Sets scrimmage
     *
     * @param bool|null $scrimmage Returns True if the game or practice is a scrimmage
     *
     * @return self
     */
    public function setScrimmage($scrimmage)
    {
        if (is_null($scrimmage)) {
            array_push($this->openAPINullablesSetToNull, 'scrimmage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scrimmage', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scrimmage'] = $scrimmage;

        return $this;
    }

    /**
     * Gets section_id
     *
     * @return int|null
     */
    public function getSectionId()
    {
        return $this->container['section_id'];
    }

    /**
     * Sets section_id
     *
     * @param int|null $section_id The section ID
     *
     * @return self
     */
    public function setSectionId($section_id)
    {
        if (is_null($section_id)) {
            array_push($this->openAPINullablesSetToNull, 'section_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('section_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['section_id'] = $section_id;

        return $this;
    }

    /**
     * Gets show_details
     *
     * @return bool|null
     */
    public function getShowDetails()
    {
        return $this->container['show_details'];
    }

    /**
     * Sets show_details
     *
     * @param bool|null $show_details Returns True if details for a game or practice are avalible
     *
     * @return self
     */
    public function setShowDetails($show_details)
    {
        if (is_null($show_details)) {
            array_push($this->openAPINullablesSetToNull, 'show_details');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('show_details', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['show_details'] = $show_details;

        return $this;
    }

    /**
     * Gets show_directions
     *
     * @return bool|null
     */
    public function getShowDirections()
    {
        return $this->container['show_directions'];
    }

    /**
     * Sets show_directions
     *
     * @param bool|null $show_directions Returns true if the game or practice should display \"the directions on the school website
     *
     * @return self
     */
    public function setShowDirections($show_directions)
    {
        if (is_null($show_directions)) {
            array_push($this->openAPINullablesSetToNull, 'show_directions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('show_directions', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['show_directions'] = $show_directions;

        return $this;
    }

    /**
     * Gets show_versus
     *
     * @return bool|null
     */
    public function getShowVersus()
    {
        return $this->container['show_versus'];
    }

    /**
     * Sets show_versus
     *
     * @param bool|null $show_versus Returns true if the game or practice should display \"vs\" on the school website
     *
     * @return self
     */
    public function setShowVersus($show_versus)
    {
        if (is_null($show_versus)) {
            array_push($this->openAPINullablesSetToNull, 'show_versus');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('show_versus', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['show_versus'] = $show_versus;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return string|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string|null $start_time The start time of the game or practice
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        if (is_null($start_time)) {
            array_push($this->openAPINullablesSetToNull, 'start_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_time', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets team_id
     *
     * @return int|null
     */
    public function getTeamId()
    {
        return $this->container['team_id'];
    }

    /**
     * Sets team_id
     *
     * @param int|null $team_id ID of the team
     *
     * @return self
     */
    public function setTeamId($team_id)
    {
        if (is_null($team_id)) {
            throw new \InvalidArgumentException('non-nullable team_id cannot be null');
        }
        $this->container['team_id'] = $team_id;

        return $this;
    }

    /**
     * Gets time
     *
     * @return string|null
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param string|null $time Time of the game or practice
     *
     * @return self
     */
    public function setTime($time)
    {
        if (is_null($time)) {
            array_push($this->openAPINullablesSetToNull, 'time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets tournament
     *
     * @return bool|null
     */
    public function getTournament()
    {
        return $this->container['tournament'];
    }

    /**
     * Sets tournament
     *
     * @param bool|null $tournament Returns True if the game or practice is a tournament
     *
     * @return self
     */
    public function setTournament($tournament)
    {
        if (is_null($tournament)) {
            array_push($this->openAPINullablesSetToNull, 'tournament');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tournament', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tournament'] = $tournament;

        return $this;
    }

    /**
     * Gets uniform_color
     *
     * @return string|null
     */
    public function getUniformColor()
    {
        return $this->container['uniform_color'];
    }

    /**
     * Sets uniform_color
     *
     * @param string|null $uniform_color The color of the uniforms for the game or practice
     *
     * @return self
     */
    public function setUniformColor($uniform_color)
    {
        if (is_null($uniform_color)) {
            array_push($this->openAPINullablesSetToNull, 'uniform_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uniform_color', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uniform_color'] = $uniform_color;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
