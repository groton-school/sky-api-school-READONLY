<?php
/**
 * AttendanceGet
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * AttendanceGet Class Doc Comment
 *
 * @category Class
 * @description Attendance Model
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AttendanceGet implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AttendanceGet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'attendance_of_record' => 'bool',
        'attendance_type' => 'bool',
        'block_name' => 'string',
        'comment' => 'string',
        'date' => '\DateTime',
        'excuse_category_description' => 'string',
        'excuse_category_id' => 'int',
        'excuse_description' => 'string',
        'excuse_type_id' => 'int',
        'excused' => 'int',
        'grad_year' => 'string',
        'grade' => 'string',
        'grade_level_sort' => 'int',
        'group_name' => 'string',
        'photo_file_name' => 'string',
        'section' => 'string',
        'section_id' => 'int',
        'student_name' => 'string',
        'student_user_id' => 'int',
        'teacher_name' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'attendance_of_record' => null,
        'attendance_type' => null,
        'block_name' => null,
        'comment' => null,
        'date' => 'date-time',
        'excuse_category_description' => null,
        'excuse_category_id' => 'int32',
        'excuse_description' => null,
        'excuse_type_id' => 'int32',
        'excused' => 'int32',
        'grad_year' => null,
        'grade' => null,
        'grade_level_sort' => 'int32',
        'group_name' => null,
        'photo_file_name' => null,
        'section' => null,
        'section_id' => 'int32',
        'student_name' => null,
        'student_user_id' => 'int32',
        'teacher_name' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'attendance_of_record' => false,
        'attendance_type' => false,
        'block_name' => true,
        'comment' => true,
        'date' => true,
        'excuse_category_description' => true,
        'excuse_category_id' => false,
        'excuse_description' => true,
        'excuse_type_id' => false,
        'excused' => false,
        'grad_year' => true,
        'grade' => true,
        'grade_level_sort' => false,
        'group_name' => true,
        'photo_file_name' => true,
        'section' => true,
        'section_id' => false,
        'student_name' => true,
        'student_user_id' => false,
        'teacher_name' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'attendance_of_record' => 'attendance_of_record',
        'attendance_type' => 'attendance_type',
        'block_name' => 'block_name',
        'comment' => 'comment',
        'date' => 'date',
        'excuse_category_description' => 'excuse_category_description',
        'excuse_category_id' => 'excuse_category_id',
        'excuse_description' => 'excuse_description',
        'excuse_type_id' => 'excuse_type_id',
        'excused' => 'excused',
        'grad_year' => 'grad_year',
        'grade' => 'grade',
        'grade_level_sort' => 'grade_level_sort',
        'group_name' => 'group_name',
        'photo_file_name' => 'photo_file_name',
        'section' => 'section',
        'section_id' => 'section_id',
        'student_name' => 'student_name',
        'student_user_id' => 'student_user_id',
        'teacher_name' => 'teacher_name',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'attendance_of_record' => 'setAttendanceOfRecord',
        'attendance_type' => 'setAttendanceType',
        'block_name' => 'setBlockName',
        'comment' => 'setComment',
        'date' => 'setDate',
        'excuse_category_description' => 'setExcuseCategoryDescription',
        'excuse_category_id' => 'setExcuseCategoryId',
        'excuse_description' => 'setExcuseDescription',
        'excuse_type_id' => 'setExcuseTypeId',
        'excused' => 'setExcused',
        'grad_year' => 'setGradYear',
        'grade' => 'setGrade',
        'grade_level_sort' => 'setGradeLevelSort',
        'group_name' => 'setGroupName',
        'photo_file_name' => 'setPhotoFileName',
        'section' => 'setSection',
        'section_id' => 'setSectionId',
        'student_name' => 'setStudentName',
        'student_user_id' => 'setStudentUserId',
        'teacher_name' => 'setTeacherName',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'attendance_of_record' => 'getAttendanceOfRecord',
        'attendance_type' => 'getAttendanceType',
        'block_name' => 'getBlockName',
        'comment' => 'getComment',
        'date' => 'getDate',
        'excuse_category_description' => 'getExcuseCategoryDescription',
        'excuse_category_id' => 'getExcuseCategoryId',
        'excuse_description' => 'getExcuseDescription',
        'excuse_type_id' => 'getExcuseTypeId',
        'excused' => 'getExcused',
        'grad_year' => 'getGradYear',
        'grade' => 'getGrade',
        'grade_level_sort' => 'getGradeLevelSort',
        'group_name' => 'getGroupName',
        'photo_file_name' => 'getPhotoFileName',
        'section' => 'getSection',
        'section_id' => 'getSectionId',
        'student_name' => 'getStudentName',
        'student_user_id' => 'getStudentUserId',
        'teacher_name' => 'getTeacherName',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('attendance_of_record', $data ?? [], null);
        $this->setIfExists('attendance_type', $data ?? [], null);
        $this->setIfExists('block_name', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('excuse_category_description', $data ?? [], null);
        $this->setIfExists('excuse_category_id', $data ?? [], null);
        $this->setIfExists('excuse_description', $data ?? [], null);
        $this->setIfExists('excuse_type_id', $data ?? [], null);
        $this->setIfExists('excused', $data ?? [], null);
        $this->setIfExists('grad_year', $data ?? [], null);
        $this->setIfExists('grade', $data ?? [], null);
        $this->setIfExists('grade_level_sort', $data ?? [], null);
        $this->setIfExists('group_name', $data ?? [], null);
        $this->setIfExists('photo_file_name', $data ?? [], null);
        $this->setIfExists('section', $data ?? [], null);
        $this->setIfExists('section_id', $data ?? [], null);
        $this->setIfExists('student_name', $data ?? [], null);
        $this->setIfExists('student_user_id', $data ?? [], null);
        $this->setIfExists('teacher_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the attendance
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets attendance_of_record
     *
     * @return bool|null
     */
    public function getAttendanceOfRecord()
    {
        return $this->container['attendance_of_record'];
    }

    /**
     * Sets attendance_of_record
     *
     * @param bool|null $attendance_of_record Attendance of record
     *
     * @return self
     */
    public function setAttendanceOfRecord($attendance_of_record)
    {
        if (is_null($attendance_of_record)) {
            throw new \InvalidArgumentException('non-nullable attendance_of_record cannot be null');
        }
        $this->container['attendance_of_record'] = $attendance_of_record;

        return $this;
    }

    /**
     * Gets attendance_type
     *
     * @return bool|null
     */
    public function getAttendanceType()
    {
        return $this->container['attendance_type'];
    }

    /**
     * Sets attendance_type
     *
     * @param bool|null $attendance_type The type of the attendance
     *
     * @return self
     */
    public function setAttendanceType($attendance_type)
    {
        if (is_null($attendance_type)) {
            throw new \InvalidArgumentException('non-nullable attendance_type cannot be null');
        }
        $this->container['attendance_type'] = $attendance_type;

        return $this;
    }

    /**
     * Gets block_name
     *
     * @return string|null
     */
    public function getBlockName()
    {
        return $this->container['block_name'];
    }

    /**
     * Sets block_name
     *
     * @param string|null $block_name The name of the block
     *
     * @return self
     */
    public function setBlockName($block_name)
    {
        if (is_null($block_name)) {
            array_push($this->openAPINullablesSetToNull, 'block_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('block_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['block_name'] = $block_name;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Attendance record comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            array_push($this->openAPINullablesSetToNull, 'comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date The date of the attendance record. Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            array_push($this->openAPINullablesSetToNull, 'date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets excuse_category_description
     *
     * @return string|null
     */
    public function getExcuseCategoryDescription()
    {
        return $this->container['excuse_category_description'];
    }

    /**
     * Sets excuse_category_description
     *
     * @param string|null $excuse_category_description The category description of the excuse
     *
     * @return self
     */
    public function setExcuseCategoryDescription($excuse_category_description)
    {
        if (is_null($excuse_category_description)) {
            array_push($this->openAPINullablesSetToNull, 'excuse_category_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('excuse_category_description', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['excuse_category_description'] = $excuse_category_description;

        return $this;
    }

    /**
     * Gets excuse_category_id
     *
     * @return int|null
     */
    public function getExcuseCategoryId()
    {
        return $this->container['excuse_category_id'];
    }

    /**
     * Sets excuse_category_id
     *
     * @param int|null $excuse_category_id The category of the excuse
     *
     * @return self
     */
    public function setExcuseCategoryId($excuse_category_id)
    {
        if (is_null($excuse_category_id)) {
            throw new \InvalidArgumentException('non-nullable excuse_category_id cannot be null');
        }
        $this->container['excuse_category_id'] = $excuse_category_id;

        return $this;
    }

    /**
     * Gets excuse_description
     *
     * @return string|null
     */
    public function getExcuseDescription()
    {
        return $this->container['excuse_description'];
    }

    /**
     * Sets excuse_description
     *
     * @param string|null $excuse_description The description of the excuse
     *
     * @return self
     */
    public function setExcuseDescription($excuse_description)
    {
        if (is_null($excuse_description)) {
            array_push($this->openAPINullablesSetToNull, 'excuse_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('excuse_description', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['excuse_description'] = $excuse_description;

        return $this;
    }

    /**
     * Gets excuse_type_id
     *
     * @return int|null
     */
    public function getExcuseTypeId()
    {
        return $this->container['excuse_type_id'];
    }

    /**
     * Sets excuse_type_id
     *
     * @param int|null $excuse_type_id The type of the excuse
     *
     * @return self
     */
    public function setExcuseTypeId($excuse_type_id)
    {
        if (is_null($excuse_type_id)) {
            throw new \InvalidArgumentException('non-nullable excuse_type_id cannot be null');
        }
        $this->container['excuse_type_id'] = $excuse_type_id;

        return $this;
    }

    /**
     * Gets excused
     *
     * @return int|null
     */
    public function getExcused()
    {
        return $this->container['excused'];
    }

    /**
     * Sets excused
     *
     * @param int|null $excused Whether the absence was excused
     *
     * @return self
     */
    public function setExcused($excused)
    {
        if (is_null($excused)) {
            throw new \InvalidArgumentException('non-nullable excused cannot be null');
        }
        $this->container['excused'] = $excused;

        return $this;
    }

    /**
     * Gets grad_year
     *
     * @return string|null
     */
    public function getGradYear()
    {
        return $this->container['grad_year'];
    }

    /**
     * Sets grad_year
     *
     * @param string|null $grad_year The graduation year of the student
     *
     * @return self
     */
    public function setGradYear($grad_year)
    {
        if (is_null($grad_year)) {
            array_push($this->openAPINullablesSetToNull, 'grad_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grad_year', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grad_year'] = $grad_year;

        return $this;
    }

    /**
     * Gets grade
     *
     * @return string|null
     */
    public function getGrade()
    {
        return $this->container['grade'];
    }

    /**
     * Sets grade
     *
     * @param string|null $grade The grade of the student
     *
     * @return self
     */
    public function setGrade($grade)
    {
        if (is_null($grade)) {
            array_push($this->openAPINullablesSetToNull, 'grade');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grade', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grade'] = $grade;

        return $this;
    }

    /**
     * Gets grade_level_sort
     *
     * @return int|null
     */
    public function getGradeLevelSort()
    {
        return $this->container['grade_level_sort'];
    }

    /**
     * Sets grade_level_sort
     *
     * @param int|null $grade_level_sort Grade level sort order
     *
     * @return self
     */
    public function setGradeLevelSort($grade_level_sort)
    {
        if (is_null($grade_level_sort)) {
            throw new \InvalidArgumentException('non-nullable grade_level_sort cannot be null');
        }
        $this->container['grade_level_sort'] = $grade_level_sort;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string|null
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string|null $group_name The group name
     *
     * @return self
     */
    public function setGroupName($group_name)
    {
        if (is_null($group_name)) {
            array_push($this->openAPINullablesSetToNull, 'group_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('group_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets photo_file_name
     *
     * @return string|null
     */
    public function getPhotoFileName()
    {
        return $this->container['photo_file_name'];
    }

    /**
     * Sets photo_file_name
     *
     * @param string|null $photo_file_name The phone file name
     *
     * @return self
     */
    public function setPhotoFileName($photo_file_name)
    {
        if (is_null($photo_file_name)) {
            array_push($this->openAPINullablesSetToNull, 'photo_file_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('photo_file_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['photo_file_name'] = $photo_file_name;

        return $this;
    }

    /**
     * Gets section
     *
     * @return string|null
     */
    public function getSection()
    {
        return $this->container['section'];
    }

    /**
     * Sets section
     *
     * @param string|null $section The section
     *
     * @return self
     */
    public function setSection($section)
    {
        if (is_null($section)) {
            array_push($this->openAPINullablesSetToNull, 'section');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('section', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['section'] = $section;

        return $this;
    }

    /**
     * Gets section_id
     *
     * @return int|null
     */
    public function getSectionId()
    {
        return $this->container['section_id'];
    }

    /**
     * Sets section_id
     *
     * @param int|null $section_id The ID of the section
     *
     * @return self
     */
    public function setSectionId($section_id)
    {
        if (is_null($section_id)) {
            throw new \InvalidArgumentException('non-nullable section_id cannot be null');
        }
        $this->container['section_id'] = $section_id;

        return $this;
    }

    /**
     * Gets student_name
     *
     * @return string|null
     */
    public function getStudentName()
    {
        return $this->container['student_name'];
    }

    /**
     * Sets student_name
     *
     * @param string|null $student_name The name of the student
     *
     * @return self
     */
    public function setStudentName($student_name)
    {
        if (is_null($student_name)) {
            array_push($this->openAPINullablesSetToNull, 'student_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('student_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['student_name'] = $student_name;

        return $this;
    }

    /**
     * Gets student_user_id
     *
     * @return int|null
     */
    public function getStudentUserId()
    {
        return $this->container['student_user_id'];
    }

    /**
     * Sets student_user_id
     *
     * @param int|null $student_user_id The student user ID
     *
     * @return self
     */
    public function setStudentUserId($student_user_id)
    {
        if (is_null($student_user_id)) {
            throw new \InvalidArgumentException('non-nullable student_user_id cannot be null');
        }
        $this->container['student_user_id'] = $student_user_id;

        return $this;
    }

    /**
     * Gets teacher_name
     *
     * @return string|null
     */
    public function getTeacherName()
    {
        return $this->container['teacher_name'];
    }

    /**
     * Sets teacher_name
     *
     * @param string|null $teacher_name The name of the teacher
     *
     * @return self
     */
    public function setTeacherName($teacher_name)
    {
        if (is_null($teacher_name)) {
            array_push($this->openAPINullablesSetToNull, 'teacher_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('teacher_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['teacher_name'] = $teacher_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
