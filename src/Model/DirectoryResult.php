<?php
/**
 * DirectoryResult
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * DirectoryResult Class Doc Comment
 *
 * @category Class
 * @description Directory Result Model
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DirectoryResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DirectoryResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user_id' => 'int',
        'first_name' => 'string',
        'last_name' => 'string',
        'email' => 'string',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'address_line3' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zip' => 'string',
        'country' => 'string',
        'home_phone' => 'string',
        'cell_phone' => 'string',
        'office_phone' => 'string',
        'home_phone2' => 'string',
        'has_relationships' => 'bool',
        'prefix' => 'string',
        'preferred_name' => 'string',
        'profile_photo' => 'string',
        'middlename' => 'string',
        'maiden_name' => 'string',
        'suffix' => 'string',
        'grad_year' => 'string',
        'grade' => 'string',
        'grade_display' => 'string',
        'department' => 'string',
        'department_display' => 'string',
        'spouse_id' => 'int',
        'child_names' => 'string',
        'grade_numeric' => 'int',
        'grade_numeric_display' => 'string',
        'total_count' => 'int',
        'deceased' => 'bool',
        'student' => 'bool',
        'preferred_address_id' => 'int',
        'preferred_address_lat' => 'float',
        'preferred_address_lng' => 'float',
        'job_title' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user_id' => 'int32',
        'first_name' => null,
        'last_name' => null,
        'email' => null,
        'address_line1' => null,
        'address_line2' => null,
        'address_line3' => null,
        'city' => null,
        'state' => null,
        'zip' => null,
        'country' => null,
        'home_phone' => null,
        'cell_phone' => null,
        'office_phone' => null,
        'home_phone2' => null,
        'has_relationships' => null,
        'prefix' => null,
        'preferred_name' => null,
        'profile_photo' => null,
        'middlename' => null,
        'maiden_name' => null,
        'suffix' => null,
        'grad_year' => null,
        'grade' => null,
        'grade_display' => null,
        'department' => null,
        'department_display' => null,
        'spouse_id' => 'int32',
        'child_names' => null,
        'grade_numeric' => 'int32',
        'grade_numeric_display' => null,
        'total_count' => 'int32',
        'deceased' => null,
        'student' => null,
        'preferred_address_id' => 'int32',
        'preferred_address_lat' => 'double',
        'preferred_address_lng' => 'double',
        'job_title' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'user_id' => true,
        'first_name' => true,
        'last_name' => true,
        'email' => true,
        'address_line1' => true,
        'address_line2' => true,
        'address_line3' => true,
        'city' => true,
        'state' => true,
        'zip' => true,
        'country' => true,
        'home_phone' => true,
        'cell_phone' => true,
        'office_phone' => true,
        'home_phone2' => true,
        'has_relationships' => true,
        'prefix' => true,
        'preferred_name' => true,
        'profile_photo' => true,
        'middlename' => true,
        'maiden_name' => true,
        'suffix' => true,
        'grad_year' => true,
        'grade' => true,
        'grade_display' => true,
        'department' => true,
        'department_display' => true,
        'spouse_id' => true,
        'child_names' => true,
        'grade_numeric' => true,
        'grade_numeric_display' => true,
        'total_count' => true,
        'deceased' => true,
        'student' => true,
        'preferred_address_id' => true,
        'preferred_address_lat' => true,
        'preferred_address_lng' => true,
        'job_title' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_id' => 'user_id',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'email' => 'email',
        'address_line1' => 'address_line1',
        'address_line2' => 'address_line2',
        'address_line3' => 'address_line3',
        'city' => 'city',
        'state' => 'state',
        'zip' => 'zip',
        'country' => 'country',
        'home_phone' => 'home_phone',
        'cell_phone' => 'cell_phone',
        'office_phone' => 'office_phone',
        'home_phone2' => 'home_phone2',
        'has_relationships' => 'has_relationships',
        'prefix' => 'prefix',
        'preferred_name' => 'preferred_name',
        'profile_photo' => 'profile_photo',
        'middlename' => 'middlename',
        'maiden_name' => 'maiden_name',
        'suffix' => 'suffix',
        'grad_year' => 'grad_year',
        'grade' => 'grade',
        'grade_display' => 'grade_display',
        'department' => 'department',
        'department_display' => 'department_display',
        'spouse_id' => 'spouse_id',
        'child_names' => 'child_names',
        'grade_numeric' => 'grade_numeric',
        'grade_numeric_display' => 'grade_numeric_display',
        'total_count' => 'total_count',
        'deceased' => 'deceased',
        'student' => 'student',
        'preferred_address_id' => 'preferred_address_id',
        'preferred_address_lat' => 'preferred_address_lat',
        'preferred_address_lng' => 'preferred_address_lng',
        'job_title' => 'job_title',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_id' => 'setUserId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email' => 'setEmail',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'address_line3' => 'setAddressLine3',
        'city' => 'setCity',
        'state' => 'setState',
        'zip' => 'setZip',
        'country' => 'setCountry',
        'home_phone' => 'setHomePhone',
        'cell_phone' => 'setCellPhone',
        'office_phone' => 'setOfficePhone',
        'home_phone2' => 'setHomePhone2',
        'has_relationships' => 'setHasRelationships',
        'prefix' => 'setPrefix',
        'preferred_name' => 'setPreferredName',
        'profile_photo' => 'setProfilePhoto',
        'middlename' => 'setMiddlename',
        'maiden_name' => 'setMaidenName',
        'suffix' => 'setSuffix',
        'grad_year' => 'setGradYear',
        'grade' => 'setGrade',
        'grade_display' => 'setGradeDisplay',
        'department' => 'setDepartment',
        'department_display' => 'setDepartmentDisplay',
        'spouse_id' => 'setSpouseId',
        'child_names' => 'setChildNames',
        'grade_numeric' => 'setGradeNumeric',
        'grade_numeric_display' => 'setGradeNumericDisplay',
        'total_count' => 'setTotalCount',
        'deceased' => 'setDeceased',
        'student' => 'setStudent',
        'preferred_address_id' => 'setPreferredAddressId',
        'preferred_address_lat' => 'setPreferredAddressLat',
        'preferred_address_lng' => 'setPreferredAddressLng',
        'job_title' => 'setJobTitle',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_id' => 'getUserId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email' => 'getEmail',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'address_line3' => 'getAddressLine3',
        'city' => 'getCity',
        'state' => 'getState',
        'zip' => 'getZip',
        'country' => 'getCountry',
        'home_phone' => 'getHomePhone',
        'cell_phone' => 'getCellPhone',
        'office_phone' => 'getOfficePhone',
        'home_phone2' => 'getHomePhone2',
        'has_relationships' => 'getHasRelationships',
        'prefix' => 'getPrefix',
        'preferred_name' => 'getPreferredName',
        'profile_photo' => 'getProfilePhoto',
        'middlename' => 'getMiddlename',
        'maiden_name' => 'getMaidenName',
        'suffix' => 'getSuffix',
        'grad_year' => 'getGradYear',
        'grade' => 'getGrade',
        'grade_display' => 'getGradeDisplay',
        'department' => 'getDepartment',
        'department_display' => 'getDepartmentDisplay',
        'spouse_id' => 'getSpouseId',
        'child_names' => 'getChildNames',
        'grade_numeric' => 'getGradeNumeric',
        'grade_numeric_display' => 'getGradeNumericDisplay',
        'total_count' => 'getTotalCount',
        'deceased' => 'getDeceased',
        'student' => 'getStudent',
        'preferred_address_id' => 'getPreferredAddressId',
        'preferred_address_lat' => 'getPreferredAddressLat',
        'preferred_address_lng' => 'getPreferredAddressLng',
        'job_title' => 'getJobTitle',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('address_line1', $data ?? [], null);
        $this->setIfExists('address_line2', $data ?? [], null);
        $this->setIfExists('address_line3', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('zip', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('home_phone', $data ?? [], null);
        $this->setIfExists('cell_phone', $data ?? [], null);
        $this->setIfExists('office_phone', $data ?? [], null);
        $this->setIfExists('home_phone2', $data ?? [], null);
        $this->setIfExists('has_relationships', $data ?? [], null);
        $this->setIfExists('prefix', $data ?? [], null);
        $this->setIfExists('preferred_name', $data ?? [], null);
        $this->setIfExists('profile_photo', $data ?? [], null);
        $this->setIfExists('middlename', $data ?? [], null);
        $this->setIfExists('maiden_name', $data ?? [], null);
        $this->setIfExists('suffix', $data ?? [], null);
        $this->setIfExists('grad_year', $data ?? [], null);
        $this->setIfExists('grade', $data ?? [], null);
        $this->setIfExists('grade_display', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('department_display', $data ?? [], null);
        $this->setIfExists('spouse_id', $data ?? [], null);
        $this->setIfExists('child_names', $data ?? [], null);
        $this->setIfExists('grade_numeric', $data ?? [], null);
        $this->setIfExists('grade_numeric_display', $data ?? [], null);
        $this->setIfExists('total_count', $data ?? [], null);
        $this->setIfExists('deceased', $data ?? [], null);
        $this->setIfExists('student', $data ?? [], null);
        $this->setIfExists('preferred_address_id', $data ?? [], null);
        $this->setIfExists('preferred_address_lat', $data ?? [], null);
        $this->setIfExists('preferred_address_lng', $data ?? [], null);
        $this->setIfExists('job_title', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id The Id of the user
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            array_push($this->openAPINullablesSetToNull, 'user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name The first name of the user
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            array_push($this->openAPINullablesSetToNull, 'first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name The last name of the user
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            array_push($this->openAPINullablesSetToNull, 'last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address of the user
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string|null
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string|null $address_line1 The first line of the user address
     *
     * @return self
     */
    public function setAddressLine1($address_line1)
    {
        if (is_null($address_line1)) {
            array_push($this->openAPINullablesSetToNull, 'address_line1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_line1', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string|null $address_line2 The second line of the user address
     *
     * @return self
     */
    public function setAddressLine2($address_line2)
    {
        if (is_null($address_line2)) {
            array_push($this->openAPINullablesSetToNull, 'address_line2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_line2', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets address_line3
     *
     * @return string|null
     */
    public function getAddressLine3()
    {
        return $this->container['address_line3'];
    }

    /**
     * Sets address_line3
     *
     * @param string|null $address_line3 The third line of the user address
     *
     * @return self
     */
    public function setAddressLine3($address_line3)
    {
        if (is_null($address_line3)) {
            array_push($this->openAPINullablesSetToNull, 'address_line3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_line3', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_line3'] = $address_line3;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city The city the user lives in
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            array_push($this->openAPINullablesSetToNull, 'city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state The state the user lives in
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            array_push($this->openAPINullablesSetToNull, 'state');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip The zip code the user lives in
     *
     * @return self
     */
    public function setZip($zip)
    {
        if (is_null($zip)) {
            array_push($this->openAPINullablesSetToNull, 'zip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zip', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country The country the user lives in
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets home_phone
     *
     * @return string|null
     */
    public function getHomePhone()
    {
        return $this->container['home_phone'];
    }

    /**
     * Sets home_phone
     *
     * @param string|null $home_phone The user's home phone number
     *
     * @return self
     */
    public function setHomePhone($home_phone)
    {
        if (is_null($home_phone)) {
            array_push($this->openAPINullablesSetToNull, 'home_phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('home_phone', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['home_phone'] = $home_phone;

        return $this;
    }

    /**
     * Gets cell_phone
     *
     * @return string|null
     */
    public function getCellPhone()
    {
        return $this->container['cell_phone'];
    }

    /**
     * Sets cell_phone
     *
     * @param string|null $cell_phone The user's cell phone number
     *
     * @return self
     */
    public function setCellPhone($cell_phone)
    {
        if (is_null($cell_phone)) {
            array_push($this->openAPINullablesSetToNull, 'cell_phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cell_phone', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cell_phone'] = $cell_phone;

        return $this;
    }

    /**
     * Gets office_phone
     *
     * @return string|null
     */
    public function getOfficePhone()
    {
        return $this->container['office_phone'];
    }

    /**
     * Sets office_phone
     *
     * @param string|null $office_phone The user's office phone number
     *
     * @return self
     */
    public function setOfficePhone($office_phone)
    {
        if (is_null($office_phone)) {
            array_push($this->openAPINullablesSetToNull, 'office_phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('office_phone', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['office_phone'] = $office_phone;

        return $this;
    }

    /**
     * Gets home_phone2
     *
     * @return string|null
     */
    public function getHomePhone2()
    {
        return $this->container['home_phone2'];
    }

    /**
     * Sets home_phone2
     *
     * @param string|null $home_phone2 The user's secondary home phone number
     *
     * @return self
     */
    public function setHomePhone2($home_phone2)
    {
        if (is_null($home_phone2)) {
            array_push($this->openAPINullablesSetToNull, 'home_phone2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('home_phone2', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['home_phone2'] = $home_phone2;

        return $this;
    }

    /**
     * Gets has_relationships
     *
     * @return bool|null
     */
    public function getHasRelationships()
    {
        return $this->container['has_relationships'];
    }

    /**
     * Sets has_relationships
     *
     * @param bool|null $has_relationships Returns true if the user has relationships
     *
     * @return self
     */
    public function setHasRelationships($has_relationships)
    {
        if (is_null($has_relationships)) {
            array_push($this->openAPINullablesSetToNull, 'has_relationships');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_relationships', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_relationships'] = $has_relationships;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix The user's prefix
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (is_null($prefix)) {
            array_push($this->openAPINullablesSetToNull, 'prefix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prefix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets preferred_name
     *
     * @return string|null
     */
    public function getPreferredName()
    {
        return $this->container['preferred_name'];
    }

    /**
     * Sets preferred_name
     *
     * @param string|null $preferred_name The user's preferred name
     *
     * @return self
     */
    public function setPreferredName($preferred_name)
    {
        if (is_null($preferred_name)) {
            array_push($this->openAPINullablesSetToNull, 'preferred_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferred_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferred_name'] = $preferred_name;

        return $this;
    }

    /**
     * Gets profile_photo
     *
     * @return string|null
     */
    public function getProfilePhoto()
    {
        return $this->container['profile_photo'];
    }

    /**
     * Sets profile_photo
     *
     * @param string|null $profile_photo The user's profile photo
     *
     * @return self
     */
    public function setProfilePhoto($profile_photo)
    {
        if (is_null($profile_photo)) {
            array_push($this->openAPINullablesSetToNull, 'profile_photo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profile_photo', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['profile_photo'] = $profile_photo;

        return $this;
    }

    /**
     * Gets middlename
     *
     * @return string|null
     */
    public function getMiddlename()
    {
        return $this->container['middlename'];
    }

    /**
     * Sets middlename
     *
     * @param string|null $middlename The user's middle name
     *
     * @return self
     */
    public function setMiddlename($middlename)
    {
        if (is_null($middlename)) {
            array_push($this->openAPINullablesSetToNull, 'middlename');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('middlename', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['middlename'] = $middlename;

        return $this;
    }

    /**
     * Gets maiden_name
     *
     * @return string|null
     */
    public function getMaidenName()
    {
        return $this->container['maiden_name'];
    }

    /**
     * Sets maiden_name
     *
     * @param string|null $maiden_name The user's maiden name
     *
     * @return self
     */
    public function setMaidenName($maiden_name)
    {
        if (is_null($maiden_name)) {
            array_push($this->openAPINullablesSetToNull, 'maiden_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maiden_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maiden_name'] = $maiden_name;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string|null
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string|null $suffix The user's suffix
     *
     * @return self
     */
    public function setSuffix($suffix)
    {
        if (is_null($suffix)) {
            array_push($this->openAPINullablesSetToNull, 'suffix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suffix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets grad_year
     *
     * @return string|null
     */
    public function getGradYear()
    {
        return $this->container['grad_year'];
    }

    /**
     * Sets grad_year
     *
     * @param string|null $grad_year The user's graduation year
     *
     * @return self
     */
    public function setGradYear($grad_year)
    {
        if (is_null($grad_year)) {
            array_push($this->openAPINullablesSetToNull, 'grad_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grad_year', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grad_year'] = $grad_year;

        return $this;
    }

    /**
     * Gets grade
     *
     * @return string|null
     */
    public function getGrade()
    {
        return $this->container['grade'];
    }

    /**
     * Sets grade
     *
     * @param string|null $grade The user's grade
     *
     * @return self
     */
    public function setGrade($grade)
    {
        if (is_null($grade)) {
            array_push($this->openAPINullablesSetToNull, 'grade');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grade', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grade'] = $grade;

        return $this;
    }

    /**
     * Gets grade_display
     *
     * @return string|null
     */
    public function getGradeDisplay()
    {
        return $this->container['grade_display'];
    }

    /**
     * Sets grade_display
     *
     * @param string|null $grade_display Grade display
     *
     * @return self
     */
    public function setGradeDisplay($grade_display)
    {
        if (is_null($grade_display)) {
            array_push($this->openAPINullablesSetToNull, 'grade_display');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grade_display', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grade_display'] = $grade_display;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department The department the user belongs to
     *
     * @return self
     */
    public function setDepartment($department)
    {
        if (is_null($department)) {
            array_push($this->openAPINullablesSetToNull, 'department');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('department', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets department_display
     *
     * @return string|null
     */
    public function getDepartmentDisplay()
    {
        return $this->container['department_display'];
    }

    /**
     * Sets department_display
     *
     * @param string|null $department_display How the user's department should be displayed
     *
     * @return self
     */
    public function setDepartmentDisplay($department_display)
    {
        if (is_null($department_display)) {
            array_push($this->openAPINullablesSetToNull, 'department_display');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('department_display', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['department_display'] = $department_display;

        return $this;
    }

    /**
     * Gets spouse_id
     *
     * @return int|null
     */
    public function getSpouseId()
    {
        return $this->container['spouse_id'];
    }

    /**
     * Sets spouse_id
     *
     * @param int|null $spouse_id The Id of the user's spouse
     *
     * @return self
     */
    public function setSpouseId($spouse_id)
    {
        if (is_null($spouse_id)) {
            array_push($this->openAPINullablesSetToNull, 'spouse_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spouse_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spouse_id'] = $spouse_id;

        return $this;
    }

    /**
     * Gets child_names
     *
     * @return string|null
     */
    public function getChildNames()
    {
        return $this->container['child_names'];
    }

    /**
     * Sets child_names
     *
     * @param string|null $child_names The user's children
     *
     * @return self
     */
    public function setChildNames($child_names)
    {
        if (is_null($child_names)) {
            array_push($this->openAPINullablesSetToNull, 'child_names');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('child_names', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['child_names'] = $child_names;

        return $this;
    }

    /**
     * Gets grade_numeric
     *
     * @return int|null
     */
    public function getGradeNumeric()
    {
        return $this->container['grade_numeric'];
    }

    /**
     * Sets grade_numeric
     *
     * @param int|null $grade_numeric The numeric grade of the user
     *
     * @return self
     */
    public function setGradeNumeric($grade_numeric)
    {
        if (is_null($grade_numeric)) {
            array_push($this->openAPINullablesSetToNull, 'grade_numeric');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grade_numeric', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grade_numeric'] = $grade_numeric;

        return $this;
    }

    /**
     * Gets grade_numeric_display
     *
     * @return string|null
     */
    public function getGradeNumericDisplay()
    {
        return $this->container['grade_numeric_display'];
    }

    /**
     * Sets grade_numeric_display
     *
     * @param string|null $grade_numeric_display The way the numeric grade should be displayed
     *
     * @return self
     */
    public function setGradeNumericDisplay($grade_numeric_display)
    {
        if (is_null($grade_numeric_display)) {
            array_push($this->openAPINullablesSetToNull, 'grade_numeric_display');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grade_numeric_display', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grade_numeric_display'] = $grade_numeric_display;

        return $this;
    }

    /**
     * Gets total_count
     *
     * @return int|null
     */
    public function getTotalCount()
    {
        return $this->container['total_count'];
    }

    /**
     * Sets total_count
     *
     * @param int|null $total_count The total count of records
     *
     * @return self
     */
    public function setTotalCount($total_count)
    {
        if (is_null($total_count)) {
            array_push($this->openAPINullablesSetToNull, 'total_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_count', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_count'] = $total_count;

        return $this;
    }

    /**
     * Gets deceased
     *
     * @return bool|null
     */
    public function getDeceased()
    {
        return $this->container['deceased'];
    }

    /**
     * Sets deceased
     *
     * @param bool|null $deceased Returns true if the user is deceased
     *
     * @return self
     */
    public function setDeceased($deceased)
    {
        if (is_null($deceased)) {
            array_push($this->openAPINullablesSetToNull, 'deceased');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deceased', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deceased'] = $deceased;

        return $this;
    }

    /**
     * Gets student
     *
     * @return bool|null
     */
    public function getStudent()
    {
        return $this->container['student'];
    }

    /**
     * Sets student
     *
     * @param bool|null $student Returns true if the user is a student
     *
     * @return self
     */
    public function setStudent($student)
    {
        if (is_null($student)) {
            array_push($this->openAPINullablesSetToNull, 'student');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('student', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['student'] = $student;

        return $this;
    }

    /**
     * Gets preferred_address_id
     *
     * @return int|null
     */
    public function getPreferredAddressId()
    {
        return $this->container['preferred_address_id'];
    }

    /**
     * Sets preferred_address_id
     *
     * @param int|null $preferred_address_id The Id of the preferred address for the user
     *
     * @return self
     */
    public function setPreferredAddressId($preferred_address_id)
    {
        if (is_null($preferred_address_id)) {
            array_push($this->openAPINullablesSetToNull, 'preferred_address_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferred_address_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferred_address_id'] = $preferred_address_id;

        return $this;
    }

    /**
     * Gets preferred_address_lat
     *
     * @return float|null
     */
    public function getPreferredAddressLat()
    {
        return $this->container['preferred_address_lat'];
    }

    /**
     * Sets preferred_address_lat
     *
     * @param float|null $preferred_address_lat Preferred address latitude
     *
     * @return self
     */
    public function setPreferredAddressLat($preferred_address_lat)
    {
        if (is_null($preferred_address_lat)) {
            array_push($this->openAPINullablesSetToNull, 'preferred_address_lat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferred_address_lat', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferred_address_lat'] = $preferred_address_lat;

        return $this;
    }

    /**
     * Gets preferred_address_lng
     *
     * @return float|null
     */
    public function getPreferredAddressLng()
    {
        return $this->container['preferred_address_lng'];
    }

    /**
     * Sets preferred_address_lng
     *
     * @param float|null $preferred_address_lng Preferred address longitude
     *
     * @return self
     */
    public function setPreferredAddressLng($preferred_address_lng)
    {
        if (is_null($preferred_address_lng)) {
            array_push($this->openAPINullablesSetToNull, 'preferred_address_lng');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferred_address_lng', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferred_address_lng'] = $preferred_address_lng;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string|null $job_title The user's job title
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        if (is_null($job_title)) {
            array_push($this->openAPINullablesSetToNull, 'job_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('job_title', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['job_title'] = $job_title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
