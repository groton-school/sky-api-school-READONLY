<?php
/**
 * DirectoryResult
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * DirectoryResult Class Doc Comment
 *
 * @category Class
 * @description Directory Result Model
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DirectoryResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DirectoryResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'userId' => 'int',
        'firstName' => 'string',
        'lastName' => 'string',
        'email' => 'string',
        'addressLine1' => 'string',
        'addressLine2' => 'string',
        'addressLine3' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zip' => 'string',
        'country' => 'string',
        'homePhone' => 'string',
        'cellPhone' => 'string',
        'officePhone' => 'string',
        'homePhone2' => 'string',
        'hasRelationships' => 'bool',
        'prefix' => 'string',
        'preferredName' => 'string',
        'profilePhoto' => 'string',
        'middlename' => 'string',
        'maidenName' => 'string',
        'suffix' => 'string',
        'gradYear' => 'string',
        'grade' => 'string',
        'gradeDisplay' => 'string',
        'department' => 'string',
        'departmentDisplay' => 'string',
        'spouseId' => 'int',
        'childNames' => 'string',
        'gradeNumeric' => 'int',
        'gradeNumericDisplay' => 'string',
        'totalCount' => 'int',
        'deceased' => 'bool',
        'student' => 'bool',
        'preferredAddressId' => 'int',
        'preferredAddressLat' => 'float',
        'preferredAddressLng' => 'float',
        'jobTitle' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'userId' => 'int32',
        'firstName' => null,
        'lastName' => null,
        'email' => null,
        'addressLine1' => null,
        'addressLine2' => null,
        'addressLine3' => null,
        'city' => null,
        'state' => null,
        'zip' => null,
        'country' => null,
        'homePhone' => null,
        'cellPhone' => null,
        'officePhone' => null,
        'homePhone2' => null,
        'hasRelationships' => null,
        'prefix' => null,
        'preferredName' => null,
        'profilePhoto' => null,
        'middlename' => null,
        'maidenName' => null,
        'suffix' => null,
        'gradYear' => null,
        'grade' => null,
        'gradeDisplay' => null,
        'department' => null,
        'departmentDisplay' => null,
        'spouseId' => 'int32',
        'childNames' => null,
        'gradeNumeric' => 'int32',
        'gradeNumericDisplay' => null,
        'totalCount' => 'int32',
        'deceased' => null,
        'student' => null,
        'preferredAddressId' => 'int32',
        'preferredAddressLat' => 'double',
        'preferredAddressLng' => 'double',
        'jobTitle' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'userId' => true,
        'firstName' => true,
        'lastName' => true,
        'email' => true,
        'addressLine1' => true,
        'addressLine2' => true,
        'addressLine3' => true,
        'city' => true,
        'state' => true,
        'zip' => true,
        'country' => true,
        'homePhone' => true,
        'cellPhone' => true,
        'officePhone' => true,
        'homePhone2' => true,
        'hasRelationships' => true,
        'prefix' => true,
        'preferredName' => true,
        'profilePhoto' => true,
        'middlename' => true,
        'maidenName' => true,
        'suffix' => true,
        'gradYear' => true,
        'grade' => true,
        'gradeDisplay' => true,
        'department' => true,
        'departmentDisplay' => true,
        'spouseId' => true,
        'childNames' => true,
        'gradeNumeric' => true,
        'gradeNumericDisplay' => true,
        'totalCount' => true,
        'deceased' => true,
        'student' => true,
        'preferredAddressId' => true,
        'preferredAddressLat' => true,
        'preferredAddressLng' => true,
        'jobTitle' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'userId' => 'user_id',
        'firstName' => 'first_name',
        'lastName' => 'last_name',
        'email' => 'email',
        'addressLine1' => 'address_line1',
        'addressLine2' => 'address_line2',
        'addressLine3' => 'address_line3',
        'city' => 'city',
        'state' => 'state',
        'zip' => 'zip',
        'country' => 'country',
        'homePhone' => 'home_phone',
        'cellPhone' => 'cell_phone',
        'officePhone' => 'office_phone',
        'homePhone2' => 'home_phone2',
        'hasRelationships' => 'has_relationships',
        'prefix' => 'prefix',
        'preferredName' => 'preferred_name',
        'profilePhoto' => 'profile_photo',
        'middlename' => 'middlename',
        'maidenName' => 'maiden_name',
        'suffix' => 'suffix',
        'gradYear' => 'grad_year',
        'grade' => 'grade',
        'gradeDisplay' => 'grade_display',
        'department' => 'department',
        'departmentDisplay' => 'department_display',
        'spouseId' => 'spouse_id',
        'childNames' => 'child_names',
        'gradeNumeric' => 'grade_numeric',
        'gradeNumericDisplay' => 'grade_numeric_display',
        'totalCount' => 'total_count',
        'deceased' => 'deceased',
        'student' => 'student',
        'preferredAddressId' => 'preferred_address_id',
        'preferredAddressLat' => 'preferred_address_lat',
        'preferredAddressLng' => 'preferred_address_lng',
        'jobTitle' => 'job_title',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'userId' => 'setUserId',
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'email' => 'setEmail',
        'addressLine1' => 'setAddressLine1',
        'addressLine2' => 'setAddressLine2',
        'addressLine3' => 'setAddressLine3',
        'city' => 'setCity',
        'state' => 'setState',
        'zip' => 'setZip',
        'country' => 'setCountry',
        'homePhone' => 'setHomePhone',
        'cellPhone' => 'setCellPhone',
        'officePhone' => 'setOfficePhone',
        'homePhone2' => 'setHomePhone2',
        'hasRelationships' => 'setHasRelationships',
        'prefix' => 'setPrefix',
        'preferredName' => 'setPreferredName',
        'profilePhoto' => 'setProfilePhoto',
        'middlename' => 'setMiddlename',
        'maidenName' => 'setMaidenName',
        'suffix' => 'setSuffix',
        'gradYear' => 'setGradYear',
        'grade' => 'setGrade',
        'gradeDisplay' => 'setGradeDisplay',
        'department' => 'setDepartment',
        'departmentDisplay' => 'setDepartmentDisplay',
        'spouseId' => 'setSpouseId',
        'childNames' => 'setChildNames',
        'gradeNumeric' => 'setGradeNumeric',
        'gradeNumericDisplay' => 'setGradeNumericDisplay',
        'totalCount' => 'setTotalCount',
        'deceased' => 'setDeceased',
        'student' => 'setStudent',
        'preferredAddressId' => 'setPreferredAddressId',
        'preferredAddressLat' => 'setPreferredAddressLat',
        'preferredAddressLng' => 'setPreferredAddressLng',
        'jobTitle' => 'setJobTitle',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'userId' => 'getUserId',
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'email' => 'getEmail',
        'addressLine1' => 'getAddressLine1',
        'addressLine2' => 'getAddressLine2',
        'addressLine3' => 'getAddressLine3',
        'city' => 'getCity',
        'state' => 'getState',
        'zip' => 'getZip',
        'country' => 'getCountry',
        'homePhone' => 'getHomePhone',
        'cellPhone' => 'getCellPhone',
        'officePhone' => 'getOfficePhone',
        'homePhone2' => 'getHomePhone2',
        'hasRelationships' => 'getHasRelationships',
        'prefix' => 'getPrefix',
        'preferredName' => 'getPreferredName',
        'profilePhoto' => 'getProfilePhoto',
        'middlename' => 'getMiddlename',
        'maidenName' => 'getMaidenName',
        'suffix' => 'getSuffix',
        'gradYear' => 'getGradYear',
        'grade' => 'getGrade',
        'gradeDisplay' => 'getGradeDisplay',
        'department' => 'getDepartment',
        'departmentDisplay' => 'getDepartmentDisplay',
        'spouseId' => 'getSpouseId',
        'childNames' => 'getChildNames',
        'gradeNumeric' => 'getGradeNumeric',
        'gradeNumericDisplay' => 'getGradeNumericDisplay',
        'totalCount' => 'getTotalCount',
        'deceased' => 'getDeceased',
        'student' => 'getStudent',
        'preferredAddressId' => 'getPreferredAddressId',
        'preferredAddressLat' => 'getPreferredAddressLat',
        'preferredAddressLng' => 'getPreferredAddressLng',
        'jobTitle' => 'getJobTitle',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('userId', $data ?? [], null);
        $this->setIfExists('firstName', $data ?? [], null);
        $this->setIfExists('lastName', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('addressLine1', $data ?? [], null);
        $this->setIfExists('addressLine2', $data ?? [], null);
        $this->setIfExists('addressLine3', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('zip', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('homePhone', $data ?? [], null);
        $this->setIfExists('cellPhone', $data ?? [], null);
        $this->setIfExists('officePhone', $data ?? [], null);
        $this->setIfExists('homePhone2', $data ?? [], null);
        $this->setIfExists('hasRelationships', $data ?? [], null);
        $this->setIfExists('prefix', $data ?? [], null);
        $this->setIfExists('preferredName', $data ?? [], null);
        $this->setIfExists('profilePhoto', $data ?? [], null);
        $this->setIfExists('middlename', $data ?? [], null);
        $this->setIfExists('maidenName', $data ?? [], null);
        $this->setIfExists('suffix', $data ?? [], null);
        $this->setIfExists('gradYear', $data ?? [], null);
        $this->setIfExists('grade', $data ?? [], null);
        $this->setIfExists('gradeDisplay', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('departmentDisplay', $data ?? [], null);
        $this->setIfExists('spouseId', $data ?? [], null);
        $this->setIfExists('childNames', $data ?? [], null);
        $this->setIfExists('gradeNumeric', $data ?? [], null);
        $this->setIfExists('gradeNumericDisplay', $data ?? [], null);
        $this->setIfExists('totalCount', $data ?? [], null);
        $this->setIfExists('deceased', $data ?? [], null);
        $this->setIfExists('student', $data ?? [], null);
        $this->setIfExists('preferredAddressId', $data ?? [], null);
        $this->setIfExists('preferredAddressLat', $data ?? [], null);
        $this->setIfExists('preferredAddressLng', $data ?? [], null);
        $this->setIfExists('jobTitle', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets userId
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param int|null $userId The Id of the user
     *
     * @return self
     */
    public function setUserId($userId)
    {
        if (is_null($userId)) {
            array_push($this->openAPINullablesSetToNull, 'userId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('userId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName The first name of the user
     *
     * @return self
     */
    public function setFirstName($firstName)
    {
        if (is_null($firstName)) {
            array_push($this->openAPINullablesSetToNull, 'firstName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('firstName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName The last name of the user
     *
     * @return self
     */
    public function setLastName($lastName)
    {
        if (is_null($lastName)) {
            array_push($this->openAPINullablesSetToNull, 'lastName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address of the user
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets addressLine1
     *
     * @return string|null
     */
    public function getAddressLine1()
    {
        return $this->container['addressLine1'];
    }

    /**
     * Sets addressLine1
     *
     * @param string|null $addressLine1 The first line of the user address
     *
     * @return self
     */
    public function setAddressLine1($addressLine1)
    {
        if (is_null($addressLine1)) {
            array_push($this->openAPINullablesSetToNull, 'addressLine1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addressLine1', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['addressLine1'] = $addressLine1;

        return $this;
    }

    /**
     * Gets addressLine2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['addressLine2'];
    }

    /**
     * Sets addressLine2
     *
     * @param string|null $addressLine2 The second line of the user address
     *
     * @return self
     */
    public function setAddressLine2($addressLine2)
    {
        if (is_null($addressLine2)) {
            array_push($this->openAPINullablesSetToNull, 'addressLine2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addressLine2', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['addressLine2'] = $addressLine2;

        return $this;
    }

    /**
     * Gets addressLine3
     *
     * @return string|null
     */
    public function getAddressLine3()
    {
        return $this->container['addressLine3'];
    }

    /**
     * Sets addressLine3
     *
     * @param string|null $addressLine3 The third line of the user address
     *
     * @return self
     */
    public function setAddressLine3($addressLine3)
    {
        if (is_null($addressLine3)) {
            array_push($this->openAPINullablesSetToNull, 'addressLine3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addressLine3', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['addressLine3'] = $addressLine3;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city The city the user lives in
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            array_push($this->openAPINullablesSetToNull, 'city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state The state the user lives in
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            array_push($this->openAPINullablesSetToNull, 'state');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip The zip code the user lives in
     *
     * @return self
     */
    public function setZip($zip)
    {
        if (is_null($zip)) {
            array_push($this->openAPINullablesSetToNull, 'zip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zip', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country The country the user lives in
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets homePhone
     *
     * @return string|null
     */
    public function getHomePhone()
    {
        return $this->container['homePhone'];
    }

    /**
     * Sets homePhone
     *
     * @param string|null $homePhone The user's home phone number
     *
     * @return self
     */
    public function setHomePhone($homePhone)
    {
        if (is_null($homePhone)) {
            array_push($this->openAPINullablesSetToNull, 'homePhone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('homePhone', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['homePhone'] = $homePhone;

        return $this;
    }

    /**
     * Gets cellPhone
     *
     * @return string|null
     */
    public function getCellPhone()
    {
        return $this->container['cellPhone'];
    }

    /**
     * Sets cellPhone
     *
     * @param string|null $cellPhone The user's cell phone number
     *
     * @return self
     */
    public function setCellPhone($cellPhone)
    {
        if (is_null($cellPhone)) {
            array_push($this->openAPINullablesSetToNull, 'cellPhone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cellPhone', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cellPhone'] = $cellPhone;

        return $this;
    }

    /**
     * Gets officePhone
     *
     * @return string|null
     */
    public function getOfficePhone()
    {
        return $this->container['officePhone'];
    }

    /**
     * Sets officePhone
     *
     * @param string|null $officePhone The user's office phone number
     *
     * @return self
     */
    public function setOfficePhone($officePhone)
    {
        if (is_null($officePhone)) {
            array_push($this->openAPINullablesSetToNull, 'officePhone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('officePhone', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['officePhone'] = $officePhone;

        return $this;
    }

    /**
     * Gets homePhone2
     *
     * @return string|null
     */
    public function getHomePhone2()
    {
        return $this->container['homePhone2'];
    }

    /**
     * Sets homePhone2
     *
     * @param string|null $homePhone2 The user's secondary home phone number
     *
     * @return self
     */
    public function setHomePhone2($homePhone2)
    {
        if (is_null($homePhone2)) {
            array_push($this->openAPINullablesSetToNull, 'homePhone2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('homePhone2', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['homePhone2'] = $homePhone2;

        return $this;
    }

    /**
     * Gets hasRelationships
     *
     * @return bool|null
     */
    public function getHasRelationships()
    {
        return $this->container['hasRelationships'];
    }

    /**
     * Sets hasRelationships
     *
     * @param bool|null $hasRelationships Returns true if the user has relationships
     *
     * @return self
     */
    public function setHasRelationships($hasRelationships)
    {
        if (is_null($hasRelationships)) {
            array_push($this->openAPINullablesSetToNull, 'hasRelationships');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hasRelationships', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hasRelationships'] = $hasRelationships;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix The user's prefix
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (is_null($prefix)) {
            array_push($this->openAPINullablesSetToNull, 'prefix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prefix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets preferredName
     *
     * @return string|null
     */
    public function getPreferredName()
    {
        return $this->container['preferredName'];
    }

    /**
     * Sets preferredName
     *
     * @param string|null $preferredName The user's preferred name
     *
     * @return self
     */
    public function setPreferredName($preferredName)
    {
        if (is_null($preferredName)) {
            array_push($this->openAPINullablesSetToNull, 'preferredName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferredName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferredName'] = $preferredName;

        return $this;
    }

    /**
     * Gets profilePhoto
     *
     * @return string|null
     */
    public function getProfilePhoto()
    {
        return $this->container['profilePhoto'];
    }

    /**
     * Sets profilePhoto
     *
     * @param string|null $profilePhoto The user's profile photo
     *
     * @return self
     */
    public function setProfilePhoto($profilePhoto)
    {
        if (is_null($profilePhoto)) {
            array_push($this->openAPINullablesSetToNull, 'profilePhoto');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profilePhoto', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['profilePhoto'] = $profilePhoto;

        return $this;
    }

    /**
     * Gets middlename
     *
     * @return string|null
     */
    public function getMiddlename()
    {
        return $this->container['middlename'];
    }

    /**
     * Sets middlename
     *
     * @param string|null $middlename The user's middle name
     *
     * @return self
     */
    public function setMiddlename($middlename)
    {
        if (is_null($middlename)) {
            array_push($this->openAPINullablesSetToNull, 'middlename');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('middlename', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['middlename'] = $middlename;

        return $this;
    }

    /**
     * Gets maidenName
     *
     * @return string|null
     */
    public function getMaidenName()
    {
        return $this->container['maidenName'];
    }

    /**
     * Sets maidenName
     *
     * @param string|null $maidenName The user's maiden name
     *
     * @return self
     */
    public function setMaidenName($maidenName)
    {
        if (is_null($maidenName)) {
            array_push($this->openAPINullablesSetToNull, 'maidenName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maidenName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maidenName'] = $maidenName;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string|null
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string|null $suffix The user's suffix
     *
     * @return self
     */
    public function setSuffix($suffix)
    {
        if (is_null($suffix)) {
            array_push($this->openAPINullablesSetToNull, 'suffix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suffix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets gradYear
     *
     * @return string|null
     */
    public function getGradYear()
    {
        return $this->container['gradYear'];
    }

    /**
     * Sets gradYear
     *
     * @param string|null $gradYear The user's graduation year
     *
     * @return self
     */
    public function setGradYear($gradYear)
    {
        if (is_null($gradYear)) {
            array_push($this->openAPINullablesSetToNull, 'gradYear');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gradYear', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gradYear'] = $gradYear;

        return $this;
    }

    /**
     * Gets grade
     *
     * @return string|null
     */
    public function getGrade()
    {
        return $this->container['grade'];
    }

    /**
     * Sets grade
     *
     * @param string|null $grade The user's grade
     *
     * @return self
     */
    public function setGrade($grade)
    {
        if (is_null($grade)) {
            array_push($this->openAPINullablesSetToNull, 'grade');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grade', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grade'] = $grade;

        return $this;
    }

    /**
     * Gets gradeDisplay
     *
     * @return string|null
     */
    public function getGradeDisplay()
    {
        return $this->container['gradeDisplay'];
    }

    /**
     * Sets gradeDisplay
     *
     * @param string|null $gradeDisplay Grade display
     *
     * @return self
     */
    public function setGradeDisplay($gradeDisplay)
    {
        if (is_null($gradeDisplay)) {
            array_push($this->openAPINullablesSetToNull, 'gradeDisplay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gradeDisplay', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gradeDisplay'] = $gradeDisplay;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department The department the user belongs to
     *
     * @return self
     */
    public function setDepartment($department)
    {
        if (is_null($department)) {
            array_push($this->openAPINullablesSetToNull, 'department');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('department', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets departmentDisplay
     *
     * @return string|null
     */
    public function getDepartmentDisplay()
    {
        return $this->container['departmentDisplay'];
    }

    /**
     * Sets departmentDisplay
     *
     * @param string|null $departmentDisplay How the user's department should be displayed
     *
     * @return self
     */
    public function setDepartmentDisplay($departmentDisplay)
    {
        if (is_null($departmentDisplay)) {
            array_push($this->openAPINullablesSetToNull, 'departmentDisplay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('departmentDisplay', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['departmentDisplay'] = $departmentDisplay;

        return $this;
    }

    /**
     * Gets spouseId
     *
     * @return int|null
     */
    public function getSpouseId()
    {
        return $this->container['spouseId'];
    }

    /**
     * Sets spouseId
     *
     * @param int|null $spouseId The Id of the user's spouse
     *
     * @return self
     */
    public function setSpouseId($spouseId)
    {
        if (is_null($spouseId)) {
            array_push($this->openAPINullablesSetToNull, 'spouseId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('spouseId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['spouseId'] = $spouseId;

        return $this;
    }

    /**
     * Gets childNames
     *
     * @return string|null
     */
    public function getChildNames()
    {
        return $this->container['childNames'];
    }

    /**
     * Sets childNames
     *
     * @param string|null $childNames The user's children
     *
     * @return self
     */
    public function setChildNames($childNames)
    {
        if (is_null($childNames)) {
            array_push($this->openAPINullablesSetToNull, 'childNames');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('childNames', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['childNames'] = $childNames;

        return $this;
    }

    /**
     * Gets gradeNumeric
     *
     * @return int|null
     */
    public function getGradeNumeric()
    {
        return $this->container['gradeNumeric'];
    }

    /**
     * Sets gradeNumeric
     *
     * @param int|null $gradeNumeric The numeric grade of the user
     *
     * @return self
     */
    public function setGradeNumeric($gradeNumeric)
    {
        if (is_null($gradeNumeric)) {
            array_push($this->openAPINullablesSetToNull, 'gradeNumeric');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gradeNumeric', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gradeNumeric'] = $gradeNumeric;

        return $this;
    }

    /**
     * Gets gradeNumericDisplay
     *
     * @return string|null
     */
    public function getGradeNumericDisplay()
    {
        return $this->container['gradeNumericDisplay'];
    }

    /**
     * Sets gradeNumericDisplay
     *
     * @param string|null $gradeNumericDisplay The way the numeric grade should be displayed
     *
     * @return self
     */
    public function setGradeNumericDisplay($gradeNumericDisplay)
    {
        if (is_null($gradeNumericDisplay)) {
            array_push($this->openAPINullablesSetToNull, 'gradeNumericDisplay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gradeNumericDisplay', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gradeNumericDisplay'] = $gradeNumericDisplay;

        return $this;
    }

    /**
     * Gets totalCount
     *
     * @return int|null
     */
    public function getTotalCount()
    {
        return $this->container['totalCount'];
    }

    /**
     * Sets totalCount
     *
     * @param int|null $totalCount The total count of records
     *
     * @return self
     */
    public function setTotalCount($totalCount)
    {
        if (is_null($totalCount)) {
            array_push($this->openAPINullablesSetToNull, 'totalCount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('totalCount', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['totalCount'] = $totalCount;

        return $this;
    }

    /**
     * Gets deceased
     *
     * @return bool|null
     */
    public function getDeceased()
    {
        return $this->container['deceased'];
    }

    /**
     * Sets deceased
     *
     * @param bool|null $deceased Returns true if the user is deceased
     *
     * @return self
     */
    public function setDeceased($deceased)
    {
        if (is_null($deceased)) {
            array_push($this->openAPINullablesSetToNull, 'deceased');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deceased', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deceased'] = $deceased;

        return $this;
    }

    /**
     * Gets student
     *
     * @return bool|null
     */
    public function getStudent()
    {
        return $this->container['student'];
    }

    /**
     * Sets student
     *
     * @param bool|null $student Returns true if the user is a student
     *
     * @return self
     */
    public function setStudent($student)
    {
        if (is_null($student)) {
            array_push($this->openAPINullablesSetToNull, 'student');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('student', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['student'] = $student;

        return $this;
    }

    /**
     * Gets preferredAddressId
     *
     * @return int|null
     */
    public function getPreferredAddressId()
    {
        return $this->container['preferredAddressId'];
    }

    /**
     * Sets preferredAddressId
     *
     * @param int|null $preferredAddressId The Id of the preferred address for the user
     *
     * @return self
     */
    public function setPreferredAddressId($preferredAddressId)
    {
        if (is_null($preferredAddressId)) {
            array_push($this->openAPINullablesSetToNull, 'preferredAddressId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferredAddressId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferredAddressId'] = $preferredAddressId;

        return $this;
    }

    /**
     * Gets preferredAddressLat
     *
     * @return float|null
     */
    public function getPreferredAddressLat()
    {
        return $this->container['preferredAddressLat'];
    }

    /**
     * Sets preferredAddressLat
     *
     * @param float|null $preferredAddressLat Preferred address latitude
     *
     * @return self
     */
    public function setPreferredAddressLat($preferredAddressLat)
    {
        if (is_null($preferredAddressLat)) {
            array_push($this->openAPINullablesSetToNull, 'preferredAddressLat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferredAddressLat', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferredAddressLat'] = $preferredAddressLat;

        return $this;
    }

    /**
     * Gets preferredAddressLng
     *
     * @return float|null
     */
    public function getPreferredAddressLng()
    {
        return $this->container['preferredAddressLng'];
    }

    /**
     * Sets preferredAddressLng
     *
     * @param float|null $preferredAddressLng Preferred address longitude
     *
     * @return self
     */
    public function setPreferredAddressLng($preferredAddressLng)
    {
        if (is_null($preferredAddressLng)) {
            array_push($this->openAPINullablesSetToNull, 'preferredAddressLng');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferredAddressLng', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferredAddressLng'] = $preferredAddressLng;

        return $this;
    }

    /**
     * Gets jobTitle
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->container['jobTitle'];
    }

    /**
     * Sets jobTitle
     *
     * @param string|null $jobTitle The user's job title
     *
     * @return self
     */
    public function setJobTitle($jobTitle)
    {
        if (is_null($jobTitle)) {
            array_push($this->openAPINullablesSetToNull, 'jobTitle');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('jobTitle', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['jobTitle'] = $jobTitle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
