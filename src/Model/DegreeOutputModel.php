<?php
/**
 * DegreeOutputModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * DegreeOutputModel Class Doc Comment
 *
 * @category Class
 * @description
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DegreeOutputModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DegreeOutputModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'declared_on' => '\DateTime',
        'completed_on' => '\DateTime',
        'conferred_on' => '\DateTime',
        'credits_completed' => 'float',
        'credits_in_progress' => 'float',
        'credits_remaining' => 'float',
        'created_by' => 'string',
        'modified_by' => 'string',
        'created' => '\DateTime',
        'modified' => '\DateTime',
        'requirement_set' => '\SKY\School\Model\AreaOfStudyOutputModel[]',
        'majors' => '\SKY\School\Model\UserAreaOfStudyReferenceOutputModel[]',
        'minors' => '\SKY\School\Model\UserAreaOfStudyReferenceOutputModel[]',
        'concentrations' => '\SKY\School\Model\UserAreaOfStudyReferenceOutputModel[]',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'declared_on' => 'date-time',
        'completed_on' => 'date-time',
        'conferred_on' => 'date-time',
        'credits_completed' => 'double',
        'credits_in_progress' => 'double',
        'credits_remaining' => 'double',
        'created_by' => null,
        'modified_by' => null,
        'created' => 'date-time',
        'modified' => 'date-time',
        'requirement_set' => null,
        'majors' => null,
        'minors' => null,
        'concentrations' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'declared_on' => true,
        'completed_on' => true,
        'conferred_on' => true,
        'credits_completed' => true,
        'credits_in_progress' => true,
        'credits_remaining' => true,
        'created_by' => true,
        'modified_by' => true,
        'created' => true,
        'modified' => true,
        'requirement_set' => true,
        'majors' => true,
        'minors' => true,
        'concentrations' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'declared_on' => 'declared_on',
        'completed_on' => 'completed_on',
        'conferred_on' => 'conferred_on',
        'credits_completed' => 'credits_completed',
        'credits_in_progress' => 'credits_in_progress',
        'credits_remaining' => 'credits_remaining',
        'created_by' => 'created_by',
        'modified_by' => 'modified_by',
        'created' => 'created',
        'modified' => 'modified',
        'requirement_set' => 'requirement_set',
        'majors' => 'majors',
        'minors' => 'minors',
        'concentrations' => 'concentrations',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'declared_on' => 'setDeclaredOn',
        'completed_on' => 'setCompletedOn',
        'conferred_on' => 'setConferredOn',
        'credits_completed' => 'setCreditsCompleted',
        'credits_in_progress' => 'setCreditsInProgress',
        'credits_remaining' => 'setCreditsRemaining',
        'created_by' => 'setCreatedBy',
        'modified_by' => 'setModifiedBy',
        'created' => 'setCreated',
        'modified' => 'setModified',
        'requirement_set' => 'setRequirementSet',
        'majors' => 'setMajors',
        'minors' => 'setMinors',
        'concentrations' => 'setConcentrations',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'declared_on' => 'getDeclaredOn',
        'completed_on' => 'getCompletedOn',
        'conferred_on' => 'getConferredOn',
        'credits_completed' => 'getCreditsCompleted',
        'credits_in_progress' => 'getCreditsInProgress',
        'credits_remaining' => 'getCreditsRemaining',
        'created_by' => 'getCreatedBy',
        'modified_by' => 'getModifiedBy',
        'created' => 'getCreated',
        'modified' => 'getModified',
        'requirement_set' => 'getRequirementSet',
        'majors' => 'getMajors',
        'minors' => 'getMinors',
        'concentrations' => 'getConcentrations',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('declared_on', $data ?? [], null);
        $this->setIfExists('completed_on', $data ?? [], null);
        $this->setIfExists('conferred_on', $data ?? [], null);
        $this->setIfExists('credits_completed', $data ?? [], null);
        $this->setIfExists('credits_in_progress', $data ?? [], null);
        $this->setIfExists('credits_remaining', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('modified_by', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('modified', $data ?? [], null);
        $this->setIfExists('requirement_set', $data ?? [], null);
        $this->setIfExists('majors', $data ?? [], null);
        $this->setIfExists('minors', $data ?? [], null);
        $this->setIfExists('concentrations', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The Id of the area of study
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets declared_on
     *
     * @return \DateTime|null
     */
    public function getDeclaredOn()
    {
        return $this->container['declared_on'];
    }

    /**
     * Sets declared_on
     *
     * @param \DateTime|null $declared_on From User Area of Study Reference
     *
     * @return self
     */
    public function setDeclaredOn($declared_on)
    {
        if (is_null($declared_on)) {
            array_push($this->openAPINullablesSetToNull, 'declared_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('declared_on', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['declared_on'] = $declared_on;

        return $this;
    }

    /**
     * Gets completed_on
     *
     * @return \DateTime|null
     */
    public function getCompletedOn()
    {
        return $this->container['completed_on'];
    }

    /**
     * Sets completed_on
     *
     * @param \DateTime|null $completed_on From User Area of Study Group
     *
     * @return self
     */
    public function setCompletedOn($completed_on)
    {
        if (is_null($completed_on)) {
            array_push($this->openAPINullablesSetToNull, 'completed_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('completed_on', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['completed_on'] = $completed_on;

        return $this;
    }

    /**
     * Gets conferred_on
     *
     * @return \DateTime|null
     */
    public function getConferredOn()
    {
        return $this->container['conferred_on'];
    }

    /**
     * Sets conferred_on
     *
     * @param \DateTime|null $conferred_on From User Area of Study Group
     *
     * @return self
     */
    public function setConferredOn($conferred_on)
    {
        if (is_null($conferred_on)) {
            array_push($this->openAPINullablesSetToNull, 'conferred_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('conferred_on', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['conferred_on'] = $conferred_on;

        return $this;
    }

    /**
     * Gets credits_completed
     *
     * @return float|null
     */
    public function getCreditsCompleted()
    {
        return $this->container['credits_completed'];
    }

    /**
     * Sets credits_completed
     *
     * @param float|null $credits_completed From User Area of Study Reference
     *
     * @return self
     */
    public function setCreditsCompleted($credits_completed)
    {
        if (is_null($credits_completed)) {
            array_push($this->openAPINullablesSetToNull, 'credits_completed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('credits_completed', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['credits_completed'] = $credits_completed;

        return $this;
    }

    /**
     * Gets credits_in_progress
     *
     * @return float|null
     */
    public function getCreditsInProgress()
    {
        return $this->container['credits_in_progress'];
    }

    /**
     * Sets credits_in_progress
     *
     * @param float|null $credits_in_progress From User Area of Study Reference
     *
     * @return self
     */
    public function setCreditsInProgress($credits_in_progress)
    {
        if (is_null($credits_in_progress)) {
            array_push($this->openAPINullablesSetToNull, 'credits_in_progress');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('credits_in_progress', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['credits_in_progress'] = $credits_in_progress;

        return $this;
    }

    /**
     * Gets credits_remaining
     *
     * @return float|null
     */
    public function getCreditsRemaining()
    {
        return $this->container['credits_remaining'];
    }

    /**
     * Sets credits_remaining
     *
     * @param float|null $credits_remaining From User Area of Study Reference
     *
     * @return self
     */
    public function setCreditsRemaining($credits_remaining)
    {
        if (is_null($credits_remaining)) {
            array_push($this->openAPINullablesSetToNull, 'credits_remaining');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('credits_remaining', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['credits_remaining'] = $credits_remaining;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string|null $created_by The BBID of the user who created the area of study
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            array_push($this->openAPINullablesSetToNull, 'created_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_by', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets modified_by
     *
     * @return string|null
     */
    public function getModifiedBy()
    {
        return $this->container['modified_by'];
    }

    /**
     * Sets modified_by
     *
     * @param string|null $modified_by The BBID of the user who last modified the area of study
     *
     * @return self
     */
    public function setModifiedBy($modified_by)
    {
        if (is_null($modified_by)) {
            array_push($this->openAPINullablesSetToNull, 'modified_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('modified_by', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['modified_by'] = $modified_by;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created The date the area of study was created
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            array_push($this->openAPINullablesSetToNull, 'created');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime|null
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime|null $modified The date the area of study was last modified
     *
     * @return self
     */
    public function setModified($modified)
    {
        if (is_null($modified)) {
            array_push($this->openAPINullablesSetToNull, 'modified');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('modified', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets requirement_set
     *
     * @return \SKY\School\Model\AreaOfStudyOutputModel[]|null
     */
    public function getRequirementSet()
    {
        return $this->container['requirement_set'];
    }

    /**
     * Sets requirement_set
     *
     * @param \SKY\School\Model\AreaOfStudyOutputModel[]|null $requirement_set
     *
     * @return self
     */
    public function setRequirementSet($requirement_set)
    {
        if (is_null($requirement_set)) {
            array_push($this->openAPINullablesSetToNull, 'requirement_set');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requirement_set', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['requirement_set'] = $requirement_set;

        return $this;
    }

    /**
     * Gets majors
     *
     * @return \SKY\School\Model\UserAreaOfStudyReferenceOutputModel[]|null
     */
    public function getMajors()
    {
        return $this->container['majors'];
    }

    /**
     * Sets majors
     *
     * @param \SKY\School\Model\UserAreaOfStudyReferenceOutputModel[]|null $majors
     *
     * @return self
     */
    public function setMajors($majors)
    {
        if (is_null($majors)) {
            array_push($this->openAPINullablesSetToNull, 'majors');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('majors', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['majors'] = $majors;

        return $this;
    }

    /**
     * Gets minors
     *
     * @return \SKY\School\Model\UserAreaOfStudyReferenceOutputModel[]|null
     */
    public function getMinors()
    {
        return $this->container['minors'];
    }

    /**
     * Sets minors
     *
     * @param \SKY\School\Model\UserAreaOfStudyReferenceOutputModel[]|null $minors
     *
     * @return self
     */
    public function setMinors($minors)
    {
        if (is_null($minors)) {
            array_push($this->openAPINullablesSetToNull, 'minors');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('minors', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['minors'] = $minors;

        return $this;
    }

    /**
     * Gets concentrations
     *
     * @return \SKY\School\Model\UserAreaOfStudyReferenceOutputModel[]|null
     */
    public function getConcentrations()
    {
        return $this->container['concentrations'];
    }

    /**
     * Sets concentrations
     *
     * @param \SKY\School\Model\UserAreaOfStudyReferenceOutputModel[]|null $concentrations
     *
     * @return self
     */
    public function setConcentrations($concentrations)
    {
        if (is_null($concentrations)) {
            array_push($this->openAPINullablesSetToNull, 'concentrations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('concentrations', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['concentrations'] = $concentrations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
