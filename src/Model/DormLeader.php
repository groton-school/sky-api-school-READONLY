<?php
/**
 * DormLeader
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * DormLeader Class Doc Comment
 *
 * @category Class
 * @description
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DormLeader implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DormLeader';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'buildingId' => 'int',
        'displayName' => 'string',
        'isAdmin' => 'bool',
        'isHead' => 'bool',
        'ownerType' => 'int',
        'residentFromDate' => '\DateTime',
        'roomId' => 'int',
        'sectionId' => 'int',
        'userId' => 'int',
        'firstName' => 'string',
        'lastName' => 'string',
        'maidenName' => 'string',
        'prefix' => 'string',
        'suffix' => 'string',
        'middleName' => 'string',
        'display' => 'string',
        'dateOfBirth' => '\DateTime',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'buildingId' => 'int32',
        'displayName' => null,
        'isAdmin' => null,
        'isHead' => null,
        'ownerType' => 'int32',
        'residentFromDate' => 'date-time',
        'roomId' => 'int32',
        'sectionId' => 'int32',
        'userId' => 'int32',
        'firstName' => null,
        'lastName' => null,
        'maidenName' => null,
        'prefix' => null,
        'suffix' => null,
        'middleName' => null,
        'display' => null,
        'dateOfBirth' => 'date-time',
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'buildingId' => true,
        'displayName' => true,
        'isAdmin' => true,
        'isHead' => true,
        'ownerType' => true,
        'residentFromDate' => true,
        'roomId' => true,
        'sectionId' => true,
        'userId' => true,
        'firstName' => true,
        'lastName' => true,
        'maidenName' => true,
        'prefix' => true,
        'suffix' => true,
        'middleName' => true,
        'display' => true,
        'dateOfBirth' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'buildingId' => 'building_id',
        'displayName' => 'display_name',
        'isAdmin' => 'is_admin',
        'isHead' => 'is_head',
        'ownerType' => 'owner_type',
        'residentFromDate' => 'resident_from_date',
        'roomId' => 'room_id',
        'sectionId' => 'section_id',
        'userId' => 'user_id',
        'firstName' => 'first_name',
        'lastName' => 'last_name',
        'maidenName' => 'maiden_name',
        'prefix' => 'prefix',
        'suffix' => 'suffix',
        'middleName' => 'middle_name',
        'display' => 'display',
        'dateOfBirth' => 'date_of_birth',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'buildingId' => 'setBuildingId',
        'displayName' => 'setDisplayName',
        'isAdmin' => 'setIsAdmin',
        'isHead' => 'setIsHead',
        'ownerType' => 'setOwnerType',
        'residentFromDate' => 'setResidentFromDate',
        'roomId' => 'setRoomId',
        'sectionId' => 'setSectionId',
        'userId' => 'setUserId',
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'maidenName' => 'setMaidenName',
        'prefix' => 'setPrefix',
        'suffix' => 'setSuffix',
        'middleName' => 'setMiddleName',
        'display' => 'setDisplay',
        'dateOfBirth' => 'setDateOfBirth',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'buildingId' => 'getBuildingId',
        'displayName' => 'getDisplayName',
        'isAdmin' => 'getIsAdmin',
        'isHead' => 'getIsHead',
        'ownerType' => 'getOwnerType',
        'residentFromDate' => 'getResidentFromDate',
        'roomId' => 'getRoomId',
        'sectionId' => 'getSectionId',
        'userId' => 'getUserId',
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'maidenName' => 'getMaidenName',
        'prefix' => 'getPrefix',
        'suffix' => 'getSuffix',
        'middleName' => 'getMiddleName',
        'display' => 'getDisplay',
        'dateOfBirth' => 'getDateOfBirth',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('buildingId', $data ?? [], null);
        $this->setIfExists('displayName', $data ?? [], null);
        $this->setIfExists('isAdmin', $data ?? [], null);
        $this->setIfExists('isHead', $data ?? [], null);
        $this->setIfExists('ownerType', $data ?? [], null);
        $this->setIfExists('residentFromDate', $data ?? [], null);
        $this->setIfExists('roomId', $data ?? [], null);
        $this->setIfExists('sectionId', $data ?? [], null);
        $this->setIfExists('userId', $data ?? [], null);
        $this->setIfExists('firstName', $data ?? [], null);
        $this->setIfExists('lastName', $data ?? [], null);
        $this->setIfExists('maidenName', $data ?? [], null);
        $this->setIfExists('prefix', $data ?? [], null);
        $this->setIfExists('suffix', $data ?? [], null);
        $this->setIfExists('middleName', $data ?? [], null);
        $this->setIfExists('display', $data ?? [], null);
        $this->setIfExists('dateOfBirth', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets buildingId
     *
     * @return int|null
     */
    public function getBuildingId()
    {
        return $this->container['buildingId'];
    }

    /**
     * Sets buildingId
     *
     * @param int|null $buildingId
     *
     * @return self
     */
    public function setBuildingId($buildingId)
    {
        if (is_null($buildingId)) {
            array_push($this->openAPINullablesSetToNull, 'buildingId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buildingId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buildingId'] = $buildingId;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string|null $displayName
     *
     * @return self
     */
    public function setDisplayName($displayName)
    {
        if (is_null($displayName)) {
            array_push($this->openAPINullablesSetToNull, 'displayName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('displayName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets isAdmin
     *
     * @return bool|null
     */
    public function getIsAdmin()
    {
        return $this->container['isAdmin'];
    }

    /**
     * Sets isAdmin
     *
     * @param bool|null $isAdmin
     *
     * @return self
     */
    public function setIsAdmin($isAdmin)
    {
        if (is_null($isAdmin)) {
            array_push($this->openAPINullablesSetToNull, 'isAdmin');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isAdmin', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isAdmin'] = $isAdmin;

        return $this;
    }

    /**
     * Gets isHead
     *
     * @return bool|null
     */
    public function getIsHead()
    {
        return $this->container['isHead'];
    }

    /**
     * Sets isHead
     *
     * @param bool|null $isHead
     *
     * @return self
     */
    public function setIsHead($isHead)
    {
        if (is_null($isHead)) {
            array_push($this->openAPINullablesSetToNull, 'isHead');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isHead', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isHead'] = $isHead;

        return $this;
    }

    /**
     * Gets ownerType
     *
     * @return int|null
     */
    public function getOwnerType()
    {
        return $this->container['ownerType'];
    }

    /**
     * Sets ownerType
     *
     * @param int|null $ownerType
     *
     * @return self
     */
    public function setOwnerType($ownerType)
    {
        if (is_null($ownerType)) {
            array_push($this->openAPINullablesSetToNull, 'ownerType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ownerType', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ownerType'] = $ownerType;

        return $this;
    }

    /**
     * Gets residentFromDate
     *
     * @return \DateTime|null
     */
    public function getResidentFromDate()
    {
        return $this->container['residentFromDate'];
    }

    /**
     * Sets residentFromDate
     *
     * @param \DateTime|null $residentFromDate
     *
     * @return self
     */
    public function setResidentFromDate($residentFromDate)
    {
        if (is_null($residentFromDate)) {
            array_push($this->openAPINullablesSetToNull, 'residentFromDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('residentFromDate', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['residentFromDate'] = $residentFromDate;

        return $this;
    }

    /**
     * Gets roomId
     *
     * @return int|null
     */
    public function getRoomId()
    {
        return $this->container['roomId'];
    }

    /**
     * Sets roomId
     *
     * @param int|null $roomId
     *
     * @return self
     */
    public function setRoomId($roomId)
    {
        if (is_null($roomId)) {
            array_push($this->openAPINullablesSetToNull, 'roomId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roomId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roomId'] = $roomId;

        return $this;
    }

    /**
     * Gets sectionId
     *
     * @return int|null
     */
    public function getSectionId()
    {
        return $this->container['sectionId'];
    }

    /**
     * Sets sectionId
     *
     * @param int|null $sectionId
     *
     * @return self
     */
    public function setSectionId($sectionId)
    {
        if (is_null($sectionId)) {
            array_push($this->openAPINullablesSetToNull, 'sectionId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sectionId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sectionId'] = $sectionId;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param int|null $userId
     *
     * @return self
     */
    public function setUserId($userId)
    {
        if (is_null($userId)) {
            array_push($this->openAPINullablesSetToNull, 'userId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('userId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName
     *
     * @return self
     */
    public function setFirstName($firstName)
    {
        if (is_null($firstName)) {
            array_push($this->openAPINullablesSetToNull, 'firstName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('firstName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName
     *
     * @return self
     */
    public function setLastName($lastName)
    {
        if (is_null($lastName)) {
            array_push($this->openAPINullablesSetToNull, 'lastName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets maidenName
     *
     * @return string|null
     */
    public function getMaidenName()
    {
        return $this->container['maidenName'];
    }

    /**
     * Sets maidenName
     *
     * @param string|null $maidenName
     *
     * @return self
     */
    public function setMaidenName($maidenName)
    {
        if (is_null($maidenName)) {
            array_push($this->openAPINullablesSetToNull, 'maidenName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maidenName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maidenName'] = $maidenName;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (is_null($prefix)) {
            array_push($this->openAPINullablesSetToNull, 'prefix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prefix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string|null
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string|null $suffix
     *
     * @return self
     */
    public function setSuffix($suffix)
    {
        if (is_null($suffix)) {
            array_push($this->openAPINullablesSetToNull, 'suffix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suffix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets middleName
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middleName'];
    }

    /**
     * Sets middleName
     *
     * @param string|null $middleName
     *
     * @return self
     */
    public function setMiddleName($middleName)
    {
        if (is_null($middleName)) {
            array_push($this->openAPINullablesSetToNull, 'middleName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('middleName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['middleName'] = $middleName;

        return $this;
    }

    /**
     * Gets display
     *
     * @return string|null
     */
    public function getDisplay()
    {
        return $this->container['display'];
    }

    /**
     * Sets display
     *
     * @param string|null $display
     *
     * @return self
     */
    public function setDisplay($display)
    {
        if (is_null($display)) {
            array_push($this->openAPINullablesSetToNull, 'display');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('display', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['display'] = $display;

        return $this;
    }

    /**
     * Gets dateOfBirth
     *
     * @return \DateTime|null
     */
    public function getDateOfBirth()
    {
        return $this->container['dateOfBirth'];
    }

    /**
     * Sets dateOfBirth
     *
     * @param \DateTime|null $dateOfBirth
     *
     * @return self
     */
    public function setDateOfBirth($dateOfBirth)
    {
        if (is_null($dateOfBirth)) {
            array_push($this->openAPINullablesSetToNull, 'dateOfBirth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dateOfBirth', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dateOfBirth'] = $dateOfBirth;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
