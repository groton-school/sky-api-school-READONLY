<?php
/**
 * CandidateRead
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * CandidateRead Class Doc Comment
 *
 * @category Class
 * @description Candidate Read
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CandidateRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CandidateRead';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user_id' => 'int',
        'first_name' => 'string',
        'last_name' => 'string',
        'middle_name' => 'string',
        'prefix' => 'string',
        'suffix' => 'string',
        'nickname' => 'string',
        'role' => 'string',
        'role_id' => 'int',
        'current_status' => 'string',
        'status_id' => 'int',
        'entering_year' => 'string',
        'entering_year_id' => 'int',
        'entering_grade' => 'string',
        'entering_grade_id' => 'int',
        'email' => 'string',
        'comment' => 'string',
        'parent1_email' => 'string',
        'parent2_email' => 'string',
        'international' => 'bool',
        'school_program' => 'string',
        'gender' => 'string',
        'ethnicity' => 'string',
        'boarding_or_day' => 'string',
        'financial_aid' => 'bool',
        'admissions_staff_id' => 'int',
        'admissions_staff' => 'string',
        'inquiry_source' => 'string',
        'inquiry_source_id' => 'int',
        'referral_type' => 'string',
        'referral_type_id' => 'int',
        'has_iep' => 'bool',
        'has_504' => 'bool',
        'created_by' => 'string',
        'created' => '\DateTime',
        'modified_by' => 'string',
        'modified' => '\DateTime',
        'preferred_name' => 'string',
        'decision' => '\SKY\School\Model\SchoolDecisionModel',
        'family_id' => 'int',
        'current_status_date' => '\DateTime',
        'application' => '\SKY\School\Model\ApplicationModel',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user_id' => 'int32',
        'first_name' => null,
        'last_name' => null,
        'middle_name' => null,
        'prefix' => null,
        'suffix' => null,
        'nickname' => null,
        'role' => null,
        'role_id' => 'int32',
        'current_status' => null,
        'status_id' => 'int32',
        'entering_year' => null,
        'entering_year_id' => 'int32',
        'entering_grade' => null,
        'entering_grade_id' => 'int32',
        'email' => null,
        'comment' => null,
        'parent1_email' => null,
        'parent2_email' => null,
        'international' => null,
        'school_program' => null,
        'gender' => null,
        'ethnicity' => null,
        'boarding_or_day' => null,
        'financial_aid' => null,
        'admissions_staff_id' => 'int32',
        'admissions_staff' => null,
        'inquiry_source' => null,
        'inquiry_source_id' => 'int32',
        'referral_type' => null,
        'referral_type_id' => 'int32',
        'has_iep' => null,
        'has_504' => null,
        'created_by' => null,
        'created' => 'date-time',
        'modified_by' => null,
        'modified' => 'date-time',
        'preferred_name' => null,
        'decision' => null,
        'family_id' => 'int32',
        'current_status_date' => 'date-time',
        'application' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'user_id' => true,
        'first_name' => true,
        'last_name' => true,
        'middle_name' => true,
        'prefix' => true,
        'suffix' => true,
        'nickname' => true,
        'role' => true,
        'role_id' => true,
        'current_status' => true,
        'status_id' => true,
        'entering_year' => true,
        'entering_year_id' => true,
        'entering_grade' => true,
        'entering_grade_id' => true,
        'email' => true,
        'comment' => true,
        'parent1_email' => true,
        'parent2_email' => true,
        'international' => true,
        'school_program' => true,
        'gender' => true,
        'ethnicity' => true,
        'boarding_or_day' => true,
        'financial_aid' => true,
        'admissions_staff_id' => true,
        'admissions_staff' => true,
        'inquiry_source' => true,
        'inquiry_source_id' => true,
        'referral_type' => true,
        'referral_type_id' => true,
        'has_iep' => true,
        'has_504' => true,
        'created_by' => true,
        'created' => true,
        'modified_by' => true,
        'modified' => true,
        'preferred_name' => true,
        'decision' => false,
        'family_id' => true,
        'current_status_date' => true,
        'application' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_id' => 'user_id',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'middle_name' => 'middle_name',
        'prefix' => 'prefix',
        'suffix' => 'suffix',
        'nickname' => 'nickname',
        'role' => 'role',
        'role_id' => 'role_id',
        'current_status' => 'current_status',
        'status_id' => 'status_id',
        'entering_year' => 'entering_year',
        'entering_year_id' => 'entering_year_id',
        'entering_grade' => 'entering_grade',
        'entering_grade_id' => 'entering_grade_id',
        'email' => 'email',
        'comment' => 'comment',
        'parent1_email' => 'parent1_email',
        'parent2_email' => 'parent2_email',
        'international' => 'international',
        'school_program' => 'school_program',
        'gender' => 'gender',
        'ethnicity' => 'ethnicity',
        'boarding_or_day' => 'boarding_or_day',
        'financial_aid' => 'financial_aid',
        'admissions_staff_id' => 'admissions_staff_id',
        'admissions_staff' => 'admissions_staff',
        'inquiry_source' => 'inquiry_source',
        'inquiry_source_id' => 'inquiry_source_id',
        'referral_type' => 'referral_type',
        'referral_type_id' => 'referral_type_id',
        'has_iep' => 'has_iep',
        'has_504' => 'has_504',
        'created_by' => 'created_by',
        'created' => 'created',
        'modified_by' => 'modified_by',
        'modified' => 'modified',
        'preferred_name' => 'preferred_name',
        'decision' => 'decision',
        'family_id' => 'family_id',
        'current_status_date' => 'current_status_date',
        'application' => 'application',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_id' => 'setUserId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'middle_name' => 'setMiddleName',
        'prefix' => 'setPrefix',
        'suffix' => 'setSuffix',
        'nickname' => 'setNickname',
        'role' => 'setRole',
        'role_id' => 'setRoleId',
        'current_status' => 'setCurrentStatus',
        'status_id' => 'setStatusId',
        'entering_year' => 'setEnteringYear',
        'entering_year_id' => 'setEnteringYearId',
        'entering_grade' => 'setEnteringGrade',
        'entering_grade_id' => 'setEnteringGradeId',
        'email' => 'setEmail',
        'comment' => 'setComment',
        'parent1_email' => 'setParent1Email',
        'parent2_email' => 'setParent2Email',
        'international' => 'setInternational',
        'school_program' => 'setSchoolProgram',
        'gender' => 'setGender',
        'ethnicity' => 'setEthnicity',
        'boarding_or_day' => 'setBoardingOrDay',
        'financial_aid' => 'setFinancialAid',
        'admissions_staff_id' => 'setAdmissionsStaffId',
        'admissions_staff' => 'setAdmissionsStaff',
        'inquiry_source' => 'setInquirySource',
        'inquiry_source_id' => 'setInquirySourceId',
        'referral_type' => 'setReferralType',
        'referral_type_id' => 'setReferralTypeId',
        'has_iep' => 'setHasIep',
        'has_504' => 'setHas504',
        'created_by' => 'setCreatedBy',
        'created' => 'setCreated',
        'modified_by' => 'setModifiedBy',
        'modified' => 'setModified',
        'preferred_name' => 'setPreferredName',
        'decision' => 'setDecision',
        'family_id' => 'setFamilyId',
        'current_status_date' => 'setCurrentStatusDate',
        'application' => 'setApplication',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_id' => 'getUserId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'middle_name' => 'getMiddleName',
        'prefix' => 'getPrefix',
        'suffix' => 'getSuffix',
        'nickname' => 'getNickname',
        'role' => 'getRole',
        'role_id' => 'getRoleId',
        'current_status' => 'getCurrentStatus',
        'status_id' => 'getStatusId',
        'entering_year' => 'getEnteringYear',
        'entering_year_id' => 'getEnteringYearId',
        'entering_grade' => 'getEnteringGrade',
        'entering_grade_id' => 'getEnteringGradeId',
        'email' => 'getEmail',
        'comment' => 'getComment',
        'parent1_email' => 'getParent1Email',
        'parent2_email' => 'getParent2Email',
        'international' => 'getInternational',
        'school_program' => 'getSchoolProgram',
        'gender' => 'getGender',
        'ethnicity' => 'getEthnicity',
        'boarding_or_day' => 'getBoardingOrDay',
        'financial_aid' => 'getFinancialAid',
        'admissions_staff_id' => 'getAdmissionsStaffId',
        'admissions_staff' => 'getAdmissionsStaff',
        'inquiry_source' => 'getInquirySource',
        'inquiry_source_id' => 'getInquirySourceId',
        'referral_type' => 'getReferralType',
        'referral_type_id' => 'getReferralTypeId',
        'has_iep' => 'getHasIep',
        'has_504' => 'getHas504',
        'created_by' => 'getCreatedBy',
        'created' => 'getCreated',
        'modified_by' => 'getModifiedBy',
        'modified' => 'getModified',
        'preferred_name' => 'getPreferredName',
        'decision' => 'getDecision',
        'family_id' => 'getFamilyId',
        'current_status_date' => 'getCurrentStatusDate',
        'application' => 'getApplication',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('middle_name', $data ?? [], null);
        $this->setIfExists('prefix', $data ?? [], null);
        $this->setIfExists('suffix', $data ?? [], null);
        $this->setIfExists('nickname', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], null);
        $this->setIfExists('role_id', $data ?? [], null);
        $this->setIfExists('current_status', $data ?? [], null);
        $this->setIfExists('status_id', $data ?? [], null);
        $this->setIfExists('entering_year', $data ?? [], null);
        $this->setIfExists('entering_year_id', $data ?? [], null);
        $this->setIfExists('entering_grade', $data ?? [], null);
        $this->setIfExists('entering_grade_id', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('parent1_email', $data ?? [], null);
        $this->setIfExists('parent2_email', $data ?? [], null);
        $this->setIfExists('international', $data ?? [], null);
        $this->setIfExists('school_program', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('ethnicity', $data ?? [], null);
        $this->setIfExists('boarding_or_day', $data ?? [], null);
        $this->setIfExists('financial_aid', $data ?? [], null);
        $this->setIfExists('admissions_staff_id', $data ?? [], null);
        $this->setIfExists('admissions_staff', $data ?? [], null);
        $this->setIfExists('inquiry_source', $data ?? [], null);
        $this->setIfExists('inquiry_source_id', $data ?? [], null);
        $this->setIfExists('referral_type', $data ?? [], null);
        $this->setIfExists('referral_type_id', $data ?? [], null);
        $this->setIfExists('has_iep', $data ?? [], null);
        $this->setIfExists('has_504', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('modified_by', $data ?? [], null);
        $this->setIfExists('modified', $data ?? [], null);
        $this->setIfExists('preferred_name', $data ?? [], null);
        $this->setIfExists('decision', $data ?? [], null);
        $this->setIfExists('family_id', $data ?? [], null);
        $this->setIfExists('current_status_date', $data ?? [], null);
        $this->setIfExists('application', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id Unique Identifer for this candidate
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            array_push($this->openAPINullablesSetToNull, 'user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name Candidates first name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            array_push($this->openAPINullablesSetToNull, 'first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Candidates last name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            array_push($this->openAPINullablesSetToNull, 'last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name Candidates middle name
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        if (is_null($middle_name)) {
            array_push($this->openAPINullablesSetToNull, 'middle_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('middle_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix Prefix
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (is_null($prefix)) {
            array_push($this->openAPINullablesSetToNull, 'prefix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prefix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string|null
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string|null $suffix Suffix
     *
     * @return self
     */
    public function setSuffix($suffix)
    {
        if (is_null($suffix)) {
            array_push($this->openAPINullablesSetToNull, 'suffix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suffix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string|null
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string|null $nickname Candidates nick name (if available)
     *
     * @return self
     */
    public function setNickname($nickname)
    {
        if (is_null($nickname)) {
            array_push($this->openAPINullablesSetToNull, 'nickname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nickname', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string|null $role Role for this candidate.
     *
     * @return self
     */
    public function setRole($role)
    {
        if (is_null($role)) {
            array_push($this->openAPINullablesSetToNull, 'role');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('role', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets role_id
     *
     * @return int|null
     */
    public function getRoleId()
    {
        return $this->container['role_id'];
    }

    /**
     * Sets role_id
     *
     * @param int|null $role_id Identifier for thier role
     *
     * @return self
     */
    public function setRoleId($role_id)
    {
        if (is_null($role_id)) {
            array_push($this->openAPINullablesSetToNull, 'role_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('role_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['role_id'] = $role_id;

        return $this;
    }

    /**
     * Gets current_status
     *
     * @return string|null
     */
    public function getCurrentStatus()
    {
        return $this->container['current_status'];
    }

    /**
     * Sets current_status
     *
     * @param string|null $current_status Text representation of their current enrollment status
     *
     * @return self
     */
    public function setCurrentStatus($current_status)
    {
        if (is_null($current_status)) {
            array_push($this->openAPINullablesSetToNull, 'current_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('current_status', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['current_status'] = $current_status;

        return $this;
    }

    /**
     * Gets status_id
     *
     * @return int|null
     */
    public function getStatusId()
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param int|null $status_id Identifier for their enrollment status
     *
     * @return self
     */
    public function setStatusId($status_id)
    {
        if (is_null($status_id)) {
            array_push($this->openAPINullablesSetToNull, 'status_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets entering_year
     *
     * @return string|null
     */
    public function getEnteringYear()
    {
        return $this->container['entering_year'];
    }

    /**
     * Sets entering_year
     *
     * @param string|null $entering_year Text representation of the school year the candidate will be joining
     *
     * @return self
     */
    public function setEnteringYear($entering_year)
    {
        if (is_null($entering_year)) {
            array_push($this->openAPINullablesSetToNull, 'entering_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('entering_year', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['entering_year'] = $entering_year;

        return $this;
    }

    /**
     * Gets entering_year_id
     *
     * @return int|null
     */
    public function getEnteringYearId()
    {
        return $this->container['entering_year_id'];
    }

    /**
     * Sets entering_year_id
     *
     * @param int|null $entering_year_id Identifier for the school year the candidate will be joining
     *
     * @return self
     */
    public function setEnteringYearId($entering_year_id)
    {
        if (is_null($entering_year_id)) {
            array_push($this->openAPINullablesSetToNull, 'entering_year_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('entering_year_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['entering_year_id'] = $entering_year_id;

        return $this;
    }

    /**
     * Gets entering_grade
     *
     * @return string|null
     */
    public function getEnteringGrade()
    {
        return $this->container['entering_grade'];
    }

    /**
     * Sets entering_grade
     *
     * @param string|null $entering_grade Text representation of the grade candidate will be joining
     *
     * @return self
     */
    public function setEnteringGrade($entering_grade)
    {
        if (is_null($entering_grade)) {
            array_push($this->openAPINullablesSetToNull, 'entering_grade');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('entering_grade', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['entering_grade'] = $entering_grade;

        return $this;
    }

    /**
     * Gets entering_grade_id
     *
     * @return int|null
     */
    public function getEnteringGradeId()
    {
        return $this->container['entering_grade_id'];
    }

    /**
     * Sets entering_grade_id
     *
     * @param int|null $entering_grade_id Identifier for the grade candidate will be joining
     *
     * @return self
     */
    public function setEnteringGradeId($entering_grade_id)
    {
        if (is_null($entering_grade_id)) {
            array_push($this->openAPINullablesSetToNull, 'entering_grade_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('entering_grade_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['entering_grade_id'] = $entering_grade_id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Candidates email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comments
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            array_push($this->openAPINullablesSetToNull, 'comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets parent1_email
     *
     * @return string|null
     */
    public function getParent1Email()
    {
        return $this->container['parent1_email'];
    }

    /**
     * Sets parent1_email
     *
     * @param string|null $parent1_email 1st Email of candidates parent
     *
     * @return self
     */
    public function setParent1Email($parent1_email)
    {
        if (is_null($parent1_email)) {
            array_push($this->openAPINullablesSetToNull, 'parent1_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent1_email', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent1_email'] = $parent1_email;

        return $this;
    }

    /**
     * Gets parent2_email
     *
     * @return string|null
     */
    public function getParent2Email()
    {
        return $this->container['parent2_email'];
    }

    /**
     * Sets parent2_email
     *
     * @param string|null $parent2_email 2nd email of candidates parent
     *
     * @return self
     */
    public function setParent2Email($parent2_email)
    {
        if (is_null($parent2_email)) {
            array_push($this->openAPINullablesSetToNull, 'parent2_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent2_email', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent2_email'] = $parent2_email;

        return $this;
    }

    /**
     * Gets international
     *
     * @return bool|null
     */
    public function getInternational()
    {
        return $this->container['international'];
    }

    /**
     * Sets international
     *
     * @param bool|null $international
     *
     * @return self
     */
    public function setInternational($international)
    {
        if (is_null($international)) {
            array_push($this->openAPINullablesSetToNull, 'international');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('international', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['international'] = $international;

        return $this;
    }

    /**
     * Gets school_program
     *
     * @return string|null
     */
    public function getSchoolProgram()
    {
        return $this->container['school_program'];
    }

    /**
     * Sets school_program
     *
     * @param string|null $school_program
     *
     * @return self
     */
    public function setSchoolProgram($school_program)
    {
        if (is_null($school_program)) {
            array_push($this->openAPINullablesSetToNull, 'school_program');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('school_program', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['school_program'] = $school_program;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            array_push($this->openAPINullablesSetToNull, 'gender');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets ethnicity
     *
     * @return string|null
     */
    public function getEthnicity()
    {
        return $this->container['ethnicity'];
    }

    /**
     * Sets ethnicity
     *
     * @param string|null $ethnicity
     *
     * @return self
     */
    public function setEthnicity($ethnicity)
    {
        if (is_null($ethnicity)) {
            array_push($this->openAPINullablesSetToNull, 'ethnicity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ethnicity', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ethnicity'] = $ethnicity;

        return $this;
    }

    /**
     * Gets boarding_or_day
     *
     * @return string|null
     */
    public function getBoardingOrDay()
    {
        return $this->container['boarding_or_day'];
    }

    /**
     * Sets boarding_or_day
     *
     * @param string|null $boarding_or_day
     *
     * @return self
     */
    public function setBoardingOrDay($boarding_or_day)
    {
        if (is_null($boarding_or_day)) {
            array_push($this->openAPINullablesSetToNull, 'boarding_or_day');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('boarding_or_day', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['boarding_or_day'] = $boarding_or_day;

        return $this;
    }

    /**
     * Gets financial_aid
     *
     * @return bool|null
     */
    public function getFinancialAid()
    {
        return $this->container['financial_aid'];
    }

    /**
     * Sets financial_aid
     *
     * @param bool|null $financial_aid
     *
     * @return self
     */
    public function setFinancialAid($financial_aid)
    {
        if (is_null($financial_aid)) {
            array_push($this->openAPINullablesSetToNull, 'financial_aid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('financial_aid', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['financial_aid'] = $financial_aid;

        return $this;
    }

    /**
     * Gets admissions_staff_id
     *
     * @return int|null
     */
    public function getAdmissionsStaffId()
    {
        return $this->container['admissions_staff_id'];
    }

    /**
     * Sets admissions_staff_id
     *
     * @param int|null $admissions_staff_id
     *
     * @return self
     */
    public function setAdmissionsStaffId($admissions_staff_id)
    {
        if (is_null($admissions_staff_id)) {
            array_push($this->openAPINullablesSetToNull, 'admissions_staff_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('admissions_staff_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['admissions_staff_id'] = $admissions_staff_id;

        return $this;
    }

    /**
     * Gets admissions_staff
     *
     * @return string|null
     */
    public function getAdmissionsStaff()
    {
        return $this->container['admissions_staff'];
    }

    /**
     * Sets admissions_staff
     *
     * @param string|null $admissions_staff
     *
     * @return self
     */
    public function setAdmissionsStaff($admissions_staff)
    {
        if (is_null($admissions_staff)) {
            array_push($this->openAPINullablesSetToNull, 'admissions_staff');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('admissions_staff', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['admissions_staff'] = $admissions_staff;

        return $this;
    }

    /**
     * Gets inquiry_source
     *
     * @return string|null
     */
    public function getInquirySource()
    {
        return $this->container['inquiry_source'];
    }

    /**
     * Sets inquiry_source
     *
     * @param string|null $inquiry_source
     *
     * @return self
     */
    public function setInquirySource($inquiry_source)
    {
        if (is_null($inquiry_source)) {
            array_push($this->openAPINullablesSetToNull, 'inquiry_source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inquiry_source', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['inquiry_source'] = $inquiry_source;

        return $this;
    }

    /**
     * Gets inquiry_source_id
     *
     * @return int|null
     */
    public function getInquirySourceId()
    {
        return $this->container['inquiry_source_id'];
    }

    /**
     * Sets inquiry_source_id
     *
     * @param int|null $inquiry_source_id
     *
     * @return self
     */
    public function setInquirySourceId($inquiry_source_id)
    {
        if (is_null($inquiry_source_id)) {
            array_push($this->openAPINullablesSetToNull, 'inquiry_source_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inquiry_source_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['inquiry_source_id'] = $inquiry_source_id;

        return $this;
    }

    /**
     * Gets referral_type
     *
     * @return string|null
     */
    public function getReferralType()
    {
        return $this->container['referral_type'];
    }

    /**
     * Sets referral_type
     *
     * @param string|null $referral_type
     *
     * @return self
     */
    public function setReferralType($referral_type)
    {
        if (is_null($referral_type)) {
            array_push($this->openAPINullablesSetToNull, 'referral_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('referral_type', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['referral_type'] = $referral_type;

        return $this;
    }

    /**
     * Gets referral_type_id
     *
     * @return int|null
     */
    public function getReferralTypeId()
    {
        return $this->container['referral_type_id'];
    }

    /**
     * Sets referral_type_id
     *
     * @param int|null $referral_type_id
     *
     * @return self
     */
    public function setReferralTypeId($referral_type_id)
    {
        if (is_null($referral_type_id)) {
            array_push($this->openAPINullablesSetToNull, 'referral_type_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('referral_type_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['referral_type_id'] = $referral_type_id;

        return $this;
    }

    /**
     * Gets has_iep
     *
     * @return bool|null
     */
    public function getHasIep()
    {
        return $this->container['has_iep'];
    }

    /**
     * Sets has_iep
     *
     * @param bool|null $has_iep
     *
     * @return self
     */
    public function setHasIep($has_iep)
    {
        if (is_null($has_iep)) {
            array_push($this->openAPINullablesSetToNull, 'has_iep');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_iep', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_iep'] = $has_iep;

        return $this;
    }

    /**
     * Gets has_504
     *
     * @return bool|null
     */
    public function getHas504()
    {
        return $this->container['has_504'];
    }

    /**
     * Sets has_504
     *
     * @param bool|null $has_504
     *
     * @return self
     */
    public function setHas504($has_504)
    {
        if (is_null($has_504)) {
            array_push($this->openAPINullablesSetToNull, 'has_504');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_504', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_504'] = $has_504;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string|null $created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            array_push($this->openAPINullablesSetToNull, 'created_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_by', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            array_push($this->openAPINullablesSetToNull, 'created');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified_by
     *
     * @return string|null
     */
    public function getModifiedBy()
    {
        return $this->container['modified_by'];
    }

    /**
     * Sets modified_by
     *
     * @param string|null $modified_by
     *
     * @return self
     */
    public function setModifiedBy($modified_by)
    {
        if (is_null($modified_by)) {
            array_push($this->openAPINullablesSetToNull, 'modified_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('modified_by', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['modified_by'] = $modified_by;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime|null
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime|null $modified
     *
     * @return self
     */
    public function setModified($modified)
    {
        if (is_null($modified)) {
            array_push($this->openAPINullablesSetToNull, 'modified');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('modified', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets preferred_name
     *
     * @return string|null
     */
    public function getPreferredName()
    {
        return $this->container['preferred_name'];
    }

    /**
     * Sets preferred_name
     *
     * @param string|null $preferred_name
     *
     * @return self
     */
    public function setPreferredName($preferred_name)
    {
        if (is_null($preferred_name)) {
            array_push($this->openAPINullablesSetToNull, 'preferred_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferred_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferred_name'] = $preferred_name;

        return $this;
    }

    /**
     * Gets decision
     *
     * @return \SKY\School\Model\SchoolDecisionModel|null
     */
    public function getDecision()
    {
        return $this->container['decision'];
    }

    /**
     * Sets decision
     *
     * @param \SKY\School\Model\SchoolDecisionModel|null $decision decision
     *
     * @return self
     */
    public function setDecision($decision)
    {
        if (is_null($decision)) {
            throw new \InvalidArgumentException('non-nullable decision cannot be null');
        }
        $this->container['decision'] = $decision;

        return $this;
    }

    /**
     * Gets family_id
     *
     * @return int|null
     */
    public function getFamilyId()
    {
        return $this->container['family_id'];
    }

    /**
     * Sets family_id
     *
     * @param int|null $family_id
     *
     * @return self
     */
    public function setFamilyId($family_id)
    {
        if (is_null($family_id)) {
            array_push($this->openAPINullablesSetToNull, 'family_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('family_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['family_id'] = $family_id;

        return $this;
    }

    /**
     * Gets current_status_date
     *
     * @return \DateTime|null
     */
    public function getCurrentStatusDate()
    {
        return $this->container['current_status_date'];
    }

    /**
     * Sets current_status_date
     *
     * @param \DateTime|null $current_status_date Current status date
     *
     * @return self
     */
    public function setCurrentStatusDate($current_status_date)
    {
        if (is_null($current_status_date)) {
            array_push($this->openAPINullablesSetToNull, 'current_status_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('current_status_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['current_status_date'] = $current_status_date;

        return $this;
    }

    /**
     * Gets application
     *
     * @return \SKY\School\Model\ApplicationModel|null
     */
    public function getApplication()
    {
        return $this->container['application'];
    }

    /**
     * Sets application
     *
     * @param \SKY\School\Model\ApplicationModel|null $application application
     *
     * @return self
     */
    public function setApplication($application)
    {
        if (is_null($application)) {
            throw new \InvalidArgumentException('non-nullable application cannot be null');
        }
        $this->container['application'] = $application;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
