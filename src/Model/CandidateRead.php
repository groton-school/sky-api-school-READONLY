<?php
/**
 * CandidateRead
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * CandidateRead Class Doc Comment
 *
 * @category Class
 * @description Candidate Read
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CandidateRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CandidateRead';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'userId' => 'int',
        'firstName' => 'string',
        'lastName' => 'string',
        'middleName' => 'string',
        'prefix' => 'string',
        'suffix' => 'string',
        'nickname' => 'string',
        'role' => 'string',
        'roleId' => 'int',
        'currentStatus' => 'string',
        'statusId' => 'int',
        'enteringYear' => 'string',
        'enteringYearId' => 'int',
        'enteringGrade' => 'string',
        'enteringGradeId' => 'int',
        'email' => 'string',
        'comment' => 'string',
        'parent1Email' => 'string',
        'parent2Email' => 'string',
        'international' => 'bool',
        'schoolProgram' => 'string',
        'gender' => 'string',
        'ethnicity' => 'string',
        'boardingOrDay' => 'string',
        'financialAid' => 'bool',
        'admissionsStaffId' => 'int',
        'admissionsStaff' => 'string',
        'inquirySource' => 'string',
        'inquirySourceId' => 'int',
        'referralType' => 'string',
        'referralTypeId' => 'int',
        'hasIep' => 'bool',
        'has504' => 'bool',
        'createdBy' => 'string',
        'created' => '\DateTime',
        'modifiedBy' => 'string',
        'modified' => '\DateTime',
        'preferredName' => 'string',
        'decision' => '\SKY\School\Model\SchoolDecisionModel',
        'familyId' => 'int',
        'currentStatusDate' => '\DateTime',
        'application' => '\SKY\School\Model\ApplicationModel',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'userId' => 'int32',
        'firstName' => null,
        'lastName' => null,
        'middleName' => null,
        'prefix' => null,
        'suffix' => null,
        'nickname' => null,
        'role' => null,
        'roleId' => 'int32',
        'currentStatus' => null,
        'statusId' => 'int32',
        'enteringYear' => null,
        'enteringYearId' => 'int32',
        'enteringGrade' => null,
        'enteringGradeId' => 'int32',
        'email' => null,
        'comment' => null,
        'parent1Email' => null,
        'parent2Email' => null,
        'international' => null,
        'schoolProgram' => null,
        'gender' => null,
        'ethnicity' => null,
        'boardingOrDay' => null,
        'financialAid' => null,
        'admissionsStaffId' => 'int32',
        'admissionsStaff' => null,
        'inquirySource' => null,
        'inquirySourceId' => 'int32',
        'referralType' => null,
        'referralTypeId' => 'int32',
        'hasIep' => null,
        'has504' => null,
        'createdBy' => null,
        'created' => 'date-time',
        'modifiedBy' => null,
        'modified' => 'date-time',
        'preferredName' => null,
        'decision' => null,
        'familyId' => 'int32',
        'currentStatusDate' => 'date-time',
        'application' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'userId' => true,
        'firstName' => true,
        'lastName' => true,
        'middleName' => true,
        'prefix' => true,
        'suffix' => true,
        'nickname' => true,
        'role' => true,
        'roleId' => true,
        'currentStatus' => true,
        'statusId' => true,
        'enteringYear' => true,
        'enteringYearId' => true,
        'enteringGrade' => true,
        'enteringGradeId' => true,
        'email' => true,
        'comment' => true,
        'parent1Email' => true,
        'parent2Email' => true,
        'international' => true,
        'schoolProgram' => true,
        'gender' => true,
        'ethnicity' => true,
        'boardingOrDay' => true,
        'financialAid' => true,
        'admissionsStaffId' => true,
        'admissionsStaff' => true,
        'inquirySource' => true,
        'inquirySourceId' => true,
        'referralType' => true,
        'referralTypeId' => true,
        'hasIep' => true,
        'has504' => true,
        'createdBy' => true,
        'created' => true,
        'modifiedBy' => true,
        'modified' => true,
        'preferredName' => true,
        'decision' => false,
        'familyId' => true,
        'currentStatusDate' => true,
        'application' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'userId' => 'user_id',
        'firstName' => 'first_name',
        'lastName' => 'last_name',
        'middleName' => 'middle_name',
        'prefix' => 'prefix',
        'suffix' => 'suffix',
        'nickname' => 'nickname',
        'role' => 'role',
        'roleId' => 'role_id',
        'currentStatus' => 'current_status',
        'statusId' => 'status_id',
        'enteringYear' => 'entering_year',
        'enteringYearId' => 'entering_year_id',
        'enteringGrade' => 'entering_grade',
        'enteringGradeId' => 'entering_grade_id',
        'email' => 'email',
        'comment' => 'comment',
        'parent1Email' => 'parent1_email',
        'parent2Email' => 'parent2_email',
        'international' => 'international',
        'schoolProgram' => 'school_program',
        'gender' => 'gender',
        'ethnicity' => 'ethnicity',
        'boardingOrDay' => 'boarding_or_day',
        'financialAid' => 'financial_aid',
        'admissionsStaffId' => 'admissions_staff_id',
        'admissionsStaff' => 'admissions_staff',
        'inquirySource' => 'inquiry_source',
        'inquirySourceId' => 'inquiry_source_id',
        'referralType' => 'referral_type',
        'referralTypeId' => 'referral_type_id',
        'hasIep' => 'has_iep',
        'has504' => 'has_504',
        'createdBy' => 'created_by',
        'created' => 'created',
        'modifiedBy' => 'modified_by',
        'modified' => 'modified',
        'preferredName' => 'preferred_name',
        'decision' => 'decision',
        'familyId' => 'family_id',
        'currentStatusDate' => 'current_status_date',
        'application' => 'application',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'userId' => 'setUserId',
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'middleName' => 'setMiddleName',
        'prefix' => 'setPrefix',
        'suffix' => 'setSuffix',
        'nickname' => 'setNickname',
        'role' => 'setRole',
        'roleId' => 'setRoleId',
        'currentStatus' => 'setCurrentStatus',
        'statusId' => 'setStatusId',
        'enteringYear' => 'setEnteringYear',
        'enteringYearId' => 'setEnteringYearId',
        'enteringGrade' => 'setEnteringGrade',
        'enteringGradeId' => 'setEnteringGradeId',
        'email' => 'setEmail',
        'comment' => 'setComment',
        'parent1Email' => 'setParent1Email',
        'parent2Email' => 'setParent2Email',
        'international' => 'setInternational',
        'schoolProgram' => 'setSchoolProgram',
        'gender' => 'setGender',
        'ethnicity' => 'setEthnicity',
        'boardingOrDay' => 'setBoardingOrDay',
        'financialAid' => 'setFinancialAid',
        'admissionsStaffId' => 'setAdmissionsStaffId',
        'admissionsStaff' => 'setAdmissionsStaff',
        'inquirySource' => 'setInquirySource',
        'inquirySourceId' => 'setInquirySourceId',
        'referralType' => 'setReferralType',
        'referralTypeId' => 'setReferralTypeId',
        'hasIep' => 'setHasIep',
        'has504' => 'setHas504',
        'createdBy' => 'setCreatedBy',
        'created' => 'setCreated',
        'modifiedBy' => 'setModifiedBy',
        'modified' => 'setModified',
        'preferredName' => 'setPreferredName',
        'decision' => 'setDecision',
        'familyId' => 'setFamilyId',
        'currentStatusDate' => 'setCurrentStatusDate',
        'application' => 'setApplication',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'userId' => 'getUserId',
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'middleName' => 'getMiddleName',
        'prefix' => 'getPrefix',
        'suffix' => 'getSuffix',
        'nickname' => 'getNickname',
        'role' => 'getRole',
        'roleId' => 'getRoleId',
        'currentStatus' => 'getCurrentStatus',
        'statusId' => 'getStatusId',
        'enteringYear' => 'getEnteringYear',
        'enteringYearId' => 'getEnteringYearId',
        'enteringGrade' => 'getEnteringGrade',
        'enteringGradeId' => 'getEnteringGradeId',
        'email' => 'getEmail',
        'comment' => 'getComment',
        'parent1Email' => 'getParent1Email',
        'parent2Email' => 'getParent2Email',
        'international' => 'getInternational',
        'schoolProgram' => 'getSchoolProgram',
        'gender' => 'getGender',
        'ethnicity' => 'getEthnicity',
        'boardingOrDay' => 'getBoardingOrDay',
        'financialAid' => 'getFinancialAid',
        'admissionsStaffId' => 'getAdmissionsStaffId',
        'admissionsStaff' => 'getAdmissionsStaff',
        'inquirySource' => 'getInquirySource',
        'inquirySourceId' => 'getInquirySourceId',
        'referralType' => 'getReferralType',
        'referralTypeId' => 'getReferralTypeId',
        'hasIep' => 'getHasIep',
        'has504' => 'getHas504',
        'createdBy' => 'getCreatedBy',
        'created' => 'getCreated',
        'modifiedBy' => 'getModifiedBy',
        'modified' => 'getModified',
        'preferredName' => 'getPreferredName',
        'decision' => 'getDecision',
        'familyId' => 'getFamilyId',
        'currentStatusDate' => 'getCurrentStatusDate',
        'application' => 'getApplication',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('userId', $data ?? [], null);
        $this->setIfExists('firstName', $data ?? [], null);
        $this->setIfExists('lastName', $data ?? [], null);
        $this->setIfExists('middleName', $data ?? [], null);
        $this->setIfExists('prefix', $data ?? [], null);
        $this->setIfExists('suffix', $data ?? [], null);
        $this->setIfExists('nickname', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], null);
        $this->setIfExists('roleId', $data ?? [], null);
        $this->setIfExists('currentStatus', $data ?? [], null);
        $this->setIfExists('statusId', $data ?? [], null);
        $this->setIfExists('enteringYear', $data ?? [], null);
        $this->setIfExists('enteringYearId', $data ?? [], null);
        $this->setIfExists('enteringGrade', $data ?? [], null);
        $this->setIfExists('enteringGradeId', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('parent1Email', $data ?? [], null);
        $this->setIfExists('parent2Email', $data ?? [], null);
        $this->setIfExists('international', $data ?? [], null);
        $this->setIfExists('schoolProgram', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('ethnicity', $data ?? [], null);
        $this->setIfExists('boardingOrDay', $data ?? [], null);
        $this->setIfExists('financialAid', $data ?? [], null);
        $this->setIfExists('admissionsStaffId', $data ?? [], null);
        $this->setIfExists('admissionsStaff', $data ?? [], null);
        $this->setIfExists('inquirySource', $data ?? [], null);
        $this->setIfExists('inquirySourceId', $data ?? [], null);
        $this->setIfExists('referralType', $data ?? [], null);
        $this->setIfExists('referralTypeId', $data ?? [], null);
        $this->setIfExists('hasIep', $data ?? [], null);
        $this->setIfExists('has504', $data ?? [], null);
        $this->setIfExists('createdBy', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('modifiedBy', $data ?? [], null);
        $this->setIfExists('modified', $data ?? [], null);
        $this->setIfExists('preferredName', $data ?? [], null);
        $this->setIfExists('decision', $data ?? [], null);
        $this->setIfExists('familyId', $data ?? [], null);
        $this->setIfExists('currentStatusDate', $data ?? [], null);
        $this->setIfExists('application', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets userId
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param int|null $userId Unique Identifer for this candidate
     *
     * @return self
     */
    public function setUserId($userId)
    {
        if (is_null($userId)) {
            array_push($this->openAPINullablesSetToNull, 'userId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('userId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName Candidates first name
     *
     * @return self
     */
    public function setFirstName($firstName)
    {
        if (is_null($firstName)) {
            array_push($this->openAPINullablesSetToNull, 'firstName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('firstName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName Candidates last name
     *
     * @return self
     */
    public function setLastName($lastName)
    {
        if (is_null($lastName)) {
            array_push($this->openAPINullablesSetToNull, 'lastName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets middleName
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middleName'];
    }

    /**
     * Sets middleName
     *
     * @param string|null $middleName Candidates middle name
     *
     * @return self
     */
    public function setMiddleName($middleName)
    {
        if (is_null($middleName)) {
            array_push($this->openAPINullablesSetToNull, 'middleName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('middleName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['middleName'] = $middleName;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix Prefix
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (is_null($prefix)) {
            array_push($this->openAPINullablesSetToNull, 'prefix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prefix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string|null
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string|null $suffix Suffix
     *
     * @return self
     */
    public function setSuffix($suffix)
    {
        if (is_null($suffix)) {
            array_push($this->openAPINullablesSetToNull, 'suffix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suffix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string|null
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string|null $nickname Candidates nick name (if available)
     *
     * @return self
     */
    public function setNickname($nickname)
    {
        if (is_null($nickname)) {
            array_push($this->openAPINullablesSetToNull, 'nickname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nickname', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string|null $role Role for this candidate.
     *
     * @return self
     */
    public function setRole($role)
    {
        if (is_null($role)) {
            array_push($this->openAPINullablesSetToNull, 'role');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('role', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets roleId
     *
     * @return int|null
     */
    public function getRoleId()
    {
        return $this->container['roleId'];
    }

    /**
     * Sets roleId
     *
     * @param int|null $roleId Identifier for thier role
     *
     * @return self
     */
    public function setRoleId($roleId)
    {
        if (is_null($roleId)) {
            array_push($this->openAPINullablesSetToNull, 'roleId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roleId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roleId'] = $roleId;

        return $this;
    }

    /**
     * Gets currentStatus
     *
     * @return string|null
     */
    public function getCurrentStatus()
    {
        return $this->container['currentStatus'];
    }

    /**
     * Sets currentStatus
     *
     * @param string|null $currentStatus Text representation of their current enrollment status
     *
     * @return self
     */
    public function setCurrentStatus($currentStatus)
    {
        if (is_null($currentStatus)) {
            array_push($this->openAPINullablesSetToNull, 'currentStatus');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currentStatus', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currentStatus'] = $currentStatus;

        return $this;
    }

    /**
     * Gets statusId
     *
     * @return int|null
     */
    public function getStatusId()
    {
        return $this->container['statusId'];
    }

    /**
     * Sets statusId
     *
     * @param int|null $statusId Identifier for their enrollment status
     *
     * @return self
     */
    public function setStatusId($statusId)
    {
        if (is_null($statusId)) {
            array_push($this->openAPINullablesSetToNull, 'statusId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('statusId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['statusId'] = $statusId;

        return $this;
    }

    /**
     * Gets enteringYear
     *
     * @return string|null
     */
    public function getEnteringYear()
    {
        return $this->container['enteringYear'];
    }

    /**
     * Sets enteringYear
     *
     * @param string|null $enteringYear Text representation of the school year the candidate will be joining
     *
     * @return self
     */
    public function setEnteringYear($enteringYear)
    {
        if (is_null($enteringYear)) {
            array_push($this->openAPINullablesSetToNull, 'enteringYear');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enteringYear', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enteringYear'] = $enteringYear;

        return $this;
    }

    /**
     * Gets enteringYearId
     *
     * @return int|null
     */
    public function getEnteringYearId()
    {
        return $this->container['enteringYearId'];
    }

    /**
     * Sets enteringYearId
     *
     * @param int|null $enteringYearId Identifier for the school year the candidate will be joining
     *
     * @return self
     */
    public function setEnteringYearId($enteringYearId)
    {
        if (is_null($enteringYearId)) {
            array_push($this->openAPINullablesSetToNull, 'enteringYearId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enteringYearId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enteringYearId'] = $enteringYearId;

        return $this;
    }

    /**
     * Gets enteringGrade
     *
     * @return string|null
     */
    public function getEnteringGrade()
    {
        return $this->container['enteringGrade'];
    }

    /**
     * Sets enteringGrade
     *
     * @param string|null $enteringGrade Text representation of the grade candidate will be joining
     *
     * @return self
     */
    public function setEnteringGrade($enteringGrade)
    {
        if (is_null($enteringGrade)) {
            array_push($this->openAPINullablesSetToNull, 'enteringGrade');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enteringGrade', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enteringGrade'] = $enteringGrade;

        return $this;
    }

    /**
     * Gets enteringGradeId
     *
     * @return int|null
     */
    public function getEnteringGradeId()
    {
        return $this->container['enteringGradeId'];
    }

    /**
     * Sets enteringGradeId
     *
     * @param int|null $enteringGradeId Identifier for the grade candidate will be joining
     *
     * @return self
     */
    public function setEnteringGradeId($enteringGradeId)
    {
        if (is_null($enteringGradeId)) {
            array_push($this->openAPINullablesSetToNull, 'enteringGradeId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enteringGradeId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enteringGradeId'] = $enteringGradeId;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Candidates email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comments
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            array_push($this->openAPINullablesSetToNull, 'comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets parent1Email
     *
     * @return string|null
     */
    public function getParent1Email()
    {
        return $this->container['parent1Email'];
    }

    /**
     * Sets parent1Email
     *
     * @param string|null $parent1Email 1st Email of candidates parent
     *
     * @return self
     */
    public function setParent1Email($parent1Email)
    {
        if (is_null($parent1Email)) {
            array_push($this->openAPINullablesSetToNull, 'parent1Email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent1Email', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent1Email'] = $parent1Email;

        return $this;
    }

    /**
     * Gets parent2Email
     *
     * @return string|null
     */
    public function getParent2Email()
    {
        return $this->container['parent2Email'];
    }

    /**
     * Sets parent2Email
     *
     * @param string|null $parent2Email 2nd email of candidates parent
     *
     * @return self
     */
    public function setParent2Email($parent2Email)
    {
        if (is_null($parent2Email)) {
            array_push($this->openAPINullablesSetToNull, 'parent2Email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent2Email', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent2Email'] = $parent2Email;

        return $this;
    }

    /**
     * Gets international
     *
     * @return bool|null
     */
    public function getInternational()
    {
        return $this->container['international'];
    }

    /**
     * Sets international
     *
     * @param bool|null $international
     *
     * @return self
     */
    public function setInternational($international)
    {
        if (is_null($international)) {
            array_push($this->openAPINullablesSetToNull, 'international');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('international', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['international'] = $international;

        return $this;
    }

    /**
     * Gets schoolProgram
     *
     * @return string|null
     */
    public function getSchoolProgram()
    {
        return $this->container['schoolProgram'];
    }

    /**
     * Sets schoolProgram
     *
     * @param string|null $schoolProgram
     *
     * @return self
     */
    public function setSchoolProgram($schoolProgram)
    {
        if (is_null($schoolProgram)) {
            array_push($this->openAPINullablesSetToNull, 'schoolProgram');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('schoolProgram', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['schoolProgram'] = $schoolProgram;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            array_push($this->openAPINullablesSetToNull, 'gender');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets ethnicity
     *
     * @return string|null
     */
    public function getEthnicity()
    {
        return $this->container['ethnicity'];
    }

    /**
     * Sets ethnicity
     *
     * @param string|null $ethnicity
     *
     * @return self
     */
    public function setEthnicity($ethnicity)
    {
        if (is_null($ethnicity)) {
            array_push($this->openAPINullablesSetToNull, 'ethnicity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ethnicity', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ethnicity'] = $ethnicity;

        return $this;
    }

    /**
     * Gets boardingOrDay
     *
     * @return string|null
     */
    public function getBoardingOrDay()
    {
        return $this->container['boardingOrDay'];
    }

    /**
     * Sets boardingOrDay
     *
     * @param string|null $boardingOrDay
     *
     * @return self
     */
    public function setBoardingOrDay($boardingOrDay)
    {
        if (is_null($boardingOrDay)) {
            array_push($this->openAPINullablesSetToNull, 'boardingOrDay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('boardingOrDay', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['boardingOrDay'] = $boardingOrDay;

        return $this;
    }

    /**
     * Gets financialAid
     *
     * @return bool|null
     */
    public function getFinancialAid()
    {
        return $this->container['financialAid'];
    }

    /**
     * Sets financialAid
     *
     * @param bool|null $financialAid
     *
     * @return self
     */
    public function setFinancialAid($financialAid)
    {
        if (is_null($financialAid)) {
            array_push($this->openAPINullablesSetToNull, 'financialAid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('financialAid', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['financialAid'] = $financialAid;

        return $this;
    }

    /**
     * Gets admissionsStaffId
     *
     * @return int|null
     */
    public function getAdmissionsStaffId()
    {
        return $this->container['admissionsStaffId'];
    }

    /**
     * Sets admissionsStaffId
     *
     * @param int|null $admissionsStaffId
     *
     * @return self
     */
    public function setAdmissionsStaffId($admissionsStaffId)
    {
        if (is_null($admissionsStaffId)) {
            array_push($this->openAPINullablesSetToNull, 'admissionsStaffId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('admissionsStaffId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['admissionsStaffId'] = $admissionsStaffId;

        return $this;
    }

    /**
     * Gets admissionsStaff
     *
     * @return string|null
     */
    public function getAdmissionsStaff()
    {
        return $this->container['admissionsStaff'];
    }

    /**
     * Sets admissionsStaff
     *
     * @param string|null $admissionsStaff
     *
     * @return self
     */
    public function setAdmissionsStaff($admissionsStaff)
    {
        if (is_null($admissionsStaff)) {
            array_push($this->openAPINullablesSetToNull, 'admissionsStaff');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('admissionsStaff', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['admissionsStaff'] = $admissionsStaff;

        return $this;
    }

    /**
     * Gets inquirySource
     *
     * @return string|null
     */
    public function getInquirySource()
    {
        return $this->container['inquirySource'];
    }

    /**
     * Sets inquirySource
     *
     * @param string|null $inquirySource
     *
     * @return self
     */
    public function setInquirySource($inquirySource)
    {
        if (is_null($inquirySource)) {
            array_push($this->openAPINullablesSetToNull, 'inquirySource');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inquirySource', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['inquirySource'] = $inquirySource;

        return $this;
    }

    /**
     * Gets inquirySourceId
     *
     * @return int|null
     */
    public function getInquirySourceId()
    {
        return $this->container['inquirySourceId'];
    }

    /**
     * Sets inquirySourceId
     *
     * @param int|null $inquirySourceId
     *
     * @return self
     */
    public function setInquirySourceId($inquirySourceId)
    {
        if (is_null($inquirySourceId)) {
            array_push($this->openAPINullablesSetToNull, 'inquirySourceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inquirySourceId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['inquirySourceId'] = $inquirySourceId;

        return $this;
    }

    /**
     * Gets referralType
     *
     * @return string|null
     */
    public function getReferralType()
    {
        return $this->container['referralType'];
    }

    /**
     * Sets referralType
     *
     * @param string|null $referralType
     *
     * @return self
     */
    public function setReferralType($referralType)
    {
        if (is_null($referralType)) {
            array_push($this->openAPINullablesSetToNull, 'referralType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('referralType', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['referralType'] = $referralType;

        return $this;
    }

    /**
     * Gets referralTypeId
     *
     * @return int|null
     */
    public function getReferralTypeId()
    {
        return $this->container['referralTypeId'];
    }

    /**
     * Sets referralTypeId
     *
     * @param int|null $referralTypeId
     *
     * @return self
     */
    public function setReferralTypeId($referralTypeId)
    {
        if (is_null($referralTypeId)) {
            array_push($this->openAPINullablesSetToNull, 'referralTypeId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('referralTypeId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['referralTypeId'] = $referralTypeId;

        return $this;
    }

    /**
     * Gets hasIep
     *
     * @return bool|null
     */
    public function getHasIep()
    {
        return $this->container['hasIep'];
    }

    /**
     * Sets hasIep
     *
     * @param bool|null $hasIep
     *
     * @return self
     */
    public function setHasIep($hasIep)
    {
        if (is_null($hasIep)) {
            array_push($this->openAPINullablesSetToNull, 'hasIep');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hasIep', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hasIep'] = $hasIep;

        return $this;
    }

    /**
     * Gets has504
     *
     * @return bool|null
     */
    public function getHas504()
    {
        return $this->container['has504'];
    }

    /**
     * Sets has504
     *
     * @param bool|null $has504
     *
     * @return self
     */
    public function setHas504($has504)
    {
        if (is_null($has504)) {
            array_push($this->openAPINullablesSetToNull, 'has504');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has504', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has504'] = $has504;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param string|null $createdBy
     *
     * @return self
     */
    public function setCreatedBy($createdBy)
    {
        if (is_null($createdBy)) {
            array_push($this->openAPINullablesSetToNull, 'createdBy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('createdBy', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            array_push($this->openAPINullablesSetToNull, 'created');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modifiedBy
     *
     * @return string|null
     */
    public function getModifiedBy()
    {
        return $this->container['modifiedBy'];
    }

    /**
     * Sets modifiedBy
     *
     * @param string|null $modifiedBy
     *
     * @return self
     */
    public function setModifiedBy($modifiedBy)
    {
        if (is_null($modifiedBy)) {
            array_push($this->openAPINullablesSetToNull, 'modifiedBy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('modifiedBy', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['modifiedBy'] = $modifiedBy;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime|null
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime|null $modified
     *
     * @return self
     */
    public function setModified($modified)
    {
        if (is_null($modified)) {
            array_push($this->openAPINullablesSetToNull, 'modified');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('modified', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets preferredName
     *
     * @return string|null
     */
    public function getPreferredName()
    {
        return $this->container['preferredName'];
    }

    /**
     * Sets preferredName
     *
     * @param string|null $preferredName
     *
     * @return self
     */
    public function setPreferredName($preferredName)
    {
        if (is_null($preferredName)) {
            array_push($this->openAPINullablesSetToNull, 'preferredName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferredName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferredName'] = $preferredName;

        return $this;
    }

    /**
     * Gets decision
     *
     * @return \SKY\School\Model\SchoolDecisionModel|null
     */
    public function getDecision()
    {
        return $this->container['decision'];
    }

    /**
     * Sets decision
     *
     * @param \SKY\School\Model\SchoolDecisionModel|null $decision decision
     *
     * @return self
     */
    public function setDecision($decision)
    {
        if (is_null($decision)) {
            throw new \InvalidArgumentException('non-nullable decision cannot be null');
        }
        $this->container['decision'] = $decision;

        return $this;
    }

    /**
     * Gets familyId
     *
     * @return int|null
     */
    public function getFamilyId()
    {
        return $this->container['familyId'];
    }

    /**
     * Sets familyId
     *
     * @param int|null $familyId
     *
     * @return self
     */
    public function setFamilyId($familyId)
    {
        if (is_null($familyId)) {
            array_push($this->openAPINullablesSetToNull, 'familyId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('familyId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['familyId'] = $familyId;

        return $this;
    }

    /**
     * Gets currentStatusDate
     *
     * @return \DateTime|null
     */
    public function getCurrentStatusDate()
    {
        return $this->container['currentStatusDate'];
    }

    /**
     * Sets currentStatusDate
     *
     * @param \DateTime|null $currentStatusDate Current status date
     *
     * @return self
     */
    public function setCurrentStatusDate($currentStatusDate)
    {
        if (is_null($currentStatusDate)) {
            array_push($this->openAPINullablesSetToNull, 'currentStatusDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currentStatusDate', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currentStatusDate'] = $currentStatusDate;

        return $this;
    }

    /**
     * Gets application
     *
     * @return \SKY\School\Model\ApplicationModel|null
     */
    public function getApplication()
    {
        return $this->container['application'];
    }

    /**
     * Sets application
     *
     * @param \SKY\School\Model\ApplicationModel|null $application application
     *
     * @return self
     */
    public function setApplication($application)
    {
        if (is_null($application)) {
            throw new \InvalidArgumentException('non-nullable application cannot be null');
        }
        $this->container['application'] = $application;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
