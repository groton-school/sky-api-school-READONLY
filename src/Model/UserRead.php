<?php
/**
 * UserRead
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * UserRead Class Doc Comment
 *
 * @category Class
 * @description UserRead Model
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserRead';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'affiliation' => 'string',
        'customFieldEight' => 'string',
        'customFieldFive' => 'string',
        'customFieldFour' => 'string',
        'customFieldNine' => 'string',
        'customFieldOne' => 'string',
        'customFieldSeven' => 'string',
        'customFieldSix' => 'string',
        'customFieldTen' => 'string',
        'customFieldThree' => 'string',
        'customFieldTwo' => 'string',
        'deceased' => 'bool',
        'display' => 'string',
        'email' => 'string',
        'emailActive' => 'bool',
        'firstName' => 'string',
        'gender' => 'string',
        'genderDescription' => 'string',
        'greeting' => 'string',
        'hostId' => 'string',
        'lastName' => 'string',
        'lost' => 'bool',
        'maidenName' => 'string',
        'middleName' => 'string',
        'nickName' => 'string',
        'preferredName' => 'string',
        'dob' => '\DateTime',
        'prefix' => 'string',
        'suffix' => 'string',
        'profilePictures' => '\SKY\School\Model\ProfilePictureUrls',
        'homeLanguages' => '\SKY\School\Model\HomeLanguageRead[]',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'affiliation' => null,
        'customFieldEight' => null,
        'customFieldFive' => null,
        'customFieldFour' => null,
        'customFieldNine' => null,
        'customFieldOne' => null,
        'customFieldSeven' => null,
        'customFieldSix' => null,
        'customFieldTen' => null,
        'customFieldThree' => null,
        'customFieldTwo' => null,
        'deceased' => null,
        'display' => null,
        'email' => null,
        'emailActive' => null,
        'firstName' => null,
        'gender' => null,
        'genderDescription' => null,
        'greeting' => null,
        'hostId' => null,
        'lastName' => null,
        'lost' => null,
        'maidenName' => null,
        'middleName' => null,
        'nickName' => null,
        'preferredName' => null,
        'dob' => 'date-time',
        'prefix' => null,
        'suffix' => null,
        'profilePictures' => null,
        'homeLanguages' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'affiliation' => true,
        'customFieldEight' => true,
        'customFieldFive' => true,
        'customFieldFour' => true,
        'customFieldNine' => true,
        'customFieldOne' => true,
        'customFieldSeven' => true,
        'customFieldSix' => true,
        'customFieldTen' => true,
        'customFieldThree' => true,
        'customFieldTwo' => true,
        'deceased' => false,
        'display' => true,
        'email' => true,
        'emailActive' => false,
        'firstName' => true,
        'gender' => true,
        'genderDescription' => true,
        'greeting' => true,
        'hostId' => true,
        'lastName' => true,
        'lost' => false,
        'maidenName' => true,
        'middleName' => true,
        'nickName' => true,
        'preferredName' => true,
        'dob' => true,
        'prefix' => true,
        'suffix' => true,
        'profilePictures' => false,
        'homeLanguages' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'affiliation' => 'affiliation',
        'customFieldEight' => 'custom_field_eight',
        'customFieldFive' => 'custom_field_five',
        'customFieldFour' => 'custom_field_four',
        'customFieldNine' => 'custom_field_nine',
        'customFieldOne' => 'custom_field_one',
        'customFieldSeven' => 'custom_field_seven',
        'customFieldSix' => 'custom_field_six',
        'customFieldTen' => 'custom_field_ten',
        'customFieldThree' => 'custom_field_three',
        'customFieldTwo' => 'custom_field_two',
        'deceased' => 'deceased',
        'display' => 'display',
        'email' => 'email',
        'emailActive' => 'email_active',
        'firstName' => 'first_name',
        'gender' => 'gender',
        'genderDescription' => 'gender_description',
        'greeting' => 'greeting',
        'hostId' => 'host_id',
        'lastName' => 'last_name',
        'lost' => 'lost',
        'maidenName' => 'maiden_name',
        'middleName' => 'middle_name',
        'nickName' => 'nick_name',
        'preferredName' => 'preferred_name',
        'dob' => 'dob',
        'prefix' => 'prefix',
        'suffix' => 'suffix',
        'profilePictures' => 'profile_pictures',
        'homeLanguages' => 'home_languages',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'affiliation' => 'setAffiliation',
        'customFieldEight' => 'setCustomFieldEight',
        'customFieldFive' => 'setCustomFieldFive',
        'customFieldFour' => 'setCustomFieldFour',
        'customFieldNine' => 'setCustomFieldNine',
        'customFieldOne' => 'setCustomFieldOne',
        'customFieldSeven' => 'setCustomFieldSeven',
        'customFieldSix' => 'setCustomFieldSix',
        'customFieldTen' => 'setCustomFieldTen',
        'customFieldThree' => 'setCustomFieldThree',
        'customFieldTwo' => 'setCustomFieldTwo',
        'deceased' => 'setDeceased',
        'display' => 'setDisplay',
        'email' => 'setEmail',
        'emailActive' => 'setEmailActive',
        'firstName' => 'setFirstName',
        'gender' => 'setGender',
        'genderDescription' => 'setGenderDescription',
        'greeting' => 'setGreeting',
        'hostId' => 'setHostId',
        'lastName' => 'setLastName',
        'lost' => 'setLost',
        'maidenName' => 'setMaidenName',
        'middleName' => 'setMiddleName',
        'nickName' => 'setNickName',
        'preferredName' => 'setPreferredName',
        'dob' => 'setDob',
        'prefix' => 'setPrefix',
        'suffix' => 'setSuffix',
        'profilePictures' => 'setProfilePictures',
        'homeLanguages' => 'setHomeLanguages',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'affiliation' => 'getAffiliation',
        'customFieldEight' => 'getCustomFieldEight',
        'customFieldFive' => 'getCustomFieldFive',
        'customFieldFour' => 'getCustomFieldFour',
        'customFieldNine' => 'getCustomFieldNine',
        'customFieldOne' => 'getCustomFieldOne',
        'customFieldSeven' => 'getCustomFieldSeven',
        'customFieldSix' => 'getCustomFieldSix',
        'customFieldTen' => 'getCustomFieldTen',
        'customFieldThree' => 'getCustomFieldThree',
        'customFieldTwo' => 'getCustomFieldTwo',
        'deceased' => 'getDeceased',
        'display' => 'getDisplay',
        'email' => 'getEmail',
        'emailActive' => 'getEmailActive',
        'firstName' => 'getFirstName',
        'gender' => 'getGender',
        'genderDescription' => 'getGenderDescription',
        'greeting' => 'getGreeting',
        'hostId' => 'getHostId',
        'lastName' => 'getLastName',
        'lost' => 'getLost',
        'maidenName' => 'getMaidenName',
        'middleName' => 'getMiddleName',
        'nickName' => 'getNickName',
        'preferredName' => 'getPreferredName',
        'dob' => 'getDob',
        'prefix' => 'getPrefix',
        'suffix' => 'getSuffix',
        'profilePictures' => 'getProfilePictures',
        'homeLanguages' => 'getHomeLanguages',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('affiliation', $data ?? [], null);
        $this->setIfExists('customFieldEight', $data ?? [], null);
        $this->setIfExists('customFieldFive', $data ?? [], null);
        $this->setIfExists('customFieldFour', $data ?? [], null);
        $this->setIfExists('customFieldNine', $data ?? [], null);
        $this->setIfExists('customFieldOne', $data ?? [], null);
        $this->setIfExists('customFieldSeven', $data ?? [], null);
        $this->setIfExists('customFieldSix', $data ?? [], null);
        $this->setIfExists('customFieldTen', $data ?? [], null);
        $this->setIfExists('customFieldThree', $data ?? [], null);
        $this->setIfExists('customFieldTwo', $data ?? [], null);
        $this->setIfExists('deceased', $data ?? [], null);
        $this->setIfExists('display', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('emailActive', $data ?? [], null);
        $this->setIfExists('firstName', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('genderDescription', $data ?? [], null);
        $this->setIfExists('greeting', $data ?? [], null);
        $this->setIfExists('hostId', $data ?? [], null);
        $this->setIfExists('lastName', $data ?? [], null);
        $this->setIfExists('lost', $data ?? [], null);
        $this->setIfExists('maidenName', $data ?? [], null);
        $this->setIfExists('middleName', $data ?? [], null);
        $this->setIfExists('nickName', $data ?? [], null);
        $this->setIfExists('preferredName', $data ?? [], null);
        $this->setIfExists('dob', $data ?? [], null);
        $this->setIfExists('prefix', $data ?? [], null);
        $this->setIfExists('suffix', $data ?? [], null);
        $this->setIfExists('profilePictures', $data ?? [], null);
        $this->setIfExists('homeLanguages', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID associated with a user
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets affiliation
     *
     * @return string|null
     */
    public function getAffiliation()
    {
        return $this->container['affiliation'];
    }

    /**
     * Sets affiliation
     *
     * @param string|null $affiliation The affiliation of a user
     *
     * @return self
     */
    public function setAffiliation($affiliation)
    {
        if (is_null($affiliation)) {
            array_push($this->openAPINullablesSetToNull, 'affiliation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('affiliation', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['affiliation'] = $affiliation;

        return $this;
    }

    /**
     * Gets customFieldEight
     *
     * @return string|null
     */
    public function getCustomFieldEight()
    {
        return $this->container['customFieldEight'];
    }

    /**
     * Sets customFieldEight
     *
     * @param string|null $customFieldEight A custom field on the user profile (eight of ten)
     *
     * @return self
     */
    public function setCustomFieldEight($customFieldEight)
    {
        if (is_null($customFieldEight)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldEight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldEight', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldEight'] = $customFieldEight;

        return $this;
    }

    /**
     * Gets customFieldFive
     *
     * @return string|null
     */
    public function getCustomFieldFive()
    {
        return $this->container['customFieldFive'];
    }

    /**
     * Sets customFieldFive
     *
     * @param string|null $customFieldFive A custom field on the user profile (five of ten)
     *
     * @return self
     */
    public function setCustomFieldFive($customFieldFive)
    {
        if (is_null($customFieldFive)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldFive');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldFive', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldFive'] = $customFieldFive;

        return $this;
    }

    /**
     * Gets customFieldFour
     *
     * @return string|null
     */
    public function getCustomFieldFour()
    {
        return $this->container['customFieldFour'];
    }

    /**
     * Sets customFieldFour
     *
     * @param string|null $customFieldFour A custom field on the user profile (four of ten)
     *
     * @return self
     */
    public function setCustomFieldFour($customFieldFour)
    {
        if (is_null($customFieldFour)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldFour');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldFour', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldFour'] = $customFieldFour;

        return $this;
    }

    /**
     * Gets customFieldNine
     *
     * @return string|null
     */
    public function getCustomFieldNine()
    {
        return $this->container['customFieldNine'];
    }

    /**
     * Sets customFieldNine
     *
     * @param string|null $customFieldNine A custom field on the user profile (nine of ten)
     *
     * @return self
     */
    public function setCustomFieldNine($customFieldNine)
    {
        if (is_null($customFieldNine)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldNine');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldNine', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldNine'] = $customFieldNine;

        return $this;
    }

    /**
     * Gets customFieldOne
     *
     * @return string|null
     */
    public function getCustomFieldOne()
    {
        return $this->container['customFieldOne'];
    }

    /**
     * Sets customFieldOne
     *
     * @param string|null $customFieldOne A custom field on the user profile (one of ten)
     *
     * @return self
     */
    public function setCustomFieldOne($customFieldOne)
    {
        if (is_null($customFieldOne)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldOne');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldOne', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldOne'] = $customFieldOne;

        return $this;
    }

    /**
     * Gets customFieldSeven
     *
     * @return string|null
     */
    public function getCustomFieldSeven()
    {
        return $this->container['customFieldSeven'];
    }

    /**
     * Sets customFieldSeven
     *
     * @param string|null $customFieldSeven A custom field on the user profile (seven of ten)
     *
     * @return self
     */
    public function setCustomFieldSeven($customFieldSeven)
    {
        if (is_null($customFieldSeven)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldSeven');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldSeven', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldSeven'] = $customFieldSeven;

        return $this;
    }

    /**
     * Gets customFieldSix
     *
     * @return string|null
     */
    public function getCustomFieldSix()
    {
        return $this->container['customFieldSix'];
    }

    /**
     * Sets customFieldSix
     *
     * @param string|null $customFieldSix A custom field on the user profile (six of ten)
     *
     * @return self
     */
    public function setCustomFieldSix($customFieldSix)
    {
        if (is_null($customFieldSix)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldSix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldSix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldSix'] = $customFieldSix;

        return $this;
    }

    /**
     * Gets customFieldTen
     *
     * @return string|null
     */
    public function getCustomFieldTen()
    {
        return $this->container['customFieldTen'];
    }

    /**
     * Sets customFieldTen
     *
     * @param string|null $customFieldTen A custom field on the user profile (ten of ten)
     *
     * @return self
     */
    public function setCustomFieldTen($customFieldTen)
    {
        if (is_null($customFieldTen)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldTen');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldTen', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldTen'] = $customFieldTen;

        return $this;
    }

    /**
     * Gets customFieldThree
     *
     * @return string|null
     */
    public function getCustomFieldThree()
    {
        return $this->container['customFieldThree'];
    }

    /**
     * Sets customFieldThree
     *
     * @param string|null $customFieldThree A custom field on the user profile (three of ten)
     *
     * @return self
     */
    public function setCustomFieldThree($customFieldThree)
    {
        if (is_null($customFieldThree)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldThree');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldThree', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldThree'] = $customFieldThree;

        return $this;
    }

    /**
     * Gets customFieldTwo
     *
     * @return string|null
     */
    public function getCustomFieldTwo()
    {
        return $this->container['customFieldTwo'];
    }

    /**
     * Sets customFieldTwo
     *
     * @param string|null $customFieldTwo A custom field on the user profile (two of ten)
     *
     * @return self
     */
    public function setCustomFieldTwo($customFieldTwo)
    {
        if (is_null($customFieldTwo)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldTwo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldTwo', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldTwo'] = $customFieldTwo;

        return $this;
    }

    /**
     * Gets deceased
     *
     * @return bool|null
     */
    public function getDeceased()
    {
        return $this->container['deceased'];
    }

    /**
     * Sets deceased
     *
     * @param bool|null $deceased Returns true if deceased is selected under sensitive information in a personal profile ex: {last_name} {suffix*}, {first_name} {(maidenname*}) {grad_year*} *If not populated fields will not appear (read only)
     *
     * @return self
     */
    public function setDeceased($deceased)
    {
        if (is_null($deceased)) {
            throw new \InvalidArgumentException('non-nullable deceased cannot be null');
        }
        $this->container['deceased'] = $deceased;

        return $this;
    }

    /**
     * Gets display
     *
     * @return string|null
     */
    public function getDisplay()
    {
        return $this->container['display'];
    }

    /**
     * Sets display
     *
     * @param string|null $display Display name field generated from first name, last name, nickname, and grad year (read only)
     *
     * @return self
     */
    public function setDisplay($display)
    {
        if (is_null($display)) {
            array_push($this->openAPINullablesSetToNull, 'display');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('display', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['display'] = $display;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address of a user
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets emailActive
     *
     * @return bool|null
     */
    public function getEmailActive()
    {
        return $this->container['emailActive'];
    }

    /**
     * Sets emailActive
     *
     * @param bool|null $emailActive Returns true if the users e-mail is ok to send to
     *
     * @return self
     */
    public function setEmailActive($emailActive)
    {
        if (is_null($emailActive)) {
            throw new \InvalidArgumentException('non-nullable emailActive cannot be null');
        }
        $this->container['emailActive'] = $emailActive;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName The first name of a user
     *
     * @return self
     */
    public function setFirstName($firstName)
    {
        if (is_null($firstName)) {
            array_push($this->openAPINullablesSetToNull, 'firstName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('firstName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender The gender of a user
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            array_push($this->openAPINullablesSetToNull, 'gender');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets genderDescription
     *
     * @return string|null
     */
    public function getGenderDescription()
    {
        return $this->container['genderDescription'];
    }

    /**
     * Sets genderDescription
     *
     * @param string|null $genderDescription The gender of a user
     *
     * @return self
     */
    public function setGenderDescription($genderDescription)
    {
        if (is_null($genderDescription)) {
            array_push($this->openAPINullablesSetToNull, 'genderDescription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('genderDescription', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['genderDescription'] = $genderDescription;

        return $this;
    }

    /**
     * Gets greeting
     *
     * @return string|null
     */
    public function getGreeting()
    {
        return $this->container['greeting'];
    }

    /**
     * Sets greeting
     *
     * @param string|null $greeting The greeting of a user
     *
     * @return self
     */
    public function setGreeting($greeting)
    {
        if (is_null($greeting)) {
            array_push($this->openAPINullablesSetToNull, 'greeting');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('greeting', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['greeting'] = $greeting;

        return $this;
    }

    /**
     * Gets hostId
     *
     * @return string|null
     */
    public function getHostId()
    {
        return $this->container['hostId'];
    }

    /**
     * Sets hostId
     *
     * @param string|null $hostId The HostId of a user
     *
     * @return self
     */
    public function setHostId($hostId)
    {
        if (is_null($hostId)) {
            array_push($this->openAPINullablesSetToNull, 'hostId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hostId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hostId'] = $hostId;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName The last name of a user
     *
     * @return self
     */
    public function setLastName($lastName)
    {
        if (is_null($lastName)) {
            array_push($this->openAPINullablesSetToNull, 'lastName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets lost
     *
     * @return bool|null
     */
    public function getLost()
    {
        return $this->container['lost'];
    }

    /**
     * Sets lost
     *
     * @param bool|null $lost Returns true if lost is selected under sensitive information in a personal profile (read only)
     *
     * @return self
     */
    public function setLost($lost)
    {
        if (is_null($lost)) {
            throw new \InvalidArgumentException('non-nullable lost cannot be null');
        }
        $this->container['lost'] = $lost;

        return $this;
    }

    /**
     * Gets maidenName
     *
     * @return string|null
     */
    public function getMaidenName()
    {
        return $this->container['maidenName'];
    }

    /**
     * Sets maidenName
     *
     * @param string|null $maidenName The maiden name of a user
     *
     * @return self
     */
    public function setMaidenName($maidenName)
    {
        if (is_null($maidenName)) {
            array_push($this->openAPINullablesSetToNull, 'maidenName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maidenName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maidenName'] = $maidenName;

        return $this;
    }

    /**
     * Gets middleName
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middleName'];
    }

    /**
     * Sets middleName
     *
     * @param string|null $middleName The middle name of a user
     *
     * @return self
     */
    public function setMiddleName($middleName)
    {
        if (is_null($middleName)) {
            array_push($this->openAPINullablesSetToNull, 'middleName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('middleName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['middleName'] = $middleName;

        return $this;
    }

    /**
     * Gets nickName
     *
     * @return string|null
     */
    public function getNickName()
    {
        return $this->container['nickName'];
    }

    /**
     * Sets nickName
     *
     * @param string|null $nickName The nickname of a user  <b>This field will be deprecated after 90 days.</b>
     *
     * @return self
     */
    public function setNickName($nickName)
    {
        if (is_null($nickName)) {
            array_push($this->openAPINullablesSetToNull, 'nickName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nickName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nickName'] = $nickName;

        return $this;
    }

    /**
     * Gets preferredName
     *
     * @return string|null
     */
    public function getPreferredName()
    {
        return $this->container['preferredName'];
    }

    /**
     * Sets preferredName
     *
     * @param string|null $preferredName The preferred name of the user
     *
     * @return self
     */
    public function setPreferredName($preferredName)
    {
        if (is_null($preferredName)) {
            array_push($this->openAPINullablesSetToNull, 'preferredName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferredName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferredName'] = $preferredName;

        return $this;
    }

    /**
     * Gets dob
     *
     * @return \DateTime|null
     */
    public function getDob()
    {
        return $this->container['dob'];
    }

    /**
     * Sets dob
     *
     * @param \DateTime|null $dob Users date of birth
     *
     * @return self
     */
    public function setDob($dob)
    {
        if (is_null($dob)) {
            array_push($this->openAPINullablesSetToNull, 'dob');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dob', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dob'] = $dob;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix The prefix of a user
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (is_null($prefix)) {
            array_push($this->openAPINullablesSetToNull, 'prefix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prefix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string|null
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string|null $suffix The suffix of a user
     *
     * @return self
     */
    public function setSuffix($suffix)
    {
        if (is_null($suffix)) {
            array_push($this->openAPINullablesSetToNull, 'suffix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suffix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets profilePictures
     *
     * @return \SKY\School\Model\ProfilePictureUrls|null
     */
    public function getProfilePictures()
    {
        return $this->container['profilePictures'];
    }

    /**
     * Sets profilePictures
     *
     * @param \SKY\School\Model\ProfilePictureUrls|null $profilePictures profilePictures
     *
     * @return self
     */
    public function setProfilePictures($profilePictures)
    {
        if (is_null($profilePictures)) {
            throw new \InvalidArgumentException('non-nullable profilePictures cannot be null');
        }
        $this->container['profilePictures'] = $profilePictures;

        return $this;
    }

    /**
     * Gets homeLanguages
     *
     * @return \SKY\School\Model\HomeLanguageRead[]|null
     */
    public function getHomeLanguages()
    {
        return $this->container['homeLanguages'];
    }

    /**
     * Sets homeLanguages
     *
     * @param \SKY\School\Model\HomeLanguageRead[]|null $homeLanguages List of languages spoken at home by the user
     *
     * @return self
     */
    public function setHomeLanguages($homeLanguages)
    {
        if (is_null($homeLanguages)) {
            array_push($this->openAPINullablesSetToNull, 'homeLanguages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('homeLanguages', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['homeLanguages'] = $homeLanguages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
