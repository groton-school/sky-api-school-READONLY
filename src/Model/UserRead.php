<?php
/**
 * UserRead
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * UserRead Class Doc Comment
 *
 * @category Class
 * @description UserRead Model
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserRead';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'affiliation' => 'string',
        'custom_field_eight' => 'string',
        'custom_field_five' => 'string',
        'custom_field_four' => 'string',
        'custom_field_nine' => 'string',
        'custom_field_one' => 'string',
        'custom_field_seven' => 'string',
        'custom_field_six' => 'string',
        'custom_field_ten' => 'string',
        'custom_field_three' => 'string',
        'custom_field_two' => 'string',
        'deceased' => 'bool',
        'display' => 'string',
        'email' => 'string',
        'email_active' => 'bool',
        'first_name' => 'string',
        'gender' => 'string',
        'gender_description' => 'string',
        'greeting' => 'string',
        'host_id' => 'string',
        'last_name' => 'string',
        'lost' => 'bool',
        'maiden_name' => 'string',
        'middle_name' => 'string',
        'nick_name' => 'string',
        'preferred_name' => 'string',
        'dob' => '\DateTime',
        'prefix' => 'string',
        'suffix' => 'string',
        'profile_pictures' => '\SKY\School\Model\ProfilePictureUrls',
        'home_languages' => '\SKY\School\Model\HomeLanguageRead[]',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'affiliation' => null,
        'custom_field_eight' => null,
        'custom_field_five' => null,
        'custom_field_four' => null,
        'custom_field_nine' => null,
        'custom_field_one' => null,
        'custom_field_seven' => null,
        'custom_field_six' => null,
        'custom_field_ten' => null,
        'custom_field_three' => null,
        'custom_field_two' => null,
        'deceased' => null,
        'display' => null,
        'email' => null,
        'email_active' => null,
        'first_name' => null,
        'gender' => null,
        'gender_description' => null,
        'greeting' => null,
        'host_id' => null,
        'last_name' => null,
        'lost' => null,
        'maiden_name' => null,
        'middle_name' => null,
        'nick_name' => null,
        'preferred_name' => null,
        'dob' => 'date-time',
        'prefix' => null,
        'suffix' => null,
        'profile_pictures' => null,
        'home_languages' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'affiliation' => true,
        'custom_field_eight' => true,
        'custom_field_five' => true,
        'custom_field_four' => true,
        'custom_field_nine' => true,
        'custom_field_one' => true,
        'custom_field_seven' => true,
        'custom_field_six' => true,
        'custom_field_ten' => true,
        'custom_field_three' => true,
        'custom_field_two' => true,
        'deceased' => false,
        'display' => true,
        'email' => true,
        'email_active' => false,
        'first_name' => true,
        'gender' => true,
        'gender_description' => true,
        'greeting' => true,
        'host_id' => true,
        'last_name' => true,
        'lost' => false,
        'maiden_name' => true,
        'middle_name' => true,
        'nick_name' => true,
        'preferred_name' => true,
        'dob' => true,
        'prefix' => true,
        'suffix' => true,
        'profile_pictures' => false,
        'home_languages' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'affiliation' => 'affiliation',
        'custom_field_eight' => 'custom_field_eight',
        'custom_field_five' => 'custom_field_five',
        'custom_field_four' => 'custom_field_four',
        'custom_field_nine' => 'custom_field_nine',
        'custom_field_one' => 'custom_field_one',
        'custom_field_seven' => 'custom_field_seven',
        'custom_field_six' => 'custom_field_six',
        'custom_field_ten' => 'custom_field_ten',
        'custom_field_three' => 'custom_field_three',
        'custom_field_two' => 'custom_field_two',
        'deceased' => 'deceased',
        'display' => 'display',
        'email' => 'email',
        'email_active' => 'email_active',
        'first_name' => 'first_name',
        'gender' => 'gender',
        'gender_description' => 'gender_description',
        'greeting' => 'greeting',
        'host_id' => 'host_id',
        'last_name' => 'last_name',
        'lost' => 'lost',
        'maiden_name' => 'maiden_name',
        'middle_name' => 'middle_name',
        'nick_name' => 'nick_name',
        'preferred_name' => 'preferred_name',
        'dob' => 'dob',
        'prefix' => 'prefix',
        'suffix' => 'suffix',
        'profile_pictures' => 'profile_pictures',
        'home_languages' => 'home_languages',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'affiliation' => 'setAffiliation',
        'custom_field_eight' => 'setCustomFieldEight',
        'custom_field_five' => 'setCustomFieldFive',
        'custom_field_four' => 'setCustomFieldFour',
        'custom_field_nine' => 'setCustomFieldNine',
        'custom_field_one' => 'setCustomFieldOne',
        'custom_field_seven' => 'setCustomFieldSeven',
        'custom_field_six' => 'setCustomFieldSix',
        'custom_field_ten' => 'setCustomFieldTen',
        'custom_field_three' => 'setCustomFieldThree',
        'custom_field_two' => 'setCustomFieldTwo',
        'deceased' => 'setDeceased',
        'display' => 'setDisplay',
        'email' => 'setEmail',
        'email_active' => 'setEmailActive',
        'first_name' => 'setFirstName',
        'gender' => 'setGender',
        'gender_description' => 'setGenderDescription',
        'greeting' => 'setGreeting',
        'host_id' => 'setHostId',
        'last_name' => 'setLastName',
        'lost' => 'setLost',
        'maiden_name' => 'setMaidenName',
        'middle_name' => 'setMiddleName',
        'nick_name' => 'setNickName',
        'preferred_name' => 'setPreferredName',
        'dob' => 'setDob',
        'prefix' => 'setPrefix',
        'suffix' => 'setSuffix',
        'profile_pictures' => 'setProfilePictures',
        'home_languages' => 'setHomeLanguages',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'affiliation' => 'getAffiliation',
        'custom_field_eight' => 'getCustomFieldEight',
        'custom_field_five' => 'getCustomFieldFive',
        'custom_field_four' => 'getCustomFieldFour',
        'custom_field_nine' => 'getCustomFieldNine',
        'custom_field_one' => 'getCustomFieldOne',
        'custom_field_seven' => 'getCustomFieldSeven',
        'custom_field_six' => 'getCustomFieldSix',
        'custom_field_ten' => 'getCustomFieldTen',
        'custom_field_three' => 'getCustomFieldThree',
        'custom_field_two' => 'getCustomFieldTwo',
        'deceased' => 'getDeceased',
        'display' => 'getDisplay',
        'email' => 'getEmail',
        'email_active' => 'getEmailActive',
        'first_name' => 'getFirstName',
        'gender' => 'getGender',
        'gender_description' => 'getGenderDescription',
        'greeting' => 'getGreeting',
        'host_id' => 'getHostId',
        'last_name' => 'getLastName',
        'lost' => 'getLost',
        'maiden_name' => 'getMaidenName',
        'middle_name' => 'getMiddleName',
        'nick_name' => 'getNickName',
        'preferred_name' => 'getPreferredName',
        'dob' => 'getDob',
        'prefix' => 'getPrefix',
        'suffix' => 'getSuffix',
        'profile_pictures' => 'getProfilePictures',
        'home_languages' => 'getHomeLanguages',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('affiliation', $data ?? [], null);
        $this->setIfExists('custom_field_eight', $data ?? [], null);
        $this->setIfExists('custom_field_five', $data ?? [], null);
        $this->setIfExists('custom_field_four', $data ?? [], null);
        $this->setIfExists('custom_field_nine', $data ?? [], null);
        $this->setIfExists('custom_field_one', $data ?? [], null);
        $this->setIfExists('custom_field_seven', $data ?? [], null);
        $this->setIfExists('custom_field_six', $data ?? [], null);
        $this->setIfExists('custom_field_ten', $data ?? [], null);
        $this->setIfExists('custom_field_three', $data ?? [], null);
        $this->setIfExists('custom_field_two', $data ?? [], null);
        $this->setIfExists('deceased', $data ?? [], null);
        $this->setIfExists('display', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('email_active', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('gender_description', $data ?? [], null);
        $this->setIfExists('greeting', $data ?? [], null);
        $this->setIfExists('host_id', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('lost', $data ?? [], null);
        $this->setIfExists('maiden_name', $data ?? [], null);
        $this->setIfExists('middle_name', $data ?? [], null);
        $this->setIfExists('nick_name', $data ?? [], null);
        $this->setIfExists('preferred_name', $data ?? [], null);
        $this->setIfExists('dob', $data ?? [], null);
        $this->setIfExists('prefix', $data ?? [], null);
        $this->setIfExists('suffix', $data ?? [], null);
        $this->setIfExists('profile_pictures', $data ?? [], null);
        $this->setIfExists('home_languages', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID associated with a user
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets affiliation
     *
     * @return string|null
     */
    public function getAffiliation()
    {
        return $this->container['affiliation'];
    }

    /**
     * Sets affiliation
     *
     * @param string|null $affiliation The affiliation of a user
     *
     * @return self
     */
    public function setAffiliation($affiliation)
    {
        if (is_null($affiliation)) {
            array_push($this->openAPINullablesSetToNull, 'affiliation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('affiliation', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['affiliation'] = $affiliation;

        return $this;
    }

    /**
     * Gets custom_field_eight
     *
     * @return string|null
     */
    public function getCustomFieldEight()
    {
        return $this->container['custom_field_eight'];
    }

    /**
     * Sets custom_field_eight
     *
     * @param string|null $custom_field_eight A custom field on the user profile (eight of ten)
     *
     * @return self
     */
    public function setCustomFieldEight($custom_field_eight)
    {
        if (is_null($custom_field_eight)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_eight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_eight', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_eight'] = $custom_field_eight;

        return $this;
    }

    /**
     * Gets custom_field_five
     *
     * @return string|null
     */
    public function getCustomFieldFive()
    {
        return $this->container['custom_field_five'];
    }

    /**
     * Sets custom_field_five
     *
     * @param string|null $custom_field_five A custom field on the user profile (five of ten)
     *
     * @return self
     */
    public function setCustomFieldFive($custom_field_five)
    {
        if (is_null($custom_field_five)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_five');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_five', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_five'] = $custom_field_five;

        return $this;
    }

    /**
     * Gets custom_field_four
     *
     * @return string|null
     */
    public function getCustomFieldFour()
    {
        return $this->container['custom_field_four'];
    }

    /**
     * Sets custom_field_four
     *
     * @param string|null $custom_field_four A custom field on the user profile (four of ten)
     *
     * @return self
     */
    public function setCustomFieldFour($custom_field_four)
    {
        if (is_null($custom_field_four)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_four');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_four', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_four'] = $custom_field_four;

        return $this;
    }

    /**
     * Gets custom_field_nine
     *
     * @return string|null
     */
    public function getCustomFieldNine()
    {
        return $this->container['custom_field_nine'];
    }

    /**
     * Sets custom_field_nine
     *
     * @param string|null $custom_field_nine A custom field on the user profile (nine of ten)
     *
     * @return self
     */
    public function setCustomFieldNine($custom_field_nine)
    {
        if (is_null($custom_field_nine)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_nine');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_nine', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_nine'] = $custom_field_nine;

        return $this;
    }

    /**
     * Gets custom_field_one
     *
     * @return string|null
     */
    public function getCustomFieldOne()
    {
        return $this->container['custom_field_one'];
    }

    /**
     * Sets custom_field_one
     *
     * @param string|null $custom_field_one A custom field on the user profile (one of ten)
     *
     * @return self
     */
    public function setCustomFieldOne($custom_field_one)
    {
        if (is_null($custom_field_one)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_one');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_one', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_one'] = $custom_field_one;

        return $this;
    }

    /**
     * Gets custom_field_seven
     *
     * @return string|null
     */
    public function getCustomFieldSeven()
    {
        return $this->container['custom_field_seven'];
    }

    /**
     * Sets custom_field_seven
     *
     * @param string|null $custom_field_seven A custom field on the user profile (seven of ten)
     *
     * @return self
     */
    public function setCustomFieldSeven($custom_field_seven)
    {
        if (is_null($custom_field_seven)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_seven');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_seven', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_seven'] = $custom_field_seven;

        return $this;
    }

    /**
     * Gets custom_field_six
     *
     * @return string|null
     */
    public function getCustomFieldSix()
    {
        return $this->container['custom_field_six'];
    }

    /**
     * Sets custom_field_six
     *
     * @param string|null $custom_field_six A custom field on the user profile (six of ten)
     *
     * @return self
     */
    public function setCustomFieldSix($custom_field_six)
    {
        if (is_null($custom_field_six)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_six');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_six', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_six'] = $custom_field_six;

        return $this;
    }

    /**
     * Gets custom_field_ten
     *
     * @return string|null
     */
    public function getCustomFieldTen()
    {
        return $this->container['custom_field_ten'];
    }

    /**
     * Sets custom_field_ten
     *
     * @param string|null $custom_field_ten A custom field on the user profile (ten of ten)
     *
     * @return self
     */
    public function setCustomFieldTen($custom_field_ten)
    {
        if (is_null($custom_field_ten)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_ten');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_ten', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_ten'] = $custom_field_ten;

        return $this;
    }

    /**
     * Gets custom_field_three
     *
     * @return string|null
     */
    public function getCustomFieldThree()
    {
        return $this->container['custom_field_three'];
    }

    /**
     * Sets custom_field_three
     *
     * @param string|null $custom_field_three A custom field on the user profile (three of ten)
     *
     * @return self
     */
    public function setCustomFieldThree($custom_field_three)
    {
        if (is_null($custom_field_three)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_three');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_three', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_three'] = $custom_field_three;

        return $this;
    }

    /**
     * Gets custom_field_two
     *
     * @return string|null
     */
    public function getCustomFieldTwo()
    {
        return $this->container['custom_field_two'];
    }

    /**
     * Sets custom_field_two
     *
     * @param string|null $custom_field_two A custom field on the user profile (two of ten)
     *
     * @return self
     */
    public function setCustomFieldTwo($custom_field_two)
    {
        if (is_null($custom_field_two)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_two');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_two', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_two'] = $custom_field_two;

        return $this;
    }

    /**
     * Gets deceased
     *
     * @return bool|null
     */
    public function getDeceased()
    {
        return $this->container['deceased'];
    }

    /**
     * Sets deceased
     *
     * @param bool|null $deceased Returns true if deceased is selected under sensitive information in a personal profile ex: {last_name} {suffix*}, {first_name} {(maidenname*}) {grad_year*} *If not populated fields will not appear (read only)
     *
     * @return self
     */
    public function setDeceased($deceased)
    {
        if (is_null($deceased)) {
            throw new \InvalidArgumentException('non-nullable deceased cannot be null');
        }
        $this->container['deceased'] = $deceased;

        return $this;
    }

    /**
     * Gets display
     *
     * @return string|null
     */
    public function getDisplay()
    {
        return $this->container['display'];
    }

    /**
     * Sets display
     *
     * @param string|null $display Display name field generated from first name, last name, nickname, and grad year (read only)
     *
     * @return self
     */
    public function setDisplay($display)
    {
        if (is_null($display)) {
            array_push($this->openAPINullablesSetToNull, 'display');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('display', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['display'] = $display;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address of a user
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets email_active
     *
     * @return bool|null
     */
    public function getEmailActive()
    {
        return $this->container['email_active'];
    }

    /**
     * Sets email_active
     *
     * @param bool|null $email_active Returns true if the users e-mail is ok to send to
     *
     * @return self
     */
    public function setEmailActive($email_active)
    {
        if (is_null($email_active)) {
            throw new \InvalidArgumentException('non-nullable email_active cannot be null');
        }
        $this->container['email_active'] = $email_active;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name The first name of a user
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            array_push($this->openAPINullablesSetToNull, 'first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender The gender of a user
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            array_push($this->openAPINullablesSetToNull, 'gender');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets gender_description
     *
     * @return string|null
     */
    public function getGenderDescription()
    {
        return $this->container['gender_description'];
    }

    /**
     * Sets gender_description
     *
     * @param string|null $gender_description The gender of a user
     *
     * @return self
     */
    public function setGenderDescription($gender_description)
    {
        if (is_null($gender_description)) {
            array_push($this->openAPINullablesSetToNull, 'gender_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender_description', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gender_description'] = $gender_description;

        return $this;
    }

    /**
     * Gets greeting
     *
     * @return string|null
     */
    public function getGreeting()
    {
        return $this->container['greeting'];
    }

    /**
     * Sets greeting
     *
     * @param string|null $greeting The greeting of a user
     *
     * @return self
     */
    public function setGreeting($greeting)
    {
        if (is_null($greeting)) {
            array_push($this->openAPINullablesSetToNull, 'greeting');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('greeting', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['greeting'] = $greeting;

        return $this;
    }

    /**
     * Gets host_id
     *
     * @return string|null
     */
    public function getHostId()
    {
        return $this->container['host_id'];
    }

    /**
     * Sets host_id
     *
     * @param string|null $host_id The HostId of a user
     *
     * @return self
     */
    public function setHostId($host_id)
    {
        if (is_null($host_id)) {
            array_push($this->openAPINullablesSetToNull, 'host_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('host_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['host_id'] = $host_id;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name The last name of a user
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            array_push($this->openAPINullablesSetToNull, 'last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets lost
     *
     * @return bool|null
     */
    public function getLost()
    {
        return $this->container['lost'];
    }

    /**
     * Sets lost
     *
     * @param bool|null $lost Returns true if lost is selected under sensitive information in a personal profile (read only)
     *
     * @return self
     */
    public function setLost($lost)
    {
        if (is_null($lost)) {
            throw new \InvalidArgumentException('non-nullable lost cannot be null');
        }
        $this->container['lost'] = $lost;

        return $this;
    }

    /**
     * Gets maiden_name
     *
     * @return string|null
     */
    public function getMaidenName()
    {
        return $this->container['maiden_name'];
    }

    /**
     * Sets maiden_name
     *
     * @param string|null $maiden_name The maiden name of a user
     *
     * @return self
     */
    public function setMaidenName($maiden_name)
    {
        if (is_null($maiden_name)) {
            array_push($this->openAPINullablesSetToNull, 'maiden_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maiden_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maiden_name'] = $maiden_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name The middle name of a user
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        if (is_null($middle_name)) {
            array_push($this->openAPINullablesSetToNull, 'middle_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('middle_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets nick_name
     *
     * @return string|null
     */
    public function getNickName()
    {
        return $this->container['nick_name'];
    }

    /**
     * Sets nick_name
     *
     * @param string|null $nick_name The nickname of a user  <b>This field will be deprecated after 90 days.</b>
     *
     * @return self
     */
    public function setNickName($nick_name)
    {
        if (is_null($nick_name)) {
            array_push($this->openAPINullablesSetToNull, 'nick_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nick_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nick_name'] = $nick_name;

        return $this;
    }

    /**
     * Gets preferred_name
     *
     * @return string|null
     */
    public function getPreferredName()
    {
        return $this->container['preferred_name'];
    }

    /**
     * Sets preferred_name
     *
     * @param string|null $preferred_name The preferred name of the user
     *
     * @return self
     */
    public function setPreferredName($preferred_name)
    {
        if (is_null($preferred_name)) {
            array_push($this->openAPINullablesSetToNull, 'preferred_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferred_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferred_name'] = $preferred_name;

        return $this;
    }

    /**
     * Gets dob
     *
     * @return \DateTime|null
     */
    public function getDob()
    {
        return $this->container['dob'];
    }

    /**
     * Sets dob
     *
     * @param \DateTime|null $dob Users date of birth
     *
     * @return self
     */
    public function setDob($dob)
    {
        if (is_null($dob)) {
            array_push($this->openAPINullablesSetToNull, 'dob');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dob', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dob'] = $dob;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix The prefix of a user
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (is_null($prefix)) {
            array_push($this->openAPINullablesSetToNull, 'prefix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prefix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string|null
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string|null $suffix The suffix of a user
     *
     * @return self
     */
    public function setSuffix($suffix)
    {
        if (is_null($suffix)) {
            array_push($this->openAPINullablesSetToNull, 'suffix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suffix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets profile_pictures
     *
     * @return \SKY\School\Model\ProfilePictureUrls|null
     */
    public function getProfilePictures()
    {
        return $this->container['profile_pictures'];
    }

    /**
     * Sets profile_pictures
     *
     * @param \SKY\School\Model\ProfilePictureUrls|null $profile_pictures profile_pictures
     *
     * @return self
     */
    public function setProfilePictures($profile_pictures)
    {
        if (is_null($profile_pictures)) {
            throw new \InvalidArgumentException('non-nullable profile_pictures cannot be null');
        }
        $this->container['profile_pictures'] = $profile_pictures;

        return $this;
    }

    /**
     * Gets home_languages
     *
     * @return \SKY\School\Model\HomeLanguageRead[]|null
     */
    public function getHomeLanguages()
    {
        return $this->container['home_languages'];
    }

    /**
     * Sets home_languages
     *
     * @param \SKY\School\Model\HomeLanguageRead[]|null $home_languages List of languages spoken at home by the user
     *
     * @return self
     */
    public function setHomeLanguages($home_languages)
    {
        if (is_null($home_languages)) {
            array_push($this->openAPINullablesSetToNull, 'home_languages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('home_languages', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['home_languages'] = $home_languages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
