<?php
/**
 * EmergencyContactChange
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * EmergencyContactChange Class Doc Comment
 *
 * @category Class
 * @description Emergency Contact Changes
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmergencyContactChange implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmergencyContactChange';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'userId' => 'int',
        'callDialer' => 'string',
        'ecUserId' => 'int',
        'firstname' => 'string',
        'lastname' => 'string',
        'phoneNumber' => 'string',
        'phoneType' => 'string',
        'phoneCallType' => 'int',
        'email' => 'string',
        'emailCallType' => 'int',
        'recordType' => 'int',
        'sort' => 'int',
        'inactive' => 'bool',
        'active' => 'bool',
        'deleteIndicator' => 'bool',
        'roles' => 'string',
        'studentIndicator' => 'bool',
        'facultyIndicator' => 'bool',
        'staffIndicator' => 'bool',
        'emergencyContactChangeEmails' => '\SKY\School\Model\EmergencyContactChangeEmail[]',
        'emergencyContactChangePhones' => '\SKY\School\Model\EmergencyContactChangePhone[]',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'userId' => 'int32',
        'callDialer' => null,
        'ecUserId' => 'int32',
        'firstname' => null,
        'lastname' => null,
        'phoneNumber' => null,
        'phoneType' => null,
        'phoneCallType' => 'int32',
        'email' => null,
        'emailCallType' => 'int32',
        'recordType' => 'int32',
        'sort' => 'int32',
        'inactive' => null,
        'active' => null,
        'deleteIndicator' => null,
        'roles' => null,
        'studentIndicator' => null,
        'facultyIndicator' => null,
        'staffIndicator' => null,
        'emergencyContactChangeEmails' => null,
        'emergencyContactChangePhones' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'userId' => true,
        'callDialer' => true,
        'ecUserId' => true,
        'firstname' => true,
        'lastname' => true,
        'phoneNumber' => true,
        'phoneType' => true,
        'phoneCallType' => true,
        'email' => true,
        'emailCallType' => true,
        'recordType' => true,
        'sort' => true,
        'inactive' => true,
        'active' => true,
        'deleteIndicator' => true,
        'roles' => true,
        'studentIndicator' => true,
        'facultyIndicator' => true,
        'staffIndicator' => true,
        'emergencyContactChangeEmails' => true,
        'emergencyContactChangePhones' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'userId' => 'user_id',
        'callDialer' => 'call_dialer',
        'ecUserId' => 'ec_user_id',
        'firstname' => 'firstname',
        'lastname' => 'lastname',
        'phoneNumber' => 'phone_number',
        'phoneType' => 'phone_type',
        'phoneCallType' => 'phone_call_type',
        'email' => 'email',
        'emailCallType' => 'email_call_type',
        'recordType' => 'record_type',
        'sort' => 'sort',
        'inactive' => 'inactive',
        'active' => 'active',
        'deleteIndicator' => 'delete_indicator',
        'roles' => 'roles',
        'studentIndicator' => 'student_indicator',
        'facultyIndicator' => 'faculty_indicator',
        'staffIndicator' => 'staff_indicator',
        'emergencyContactChangeEmails' => 'emergency_contact_change_emails',
        'emergencyContactChangePhones' => 'emergency_contact_change_phones',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'userId' => 'setUserId',
        'callDialer' => 'setCallDialer',
        'ecUserId' => 'setEcUserId',
        'firstname' => 'setFirstname',
        'lastname' => 'setLastname',
        'phoneNumber' => 'setPhoneNumber',
        'phoneType' => 'setPhoneType',
        'phoneCallType' => 'setPhoneCallType',
        'email' => 'setEmail',
        'emailCallType' => 'setEmailCallType',
        'recordType' => 'setRecordType',
        'sort' => 'setSort',
        'inactive' => 'setInactive',
        'active' => 'setActive',
        'deleteIndicator' => 'setDeleteIndicator',
        'roles' => 'setRoles',
        'studentIndicator' => 'setStudentIndicator',
        'facultyIndicator' => 'setFacultyIndicator',
        'staffIndicator' => 'setStaffIndicator',
        'emergencyContactChangeEmails' => 'setEmergencyContactChangeEmails',
        'emergencyContactChangePhones' => 'setEmergencyContactChangePhones',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'userId' => 'getUserId',
        'callDialer' => 'getCallDialer',
        'ecUserId' => 'getEcUserId',
        'firstname' => 'getFirstname',
        'lastname' => 'getLastname',
        'phoneNumber' => 'getPhoneNumber',
        'phoneType' => 'getPhoneType',
        'phoneCallType' => 'getPhoneCallType',
        'email' => 'getEmail',
        'emailCallType' => 'getEmailCallType',
        'recordType' => 'getRecordType',
        'sort' => 'getSort',
        'inactive' => 'getInactive',
        'active' => 'getActive',
        'deleteIndicator' => 'getDeleteIndicator',
        'roles' => 'getRoles',
        'studentIndicator' => 'getStudentIndicator',
        'facultyIndicator' => 'getFacultyIndicator',
        'staffIndicator' => 'getStaffIndicator',
        'emergencyContactChangeEmails' => 'getEmergencyContactChangeEmails',
        'emergencyContactChangePhones' => 'getEmergencyContactChangePhones',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('userId', $data ?? [], null);
        $this->setIfExists('callDialer', $data ?? [], null);
        $this->setIfExists('ecUserId', $data ?? [], null);
        $this->setIfExists('firstname', $data ?? [], null);
        $this->setIfExists('lastname', $data ?? [], null);
        $this->setIfExists('phoneNumber', $data ?? [], null);
        $this->setIfExists('phoneType', $data ?? [], null);
        $this->setIfExists('phoneCallType', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('emailCallType', $data ?? [], null);
        $this->setIfExists('recordType', $data ?? [], null);
        $this->setIfExists('sort', $data ?? [], null);
        $this->setIfExists('inactive', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('deleteIndicator', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('studentIndicator', $data ?? [], null);
        $this->setIfExists('facultyIndicator', $data ?? [], null);
        $this->setIfExists('staffIndicator', $data ?? [], null);
        $this->setIfExists('emergencyContactChangeEmails', $data ?? [], null);
        $this->setIfExists('emergencyContactChangePhones', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets userId
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param int|null $userId UserId
     *
     * @return self
     */
    public function setUserId($userId)
    {
        if (is_null($userId)) {
            array_push($this->openAPINullablesSetToNull, 'userId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('userId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets callDialer
     *
     * @return string|null
     */
    public function getCallDialer()
    {
        return $this->container['callDialer'];
    }

    /**
     * Sets callDialer
     *
     * @param string|null $callDialer The string representation of the call dialer settings in Education Management
     *
     * @return self
     */
    public function setCallDialer($callDialer)
    {
        if (is_null($callDialer)) {
            array_push($this->openAPINullablesSetToNull, 'callDialer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('callDialer', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['callDialer'] = $callDialer;

        return $this;
    }

    /**
     * Gets ecUserId
     *
     * @return int|null
     */
    public function getEcUserId()
    {
        return $this->container['ecUserId'];
    }

    /**
     * Sets ecUserId
     *
     * @param int|null $ecUserId EcUserId
     *
     * @return self
     */
    public function setEcUserId($ecUserId)
    {
        if (is_null($ecUserId)) {
            array_push($this->openAPINullablesSetToNull, 'ecUserId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ecUserId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ecUserId'] = $ecUserId;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string|null
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string|null $firstname First Name
     *
     * @return self
     */
    public function setFirstname($firstname)
    {
        if (is_null($firstname)) {
            array_push($this->openAPINullablesSetToNull, 'firstname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('firstname', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string|null
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string|null $lastname Last Name
     *
     * @return self
     */
    public function setLastname($lastname)
    {
        if (is_null($lastname)) {
            array_push($this->openAPINullablesSetToNull, 'lastname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastname', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets phoneNumber
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phoneNumber'];
    }

    /**
     * Sets phoneNumber
     *
     * @param string|null $phoneNumber Phone Number
     *
     * @return self
     */
    public function setPhoneNumber($phoneNumber)
    {
        if (is_null($phoneNumber)) {
            array_push($this->openAPINullablesSetToNull, 'phoneNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phoneNumber', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phoneNumber'] = $phoneNumber;

        return $this;
    }

    /**
     * Gets phoneType
     *
     * @return string|null
     */
    public function getPhoneType()
    {
        return $this->container['phoneType'];
    }

    /**
     * Sets phoneType
     *
     * @param string|null $phoneType Phone  Type
     *
     * @return self
     */
    public function setPhoneType($phoneType)
    {
        if (is_null($phoneType)) {
            array_push($this->openAPINullablesSetToNull, 'phoneType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phoneType', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phoneType'] = $phoneType;

        return $this;
    }

    /**
     * Gets phoneCallType
     *
     * @return int|null
     */
    public function getPhoneCallType()
    {
        return $this->container['phoneCallType'];
    }

    /**
     * Sets phoneCallType
     *
     * @param int|null $phoneCallType Phone Call Type
     *
     * @return self
     */
    public function setPhoneCallType($phoneCallType)
    {
        if (is_null($phoneCallType)) {
            array_push($this->openAPINullablesSetToNull, 'phoneCallType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phoneCallType', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phoneCallType'] = $phoneCallType;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets emailCallType
     *
     * @return int|null
     */
    public function getEmailCallType()
    {
        return $this->container['emailCallType'];
    }

    /**
     * Sets emailCallType
     *
     * @param int|null $emailCallType Email Call Type
     *
     * @return self
     */
    public function setEmailCallType($emailCallType)
    {
        if (is_null($emailCallType)) {
            array_push($this->openAPINullablesSetToNull, 'emailCallType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('emailCallType', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['emailCallType'] = $emailCallType;

        return $this;
    }

    /**
     * Gets recordType
     *
     * @return int|null
     */
    public function getRecordType()
    {
        return $this->container['recordType'];
    }

    /**
     * Sets recordType
     *
     * @param int|null $recordType Record Type
     *
     * @return self
     */
    public function setRecordType($recordType)
    {
        if (is_null($recordType)) {
            array_push($this->openAPINullablesSetToNull, 'recordType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recordType', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recordType'] = $recordType;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return int|null
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param int|null $sort Sort
     *
     * @return self
     */
    public function setSort($sort)
    {
        if (is_null($sort)) {
            array_push($this->openAPINullablesSetToNull, 'sort');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sort', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets inactive
     *
     * @return bool|null
     */
    public function getInactive()
    {
        return $this->container['inactive'];
    }

    /**
     * Sets inactive
     *
     * @param bool|null $inactive inactive
     *
     * @return self
     */
    public function setInactive($inactive)
    {
        if (is_null($inactive)) {
            array_push($this->openAPINullablesSetToNull, 'inactive');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inactive', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['inactive'] = $inactive;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            array_push($this->openAPINullablesSetToNull, 'active');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('active', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets deleteIndicator
     *
     * @return bool|null
     */
    public function getDeleteIndicator()
    {
        return $this->container['deleteIndicator'];
    }

    /**
     * Sets deleteIndicator
     *
     * @param bool|null $deleteIndicator Deleted Indicator
     *
     * @return self
     */
    public function setDeleteIndicator($deleteIndicator)
    {
        if (is_null($deleteIndicator)) {
            array_push($this->openAPINullablesSetToNull, 'deleteIndicator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deleteIndicator', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deleteIndicator'] = $deleteIndicator;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return string|null
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param string|null $roles Roles
     *
     * @return self
     */
    public function setRoles($roles)
    {
        if (is_null($roles)) {
            array_push($this->openAPINullablesSetToNull, 'roles');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roles', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets studentIndicator
     *
     * @return bool|null
     */
    public function getStudentIndicator()
    {
        return $this->container['studentIndicator'];
    }

    /**
     * Sets studentIndicator
     *
     * @param bool|null $studentIndicator Student Indicator
     *
     * @return self
     */
    public function setStudentIndicator($studentIndicator)
    {
        if (is_null($studentIndicator)) {
            array_push($this->openAPINullablesSetToNull, 'studentIndicator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('studentIndicator', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['studentIndicator'] = $studentIndicator;

        return $this;
    }

    /**
     * Gets facultyIndicator
     *
     * @return bool|null
     */
    public function getFacultyIndicator()
    {
        return $this->container['facultyIndicator'];
    }

    /**
     * Sets facultyIndicator
     *
     * @param bool|null $facultyIndicator Faculty Indicator
     *
     * @return self
     */
    public function setFacultyIndicator($facultyIndicator)
    {
        if (is_null($facultyIndicator)) {
            array_push($this->openAPINullablesSetToNull, 'facultyIndicator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('facultyIndicator', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['facultyIndicator'] = $facultyIndicator;

        return $this;
    }

    /**
     * Gets staffIndicator
     *
     * @return bool|null
     */
    public function getStaffIndicator()
    {
        return $this->container['staffIndicator'];
    }

    /**
     * Sets staffIndicator
     *
     * @param bool|null $staffIndicator Staff Indicator
     *
     * @return self
     */
    public function setStaffIndicator($staffIndicator)
    {
        if (is_null($staffIndicator)) {
            array_push($this->openAPINullablesSetToNull, 'staffIndicator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staffIndicator', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['staffIndicator'] = $staffIndicator;

        return $this;
    }

    /**
     * Gets emergencyContactChangeEmails
     *
     * @return \SKY\School\Model\EmergencyContactChangeEmail[]|null
     */
    public function getEmergencyContactChangeEmails()
    {
        return $this->container['emergencyContactChangeEmails'];
    }

    /**
     * Sets emergencyContactChangeEmails
     *
     * @param \SKY\School\Model\EmergencyContactChangeEmail[]|null $emergencyContactChangeEmails
     *
     * @return self
     */
    public function setEmergencyContactChangeEmails($emergencyContactChangeEmails)
    {
        if (is_null($emergencyContactChangeEmails)) {
            array_push($this->openAPINullablesSetToNull, 'emergencyContactChangeEmails');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('emergencyContactChangeEmails', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['emergencyContactChangeEmails'] = $emergencyContactChangeEmails;

        return $this;
    }

    /**
     * Gets emergencyContactChangePhones
     *
     * @return \SKY\School\Model\EmergencyContactChangePhone[]|null
     */
    public function getEmergencyContactChangePhones()
    {
        return $this->container['emergencyContactChangePhones'];
    }

    /**
     * Sets emergencyContactChangePhones
     *
     * @param \SKY\School\Model\EmergencyContactChangePhone[]|null $emergencyContactChangePhones
     *
     * @return self
     */
    public function setEmergencyContactChangePhones($emergencyContactChangePhones)
    {
        if (is_null($emergencyContactChangePhones)) {
            array_push($this->openAPINullablesSetToNull, 'emergencyContactChangePhones');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('emergencyContactChangePhones', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['emergencyContactChangePhones'] = $emergencyContactChangePhones;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
