<?php
/**
 * Enrollment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * Enrollment Class Doc Comment
 *
 * @category Class
 * @description Section Model
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Enrollment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Enrollment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'beginDate' => '\DateTime',
        'blockId' => 'int',
        'blockName' => 'string',
        'blocks' => 'bool',
        'buildingName' => 'string',
        'changedSections' => 'int',
        'courseCode' => 'string',
        'courseLength' => 'int',
        'courseTitle' => 'string',
        'departments' => '\SKY\School\Model\Department[]',
        'distinction' => 'string',
        'dropped' => 'int',
        'durationBeginDate' => '\DateTime',
        'durationDescription' => 'string',
        'durationEndDate' => '\DateTime',
        'durationId' => 'int',
        'durationName' => 'string',
        'endDate' => '\DateTime',
        'facultyFirstName' => 'string',
        'facultyLastName' => 'string',
        'levelNumber' => 'int',
        'offeringDescription' => 'string',
        'offeringId' => 'int',
        'offeringTypeId' => 'int',
        'roomId' => 'int',
        'roomName' => 'string',
        'roomNumber' => 'string',
        'schoolYear' => 'string',
        'sectionIdentifier' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'beginDate' => 'date-time',
        'blockId' => 'int32',
        'blockName' => null,
        'blocks' => null,
        'buildingName' => null,
        'changedSections' => 'int32',
        'courseCode' => null,
        'courseLength' => 'int32',
        'courseTitle' => null,
        'departments' => null,
        'distinction' => null,
        'dropped' => 'int32',
        'durationBeginDate' => 'date-time',
        'durationDescription' => null,
        'durationEndDate' => 'date-time',
        'durationId' => 'int32',
        'durationName' => null,
        'endDate' => 'date-time',
        'facultyFirstName' => null,
        'facultyLastName' => null,
        'levelNumber' => 'int32',
        'offeringDescription' => null,
        'offeringId' => 'int32',
        'offeringTypeId' => 'int32',
        'roomId' => 'int32',
        'roomName' => null,
        'roomNumber' => null,
        'schoolYear' => null,
        'sectionIdentifier' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'beginDate' => false,
        'blockId' => true,
        'blockName' => true,
        'blocks' => false,
        'buildingName' => true,
        'changedSections' => true,
        'courseCode' => true,
        'courseLength' => true,
        'courseTitle' => true,
        'departments' => true,
        'distinction' => true,
        'dropped' => true,
        'durationBeginDate' => false,
        'durationDescription' => true,
        'durationEndDate' => false,
        'durationId' => false,
        'durationName' => true,
        'endDate' => false,
        'facultyFirstName' => true,
        'facultyLastName' => true,
        'levelNumber' => false,
        'offeringDescription' => true,
        'offeringId' => true,
        'offeringTypeId' => true,
        'roomId' => true,
        'roomName' => true,
        'roomNumber' => true,
        'schoolYear' => true,
        'sectionIdentifier' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'beginDate' => 'begin_date',
        'blockId' => 'block_id',
        'blockName' => 'block_name',
        'blocks' => 'blocks',
        'buildingName' => 'building_name',
        'changedSections' => 'changed_sections',
        'courseCode' => 'course_code',
        'courseLength' => 'course_length',
        'courseTitle' => 'course_title',
        'departments' => 'departments',
        'distinction' => 'distinction',
        'dropped' => 'dropped',
        'durationBeginDate' => 'duration_begin_date',
        'durationDescription' => 'duration_description',
        'durationEndDate' => 'duration_end_date',
        'durationId' => 'duration_id',
        'durationName' => 'duration_name',
        'endDate' => 'end_date',
        'facultyFirstName' => 'faculty_first_name',
        'facultyLastName' => 'faculty_last_name',
        'levelNumber' => 'level_number',
        'offeringDescription' => 'offering_description',
        'offeringId' => 'offering_id',
        'offeringTypeId' => 'offering_type_id',
        'roomId' => 'room_id',
        'roomName' => 'room_name',
        'roomNumber' => 'room_number',
        'schoolYear' => 'school_year',
        'sectionIdentifier' => 'section_identifier',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'beginDate' => 'setBeginDate',
        'blockId' => 'setBlockId',
        'blockName' => 'setBlockName',
        'blocks' => 'setBlocks',
        'buildingName' => 'setBuildingName',
        'changedSections' => 'setChangedSections',
        'courseCode' => 'setCourseCode',
        'courseLength' => 'setCourseLength',
        'courseTitle' => 'setCourseTitle',
        'departments' => 'setDepartments',
        'distinction' => 'setDistinction',
        'dropped' => 'setDropped',
        'durationBeginDate' => 'setDurationBeginDate',
        'durationDescription' => 'setDurationDescription',
        'durationEndDate' => 'setDurationEndDate',
        'durationId' => 'setDurationId',
        'durationName' => 'setDurationName',
        'endDate' => 'setEndDate',
        'facultyFirstName' => 'setFacultyFirstName',
        'facultyLastName' => 'setFacultyLastName',
        'levelNumber' => 'setLevelNumber',
        'offeringDescription' => 'setOfferingDescription',
        'offeringId' => 'setOfferingId',
        'offeringTypeId' => 'setOfferingTypeId',
        'roomId' => 'setRoomId',
        'roomName' => 'setRoomName',
        'roomNumber' => 'setRoomNumber',
        'schoolYear' => 'setSchoolYear',
        'sectionIdentifier' => 'setSectionIdentifier',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'beginDate' => 'getBeginDate',
        'blockId' => 'getBlockId',
        'blockName' => 'getBlockName',
        'blocks' => 'getBlocks',
        'buildingName' => 'getBuildingName',
        'changedSections' => 'getChangedSections',
        'courseCode' => 'getCourseCode',
        'courseLength' => 'getCourseLength',
        'courseTitle' => 'getCourseTitle',
        'departments' => 'getDepartments',
        'distinction' => 'getDistinction',
        'dropped' => 'getDropped',
        'durationBeginDate' => 'getDurationBeginDate',
        'durationDescription' => 'getDurationDescription',
        'durationEndDate' => 'getDurationEndDate',
        'durationId' => 'getDurationId',
        'durationName' => 'getDurationName',
        'endDate' => 'getEndDate',
        'facultyFirstName' => 'getFacultyFirstName',
        'facultyLastName' => 'getFacultyLastName',
        'levelNumber' => 'getLevelNumber',
        'offeringDescription' => 'getOfferingDescription',
        'offeringId' => 'getOfferingId',
        'offeringTypeId' => 'getOfferingTypeId',
        'roomId' => 'getRoomId',
        'roomName' => 'getRoomName',
        'roomNumber' => 'getRoomNumber',
        'schoolYear' => 'getSchoolYear',
        'sectionIdentifier' => 'getSectionIdentifier',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('beginDate', $data ?? [], null);
        $this->setIfExists('blockId', $data ?? [], null);
        $this->setIfExists('blockName', $data ?? [], null);
        $this->setIfExists('blocks', $data ?? [], null);
        $this->setIfExists('buildingName', $data ?? [], null);
        $this->setIfExists('changedSections', $data ?? [], null);
        $this->setIfExists('courseCode', $data ?? [], null);
        $this->setIfExists('courseLength', $data ?? [], null);
        $this->setIfExists('courseTitle', $data ?? [], null);
        $this->setIfExists('departments', $data ?? [], null);
        $this->setIfExists('distinction', $data ?? [], null);
        $this->setIfExists('dropped', $data ?? [], null);
        $this->setIfExists('durationBeginDate', $data ?? [], null);
        $this->setIfExists('durationDescription', $data ?? [], null);
        $this->setIfExists('durationEndDate', $data ?? [], null);
        $this->setIfExists('durationId', $data ?? [], null);
        $this->setIfExists('durationName', $data ?? [], null);
        $this->setIfExists('endDate', $data ?? [], null);
        $this->setIfExists('facultyFirstName', $data ?? [], null);
        $this->setIfExists('facultyLastName', $data ?? [], null);
        $this->setIfExists('levelNumber', $data ?? [], null);
        $this->setIfExists('offeringDescription', $data ?? [], null);
        $this->setIfExists('offeringId', $data ?? [], null);
        $this->setIfExists('offeringTypeId', $data ?? [], null);
        $this->setIfExists('roomId', $data ?? [], null);
        $this->setIfExists('roomName', $data ?? [], null);
        $this->setIfExists('roomNumber', $data ?? [], null);
        $this->setIfExists('schoolYear', $data ?? [], null);
        $this->setIfExists('sectionIdentifier', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the section
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets beginDate
     *
     * @return \DateTime|null
     */
    public function getBeginDate()
    {
        return $this->container['beginDate'];
    }

    /**
     * Sets beginDate
     *
     * @param \DateTime|null $beginDate The begin date of the course. Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setBeginDate($beginDate)
    {
        if (is_null($beginDate)) {
            throw new \InvalidArgumentException('non-nullable beginDate cannot be null');
        }
        $this->container['beginDate'] = $beginDate;

        return $this;
    }

    /**
     * Gets blockId
     *
     * @return int|null
     */
    public function getBlockId()
    {
        return $this->container['blockId'];
    }

    /**
     * Sets blockId
     *
     * @param int|null $blockId The block ID for a section
     *
     * @return self
     */
    public function setBlockId($blockId)
    {
        if (is_null($blockId)) {
            array_push($this->openAPINullablesSetToNull, 'blockId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('blockId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['blockId'] = $blockId;

        return $this;
    }

    /**
     * Gets blockName
     *
     * @return string|null
     */
    public function getBlockName()
    {
        return $this->container['blockName'];
    }

    /**
     * Sets blockName
     *
     * @param string|null $blockName The block name for a section
     *
     * @return self
     */
    public function setBlockName($blockName)
    {
        if (is_null($blockName)) {
            array_push($this->openAPINullablesSetToNull, 'blockName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('blockName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['blockName'] = $blockName;

        return $this;
    }

    /**
     * Gets blocks
     *
     * @return bool|null
     */
    public function getBlocks()
    {
        return $this->container['blocks'];
    }

    /**
     * Sets blocks
     *
     * @param bool|null $blocks Returns true if the course has blocks
     *
     * @return self
     */
    public function setBlocks($blocks)
    {
        if (is_null($blocks)) {
            throw new \InvalidArgumentException('non-nullable blocks cannot be null');
        }
        $this->container['blocks'] = $blocks;

        return $this;
    }

    /**
     * Gets buildingName
     *
     * @return string|null
     */
    public function getBuildingName()
    {
        return $this->container['buildingName'];
    }

    /**
     * Sets buildingName
     *
     * @param string|null $buildingName The building name
     *
     * @return self
     */
    public function setBuildingName($buildingName)
    {
        if (is_null($buildingName)) {
            array_push($this->openAPINullablesSetToNull, 'buildingName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buildingName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buildingName'] = $buildingName;

        return $this;
    }

    /**
     * Gets changedSections
     *
     * @return int|null
     */
    public function getChangedSections()
    {
        return $this->container['changedSections'];
    }

    /**
     * Sets changedSections
     *
     * @param int|null $changedSections changed sections
     *
     * @return self
     */
    public function setChangedSections($changedSections)
    {
        if (is_null($changedSections)) {
            array_push($this->openAPINullablesSetToNull, 'changedSections');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('changedSections', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['changedSections'] = $changedSections;

        return $this;
    }

    /**
     * Gets courseCode
     *
     * @return string|null
     */
    public function getCourseCode()
    {
        return $this->container['courseCode'];
    }

    /**
     * Sets courseCode
     *
     * @param string|null $courseCode The identifier used to reference a course; the Course Code is a user-entered value
     *
     * @return self
     */
    public function setCourseCode($courseCode)
    {
        if (is_null($courseCode)) {
            array_push($this->openAPINullablesSetToNull, 'courseCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('courseCode', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['courseCode'] = $courseCode;

        return $this;
    }

    /**
     * Gets courseLength
     *
     * @return int|null
     */
    public function getCourseLength()
    {
        return $this->container['courseLength'];
    }

    /**
     * Sets courseLength
     *
     * @param int|null $courseLength The length of a course
     *
     * @return self
     */
    public function setCourseLength($courseLength)
    {
        if (is_null($courseLength)) {
            array_push($this->openAPINullablesSetToNull, 'courseLength');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('courseLength', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['courseLength'] = $courseLength;

        return $this;
    }

    /**
     * Gets courseTitle
     *
     * @return string|null
     */
    public function getCourseTitle()
    {
        return $this->container['courseTitle'];
    }

    /**
     * Sets courseTitle
     *
     * @param string|null $courseTitle The title of the course
     *
     * @return self
     */
    public function setCourseTitle($courseTitle)
    {
        if (is_null($courseTitle)) {
            array_push($this->openAPINullablesSetToNull, 'courseTitle');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('courseTitle', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['courseTitle'] = $courseTitle;

        return $this;
    }

    /**
     * Gets departments
     *
     * @return \SKY\School\Model\Department[]|null
     */
    public function getDepartments()
    {
        return $this->container['departments'];
    }

    /**
     * Sets departments
     *
     * @param \SKY\School\Model\Department[]|null $departments The list of departments the section is associated with
     *
     * @return self
     */
    public function setDepartments($departments)
    {
        if (is_null($departments)) {
            array_push($this->openAPINullablesSetToNull, 'departments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('departments', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['departments'] = $departments;

        return $this;
    }

    /**
     * Gets distinction
     *
     * @return string|null
     */
    public function getDistinction()
    {
        return $this->container['distinction'];
    }

    /**
     * Sets distinction
     *
     * @param string|null $distinction distinction
     *
     * @return self
     */
    public function setDistinction($distinction)
    {
        if (is_null($distinction)) {
            array_push($this->openAPINullablesSetToNull, 'distinction');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('distinction', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['distinction'] = $distinction;

        return $this;
    }

    /**
     * Gets dropped
     *
     * @return int|null
     */
    public function getDropped()
    {
        return $this->container['dropped'];
    }

    /**
     * Sets dropped
     *
     * @param int|null $dropped was the course dropped
     *
     * @return self
     */
    public function setDropped($dropped)
    {
        if (is_null($dropped)) {
            array_push($this->openAPINullablesSetToNull, 'dropped');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dropped', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dropped'] = $dropped;

        return $this;
    }

    /**
     * Gets durationBeginDate
     *
     * @return \DateTime|null
     */
    public function getDurationBeginDate()
    {
        return $this->container['durationBeginDate'];
    }

    /**
     * Sets durationBeginDate
     *
     * @param \DateTime|null $durationBeginDate The begin date of the duration. Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setDurationBeginDate($durationBeginDate)
    {
        if (is_null($durationBeginDate)) {
            throw new \InvalidArgumentException('non-nullable durationBeginDate cannot be null');
        }
        $this->container['durationBeginDate'] = $durationBeginDate;

        return $this;
    }

    /**
     * Gets durationDescription
     *
     * @return string|null
     */
    public function getDurationDescription()
    {
        return $this->container['durationDescription'];
    }

    /**
     * Sets durationDescription
     *
     * @param string|null $durationDescription The description of the starting term of the section
     *
     * @return self
     */
    public function setDurationDescription($durationDescription)
    {
        if (is_null($durationDescription)) {
            array_push($this->openAPINullablesSetToNull, 'durationDescription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('durationDescription', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['durationDescription'] = $durationDescription;

        return $this;
    }

    /**
     * Gets durationEndDate
     *
     * @return \DateTime|null
     */
    public function getDurationEndDate()
    {
        return $this->container['durationEndDate'];
    }

    /**
     * Sets durationEndDate
     *
     * @param \DateTime|null $durationEndDate The end date of the duration. Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setDurationEndDate($durationEndDate)
    {
        if (is_null($durationEndDate)) {
            throw new \InvalidArgumentException('non-nullable durationEndDate cannot be null');
        }
        $this->container['durationEndDate'] = $durationEndDate;

        return $this;
    }

    /**
     * Gets durationId
     *
     * @return int|null
     */
    public function getDurationId()
    {
        return $this->container['durationId'];
    }

    /**
     * Sets durationId
     *
     * @param int|null $durationId The duration ID for a section
     *
     * @return self
     */
    public function setDurationId($durationId)
    {
        if (is_null($durationId)) {
            throw new \InvalidArgumentException('non-nullable durationId cannot be null');
        }
        $this->container['durationId'] = $durationId;

        return $this;
    }

    /**
     * Gets durationName
     *
     * @return string|null
     */
    public function getDurationName()
    {
        return $this->container['durationName'];
    }

    /**
     * Sets durationName
     *
     * @param string|null $durationName The starting term of the section
     *
     * @return self
     */
    public function setDurationName($durationName)
    {
        if (is_null($durationName)) {
            array_push($this->openAPINullablesSetToNull, 'durationName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('durationName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['durationName'] = $durationName;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime|null $endDate The end date of the course. Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setEndDate($endDate)
    {
        if (is_null($endDate)) {
            throw new \InvalidArgumentException('non-nullable endDate cannot be null');
        }
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets facultyFirstName
     *
     * @return string|null
     */
    public function getFacultyFirstName()
    {
        return $this->container['facultyFirstName'];
    }

    /**
     * Sets facultyFirstName
     *
     * @param string|null $facultyFirstName The first name of the head teacher
     *
     * @return self
     */
    public function setFacultyFirstName($facultyFirstName)
    {
        if (is_null($facultyFirstName)) {
            array_push($this->openAPINullablesSetToNull, 'facultyFirstName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('facultyFirstName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['facultyFirstName'] = $facultyFirstName;

        return $this;
    }

    /**
     * Gets facultyLastName
     *
     * @return string|null
     */
    public function getFacultyLastName()
    {
        return $this->container['facultyLastName'];
    }

    /**
     * Sets facultyLastName
     *
     * @param string|null $facultyLastName The last name of the head teacher
     *
     * @return self
     */
    public function setFacultyLastName($facultyLastName)
    {
        if (is_null($facultyLastName)) {
            array_push($this->openAPINullablesSetToNull, 'facultyLastName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('facultyLastName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['facultyLastName'] = $facultyLastName;

        return $this;
    }

    /**
     * Gets levelNumber
     *
     * @return int|null
     */
    public function getLevelNumber()
    {
        return $this->container['levelNumber'];
    }

    /**
     * Sets levelNumber
     *
     * @param int|null $levelNumber level number
     *
     * @return self
     */
    public function setLevelNumber($levelNumber)
    {
        if (is_null($levelNumber)) {
            throw new \InvalidArgumentException('non-nullable levelNumber cannot be null');
        }
        $this->container['levelNumber'] = $levelNumber;

        return $this;
    }

    /**
     * Gets offeringDescription
     *
     * @return string|null
     */
    public function getOfferingDescription()
    {
        return $this->container['offeringDescription'];
    }

    /**
     * Sets offeringDescription
     *
     * @param string|null $offeringDescription The description of an offering type
     *
     * @return self
     */
    public function setOfferingDescription($offeringDescription)
    {
        if (is_null($offeringDescription)) {
            array_push($this->openAPINullablesSetToNull, 'offeringDescription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('offeringDescription', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['offeringDescription'] = $offeringDescription;

        return $this;
    }

    /**
     * Gets offeringId
     *
     * @return int|null
     */
    public function getOfferingId()
    {
        return $this->container['offeringId'];
    }

    /**
     * Sets offeringId
     *
     * @param int|null $offeringId The ID of an offered course
     *
     * @return self
     */
    public function setOfferingId($offeringId)
    {
        if (is_null($offeringId)) {
            array_push($this->openAPINullablesSetToNull, 'offeringId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('offeringId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['offeringId'] = $offeringId;

        return $this;
    }

    /**
     * Gets offeringTypeId
     *
     * @return int|null
     */
    public function getOfferingTypeId()
    {
        return $this->container['offeringTypeId'];
    }

    /**
     * Sets offeringTypeId
     *
     * @param int|null $offeringTypeId The ID of an offering type
     *
     * @return self
     */
    public function setOfferingTypeId($offeringTypeId)
    {
        if (is_null($offeringTypeId)) {
            array_push($this->openAPINullablesSetToNull, 'offeringTypeId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('offeringTypeId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['offeringTypeId'] = $offeringTypeId;

        return $this;
    }

    /**
     * Gets roomId
     *
     * @return int|null
     */
    public function getRoomId()
    {
        return $this->container['roomId'];
    }

    /**
     * Sets roomId
     *
     * @param int|null $roomId The room ID for a section
     *
     * @return self
     */
    public function setRoomId($roomId)
    {
        if (is_null($roomId)) {
            array_push($this->openAPINullablesSetToNull, 'roomId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roomId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roomId'] = $roomId;

        return $this;
    }

    /**
     * Gets roomName
     *
     * @return string|null
     */
    public function getRoomName()
    {
        return $this->container['roomName'];
    }

    /**
     * Sets roomName
     *
     * @param string|null $roomName The room name for the section
     *
     * @return self
     */
    public function setRoomName($roomName)
    {
        if (is_null($roomName)) {
            array_push($this->openAPINullablesSetToNull, 'roomName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roomName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roomName'] = $roomName;

        return $this;
    }

    /**
     * Gets roomNumber
     *
     * @return string|null
     */
    public function getRoomNumber()
    {
        return $this->container['roomNumber'];
    }

    /**
     * Sets roomNumber
     *
     * @param string|null $roomNumber The room number for the section
     *
     * @return self
     */
    public function setRoomNumber($roomNumber)
    {
        if (is_null($roomNumber)) {
            array_push($this->openAPINullablesSetToNull, 'roomNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roomNumber', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roomNumber'] = $roomNumber;

        return $this;
    }

    /**
     * Gets schoolYear
     *
     * @return string|null
     */
    public function getSchoolYear()
    {
        return $this->container['schoolYear'];
    }

    /**
     * Sets schoolYear
     *
     * @param string|null $schoolYear The school year date range in which the section occurs
     *
     * @return self
     */
    public function setSchoolYear($schoolYear)
    {
        if (is_null($schoolYear)) {
            array_push($this->openAPINullablesSetToNull, 'schoolYear');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('schoolYear', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['schoolYear'] = $schoolYear;

        return $this;
    }

    /**
     * Gets sectionIdentifier
     *
     * @return string|null
     */
    public function getSectionIdentifier()
    {
        return $this->container['sectionIdentifier'];
    }

    /**
     * Sets sectionIdentifier
     *
     * @param string|null $sectionIdentifier The identifier used to differentiate between multiple sections that contain a course; the Section Identifier is a user-entered value
     *
     * @return self
     */
    public function setSectionIdentifier($sectionIdentifier)
    {
        if (is_null($sectionIdentifier)) {
            array_push($this->openAPINullablesSetToNull, 'sectionIdentifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sectionIdentifier', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sectionIdentifier'] = $sectionIdentifier;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
