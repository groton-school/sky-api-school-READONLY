<?php
/**
 * Enrollment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * Enrollment Class Doc Comment
 *
 * @category Class
 * @description Section Model
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Enrollment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Enrollment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'begin_date' => '\DateTime',
        'block_id' => 'int',
        'block_name' => 'string',
        'blocks' => 'bool',
        'building_name' => 'string',
        'changed_sections' => 'int',
        'course_code' => 'string',
        'course_length' => 'int',
        'course_title' => 'string',
        'departments' => '\SKY\School\Model\Department[]',
        'distinction' => 'string',
        'dropped' => 'int',
        'duration_begin_date' => '\DateTime',
        'duration_description' => 'string',
        'duration_end_date' => '\DateTime',
        'duration_id' => 'int',
        'duration_name' => 'string',
        'end_date' => '\DateTime',
        'faculty_first_name' => 'string',
        'faculty_last_name' => 'string',
        'level_number' => 'int',
        'offering_description' => 'string',
        'offering_id' => 'int',
        'offering_type_id' => 'int',
        'room_id' => 'int',
        'room_name' => 'string',
        'room_number' => 'string',
        'school_year' => 'string',
        'section_identifier' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'begin_date' => 'date-time',
        'block_id' => 'int32',
        'block_name' => null,
        'blocks' => null,
        'building_name' => null,
        'changed_sections' => 'int32',
        'course_code' => null,
        'course_length' => 'int32',
        'course_title' => null,
        'departments' => null,
        'distinction' => null,
        'dropped' => 'int32',
        'duration_begin_date' => 'date-time',
        'duration_description' => null,
        'duration_end_date' => 'date-time',
        'duration_id' => 'int32',
        'duration_name' => null,
        'end_date' => 'date-time',
        'faculty_first_name' => null,
        'faculty_last_name' => null,
        'level_number' => 'int32',
        'offering_description' => null,
        'offering_id' => 'int32',
        'offering_type_id' => 'int32',
        'room_id' => 'int32',
        'room_name' => null,
        'room_number' => null,
        'school_year' => null,
        'section_identifier' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'begin_date' => false,
        'block_id' => true,
        'block_name' => true,
        'blocks' => false,
        'building_name' => true,
        'changed_sections' => true,
        'course_code' => true,
        'course_length' => true,
        'course_title' => true,
        'departments' => true,
        'distinction' => true,
        'dropped' => true,
        'duration_begin_date' => false,
        'duration_description' => true,
        'duration_end_date' => false,
        'duration_id' => false,
        'duration_name' => true,
        'end_date' => false,
        'faculty_first_name' => true,
        'faculty_last_name' => true,
        'level_number' => false,
        'offering_description' => true,
        'offering_id' => true,
        'offering_type_id' => true,
        'room_id' => true,
        'room_name' => true,
        'room_number' => true,
        'school_year' => true,
        'section_identifier' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'begin_date' => 'begin_date',
        'block_id' => 'block_id',
        'block_name' => 'block_name',
        'blocks' => 'blocks',
        'building_name' => 'building_name',
        'changed_sections' => 'changed_sections',
        'course_code' => 'course_code',
        'course_length' => 'course_length',
        'course_title' => 'course_title',
        'departments' => 'departments',
        'distinction' => 'distinction',
        'dropped' => 'dropped',
        'duration_begin_date' => 'duration_begin_date',
        'duration_description' => 'duration_description',
        'duration_end_date' => 'duration_end_date',
        'duration_id' => 'duration_id',
        'duration_name' => 'duration_name',
        'end_date' => 'end_date',
        'faculty_first_name' => 'faculty_first_name',
        'faculty_last_name' => 'faculty_last_name',
        'level_number' => 'level_number',
        'offering_description' => 'offering_description',
        'offering_id' => 'offering_id',
        'offering_type_id' => 'offering_type_id',
        'room_id' => 'room_id',
        'room_name' => 'room_name',
        'room_number' => 'room_number',
        'school_year' => 'school_year',
        'section_identifier' => 'section_identifier',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'begin_date' => 'setBeginDate',
        'block_id' => 'setBlockId',
        'block_name' => 'setBlockName',
        'blocks' => 'setBlocks',
        'building_name' => 'setBuildingName',
        'changed_sections' => 'setChangedSections',
        'course_code' => 'setCourseCode',
        'course_length' => 'setCourseLength',
        'course_title' => 'setCourseTitle',
        'departments' => 'setDepartments',
        'distinction' => 'setDistinction',
        'dropped' => 'setDropped',
        'duration_begin_date' => 'setDurationBeginDate',
        'duration_description' => 'setDurationDescription',
        'duration_end_date' => 'setDurationEndDate',
        'duration_id' => 'setDurationId',
        'duration_name' => 'setDurationName',
        'end_date' => 'setEndDate',
        'faculty_first_name' => 'setFacultyFirstName',
        'faculty_last_name' => 'setFacultyLastName',
        'level_number' => 'setLevelNumber',
        'offering_description' => 'setOfferingDescription',
        'offering_id' => 'setOfferingId',
        'offering_type_id' => 'setOfferingTypeId',
        'room_id' => 'setRoomId',
        'room_name' => 'setRoomName',
        'room_number' => 'setRoomNumber',
        'school_year' => 'setSchoolYear',
        'section_identifier' => 'setSectionIdentifier',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'begin_date' => 'getBeginDate',
        'block_id' => 'getBlockId',
        'block_name' => 'getBlockName',
        'blocks' => 'getBlocks',
        'building_name' => 'getBuildingName',
        'changed_sections' => 'getChangedSections',
        'course_code' => 'getCourseCode',
        'course_length' => 'getCourseLength',
        'course_title' => 'getCourseTitle',
        'departments' => 'getDepartments',
        'distinction' => 'getDistinction',
        'dropped' => 'getDropped',
        'duration_begin_date' => 'getDurationBeginDate',
        'duration_description' => 'getDurationDescription',
        'duration_end_date' => 'getDurationEndDate',
        'duration_id' => 'getDurationId',
        'duration_name' => 'getDurationName',
        'end_date' => 'getEndDate',
        'faculty_first_name' => 'getFacultyFirstName',
        'faculty_last_name' => 'getFacultyLastName',
        'level_number' => 'getLevelNumber',
        'offering_description' => 'getOfferingDescription',
        'offering_id' => 'getOfferingId',
        'offering_type_id' => 'getOfferingTypeId',
        'room_id' => 'getRoomId',
        'room_name' => 'getRoomName',
        'room_number' => 'getRoomNumber',
        'school_year' => 'getSchoolYear',
        'section_identifier' => 'getSectionIdentifier',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('begin_date', $data ?? [], null);
        $this->setIfExists('block_id', $data ?? [], null);
        $this->setIfExists('block_name', $data ?? [], null);
        $this->setIfExists('blocks', $data ?? [], null);
        $this->setIfExists('building_name', $data ?? [], null);
        $this->setIfExists('changed_sections', $data ?? [], null);
        $this->setIfExists('course_code', $data ?? [], null);
        $this->setIfExists('course_length', $data ?? [], null);
        $this->setIfExists('course_title', $data ?? [], null);
        $this->setIfExists('departments', $data ?? [], null);
        $this->setIfExists('distinction', $data ?? [], null);
        $this->setIfExists('dropped', $data ?? [], null);
        $this->setIfExists('duration_begin_date', $data ?? [], null);
        $this->setIfExists('duration_description', $data ?? [], null);
        $this->setIfExists('duration_end_date', $data ?? [], null);
        $this->setIfExists('duration_id', $data ?? [], null);
        $this->setIfExists('duration_name', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('faculty_first_name', $data ?? [], null);
        $this->setIfExists('faculty_last_name', $data ?? [], null);
        $this->setIfExists('level_number', $data ?? [], null);
        $this->setIfExists('offering_description', $data ?? [], null);
        $this->setIfExists('offering_id', $data ?? [], null);
        $this->setIfExists('offering_type_id', $data ?? [], null);
        $this->setIfExists('room_id', $data ?? [], null);
        $this->setIfExists('room_name', $data ?? [], null);
        $this->setIfExists('room_number', $data ?? [], null);
        $this->setIfExists('school_year', $data ?? [], null);
        $this->setIfExists('section_identifier', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the section
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets begin_date
     *
     * @return \DateTime|null
     */
    public function getBeginDate()
    {
        return $this->container['begin_date'];
    }

    /**
     * Sets begin_date
     *
     * @param \DateTime|null $begin_date The begin date of the course. Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setBeginDate($begin_date)
    {
        if (is_null($begin_date)) {
            throw new \InvalidArgumentException('non-nullable begin_date cannot be null');
        }
        $this->container['begin_date'] = $begin_date;

        return $this;
    }

    /**
     * Gets block_id
     *
     * @return int|null
     */
    public function getBlockId()
    {
        return $this->container['block_id'];
    }

    /**
     * Sets block_id
     *
     * @param int|null $block_id The block ID for a section
     *
     * @return self
     */
    public function setBlockId($block_id)
    {
        if (is_null($block_id)) {
            array_push($this->openAPINullablesSetToNull, 'block_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('block_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['block_id'] = $block_id;

        return $this;
    }

    /**
     * Gets block_name
     *
     * @return string|null
     */
    public function getBlockName()
    {
        return $this->container['block_name'];
    }

    /**
     * Sets block_name
     *
     * @param string|null $block_name The block name for a section
     *
     * @return self
     */
    public function setBlockName($block_name)
    {
        if (is_null($block_name)) {
            array_push($this->openAPINullablesSetToNull, 'block_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('block_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['block_name'] = $block_name;

        return $this;
    }

    /**
     * Gets blocks
     *
     * @return bool|null
     */
    public function getBlocks()
    {
        return $this->container['blocks'];
    }

    /**
     * Sets blocks
     *
     * @param bool|null $blocks Returns true if the course has blocks
     *
     * @return self
     */
    public function setBlocks($blocks)
    {
        if (is_null($blocks)) {
            throw new \InvalidArgumentException('non-nullable blocks cannot be null');
        }
        $this->container['blocks'] = $blocks;

        return $this;
    }

    /**
     * Gets building_name
     *
     * @return string|null
     */
    public function getBuildingName()
    {
        return $this->container['building_name'];
    }

    /**
     * Sets building_name
     *
     * @param string|null $building_name The building name
     *
     * @return self
     */
    public function setBuildingName($building_name)
    {
        if (is_null($building_name)) {
            array_push($this->openAPINullablesSetToNull, 'building_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('building_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['building_name'] = $building_name;

        return $this;
    }

    /**
     * Gets changed_sections
     *
     * @return int|null
     */
    public function getChangedSections()
    {
        return $this->container['changed_sections'];
    }

    /**
     * Sets changed_sections
     *
     * @param int|null $changed_sections changed sections
     *
     * @return self
     */
    public function setChangedSections($changed_sections)
    {
        if (is_null($changed_sections)) {
            array_push($this->openAPINullablesSetToNull, 'changed_sections');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('changed_sections', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['changed_sections'] = $changed_sections;

        return $this;
    }

    /**
     * Gets course_code
     *
     * @return string|null
     */
    public function getCourseCode()
    {
        return $this->container['course_code'];
    }

    /**
     * Sets course_code
     *
     * @param string|null $course_code The identifier used to reference a course; the Course Code is a user-entered value
     *
     * @return self
     */
    public function setCourseCode($course_code)
    {
        if (is_null($course_code)) {
            array_push($this->openAPINullablesSetToNull, 'course_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('course_code', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['course_code'] = $course_code;

        return $this;
    }

    /**
     * Gets course_length
     *
     * @return int|null
     */
    public function getCourseLength()
    {
        return $this->container['course_length'];
    }

    /**
     * Sets course_length
     *
     * @param int|null $course_length The length of a course
     *
     * @return self
     */
    public function setCourseLength($course_length)
    {
        if (is_null($course_length)) {
            array_push($this->openAPINullablesSetToNull, 'course_length');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('course_length', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['course_length'] = $course_length;

        return $this;
    }

    /**
     * Gets course_title
     *
     * @return string|null
     */
    public function getCourseTitle()
    {
        return $this->container['course_title'];
    }

    /**
     * Sets course_title
     *
     * @param string|null $course_title The title of the course
     *
     * @return self
     */
    public function setCourseTitle($course_title)
    {
        if (is_null($course_title)) {
            array_push($this->openAPINullablesSetToNull, 'course_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('course_title', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['course_title'] = $course_title;

        return $this;
    }

    /**
     * Gets departments
     *
     * @return \SKY\School\Model\Department[]|null
     */
    public function getDepartments()
    {
        return $this->container['departments'];
    }

    /**
     * Sets departments
     *
     * @param \SKY\School\Model\Department[]|null $departments The list of departments the section is associated with
     *
     * @return self
     */
    public function setDepartments($departments)
    {
        if (is_null($departments)) {
            array_push($this->openAPINullablesSetToNull, 'departments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('departments', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['departments'] = $departments;

        return $this;
    }

    /**
     * Gets distinction
     *
     * @return string|null
     */
    public function getDistinction()
    {
        return $this->container['distinction'];
    }

    /**
     * Sets distinction
     *
     * @param string|null $distinction distinction
     *
     * @return self
     */
    public function setDistinction($distinction)
    {
        if (is_null($distinction)) {
            array_push($this->openAPINullablesSetToNull, 'distinction');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('distinction', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['distinction'] = $distinction;

        return $this;
    }

    /**
     * Gets dropped
     *
     * @return int|null
     */
    public function getDropped()
    {
        return $this->container['dropped'];
    }

    /**
     * Sets dropped
     *
     * @param int|null $dropped was the course dropped
     *
     * @return self
     */
    public function setDropped($dropped)
    {
        if (is_null($dropped)) {
            array_push($this->openAPINullablesSetToNull, 'dropped');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dropped', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dropped'] = $dropped;

        return $this;
    }

    /**
     * Gets duration_begin_date
     *
     * @return \DateTime|null
     */
    public function getDurationBeginDate()
    {
        return $this->container['duration_begin_date'];
    }

    /**
     * Sets duration_begin_date
     *
     * @param \DateTime|null $duration_begin_date The begin date of the duration. Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setDurationBeginDate($duration_begin_date)
    {
        if (is_null($duration_begin_date)) {
            throw new \InvalidArgumentException('non-nullable duration_begin_date cannot be null');
        }
        $this->container['duration_begin_date'] = $duration_begin_date;

        return $this;
    }

    /**
     * Gets duration_description
     *
     * @return string|null
     */
    public function getDurationDescription()
    {
        return $this->container['duration_description'];
    }

    /**
     * Sets duration_description
     *
     * @param string|null $duration_description The description of the starting term of the section
     *
     * @return self
     */
    public function setDurationDescription($duration_description)
    {
        if (is_null($duration_description)) {
            array_push($this->openAPINullablesSetToNull, 'duration_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('duration_description', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['duration_description'] = $duration_description;

        return $this;
    }

    /**
     * Gets duration_end_date
     *
     * @return \DateTime|null
     */
    public function getDurationEndDate()
    {
        return $this->container['duration_end_date'];
    }

    /**
     * Sets duration_end_date
     *
     * @param \DateTime|null $duration_end_date The end date of the duration. Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setDurationEndDate($duration_end_date)
    {
        if (is_null($duration_end_date)) {
            throw new \InvalidArgumentException('non-nullable duration_end_date cannot be null');
        }
        $this->container['duration_end_date'] = $duration_end_date;

        return $this;
    }

    /**
     * Gets duration_id
     *
     * @return int|null
     */
    public function getDurationId()
    {
        return $this->container['duration_id'];
    }

    /**
     * Sets duration_id
     *
     * @param int|null $duration_id The duration ID for a section
     *
     * @return self
     */
    public function setDurationId($duration_id)
    {
        if (is_null($duration_id)) {
            throw new \InvalidArgumentException('non-nullable duration_id cannot be null');
        }
        $this->container['duration_id'] = $duration_id;

        return $this;
    }

    /**
     * Gets duration_name
     *
     * @return string|null
     */
    public function getDurationName()
    {
        return $this->container['duration_name'];
    }

    /**
     * Sets duration_name
     *
     * @param string|null $duration_name The starting term of the section
     *
     * @return self
     */
    public function setDurationName($duration_name)
    {
        if (is_null($duration_name)) {
            array_push($this->openAPINullablesSetToNull, 'duration_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('duration_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['duration_name'] = $duration_name;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date The end date of the course. Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets faculty_first_name
     *
     * @return string|null
     */
    public function getFacultyFirstName()
    {
        return $this->container['faculty_first_name'];
    }

    /**
     * Sets faculty_first_name
     *
     * @param string|null $faculty_first_name The first name of the head teacher
     *
     * @return self
     */
    public function setFacultyFirstName($faculty_first_name)
    {
        if (is_null($faculty_first_name)) {
            array_push($this->openAPINullablesSetToNull, 'faculty_first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('faculty_first_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['faculty_first_name'] = $faculty_first_name;

        return $this;
    }

    /**
     * Gets faculty_last_name
     *
     * @return string|null
     */
    public function getFacultyLastName()
    {
        return $this->container['faculty_last_name'];
    }

    /**
     * Sets faculty_last_name
     *
     * @param string|null $faculty_last_name The last name of the head teacher
     *
     * @return self
     */
    public function setFacultyLastName($faculty_last_name)
    {
        if (is_null($faculty_last_name)) {
            array_push($this->openAPINullablesSetToNull, 'faculty_last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('faculty_last_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['faculty_last_name'] = $faculty_last_name;

        return $this;
    }

    /**
     * Gets level_number
     *
     * @return int|null
     */
    public function getLevelNumber()
    {
        return $this->container['level_number'];
    }

    /**
     * Sets level_number
     *
     * @param int|null $level_number level number
     *
     * @return self
     */
    public function setLevelNumber($level_number)
    {
        if (is_null($level_number)) {
            throw new \InvalidArgumentException('non-nullable level_number cannot be null');
        }
        $this->container['level_number'] = $level_number;

        return $this;
    }

    /**
     * Gets offering_description
     *
     * @return string|null
     */
    public function getOfferingDescription()
    {
        return $this->container['offering_description'];
    }

    /**
     * Sets offering_description
     *
     * @param string|null $offering_description The description of an offering type
     *
     * @return self
     */
    public function setOfferingDescription($offering_description)
    {
        if (is_null($offering_description)) {
            array_push($this->openAPINullablesSetToNull, 'offering_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('offering_description', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['offering_description'] = $offering_description;

        return $this;
    }

    /**
     * Gets offering_id
     *
     * @return int|null
     */
    public function getOfferingId()
    {
        return $this->container['offering_id'];
    }

    /**
     * Sets offering_id
     *
     * @param int|null $offering_id The ID of an offered course
     *
     * @return self
     */
    public function setOfferingId($offering_id)
    {
        if (is_null($offering_id)) {
            array_push($this->openAPINullablesSetToNull, 'offering_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('offering_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['offering_id'] = $offering_id;

        return $this;
    }

    /**
     * Gets offering_type_id
     *
     * @return int|null
     */
    public function getOfferingTypeId()
    {
        return $this->container['offering_type_id'];
    }

    /**
     * Sets offering_type_id
     *
     * @param int|null $offering_type_id The ID of an offering type
     *
     * @return self
     */
    public function setOfferingTypeId($offering_type_id)
    {
        if (is_null($offering_type_id)) {
            array_push($this->openAPINullablesSetToNull, 'offering_type_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('offering_type_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['offering_type_id'] = $offering_type_id;

        return $this;
    }

    /**
     * Gets room_id
     *
     * @return int|null
     */
    public function getRoomId()
    {
        return $this->container['room_id'];
    }

    /**
     * Sets room_id
     *
     * @param int|null $room_id The room ID for a section
     *
     * @return self
     */
    public function setRoomId($room_id)
    {
        if (is_null($room_id)) {
            array_push($this->openAPINullablesSetToNull, 'room_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('room_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['room_id'] = $room_id;

        return $this;
    }

    /**
     * Gets room_name
     *
     * @return string|null
     */
    public function getRoomName()
    {
        return $this->container['room_name'];
    }

    /**
     * Sets room_name
     *
     * @param string|null $room_name The room name for the section
     *
     * @return self
     */
    public function setRoomName($room_name)
    {
        if (is_null($room_name)) {
            array_push($this->openAPINullablesSetToNull, 'room_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('room_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['room_name'] = $room_name;

        return $this;
    }

    /**
     * Gets room_number
     *
     * @return string|null
     */
    public function getRoomNumber()
    {
        return $this->container['room_number'];
    }

    /**
     * Sets room_number
     *
     * @param string|null $room_number The room number for the section
     *
     * @return self
     */
    public function setRoomNumber($room_number)
    {
        if (is_null($room_number)) {
            array_push($this->openAPINullablesSetToNull, 'room_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('room_number', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['room_number'] = $room_number;

        return $this;
    }

    /**
     * Gets school_year
     *
     * @return string|null
     */
    public function getSchoolYear()
    {
        return $this->container['school_year'];
    }

    /**
     * Sets school_year
     *
     * @param string|null $school_year The school year date range in which the section occurs
     *
     * @return self
     */
    public function setSchoolYear($school_year)
    {
        if (is_null($school_year)) {
            array_push($this->openAPINullablesSetToNull, 'school_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('school_year', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['school_year'] = $school_year;

        return $this;
    }

    /**
     * Gets section_identifier
     *
     * @return string|null
     */
    public function getSectionIdentifier()
    {
        return $this->container['section_identifier'];
    }

    /**
     * Sets section_identifier
     *
     * @param string|null $section_identifier The identifier used to differentiate between multiple sections that contain a course; the Section Identifier is a user-entered value
     *
     * @return self
     */
    public function setSectionIdentifier($section_identifier)
    {
        if (is_null($section_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'section_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('section_identifier', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['section_identifier'] = $section_identifier;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
