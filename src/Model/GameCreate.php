<?php
/**
 * GameCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * GameCreate Class Doc Comment
 *
 * @category Class
 * @description
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GameCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GameCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'scheduleType' => 'int',
        'title' => 'string',
        'gameDate' => '\DateTime',
        'gameDateEnd' => '\DateTime',
        'cancelType' => 'int',
        'homeAwayType' => 'int',
        'locationId' => 'int',
        'locationInd' => 'int',
        'dismissalTime' => 'string',
        'departureTime' => 'string',
        'departureNote' => 'string',
        'pickupTime' => 'string',
        'pickupNote' => 'string',
        'leagueInd' => 'bool',
        'scrimmageInd' => 'bool',
        'tournamentInd' => 'bool',
        'invitationalInd' => 'bool',
        'playoffInd' => 'bool',
        'additionalNotes' => 'string',
        'newsId' => 'int',
        'sendNotifications' => 'bool',
        'clearReschedule' => 'bool',
        'skipValidation' => 'bool',
        'transportation' => '\SKY\School\Model\GameTransportation[]',
        'opponents' => '\SKY\School\Model\GameOpponent[]',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'scheduleType' => 'int32',
        'title' => null,
        'gameDate' => 'date-time',
        'gameDateEnd' => 'date-time',
        'cancelType' => 'int32',
        'homeAwayType' => 'int32',
        'locationId' => 'int32',
        'locationInd' => 'int32',
        'dismissalTime' => null,
        'departureTime' => null,
        'departureNote' => null,
        'pickupTime' => null,
        'pickupNote' => null,
        'leagueInd' => null,
        'scrimmageInd' => null,
        'tournamentInd' => null,
        'invitationalInd' => null,
        'playoffInd' => null,
        'additionalNotes' => null,
        'newsId' => 'int32',
        'sendNotifications' => null,
        'clearReschedule' => null,
        'skipValidation' => null,
        'transportation' => null,
        'opponents' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'scheduleType' => true,
        'title' => true,
        'gameDate' => false,
        'gameDateEnd' => true,
        'cancelType' => true,
        'homeAwayType' => true,
        'locationId' => true,
        'locationInd' => true,
        'dismissalTime' => true,
        'departureTime' => true,
        'departureNote' => true,
        'pickupTime' => true,
        'pickupNote' => true,
        'leagueInd' => true,
        'scrimmageInd' => true,
        'tournamentInd' => true,
        'invitationalInd' => true,
        'playoffInd' => true,
        'additionalNotes' => true,
        'newsId' => true,
        'sendNotifications' => true,
        'clearReschedule' => true,
        'skipValidation' => true,
        'transportation' => true,
        'opponents' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'scheduleType' => 'schedule_type',
        'title' => 'title',
        'gameDate' => 'game_date',
        'gameDateEnd' => 'game_date_end',
        'cancelType' => 'cancel_type',
        'homeAwayType' => 'home_away_type',
        'locationId' => 'location_id',
        'locationInd' => 'location_ind',
        'dismissalTime' => 'dismissal_time',
        'departureTime' => 'departure_time',
        'departureNote' => 'departure_note',
        'pickupTime' => 'pickup_time',
        'pickupNote' => 'pickup_note',
        'leagueInd' => 'league_ind',
        'scrimmageInd' => 'scrimmage_ind',
        'tournamentInd' => 'tournament_ind',
        'invitationalInd' => 'invitational_ind',
        'playoffInd' => 'playoff_ind',
        'additionalNotes' => 'additional_notes',
        'newsId' => 'news_id',
        'sendNotifications' => 'send_notifications',
        'clearReschedule' => 'clear_reschedule',
        'skipValidation' => 'skip_validation',
        'transportation' => 'transportation',
        'opponents' => 'opponents',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'scheduleType' => 'setScheduleType',
        'title' => 'setTitle',
        'gameDate' => 'setGameDate',
        'gameDateEnd' => 'setGameDateEnd',
        'cancelType' => 'setCancelType',
        'homeAwayType' => 'setHomeAwayType',
        'locationId' => 'setLocationId',
        'locationInd' => 'setLocationInd',
        'dismissalTime' => 'setDismissalTime',
        'departureTime' => 'setDepartureTime',
        'departureNote' => 'setDepartureNote',
        'pickupTime' => 'setPickupTime',
        'pickupNote' => 'setPickupNote',
        'leagueInd' => 'setLeagueInd',
        'scrimmageInd' => 'setScrimmageInd',
        'tournamentInd' => 'setTournamentInd',
        'invitationalInd' => 'setInvitationalInd',
        'playoffInd' => 'setPlayoffInd',
        'additionalNotes' => 'setAdditionalNotes',
        'newsId' => 'setNewsId',
        'sendNotifications' => 'setSendNotifications',
        'clearReschedule' => 'setClearReschedule',
        'skipValidation' => 'setSkipValidation',
        'transportation' => 'setTransportation',
        'opponents' => 'setOpponents',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'scheduleType' => 'getScheduleType',
        'title' => 'getTitle',
        'gameDate' => 'getGameDate',
        'gameDateEnd' => 'getGameDateEnd',
        'cancelType' => 'getCancelType',
        'homeAwayType' => 'getHomeAwayType',
        'locationId' => 'getLocationId',
        'locationInd' => 'getLocationInd',
        'dismissalTime' => 'getDismissalTime',
        'departureTime' => 'getDepartureTime',
        'departureNote' => 'getDepartureNote',
        'pickupTime' => 'getPickupTime',
        'pickupNote' => 'getPickupNote',
        'leagueInd' => 'getLeagueInd',
        'scrimmageInd' => 'getScrimmageInd',
        'tournamentInd' => 'getTournamentInd',
        'invitationalInd' => 'getInvitationalInd',
        'playoffInd' => 'getPlayoffInd',
        'additionalNotes' => 'getAdditionalNotes',
        'newsId' => 'getNewsId',
        'sendNotifications' => 'getSendNotifications',
        'clearReschedule' => 'getClearReschedule',
        'skipValidation' => 'getSkipValidation',
        'transportation' => 'getTransportation',
        'opponents' => 'getOpponents',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('scheduleType', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('gameDate', $data ?? [], null);
        $this->setIfExists('gameDateEnd', $data ?? [], null);
        $this->setIfExists('cancelType', $data ?? [], null);
        $this->setIfExists('homeAwayType', $data ?? [], null);
        $this->setIfExists('locationId', $data ?? [], null);
        $this->setIfExists('locationInd', $data ?? [], null);
        $this->setIfExists('dismissalTime', $data ?? [], null);
        $this->setIfExists('departureTime', $data ?? [], null);
        $this->setIfExists('departureNote', $data ?? [], null);
        $this->setIfExists('pickupTime', $data ?? [], null);
        $this->setIfExists('pickupNote', $data ?? [], null);
        $this->setIfExists('leagueInd', $data ?? [], null);
        $this->setIfExists('scrimmageInd', $data ?? [], null);
        $this->setIfExists('tournamentInd', $data ?? [], null);
        $this->setIfExists('invitationalInd', $data ?? [], null);
        $this->setIfExists('playoffInd', $data ?? [], null);
        $this->setIfExists('additionalNotes', $data ?? [], null);
        $this->setIfExists('newsId', $data ?? [], null);
        $this->setIfExists('sendNotifications', $data ?? [], null);
        $this->setIfExists('clearReschedule', $data ?? [], null);
        $this->setIfExists('skipValidation', $data ?? [], null);
        $this->setIfExists('transportation', $data ?? [], null);
        $this->setIfExists('opponents', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['gameDate'] === null) {
            $invalidProperties[] = "'gameDate' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets scheduleType
     *
     * @return int|null
     */
    public function getScheduleType()
    {
        return $this->container['scheduleType'];
    }

    /**
     * Sets scheduleType
     *
     * @param int|null $scheduleType The Type of the event
     *
     * @return self
     */
    public function setScheduleType($scheduleType)
    {
        if (is_null($scheduleType)) {
            array_push($this->openAPINullablesSetToNull, 'scheduleType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scheduleType', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scheduleType'] = $scheduleType;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Title of the game
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets gameDate
     *
     * @return \DateTime
     */
    public function getGameDate()
    {
        return $this->container['gameDate'];
    }

    /**
     * Sets gameDate
     *
     * @param \DateTime $gameDate Date and time of the game <br />  Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
     *
     * @return self
     */
    public function setGameDate($gameDate)
    {
        if (is_null($gameDate)) {
            throw new \InvalidArgumentException('non-nullable gameDate cannot be null');
        }
        $this->container['gameDate'] = $gameDate;

        return $this;
    }

    /**
     * Gets gameDateEnd
     *
     * @return \DateTime|null
     */
    public function getGameDateEnd()
    {
        return $this->container['gameDateEnd'];
    }

    /**
     * Sets gameDateEnd
     *
     * @param \DateTime|null $gameDateEnd Date and time the game is set to end <br />  Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
     *
     * @return self
     */
    public function setGameDateEnd($gameDateEnd)
    {
        if (is_null($gameDateEnd)) {
            array_push($this->openAPINullablesSetToNull, 'gameDateEnd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gameDateEnd', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gameDateEnd'] = $gameDateEnd;

        return $this;
    }

    /**
     * Gets cancelType
     *
     * @return int|null
     */
    public function getCancelType()
    {
        return $this->container['cancelType'];
    }

    /**
     * Sets cancelType
     *
     * @param int|null $cancelType Defaults to 0 for a new game
     *
     * @return self
     */
    public function setCancelType($cancelType)
    {
        if (is_null($cancelType)) {
            array_push($this->openAPINullablesSetToNull, 'cancelType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cancelType', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cancelType'] = $cancelType;

        return $this;
    }

    /**
     * Gets homeAwayType
     *
     * @return int|null
     */
    public function getHomeAwayType()
    {
        return $this->container['homeAwayType'];
    }

    /**
     * Sets homeAwayType
     *
     * @param int|null $homeAwayType Set to 0 for Home <br />  Set to 1 for Away <br />  Set to 2 for Neutral <br />  Set to 3 for TBD
     *
     * @return self
     */
    public function setHomeAwayType($homeAwayType)
    {
        if (is_null($homeAwayType)) {
            array_push($this->openAPINullablesSetToNull, 'homeAwayType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('homeAwayType', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['homeAwayType'] = $homeAwayType;

        return $this;
    }

    /**
     * Gets locationId
     *
     * @return int|null
     */
    public function getLocationId()
    {
        return $this->container['locationId'];
    }

    /**
     * Sets locationId
     *
     * @param int|null $locationId ID of the location/venue for the game
     *
     * @return self
     */
    public function setLocationId($locationId)
    {
        if (is_null($locationId)) {
            array_push($this->openAPINullablesSetToNull, 'locationId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('locationId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['locationId'] = $locationId;

        return $this;
    }

    /**
     * Gets locationInd
     *
     * @return int|null
     */
    public function getLocationInd()
    {
        return $this->container['locationInd'];
    }

    /**
     * Sets locationInd
     *
     * @param int|null $locationInd For Home games (location_ind=0), the ```location_id``` is an ID for an athletic field or room/building. Both of these are returned by GET Athletics venues.<br />  For Away games (location_ind=1), the ```location_id``` is an ID for an opponent location. These are returned by GET Athletics locations.
     *
     * @return self
     */
    public function setLocationInd($locationInd)
    {
        if (is_null($locationInd)) {
            array_push($this->openAPINullablesSetToNull, 'locationInd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('locationInd', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['locationInd'] = $locationInd;

        return $this;
    }

    /**
     * Gets dismissalTime
     *
     * @return string|null
     */
    public function getDismissalTime()
    {
        return $this->container['dismissalTime'];
    }

    /**
     * Sets dismissalTime
     *
     * @param string|null $dismissalTime Time for dismissal using 24-hour format: ```HH:mm```
     *
     * @return self
     */
    public function setDismissalTime($dismissalTime)
    {
        if (is_null($dismissalTime)) {
            array_push($this->openAPINullablesSetToNull, 'dismissalTime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dismissalTime', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dismissalTime'] = $dismissalTime;

        return $this;
    }

    /**
     * Gets departureTime
     *
     * @return string|null
     */
    public function getDepartureTime()
    {
        return $this->container['departureTime'];
    }

    /**
     * Sets departureTime
     *
     * @param string|null $departureTime Time for departure using 24-hour format: ```HH:mm```
     *
     * @return self
     */
    public function setDepartureTime($departureTime)
    {
        if (is_null($departureTime)) {
            array_push($this->openAPINullablesSetToNull, 'departureTime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('departureTime', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['departureTime'] = $departureTime;

        return $this;
    }

    /**
     * Gets departureNote
     *
     * @return string|null
     */
    public function getDepartureNote()
    {
        return $this->container['departureNote'];
    }

    /**
     * Sets departureNote
     *
     * @param string|null $departureNote Notes related to departure
     *
     * @return self
     */
    public function setDepartureNote($departureNote)
    {
        if (is_null($departureNote)) {
            array_push($this->openAPINullablesSetToNull, 'departureNote');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('departureNote', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['departureNote'] = $departureNote;

        return $this;
    }

    /**
     * Gets pickupTime
     *
     * @return string|null
     */
    public function getPickupTime()
    {
        return $this->container['pickupTime'];
    }

    /**
     * Sets pickupTime
     *
     * @param string|null $pickupTime Time for pickup using 24-hour format: ```HH:mm```
     *
     * @return self
     */
    public function setPickupTime($pickupTime)
    {
        if (is_null($pickupTime)) {
            array_push($this->openAPINullablesSetToNull, 'pickupTime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pickupTime', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pickupTime'] = $pickupTime;

        return $this;
    }

    /**
     * Gets pickupNote
     *
     * @return string|null
     */
    public function getPickupNote()
    {
        return $this->container['pickupNote'];
    }

    /**
     * Sets pickupNote
     *
     * @param string|null $pickupNote Notes related to pickup
     *
     * @return self
     */
    public function setPickupNote($pickupNote)
    {
        if (is_null($pickupNote)) {
            array_push($this->openAPINullablesSetToNull, 'pickupNote');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pickupNote', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pickupNote'] = $pickupNote;

        return $this;
    }

    /**
     * Gets leagueInd
     *
     * @return bool|null
     */
    public function getLeagueInd()
    {
        return $this->container['leagueInd'];
    }

    /**
     * Sets leagueInd
     *
     * @param bool|null $leagueInd Set to true to indicate a league event
     *
     * @return self
     */
    public function setLeagueInd($leagueInd)
    {
        if (is_null($leagueInd)) {
            array_push($this->openAPINullablesSetToNull, 'leagueInd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('leagueInd', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['leagueInd'] = $leagueInd;

        return $this;
    }

    /**
     * Gets scrimmageInd
     *
     * @return bool|null
     */
    public function getScrimmageInd()
    {
        return $this->container['scrimmageInd'];
    }

    /**
     * Sets scrimmageInd
     *
     * @param bool|null $scrimmageInd Set to true to indicate a scrimmage event
     *
     * @return self
     */
    public function setScrimmageInd($scrimmageInd)
    {
        if (is_null($scrimmageInd)) {
            array_push($this->openAPINullablesSetToNull, 'scrimmageInd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scrimmageInd', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scrimmageInd'] = $scrimmageInd;

        return $this;
    }

    /**
     * Gets tournamentInd
     *
     * @return bool|null
     */
    public function getTournamentInd()
    {
        return $this->container['tournamentInd'];
    }

    /**
     * Sets tournamentInd
     *
     * @param bool|null $tournamentInd Set to true to indicate a tournament event
     *
     * @return self
     */
    public function setTournamentInd($tournamentInd)
    {
        if (is_null($tournamentInd)) {
            array_push($this->openAPINullablesSetToNull, 'tournamentInd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tournamentInd', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tournamentInd'] = $tournamentInd;

        return $this;
    }

    /**
     * Gets invitationalInd
     *
     * @return bool|null
     */
    public function getInvitationalInd()
    {
        return $this->container['invitationalInd'];
    }

    /**
     * Sets invitationalInd
     *
     * @param bool|null $invitationalInd Set to true to indicate an invitational event
     *
     * @return self
     */
    public function setInvitationalInd($invitationalInd)
    {
        if (is_null($invitationalInd)) {
            array_push($this->openAPINullablesSetToNull, 'invitationalInd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invitationalInd', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invitationalInd'] = $invitationalInd;

        return $this;
    }

    /**
     * Gets playoffInd
     *
     * @return bool|null
     */
    public function getPlayoffInd()
    {
        return $this->container['playoffInd'];
    }

    /**
     * Sets playoffInd
     *
     * @param bool|null $playoffInd Set to true to indicate a playoff event
     *
     * @return self
     */
    public function setPlayoffInd($playoffInd)
    {
        if (is_null($playoffInd)) {
            array_push($this->openAPINullablesSetToNull, 'playoffInd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('playoffInd', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['playoffInd'] = $playoffInd;

        return $this;
    }

    /**
     * Gets additionalNotes
     *
     * @return string|null
     */
    public function getAdditionalNotes()
    {
        return $this->container['additionalNotes'];
    }

    /**
     * Sets additionalNotes
     *
     * @param string|null $additionalNotes Additional notes for the event
     *
     * @return self
     */
    public function setAdditionalNotes($additionalNotes)
    {
        if (is_null($additionalNotes)) {
            array_push($this->openAPINullablesSetToNull, 'additionalNotes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additionalNotes', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additionalNotes'] = $additionalNotes;

        return $this;
    }

    /**
     * Gets newsId
     *
     * @return int|null
     */
    public function getNewsId()
    {
        return $this->container['newsId'];
    }

    /**
     * Sets newsId
     *
     * @param int|null $newsId News ID
     *
     * @return self
     */
    public function setNewsId($newsId)
    {
        if (is_null($newsId)) {
            array_push($this->openAPINullablesSetToNull, 'newsId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('newsId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['newsId'] = $newsId;

        return $this;
    }

    /**
     * Gets sendNotifications
     *
     * @return bool|null
     */
    public function getSendNotifications()
    {
        return $this->container['sendNotifications'];
    }

    /**
     * Sets sendNotifications
     *
     * @param bool|null $sendNotifications Toggles 'Send Notification' option
     *
     * @return self
     */
    public function setSendNotifications($sendNotifications)
    {
        if (is_null($sendNotifications)) {
            array_push($this->openAPINullablesSetToNull, 'sendNotifications');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sendNotifications', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sendNotifications'] = $sendNotifications;

        return $this;
    }

    /**
     * Gets clearReschedule
     *
     * @return bool|null
     */
    public function getClearReschedule()
    {
        return $this->container['clearReschedule'];
    }

    /**
     * Sets clearReschedule
     *
     * @param bool|null $clearReschedule Set to true to remove the original scheduled game
     *
     * @return self
     */
    public function setClearReschedule($clearReschedule)
    {
        if (is_null($clearReschedule)) {
            array_push($this->openAPINullablesSetToNull, 'clearReschedule');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clearReschedule', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['clearReschedule'] = $clearReschedule;

        return $this;
    }

    /**
     * Gets skipValidation
     *
     * @return bool|null
     */
    public function getSkipValidation()
    {
        return $this->container['skipValidation'];
    }

    /**
     * Sets skipValidation
     *
     * @param bool|null $skipValidation Set to true to skip validation of this event
     *
     * @return self
     */
    public function setSkipValidation($skipValidation)
    {
        if (is_null($skipValidation)) {
            array_push($this->openAPINullablesSetToNull, 'skipValidation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('skipValidation', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['skipValidation'] = $skipValidation;

        return $this;
    }

    /**
     * Gets transportation
     *
     * @return \SKY\School\Model\GameTransportation[]|null
     */
    public function getTransportation()
    {
        return $this->container['transportation'];
    }

    /**
     * Sets transportation
     *
     * @param \SKY\School\Model\GameTransportation[]|null $transportation List of the transportation to be used for this game
     *
     * @return self
     */
    public function setTransportation($transportation)
    {
        if (is_null($transportation)) {
            array_push($this->openAPINullablesSetToNull, 'transportation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transportation', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transportation'] = $transportation;

        return $this;
    }

    /**
     * Gets opponents
     *
     * @return \SKY\School\Model\GameOpponent[]|null
     */
    public function getOpponents()
    {
        return $this->container['opponents'];
    }

    /**
     * Sets opponents
     *
     * @param \SKY\School\Model\GameOpponent[]|null $opponents List of Opponent ID's involved in this game
     *
     * @return self
     */
    public function setOpponents($opponents)
    {
        if (is_null($opponents)) {
            array_push($this->openAPINullablesSetToNull, 'opponents');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('opponents', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['opponents'] = $opponents;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
