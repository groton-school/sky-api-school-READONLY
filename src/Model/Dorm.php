<?php
/**
 * Dorm
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * Dorm Class Doc Comment
 *
 * @category Class
 * @description
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Dorm implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Dorm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'availableSpots' => 'int',
        'buildingCapacity' => 'int',
        'buildingId' => 'int',
        'buildingName' => 'string',
        'buildingEnrollment' => 'int',
        'offeringType' => 'int',
        'leaders' => '\SKY\School\Model\DormLeader[]',
        'rooms' => '\SKY\School\Model\Room[]',
        'sectionId' => 'int',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'availableSpots' => 'int32',
        'buildingCapacity' => 'int32',
        'buildingId' => 'int32',
        'buildingName' => null,
        'buildingEnrollment' => 'int32',
        'offeringType' => 'int32',
        'leaders' => null,
        'rooms' => null,
        'sectionId' => 'int32',
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'availableSpots' => true,
        'buildingCapacity' => true,
        'buildingId' => true,
        'buildingName' => true,
        'buildingEnrollment' => true,
        'offeringType' => true,
        'leaders' => true,
        'rooms' => true,
        'sectionId' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'availableSpots' => 'available_spots',
        'buildingCapacity' => 'building_capacity',
        'buildingId' => 'building_id',
        'buildingName' => 'building_name',
        'buildingEnrollment' => 'building_enrollment',
        'offeringType' => 'offering_type',
        'leaders' => 'leaders',
        'rooms' => 'Rooms',
        'sectionId' => 'section_id',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'availableSpots' => 'setAvailableSpots',
        'buildingCapacity' => 'setBuildingCapacity',
        'buildingId' => 'setBuildingId',
        'buildingName' => 'setBuildingName',
        'buildingEnrollment' => 'setBuildingEnrollment',
        'offeringType' => 'setOfferingType',
        'leaders' => 'setLeaders',
        'rooms' => 'setRooms',
        'sectionId' => 'setSectionId',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'availableSpots' => 'getAvailableSpots',
        'buildingCapacity' => 'getBuildingCapacity',
        'buildingId' => 'getBuildingId',
        'buildingName' => 'getBuildingName',
        'buildingEnrollment' => 'getBuildingEnrollment',
        'offeringType' => 'getOfferingType',
        'leaders' => 'getLeaders',
        'rooms' => 'getRooms',
        'sectionId' => 'getSectionId',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('availableSpots', $data ?? [], null);
        $this->setIfExists('buildingCapacity', $data ?? [], null);
        $this->setIfExists('buildingId', $data ?? [], null);
        $this->setIfExists('buildingName', $data ?? [], null);
        $this->setIfExists('buildingEnrollment', $data ?? [], null);
        $this->setIfExists('offeringType', $data ?? [], null);
        $this->setIfExists('leaders', $data ?? [], null);
        $this->setIfExists('rooms', $data ?? [], null);
        $this->setIfExists('sectionId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets availableSpots
     *
     * @return int|null
     */
    public function getAvailableSpots()
    {
        return $this->container['availableSpots'];
    }

    /**
     * Sets availableSpots
     *
     * @param int|null $availableSpots
     *
     * @return self
     */
    public function setAvailableSpots($availableSpots)
    {
        if (is_null($availableSpots)) {
            array_push($this->openAPINullablesSetToNull, 'availableSpots');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('availableSpots', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['availableSpots'] = $availableSpots;

        return $this;
    }

    /**
     * Gets buildingCapacity
     *
     * @return int|null
     */
    public function getBuildingCapacity()
    {
        return $this->container['buildingCapacity'];
    }

    /**
     * Sets buildingCapacity
     *
     * @param int|null $buildingCapacity
     *
     * @return self
     */
    public function setBuildingCapacity($buildingCapacity)
    {
        if (is_null($buildingCapacity)) {
            array_push($this->openAPINullablesSetToNull, 'buildingCapacity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buildingCapacity', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buildingCapacity'] = $buildingCapacity;

        return $this;
    }

    /**
     * Gets buildingId
     *
     * @return int|null
     */
    public function getBuildingId()
    {
        return $this->container['buildingId'];
    }

    /**
     * Sets buildingId
     *
     * @param int|null $buildingId
     *
     * @return self
     */
    public function setBuildingId($buildingId)
    {
        if (is_null($buildingId)) {
            array_push($this->openAPINullablesSetToNull, 'buildingId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buildingId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buildingId'] = $buildingId;

        return $this;
    }

    /**
     * Gets buildingName
     *
     * @return string|null
     */
    public function getBuildingName()
    {
        return $this->container['buildingName'];
    }

    /**
     * Sets buildingName
     *
     * @param string|null $buildingName
     *
     * @return self
     */
    public function setBuildingName($buildingName)
    {
        if (is_null($buildingName)) {
            array_push($this->openAPINullablesSetToNull, 'buildingName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buildingName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buildingName'] = $buildingName;

        return $this;
    }

    /**
     * Gets buildingEnrollment
     *
     * @return int|null
     */
    public function getBuildingEnrollment()
    {
        return $this->container['buildingEnrollment'];
    }

    /**
     * Sets buildingEnrollment
     *
     * @param int|null $buildingEnrollment
     *
     * @return self
     */
    public function setBuildingEnrollment($buildingEnrollment)
    {
        if (is_null($buildingEnrollment)) {
            array_push($this->openAPINullablesSetToNull, 'buildingEnrollment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buildingEnrollment', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buildingEnrollment'] = $buildingEnrollment;

        return $this;
    }

    /**
     * Gets offeringType
     *
     * @return int|null
     */
    public function getOfferingType()
    {
        return $this->container['offeringType'];
    }

    /**
     * Sets offeringType
     *
     * @param int|null $offeringType
     *
     * @return self
     */
    public function setOfferingType($offeringType)
    {
        if (is_null($offeringType)) {
            array_push($this->openAPINullablesSetToNull, 'offeringType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('offeringType', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['offeringType'] = $offeringType;

        return $this;
    }

    /**
     * Gets leaders
     *
     * @return \SKY\School\Model\DormLeader[]|null
     */
    public function getLeaders()
    {
        return $this->container['leaders'];
    }

    /**
     * Sets leaders
     *
     * @param \SKY\School\Model\DormLeader[]|null $leaders
     *
     * @return self
     */
    public function setLeaders($leaders)
    {
        if (is_null($leaders)) {
            array_push($this->openAPINullablesSetToNull, 'leaders');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('leaders', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['leaders'] = $leaders;

        return $this;
    }

    /**
     * Gets rooms
     *
     * @return \SKY\School\Model\Room[]|null
     */
    public function getRooms()
    {
        return $this->container['rooms'];
    }

    /**
     * Sets rooms
     *
     * @param \SKY\School\Model\Room[]|null $rooms
     *
     * @return self
     */
    public function setRooms($rooms)
    {
        if (is_null($rooms)) {
            array_push($this->openAPINullablesSetToNull, 'rooms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rooms', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rooms'] = $rooms;

        return $this;
    }

    /**
     * Gets sectionId
     *
     * @return int|null
     */
    public function getSectionId()
    {
        return $this->container['sectionId'];
    }

    /**
     * Sets sectionId
     *
     * @param int|null $sectionId
     *
     * @return self
     */
    public function setSectionId($sectionId)
    {
        if (is_null($sectionId)) {
            array_push($this->openAPINullablesSetToNull, 'sectionId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sectionId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sectionId'] = $sectionId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
