<?php
/**
 * UserEnrollmentCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * UserEnrollmentCreate Class Doc Comment
 *
 * @category Class
 * @description
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserEnrollmentCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserEnrollmentCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user_id' => 'int',
        'grade_level_id' => 'int',
        'school_level_id' => 'int',
        'school_year_label' => 'string',
        'enroll_date' => '\DateTime',
        'depart_date' => '\DateTime',
        'current_year' => 'bool',
        'has_grades' => 'bool',
        'grade_repeated' => 'bool',
        'graduated' => 'bool',
        'allow_edit' => 'bool',
        'allow_delete' => 'bool',
        'future_enrollments' => 'bool',
        'duration_id' => 'int',
        'session_id' => 'int',
        'role_ids' => 'int[]',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user_id' => 'int32',
        'grade_level_id' => 'int32',
        'school_level_id' => 'int32',
        'school_year_label' => null,
        'enroll_date' => 'date-time',
        'depart_date' => 'date-time',
        'current_year' => null,
        'has_grades' => null,
        'grade_repeated' => null,
        'graduated' => null,
        'allow_edit' => null,
        'allow_delete' => null,
        'future_enrollments' => null,
        'duration_id' => 'int32',
        'session_id' => 'int32',
        'role_ids' => 'int32',
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'user_id' => false,
        'grade_level_id' => false,
        'school_level_id' => false,
        'school_year_label' => true,
        'enroll_date' => false,
        'depart_date' => true,
        'current_year' => false,
        'has_grades' => false,
        'grade_repeated' => false,
        'graduated' => false,
        'allow_edit' => false,
        'allow_delete' => false,
        'future_enrollments' => false,
        'duration_id' => false,
        'session_id' => false,
        'role_ids' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_id' => 'user_id',
        'grade_level_id' => 'grade_level_id',
        'school_level_id' => 'school_level_id',
        'school_year_label' => 'school_year_label',
        'enroll_date' => 'enroll_date',
        'depart_date' => 'depart_date',
        'current_year' => 'current_year',
        'has_grades' => 'has_grades',
        'grade_repeated' => 'grade_repeated',
        'graduated' => 'graduated',
        'allow_edit' => 'allow_edit',
        'allow_delete' => 'allow_delete',
        'future_enrollments' => 'future_enrollments',
        'duration_id' => 'duration_id',
        'session_id' => 'session_id',
        'role_ids' => 'role_ids',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_id' => 'setUserId',
        'grade_level_id' => 'setGradeLevelId',
        'school_level_id' => 'setSchoolLevelId',
        'school_year_label' => 'setSchoolYearLabel',
        'enroll_date' => 'setEnrollDate',
        'depart_date' => 'setDepartDate',
        'current_year' => 'setCurrentYear',
        'has_grades' => 'setHasGrades',
        'grade_repeated' => 'setGradeRepeated',
        'graduated' => 'setGraduated',
        'allow_edit' => 'setAllowEdit',
        'allow_delete' => 'setAllowDelete',
        'future_enrollments' => 'setFutureEnrollments',
        'duration_id' => 'setDurationId',
        'session_id' => 'setSessionId',
        'role_ids' => 'setRoleIds',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_id' => 'getUserId',
        'grade_level_id' => 'getGradeLevelId',
        'school_level_id' => 'getSchoolLevelId',
        'school_year_label' => 'getSchoolYearLabel',
        'enroll_date' => 'getEnrollDate',
        'depart_date' => 'getDepartDate',
        'current_year' => 'getCurrentYear',
        'has_grades' => 'getHasGrades',
        'grade_repeated' => 'getGradeRepeated',
        'graduated' => 'getGraduated',
        'allow_edit' => 'getAllowEdit',
        'allow_delete' => 'getAllowDelete',
        'future_enrollments' => 'getFutureEnrollments',
        'duration_id' => 'getDurationId',
        'session_id' => 'getSessionId',
        'role_ids' => 'getRoleIds',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('grade_level_id', $data ?? [], null);
        $this->setIfExists('school_level_id', $data ?? [], null);
        $this->setIfExists('school_year_label', $data ?? [], null);
        $this->setIfExists('enroll_date', $data ?? [], null);
        $this->setIfExists('depart_date', $data ?? [], null);
        $this->setIfExists('current_year', $data ?? [], null);
        $this->setIfExists('has_grades', $data ?? [], null);
        $this->setIfExists('grade_repeated', $data ?? [], null);
        $this->setIfExists('graduated', $data ?? [], null);
        $this->setIfExists('allow_edit', $data ?? [], null);
        $this->setIfExists('allow_delete', $data ?? [], null);
        $this->setIfExists('future_enrollments', $data ?? [], null);
        $this->setIfExists('duration_id', $data ?? [], null);
        $this->setIfExists('session_id', $data ?? [], null);
        $this->setIfExists('role_ids', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['grade_level_id'] === null) {
            $invalidProperties[] = "'grade_level_id' can't be null";
        }
        if ($this->container['enroll_date'] === null) {
            $invalidProperties[] = "'enroll_date' can't be null";
        }
        if ($this->container['role_ids'] === null) {
            $invalidProperties[] = "'role_ids' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id ID of the individual to be enrolled
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets grade_level_id
     *
     * @return int
     */
    public function getGradeLevelId()
    {
        return $this->container['grade_level_id'];
    }

    /**
     * Sets grade_level_id
     *
     * @param int $grade_level_id ID of the grade the individual is enrolling in
     *
     * @return self
     */
    public function setGradeLevelId($grade_level_id)
    {
        if (is_null($grade_level_id)) {
            throw new \InvalidArgumentException('non-nullable grade_level_id cannot be null');
        }
        $this->container['grade_level_id'] = $grade_level_id;

        return $this;
    }

    /**
     * Gets school_level_id
     *
     * @return int|null
     */
    public function getSchoolLevelId()
    {
        return $this->container['school_level_id'];
    }

    /**
     * Sets school_level_id
     *
     * @param int|null $school_level_id ID of the school level
     *
     * @return self
     */
    public function setSchoolLevelId($school_level_id)
    {
        if (is_null($school_level_id)) {
            throw new \InvalidArgumentException('non-nullable school_level_id cannot be null');
        }
        $this->container['school_level_id'] = $school_level_id;

        return $this;
    }

    /**
     * Gets school_year_label
     *
     * @return string|null
     */
    public function getSchoolYearLabel()
    {
        return $this->container['school_year_label'];
    }

    /**
     * Sets school_year_label
     *
     * @param string|null $school_year_label School Year individual is enrolling in.  Defaults to the current school year.
     *
     * @return self
     */
    public function setSchoolYearLabel($school_year_label)
    {
        if (is_null($school_year_label)) {
            array_push($this->openAPINullablesSetToNull, 'school_year_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('school_year_label', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['school_year_label'] = $school_year_label;

        return $this;
    }

    /**
     * Gets enroll_date
     *
     * @return \DateTime
     */
    public function getEnrollDate()
    {
        return $this->container['enroll_date'];
    }

    /**
     * Sets enroll_date
     *
     * @param \DateTime $enroll_date Date of the enrollment
     *
     * @return self
     */
    public function setEnrollDate($enroll_date)
    {
        if (is_null($enroll_date)) {
            throw new \InvalidArgumentException('non-nullable enroll_date cannot be null');
        }
        $this->container['enroll_date'] = $enroll_date;

        return $this;
    }

    /**
     * Gets depart_date
     *
     * @return \DateTime|null
     */
    public function getDepartDate()
    {
        return $this->container['depart_date'];
    }

    /**
     * Sets depart_date
     *
     * @param \DateTime|null $depart_date Date departed
     *
     * @return self
     */
    public function setDepartDate($depart_date)
    {
        if (is_null($depart_date)) {
            array_push($this->openAPINullablesSetToNull, 'depart_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('depart_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['depart_date'] = $depart_date;

        return $this;
    }

    /**
     * Gets current_year
     *
     * @return bool|null
     */
    public function getCurrentYear()
    {
        return $this->container['current_year'];
    }

    /**
     * Sets current_year
     *
     * @param bool|null $current_year Toggles current year
     *
     * @return self
     */
    public function setCurrentYear($current_year)
    {
        if (is_null($current_year)) {
            throw new \InvalidArgumentException('non-nullable current_year cannot be null');
        }
        $this->container['current_year'] = $current_year;

        return $this;
    }

    /**
     * Gets has_grades
     *
     * @return bool|null
     */
    public function getHasGrades()
    {
        return $this->container['has_grades'];
    }

    /**
     * Sets has_grades
     *
     * @param bool|null $has_grades Toggles has grades
     *
     * @return self
     */
    public function setHasGrades($has_grades)
    {
        if (is_null($has_grades)) {
            throw new \InvalidArgumentException('non-nullable has_grades cannot be null');
        }
        $this->container['has_grades'] = $has_grades;

        return $this;
    }

    /**
     * Gets grade_repeated
     *
     * @return bool|null
     */
    public function getGradeRepeated()
    {
        return $this->container['grade_repeated'];
    }

    /**
     * Sets grade_repeated
     *
     * @param bool|null $grade_repeated Toggles grade repeated
     *
     * @return self
     */
    public function setGradeRepeated($grade_repeated)
    {
        if (is_null($grade_repeated)) {
            throw new \InvalidArgumentException('non-nullable grade_repeated cannot be null');
        }
        $this->container['grade_repeated'] = $grade_repeated;

        return $this;
    }

    /**
     * Gets graduated
     *
     * @return bool|null
     */
    public function getGraduated()
    {
        return $this->container['graduated'];
    }

    /**
     * Sets graduated
     *
     * @param bool|null $graduated Toggles graduated
     *
     * @return self
     */
    public function setGraduated($graduated)
    {
        if (is_null($graduated)) {
            throw new \InvalidArgumentException('non-nullable graduated cannot be null');
        }
        $this->container['graduated'] = $graduated;

        return $this;
    }

    /**
     * Gets allow_edit
     *
     * @return bool|null
     */
    public function getAllowEdit()
    {
        return $this->container['allow_edit'];
    }

    /**
     * Sets allow_edit
     *
     * @param bool|null $allow_edit Toggles allow edit
     *
     * @return self
     */
    public function setAllowEdit($allow_edit)
    {
        if (is_null($allow_edit)) {
            throw new \InvalidArgumentException('non-nullable allow_edit cannot be null');
        }
        $this->container['allow_edit'] = $allow_edit;

        return $this;
    }

    /**
     * Gets allow_delete
     *
     * @return bool|null
     */
    public function getAllowDelete()
    {
        return $this->container['allow_delete'];
    }

    /**
     * Sets allow_delete
     *
     * @param bool|null $allow_delete Toggles allow delete
     *
     * @return self
     */
    public function setAllowDelete($allow_delete)
    {
        if (is_null($allow_delete)) {
            throw new \InvalidArgumentException('non-nullable allow_delete cannot be null');
        }
        $this->container['allow_delete'] = $allow_delete;

        return $this;
    }

    /**
     * Gets future_enrollments
     *
     * @return bool|null
     */
    public function getFutureEnrollments()
    {
        return $this->container['future_enrollments'];
    }

    /**
     * Sets future_enrollments
     *
     * @param bool|null $future_enrollments Toggles future enrollments
     *
     * @return self
     */
    public function setFutureEnrollments($future_enrollments)
    {
        if (is_null($future_enrollments)) {
            throw new \InvalidArgumentException('non-nullable future_enrollments cannot be null');
        }
        $this->container['future_enrollments'] = $future_enrollments;

        return $this;
    }

    /**
     * Gets duration_id
     *
     * @return int|null
     */
    public function getDurationId()
    {
        return $this->container['duration_id'];
    }

    /**
     * Sets duration_id
     *
     * @param int|null $duration_id The Id of the duration the user should be enrolled in. Optional for all Education Enrollments.
     *
     * @return self
     */
    public function setDurationId($duration_id)
    {
        if (is_null($duration_id)) {
            throw new \InvalidArgumentException('non-nullable duration_id cannot be null');
        }
        $this->container['duration_id'] = $duration_id;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return int|null
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param int|null $session_id The Id of the session the user should be enrolled in. Required for Higher Education Enrollments.
     *
     * @return self
     */
    public function setSessionId($session_id)
    {
        if (is_null($session_id)) {
            throw new \InvalidArgumentException('non-nullable session_id cannot be null');
        }
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets role_ids
     *
     * @return int[]
     */
    public function getRoleIds()
    {
        return $this->container['role_ids'];
    }

    /**
     * Sets role_ids
     *
     * @param int[] $role_ids Collection of RoleIds the individual should be associated to
     *
     * @return self
     */
    public function setRoleIds($role_ids)
    {
        if (is_null($role_ids)) {
            throw new \InvalidArgumentException('non-nullable role_ids cannot be null');
        }
        $this->container['role_ids'] = $role_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
