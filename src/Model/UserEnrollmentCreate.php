<?php
/**
 * UserEnrollmentCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * UserEnrollmentCreate Class Doc Comment
 *
 * @category Class
 * @description
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserEnrollmentCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserEnrollmentCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'userId' => 'int',
        'gradeLevelId' => 'int',
        'schoolLevelId' => 'int',
        'schoolYearLabel' => 'string',
        'enrollDate' => '\DateTime',
        'departDate' => '\DateTime',
        'currentYear' => 'bool',
        'hasGrades' => 'bool',
        'gradeRepeated' => 'bool',
        'graduated' => 'bool',
        'allowEdit' => 'bool',
        'allowDelete' => 'bool',
        'futureEnrollments' => 'bool',
        'durationId' => 'int',
        'sessionId' => 'int',
        'roleIds' => 'int[]',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'userId' => 'int32',
        'gradeLevelId' => 'int32',
        'schoolLevelId' => 'int32',
        'schoolYearLabel' => null,
        'enrollDate' => 'date-time',
        'departDate' => 'date-time',
        'currentYear' => null,
        'hasGrades' => null,
        'gradeRepeated' => null,
        'graduated' => null,
        'allowEdit' => null,
        'allowDelete' => null,
        'futureEnrollments' => null,
        'durationId' => 'int32',
        'sessionId' => 'int32',
        'roleIds' => 'int32',
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'userId' => false,
        'gradeLevelId' => false,
        'schoolLevelId' => false,
        'schoolYearLabel' => true,
        'enrollDate' => false,
        'departDate' => true,
        'currentYear' => false,
        'hasGrades' => false,
        'gradeRepeated' => false,
        'graduated' => false,
        'allowEdit' => false,
        'allowDelete' => false,
        'futureEnrollments' => false,
        'durationId' => false,
        'sessionId' => false,
        'roleIds' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'userId' => 'user_id',
        'gradeLevelId' => 'grade_level_id',
        'schoolLevelId' => 'school_level_id',
        'schoolYearLabel' => 'school_year_label',
        'enrollDate' => 'enroll_date',
        'departDate' => 'depart_date',
        'currentYear' => 'current_year',
        'hasGrades' => 'has_grades',
        'gradeRepeated' => 'grade_repeated',
        'graduated' => 'graduated',
        'allowEdit' => 'allow_edit',
        'allowDelete' => 'allow_delete',
        'futureEnrollments' => 'future_enrollments',
        'durationId' => 'duration_id',
        'sessionId' => 'session_id',
        'roleIds' => 'role_ids',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'userId' => 'setUserId',
        'gradeLevelId' => 'setGradeLevelId',
        'schoolLevelId' => 'setSchoolLevelId',
        'schoolYearLabel' => 'setSchoolYearLabel',
        'enrollDate' => 'setEnrollDate',
        'departDate' => 'setDepartDate',
        'currentYear' => 'setCurrentYear',
        'hasGrades' => 'setHasGrades',
        'gradeRepeated' => 'setGradeRepeated',
        'graduated' => 'setGraduated',
        'allowEdit' => 'setAllowEdit',
        'allowDelete' => 'setAllowDelete',
        'futureEnrollments' => 'setFutureEnrollments',
        'durationId' => 'setDurationId',
        'sessionId' => 'setSessionId',
        'roleIds' => 'setRoleIds',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'userId' => 'getUserId',
        'gradeLevelId' => 'getGradeLevelId',
        'schoolLevelId' => 'getSchoolLevelId',
        'schoolYearLabel' => 'getSchoolYearLabel',
        'enrollDate' => 'getEnrollDate',
        'departDate' => 'getDepartDate',
        'currentYear' => 'getCurrentYear',
        'hasGrades' => 'getHasGrades',
        'gradeRepeated' => 'getGradeRepeated',
        'graduated' => 'getGraduated',
        'allowEdit' => 'getAllowEdit',
        'allowDelete' => 'getAllowDelete',
        'futureEnrollments' => 'getFutureEnrollments',
        'durationId' => 'getDurationId',
        'sessionId' => 'getSessionId',
        'roleIds' => 'getRoleIds',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('userId', $data ?? [], null);
        $this->setIfExists('gradeLevelId', $data ?? [], null);
        $this->setIfExists('schoolLevelId', $data ?? [], null);
        $this->setIfExists('schoolYearLabel', $data ?? [], null);
        $this->setIfExists('enrollDate', $data ?? [], null);
        $this->setIfExists('departDate', $data ?? [], null);
        $this->setIfExists('currentYear', $data ?? [], null);
        $this->setIfExists('hasGrades', $data ?? [], null);
        $this->setIfExists('gradeRepeated', $data ?? [], null);
        $this->setIfExists('graduated', $data ?? [], null);
        $this->setIfExists('allowEdit', $data ?? [], null);
        $this->setIfExists('allowDelete', $data ?? [], null);
        $this->setIfExists('futureEnrollments', $data ?? [], null);
        $this->setIfExists('durationId', $data ?? [], null);
        $this->setIfExists('sessionId', $data ?? [], null);
        $this->setIfExists('roleIds', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['gradeLevelId'] === null) {
            $invalidProperties[] = "'gradeLevelId' can't be null";
        }
        if ($this->container['enrollDate'] === null) {
            $invalidProperties[] = "'enrollDate' can't be null";
        }
        if ($this->container['roleIds'] === null) {
            $invalidProperties[] = "'roleIds' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets userId
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param int|null $userId ID of the individual to be enrolled
     *
     * @return self
     */
    public function setUserId($userId)
    {
        if (is_null($userId)) {
            throw new \InvalidArgumentException('non-nullable userId cannot be null');
        }
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets gradeLevelId
     *
     * @return int
     */
    public function getGradeLevelId()
    {
        return $this->container['gradeLevelId'];
    }

    /**
     * Sets gradeLevelId
     *
     * @param int $gradeLevelId ID of the grade the individual is enrolling in
     *
     * @return self
     */
    public function setGradeLevelId($gradeLevelId)
    {
        if (is_null($gradeLevelId)) {
            throw new \InvalidArgumentException('non-nullable gradeLevelId cannot be null');
        }
        $this->container['gradeLevelId'] = $gradeLevelId;

        return $this;
    }

    /**
     * Gets schoolLevelId
     *
     * @return int|null
     */
    public function getSchoolLevelId()
    {
        return $this->container['schoolLevelId'];
    }

    /**
     * Sets schoolLevelId
     *
     * @param int|null $schoolLevelId ID of the school level
     *
     * @return self
     */
    public function setSchoolLevelId($schoolLevelId)
    {
        if (is_null($schoolLevelId)) {
            throw new \InvalidArgumentException('non-nullable schoolLevelId cannot be null');
        }
        $this->container['schoolLevelId'] = $schoolLevelId;

        return $this;
    }

    /**
     * Gets schoolYearLabel
     *
     * @return string|null
     */
    public function getSchoolYearLabel()
    {
        return $this->container['schoolYearLabel'];
    }

    /**
     * Sets schoolYearLabel
     *
     * @param string|null $schoolYearLabel School Year individual is enrolling in.  Defaults to the current school year.
     *
     * @return self
     */
    public function setSchoolYearLabel($schoolYearLabel)
    {
        if (is_null($schoolYearLabel)) {
            array_push($this->openAPINullablesSetToNull, 'schoolYearLabel');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('schoolYearLabel', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['schoolYearLabel'] = $schoolYearLabel;

        return $this;
    }

    /**
     * Gets enrollDate
     *
     * @return \DateTime
     */
    public function getEnrollDate()
    {
        return $this->container['enrollDate'];
    }

    /**
     * Sets enrollDate
     *
     * @param \DateTime $enrollDate Date of the enrollment
     *
     * @return self
     */
    public function setEnrollDate($enrollDate)
    {
        if (is_null($enrollDate)) {
            throw new \InvalidArgumentException('non-nullable enrollDate cannot be null');
        }
        $this->container['enrollDate'] = $enrollDate;

        return $this;
    }

    /**
     * Gets departDate
     *
     * @return \DateTime|null
     */
    public function getDepartDate()
    {
        return $this->container['departDate'];
    }

    /**
     * Sets departDate
     *
     * @param \DateTime|null $departDate Date departed
     *
     * @return self
     */
    public function setDepartDate($departDate)
    {
        if (is_null($departDate)) {
            array_push($this->openAPINullablesSetToNull, 'departDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('departDate', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['departDate'] = $departDate;

        return $this;
    }

    /**
     * Gets currentYear
     *
     * @return bool|null
     */
    public function getCurrentYear()
    {
        return $this->container['currentYear'];
    }

    /**
     * Sets currentYear
     *
     * @param bool|null $currentYear Toggles current year
     *
     * @return self
     */
    public function setCurrentYear($currentYear)
    {
        if (is_null($currentYear)) {
            throw new \InvalidArgumentException('non-nullable currentYear cannot be null');
        }
        $this->container['currentYear'] = $currentYear;

        return $this;
    }

    /**
     * Gets hasGrades
     *
     * @return bool|null
     */
    public function getHasGrades()
    {
        return $this->container['hasGrades'];
    }

    /**
     * Sets hasGrades
     *
     * @param bool|null $hasGrades Toggles has grades
     *
     * @return self
     */
    public function setHasGrades($hasGrades)
    {
        if (is_null($hasGrades)) {
            throw new \InvalidArgumentException('non-nullable hasGrades cannot be null');
        }
        $this->container['hasGrades'] = $hasGrades;

        return $this;
    }

    /**
     * Gets gradeRepeated
     *
     * @return bool|null
     */
    public function getGradeRepeated()
    {
        return $this->container['gradeRepeated'];
    }

    /**
     * Sets gradeRepeated
     *
     * @param bool|null $gradeRepeated Toggles grade repeated
     *
     * @return self
     */
    public function setGradeRepeated($gradeRepeated)
    {
        if (is_null($gradeRepeated)) {
            throw new \InvalidArgumentException('non-nullable gradeRepeated cannot be null');
        }
        $this->container['gradeRepeated'] = $gradeRepeated;

        return $this;
    }

    /**
     * Gets graduated
     *
     * @return bool|null
     */
    public function getGraduated()
    {
        return $this->container['graduated'];
    }

    /**
     * Sets graduated
     *
     * @param bool|null $graduated Toggles graduated
     *
     * @return self
     */
    public function setGraduated($graduated)
    {
        if (is_null($graduated)) {
            throw new \InvalidArgumentException('non-nullable graduated cannot be null');
        }
        $this->container['graduated'] = $graduated;

        return $this;
    }

    /**
     * Gets allowEdit
     *
     * @return bool|null
     */
    public function getAllowEdit()
    {
        return $this->container['allowEdit'];
    }

    /**
     * Sets allowEdit
     *
     * @param bool|null $allowEdit Toggles allow edit
     *
     * @return self
     */
    public function setAllowEdit($allowEdit)
    {
        if (is_null($allowEdit)) {
            throw new \InvalidArgumentException('non-nullable allowEdit cannot be null');
        }
        $this->container['allowEdit'] = $allowEdit;

        return $this;
    }

    /**
     * Gets allowDelete
     *
     * @return bool|null
     */
    public function getAllowDelete()
    {
        return $this->container['allowDelete'];
    }

    /**
     * Sets allowDelete
     *
     * @param bool|null $allowDelete Toggles allow delete
     *
     * @return self
     */
    public function setAllowDelete($allowDelete)
    {
        if (is_null($allowDelete)) {
            throw new \InvalidArgumentException('non-nullable allowDelete cannot be null');
        }
        $this->container['allowDelete'] = $allowDelete;

        return $this;
    }

    /**
     * Gets futureEnrollments
     *
     * @return bool|null
     */
    public function getFutureEnrollments()
    {
        return $this->container['futureEnrollments'];
    }

    /**
     * Sets futureEnrollments
     *
     * @param bool|null $futureEnrollments Toggles future enrollments
     *
     * @return self
     */
    public function setFutureEnrollments($futureEnrollments)
    {
        if (is_null($futureEnrollments)) {
            throw new \InvalidArgumentException('non-nullable futureEnrollments cannot be null');
        }
        $this->container['futureEnrollments'] = $futureEnrollments;

        return $this;
    }

    /**
     * Gets durationId
     *
     * @return int|null
     */
    public function getDurationId()
    {
        return $this->container['durationId'];
    }

    /**
     * Sets durationId
     *
     * @param int|null $durationId The Id of the duration the user should be enrolled in. Optional for all Education Enrollments.
     *
     * @return self
     */
    public function setDurationId($durationId)
    {
        if (is_null($durationId)) {
            throw new \InvalidArgumentException('non-nullable durationId cannot be null');
        }
        $this->container['durationId'] = $durationId;

        return $this;
    }

    /**
     * Gets sessionId
     *
     * @return int|null
     */
    public function getSessionId()
    {
        return $this->container['sessionId'];
    }

    /**
     * Sets sessionId
     *
     * @param int|null $sessionId The Id of the session the user should be enrolled in. Required for Higher Education Enrollments.
     *
     * @return self
     */
    public function setSessionId($sessionId)
    {
        if (is_null($sessionId)) {
            throw new \InvalidArgumentException('non-nullable sessionId cannot be null');
        }
        $this->container['sessionId'] = $sessionId;

        return $this;
    }

    /**
     * Gets roleIds
     *
     * @return int[]
     */
    public function getRoleIds()
    {
        return $this->container['roleIds'];
    }

    /**
     * Sets roleIds
     *
     * @param int[] $roleIds Collection of RoleIds the individual should be associated to
     *
     * @return self
     */
    public function setRoleIds($roleIds)
    {
        if (is_null($roleIds)) {
            throw new \InvalidArgumentException('non-nullable roleIds cannot be null');
        }
        $this->container['roleIds'] = $roleIds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
