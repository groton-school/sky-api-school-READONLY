<?php
/**
 * StudentAssignment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * StudentAssignment Class Doc Comment
 *
 * @category Class
 * @description
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StudentAssignment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StudentAssignment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'section_name' => 'string',
        'section_id' => 'int',
        'assignment_id' => 'int',
        'short_description' => 'string',
        'date_assigned' => '\DateTime',
        'date_due' => '\DateTime',
        'long_description' => 'string',
        'assignment_type' => 'string',
        'grade_book' => 'bool',
        'online_submission' => 'bool',
        'assignment_status' => 'int',
        'assessment' => 'bool',
        'assessment_id' => 'int',
        'assessment_locked' => 'bool',
        'major' => 'int',
        'discussion' => 'bool',
        'formative' => 'bool',
        'exempt' => 'bool',
        'incomplete' => 'bool',
        'late' => 'bool',
        'missing' => 'bool',
        'rubric' => 'bool',
        'user_task' => 'bool',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'section_name' => null,
        'section_id' => 'int32',
        'assignment_id' => 'int32',
        'short_description' => null,
        'date_assigned' => 'date-time',
        'date_due' => 'date-time',
        'long_description' => null,
        'assignment_type' => null,
        'grade_book' => null,
        'online_submission' => null,
        'assignment_status' => 'int32',
        'assessment' => null,
        'assessment_id' => 'int32',
        'assessment_locked' => null,
        'major' => 'int32',
        'discussion' => null,
        'formative' => null,
        'exempt' => null,
        'incomplete' => null,
        'late' => null,
        'missing' => null,
        'rubric' => null,
        'user_task' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'section_name' => true,
        'section_id' => true,
        'assignment_id' => true,
        'short_description' => true,
        'date_assigned' => true,
        'date_due' => true,
        'long_description' => true,
        'assignment_type' => true,
        'grade_book' => false,
        'online_submission' => false,
        'assignment_status' => true,
        'assessment' => false,
        'assessment_id' => true,
        'assessment_locked' => false,
        'major' => true,
        'discussion' => false,
        'formative' => false,
        'exempt' => false,
        'incomplete' => false,
        'late' => false,
        'missing' => false,
        'rubric' => false,
        'user_task' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'section_name' => 'section_name',
        'section_id' => 'section_id',
        'assignment_id' => 'assignment_id',
        'short_description' => 'short_description',
        'date_assigned' => 'date_assigned',
        'date_due' => 'date_due',
        'long_description' => 'long_description',
        'assignment_type' => 'assignment_type',
        'grade_book' => 'grade_book',
        'online_submission' => 'online_submission',
        'assignment_status' => 'assignment_status',
        'assessment' => 'assessment',
        'assessment_id' => 'assessment_id',
        'assessment_locked' => 'assessment_locked',
        'major' => 'major',
        'discussion' => 'discussion',
        'formative' => 'formative',
        'exempt' => 'exempt',
        'incomplete' => 'incomplete',
        'late' => 'late',
        'missing' => 'missing',
        'rubric' => 'rubric',
        'user_task' => 'user_task',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'section_name' => 'setSectionName',
        'section_id' => 'setSectionId',
        'assignment_id' => 'setAssignmentId',
        'short_description' => 'setShortDescription',
        'date_assigned' => 'setDateAssigned',
        'date_due' => 'setDateDue',
        'long_description' => 'setLongDescription',
        'assignment_type' => 'setAssignmentType',
        'grade_book' => 'setGradeBook',
        'online_submission' => 'setOnlineSubmission',
        'assignment_status' => 'setAssignmentStatus',
        'assessment' => 'setAssessment',
        'assessment_id' => 'setAssessmentId',
        'assessment_locked' => 'setAssessmentLocked',
        'major' => 'setMajor',
        'discussion' => 'setDiscussion',
        'formative' => 'setFormative',
        'exempt' => 'setExempt',
        'incomplete' => 'setIncomplete',
        'late' => 'setLate',
        'missing' => 'setMissing',
        'rubric' => 'setRubric',
        'user_task' => 'setUserTask',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'section_name' => 'getSectionName',
        'section_id' => 'getSectionId',
        'assignment_id' => 'getAssignmentId',
        'short_description' => 'getShortDescription',
        'date_assigned' => 'getDateAssigned',
        'date_due' => 'getDateDue',
        'long_description' => 'getLongDescription',
        'assignment_type' => 'getAssignmentType',
        'grade_book' => 'getGradeBook',
        'online_submission' => 'getOnlineSubmission',
        'assignment_status' => 'getAssignmentStatus',
        'assessment' => 'getAssessment',
        'assessment_id' => 'getAssessmentId',
        'assessment_locked' => 'getAssessmentLocked',
        'major' => 'getMajor',
        'discussion' => 'getDiscussion',
        'formative' => 'getFormative',
        'exempt' => 'getExempt',
        'incomplete' => 'getIncomplete',
        'late' => 'getLate',
        'missing' => 'getMissing',
        'rubric' => 'getRubric',
        'user_task' => 'getUserTask',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('section_name', $data ?? [], null);
        $this->setIfExists('section_id', $data ?? [], null);
        $this->setIfExists('assignment_id', $data ?? [], null);
        $this->setIfExists('short_description', $data ?? [], null);
        $this->setIfExists('date_assigned', $data ?? [], null);
        $this->setIfExists('date_due', $data ?? [], null);
        $this->setIfExists('long_description', $data ?? [], null);
        $this->setIfExists('assignment_type', $data ?? [], null);
        $this->setIfExists('grade_book', $data ?? [], null);
        $this->setIfExists('online_submission', $data ?? [], null);
        $this->setIfExists('assignment_status', $data ?? [], null);
        $this->setIfExists('assessment', $data ?? [], null);
        $this->setIfExists('assessment_id', $data ?? [], null);
        $this->setIfExists('assessment_locked', $data ?? [], null);
        $this->setIfExists('major', $data ?? [], null);
        $this->setIfExists('discussion', $data ?? [], null);
        $this->setIfExists('formative', $data ?? [], null);
        $this->setIfExists('exempt', $data ?? [], null);
        $this->setIfExists('incomplete', $data ?? [], null);
        $this->setIfExists('late', $data ?? [], null);
        $this->setIfExists('missing', $data ?? [], null);
        $this->setIfExists('rubric', $data ?? [], null);
        $this->setIfExists('user_task', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets section_name
     *
     * @return string|null
     */
    public function getSectionName()
    {
        return $this->container['section_name'];
    }

    /**
     * Sets section_name
     *
     * @param string|null $section_name The name of the section the assignment was assigned in
     *
     * @return self
     */
    public function setSectionName($section_name)
    {
        if (is_null($section_name)) {
            array_push($this->openAPINullablesSetToNull, 'section_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('section_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['section_name'] = $section_name;

        return $this;
    }

    /**
     * Gets section_id
     *
     * @return int|null
     */
    public function getSectionId()
    {
        return $this->container['section_id'];
    }

    /**
     * Sets section_id
     *
     * @param int|null $section_id The id of the section the assignment was assigned in
     *
     * @return self
     */
    public function setSectionId($section_id)
    {
        if (is_null($section_id)) {
            array_push($this->openAPINullablesSetToNull, 'section_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('section_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['section_id'] = $section_id;

        return $this;
    }

    /**
     * Gets assignment_id
     *
     * @return int|null
     */
    public function getAssignmentId()
    {
        return $this->container['assignment_id'];
    }

    /**
     * Sets assignment_id
     *
     * @param int|null $assignment_id The id of the assignment
     *
     * @return self
     */
    public function setAssignmentId($assignment_id)
    {
        if (is_null($assignment_id)) {
            array_push($this->openAPINullablesSetToNull, 'assignment_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assignment_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assignment_id'] = $assignment_id;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string|null
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string|null $short_description The short description for the assignment
     *
     * @return self
     */
    public function setShortDescription($short_description)
    {
        if (is_null($short_description)) {
            array_push($this->openAPINullablesSetToNull, 'short_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('short_description', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets date_assigned
     *
     * @return \DateTime|null
     */
    public function getDateAssigned()
    {
        return $this->container['date_assigned'];
    }

    /**
     * Sets date_assigned
     *
     * @param \DateTime|null $date_assigned The date the assignment was assigned
     *
     * @return self
     */
    public function setDateAssigned($date_assigned)
    {
        if (is_null($date_assigned)) {
            array_push($this->openAPINullablesSetToNull, 'date_assigned');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_assigned', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_assigned'] = $date_assigned;

        return $this;
    }

    /**
     * Gets date_due
     *
     * @return \DateTime|null
     */
    public function getDateDue()
    {
        return $this->container['date_due'];
    }

    /**
     * Sets date_due
     *
     * @param \DateTime|null $date_due The date the assignment is due
     *
     * @return self
     */
    public function setDateDue($date_due)
    {
        if (is_null($date_due)) {
            array_push($this->openAPINullablesSetToNull, 'date_due');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_due', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_due'] = $date_due;

        return $this;
    }

    /**
     * Gets long_description
     *
     * @return string|null
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     *
     * @param string|null $long_description The long description of the assignment
     *
     * @return self
     */
    public function setLongDescription($long_description)
    {
        if (is_null($long_description)) {
            array_push($this->openAPINullablesSetToNull, 'long_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('long_description', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets assignment_type
     *
     * @return string|null
     */
    public function getAssignmentType()
    {
        return $this->container['assignment_type'];
    }

    /**
     * Sets assignment_type
     *
     * @param string|null $assignment_type The type of the assignment
     *
     * @return self
     */
    public function setAssignmentType($assignment_type)
    {
        if (is_null($assignment_type)) {
            array_push($this->openAPINullablesSetToNull, 'assignment_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assignment_type', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assignment_type'] = $assignment_type;

        return $this;
    }

    /**
     * Gets grade_book
     *
     * @return bool|null
     */
    public function getGradeBook()
    {
        return $this->container['grade_book'];
    }

    /**
     * Sets grade_book
     *
     * @param bool|null $grade_book Returns true if the assignment is included in the GradeBook
     *
     * @return self
     */
    public function setGradeBook($grade_book)
    {
        if (is_null($grade_book)) {
            throw new \InvalidArgumentException('non-nullable grade_book cannot be null');
        }
        $this->container['grade_book'] = $grade_book;

        return $this;
    }

    /**
     * Gets online_submission
     *
     * @return bool|null
     */
    public function getOnlineSubmission()
    {
        return $this->container['online_submission'];
    }

    /**
     * Sets online_submission
     *
     * @param bool|null $online_submission Returns true if the assignment is an online submission assignment
     *
     * @return self
     */
    public function setOnlineSubmission($online_submission)
    {
        if (is_null($online_submission)) {
            throw new \InvalidArgumentException('non-nullable online_submission cannot be null');
        }
        $this->container['online_submission'] = $online_submission;

        return $this;
    }

    /**
     * Gets assignment_status
     *
     * @return int|null
     */
    public function getAssignmentStatus()
    {
        return $this->container['assignment_status'];
    }

    /**
     * Sets assignment_status
     *
     * @param int|null $assignment_status The status of the assignment
     *
     * @return self
     */
    public function setAssignmentStatus($assignment_status)
    {
        if (is_null($assignment_status)) {
            array_push($this->openAPINullablesSetToNull, 'assignment_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assignment_status', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assignment_status'] = $assignment_status;

        return $this;
    }

    /**
     * Gets assessment
     *
     * @return bool|null
     */
    public function getAssessment()
    {
        return $this->container['assessment'];
    }

    /**
     * Sets assessment
     *
     * @param bool|null $assessment Returns true if this assignment is an assessment
     *
     * @return self
     */
    public function setAssessment($assessment)
    {
        if (is_null($assessment)) {
            throw new \InvalidArgumentException('non-nullable assessment cannot be null');
        }
        $this->container['assessment'] = $assessment;

        return $this;
    }

    /**
     * Gets assessment_id
     *
     * @return int|null
     */
    public function getAssessmentId()
    {
        return $this->container['assessment_id'];
    }

    /**
     * Sets assessment_id
     *
     * @param int|null $assessment_id The id of the assessment
     *
     * @return self
     */
    public function setAssessmentId($assessment_id)
    {
        if (is_null($assessment_id)) {
            array_push($this->openAPINullablesSetToNull, 'assessment_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assessment_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assessment_id'] = $assessment_id;

        return $this;
    }

    /**
     * Gets assessment_locked
     *
     * @return bool|null
     */
    public function getAssessmentLocked()
    {
        return $this->container['assessment_locked'];
    }

    /**
     * Sets assessment_locked
     *
     * @param bool|null $assessment_locked Returns true if the assessment is locked
     *
     * @return self
     */
    public function setAssessmentLocked($assessment_locked)
    {
        if (is_null($assessment_locked)) {
            throw new \InvalidArgumentException('non-nullable assessment_locked cannot be null');
        }
        $this->container['assessment_locked'] = $assessment_locked;

        return $this;
    }

    /**
     * Gets major
     *
     * @return int|null
     */
    public function getMajor()
    {
        return $this->container['major'];
    }

    /**
     * Sets major
     *
     * @param int|null $major
     *
     * @return self
     */
    public function setMajor($major)
    {
        if (is_null($major)) {
            array_push($this->openAPINullablesSetToNull, 'major');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('major', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['major'] = $major;

        return $this;
    }

    /**
     * Gets discussion
     *
     * @return bool|null
     */
    public function getDiscussion()
    {
        return $this->container['discussion'];
    }

    /**
     * Sets discussion
     *
     * @param bool|null $discussion Returns true if the assignment has a discussion
     *
     * @return self
     */
    public function setDiscussion($discussion)
    {
        if (is_null($discussion)) {
            throw new \InvalidArgumentException('non-nullable discussion cannot be null');
        }
        $this->container['discussion'] = $discussion;

        return $this;
    }

    /**
     * Gets formative
     *
     * @return bool|null
     */
    public function getFormative()
    {
        return $this->container['formative'];
    }

    /**
     * Sets formative
     *
     * @param bool|null $formative Returns true if the assignment is formative
     *
     * @return self
     */
    public function setFormative($formative)
    {
        if (is_null($formative)) {
            throw new \InvalidArgumentException('non-nullable formative cannot be null');
        }
        $this->container['formative'] = $formative;

        return $this;
    }

    /**
     * Gets exempt
     *
     * @return bool|null
     */
    public function getExempt()
    {
        return $this->container['exempt'];
    }

    /**
     * Sets exempt
     *
     * @param bool|null $exempt Returns true if ther student is exempt from this assignment
     *
     * @return self
     */
    public function setExempt($exempt)
    {
        if (is_null($exempt)) {
            throw new \InvalidArgumentException('non-nullable exempt cannot be null');
        }
        $this->container['exempt'] = $exempt;

        return $this;
    }

    /**
     * Gets incomplete
     *
     * @return bool|null
     */
    public function getIncomplete()
    {
        return $this->container['incomplete'];
    }

    /**
     * Sets incomplete
     *
     * @param bool|null $incomplete Returns true if the assignment is incomplete
     *
     * @return self
     */
    public function setIncomplete($incomplete)
    {
        if (is_null($incomplete)) {
            throw new \InvalidArgumentException('non-nullable incomplete cannot be null');
        }
        $this->container['incomplete'] = $incomplete;

        return $this;
    }

    /**
     * Gets late
     *
     * @return bool|null
     */
    public function getLate()
    {
        return $this->container['late'];
    }

    /**
     * Sets late
     *
     * @param bool|null $late Returns true if the assignment is late
     *
     * @return self
     */
    public function setLate($late)
    {
        if (is_null($late)) {
            throw new \InvalidArgumentException('non-nullable late cannot be null');
        }
        $this->container['late'] = $late;

        return $this;
    }

    /**
     * Gets missing
     *
     * @return bool|null
     */
    public function getMissing()
    {
        return $this->container['missing'];
    }

    /**
     * Sets missing
     *
     * @param bool|null $missing Returns true if the assignment is missing
     *
     * @return self
     */
    public function setMissing($missing)
    {
        if (is_null($missing)) {
            throw new \InvalidArgumentException('non-nullable missing cannot be null');
        }
        $this->container['missing'] = $missing;

        return $this;
    }

    /**
     * Gets rubric
     *
     * @return bool|null
     */
    public function getRubric()
    {
        return $this->container['rubric'];
    }

    /**
     * Sets rubric
     *
     * @param bool|null $rubric Returns true if the assignment is included in the rubric
     *
     * @return self
     */
    public function setRubric($rubric)
    {
        if (is_null($rubric)) {
            throw new \InvalidArgumentException('non-nullable rubric cannot be null');
        }
        $this->container['rubric'] = $rubric;

        return $this;
    }

    /**
     * Gets user_task
     *
     * @return bool|null
     */
    public function getUserTask()
    {
        return $this->container['user_task'];
    }

    /**
     * Sets user_task
     *
     * @param bool|null $user_task Returns true if the assignment is a user generated task
     *
     * @return self
     */
    public function setUserTask($user_task)
    {
        if (is_null($user_task)) {
            throw new \InvalidArgumentException('non-nullable user_task cannot be null');
        }
        $this->container['user_task'] = $user_task;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
