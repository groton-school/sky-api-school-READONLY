<?php
/**
 * UserEdit
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * UserEdit Class Doc Comment
 *
 * @category Class
 * @description UserEdit Model
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserEdit implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserEdit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'affiliation' => 'string',
        'birthPlace' => 'string',
        'boardingOrDay' => 'string',
        'ccEmail' => 'string',
        'citizenship' => 'string',
        'customFieldOne' => 'string',
        'customFieldTwo' => 'string',
        'customFieldThree' => 'string',
        'customFieldFour' => 'string',
        'customFieldFive' => 'string',
        'customFieldSix' => 'string',
        'customFieldSeven' => 'string',
        'customFieldEight' => 'string',
        'customFieldNine' => 'string',
        'customFieldTen' => 'string',
        'deceased' => 'bool',
        'deceasedDate' => '\DateTime',
        'dob' => '\DateTime',
        'email' => 'string',
        'emailActive' => 'bool',
        'ethnicity' => 'string',
        'firstName' => 'string',
        'gender' => 'string',
        'greeting' => 'string',
        'homeLanguages' => '\SKY\School\Model\HomeLanguageAdd[]',
        'hostId' => 'string',
        'id' => 'int',
        'international' => 'string',
        'isAbroad' => 'bool',
        'isInternational' => 'bool',
        'isLatinoHispanic' => 'bool',
        'latinoHispanic' => 'string',
        'isResponsibleSigner' => 'bool',
        'inState' => '\SKY\School\Model\UserInState',
        'lastName' => 'string',
        'livingStatus' => 'string',
        'locker' => '\SKY\School\Model\UserLocker',
        'lost' => 'bool',
        'maidenName' => 'string',
        'mailbox' => '\SKY\School\Model\UserMailbox',
        'middleName' => 'string',
        'nickName' => 'string',
        'passport' => '\SKY\School\Model\UserPassport',
        'primaryLanguage' => 'string',
        'preferredName' => 'string',
        'prefix' => 'string',
        'pronouns' => 'string',
        'races' => '\SKY\School\Model\UserAddRace[]',
        'religion' => 'string',
        'schoolProgram' => 'string',
        'stateId' => 'string',
        'studentId' => 'string',
        'suffix' => 'string',
        'visa' => '\SKY\School\Model\UserVisaAdd',
        'fieldsToDelete' => 'string[]',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'affiliation' => null,
        'birthPlace' => null,
        'boardingOrDay' => null,
        'ccEmail' => null,
        'citizenship' => null,
        'customFieldOne' => null,
        'customFieldTwo' => null,
        'customFieldThree' => null,
        'customFieldFour' => null,
        'customFieldFive' => null,
        'customFieldSix' => null,
        'customFieldSeven' => null,
        'customFieldEight' => null,
        'customFieldNine' => null,
        'customFieldTen' => null,
        'deceased' => null,
        'deceasedDate' => 'date-time',
        'dob' => 'date-time',
        'email' => null,
        'emailActive' => null,
        'ethnicity' => null,
        'firstName' => null,
        'gender' => null,
        'greeting' => null,
        'homeLanguages' => null,
        'hostId' => null,
        'id' => 'int32',
        'international' => null,
        'isAbroad' => null,
        'isInternational' => null,
        'isLatinoHispanic' => null,
        'latinoHispanic' => null,
        'isResponsibleSigner' => null,
        'inState' => null,
        'lastName' => null,
        'livingStatus' => null,
        'locker' => null,
        'lost' => null,
        'maidenName' => null,
        'mailbox' => null,
        'middleName' => null,
        'nickName' => null,
        'passport' => null,
        'primaryLanguage' => null,
        'preferredName' => null,
        'prefix' => null,
        'pronouns' => null,
        'races' => null,
        'religion' => null,
        'schoolProgram' => null,
        'stateId' => null,
        'studentId' => null,
        'suffix' => null,
        'visa' => null,
        'fieldsToDelete' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'affiliation' => true,
        'birthPlace' => true,
        'boardingOrDay' => true,
        'ccEmail' => true,
        'citizenship' => true,
        'customFieldOne' => true,
        'customFieldTwo' => true,
        'customFieldThree' => true,
        'customFieldFour' => true,
        'customFieldFive' => true,
        'customFieldSix' => true,
        'customFieldSeven' => true,
        'customFieldEight' => true,
        'customFieldNine' => true,
        'customFieldTen' => true,
        'deceased' => false,
        'deceasedDate' => true,
        'dob' => false,
        'email' => true,
        'emailActive' => false,
        'ethnicity' => true,
        'firstName' => true,
        'gender' => true,
        'greeting' => true,
        'homeLanguages' => true,
        'hostId' => true,
        'id' => false,
        'international' => true,
        'isAbroad' => true,
        'isInternational' => false,
        'isLatinoHispanic' => true,
        'latinoHispanic' => true,
        'isResponsibleSigner' => false,
        'inState' => false,
        'lastName' => true,
        'livingStatus' => true,
        'locker' => false,
        'lost' => false,
        'maidenName' => true,
        'mailbox' => false,
        'middleName' => true,
        'nickName' => true,
        'passport' => false,
        'primaryLanguage' => true,
        'preferredName' => true,
        'prefix' => true,
        'pronouns' => true,
        'races' => true,
        'religion' => true,
        'schoolProgram' => true,
        'stateId' => true,
        'studentId' => true,
        'suffix' => true,
        'visa' => false,
        'fieldsToDelete' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'affiliation' => 'affiliation',
        'birthPlace' => 'birth_place',
        'boardingOrDay' => 'boarding_or_day',
        'ccEmail' => 'cc_email',
        'citizenship' => 'citizenship',
        'customFieldOne' => 'custom_field_one',
        'customFieldTwo' => 'custom_field_two',
        'customFieldThree' => 'custom_field_three',
        'customFieldFour' => 'custom_field_four',
        'customFieldFive' => 'custom_field_five',
        'customFieldSix' => 'custom_field_six',
        'customFieldSeven' => 'custom_field_seven',
        'customFieldEight' => 'custom_field_eight',
        'customFieldNine' => 'custom_field_nine',
        'customFieldTen' => 'custom_field_ten',
        'deceased' => 'deceased',
        'deceasedDate' => 'deceased_date',
        'dob' => 'dob',
        'email' => 'email',
        'emailActive' => 'email_active',
        'ethnicity' => 'ethnicity',
        'firstName' => 'first_name',
        'gender' => 'gender',
        'greeting' => 'greeting',
        'homeLanguages' => 'home_languages',
        'hostId' => 'host_id',
        'id' => 'id',
        'international' => 'international',
        'isAbroad' => 'is_abroad',
        'isInternational' => 'is_international',
        'isLatinoHispanic' => 'is_latino_hispanic',
        'latinoHispanic' => 'latino_hispanic',
        'isResponsibleSigner' => 'is_responsible_signer',
        'inState' => 'in_state',
        'lastName' => 'last_name',
        'livingStatus' => 'living_status',
        'locker' => 'locker',
        'lost' => 'lost',
        'maidenName' => 'maiden_name',
        'mailbox' => 'mailbox',
        'middleName' => 'middle_name',
        'nickName' => 'nick_name',
        'passport' => 'passport',
        'primaryLanguage' => 'primary_language',
        'preferredName' => 'preferred_name',
        'prefix' => 'prefix',
        'pronouns' => 'pronouns',
        'races' => 'races',
        'religion' => 'religion',
        'schoolProgram' => 'school_program',
        'stateId' => 'state_id',
        'studentId' => 'student_id',
        'suffix' => 'suffix',
        'visa' => 'visa',
        'fieldsToDelete' => 'fields_to_delete',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'affiliation' => 'setAffiliation',
        'birthPlace' => 'setBirthPlace',
        'boardingOrDay' => 'setBoardingOrDay',
        'ccEmail' => 'setCcEmail',
        'citizenship' => 'setCitizenship',
        'customFieldOne' => 'setCustomFieldOne',
        'customFieldTwo' => 'setCustomFieldTwo',
        'customFieldThree' => 'setCustomFieldThree',
        'customFieldFour' => 'setCustomFieldFour',
        'customFieldFive' => 'setCustomFieldFive',
        'customFieldSix' => 'setCustomFieldSix',
        'customFieldSeven' => 'setCustomFieldSeven',
        'customFieldEight' => 'setCustomFieldEight',
        'customFieldNine' => 'setCustomFieldNine',
        'customFieldTen' => 'setCustomFieldTen',
        'deceased' => 'setDeceased',
        'deceasedDate' => 'setDeceasedDate',
        'dob' => 'setDob',
        'email' => 'setEmail',
        'emailActive' => 'setEmailActive',
        'ethnicity' => 'setEthnicity',
        'firstName' => 'setFirstName',
        'gender' => 'setGender',
        'greeting' => 'setGreeting',
        'homeLanguages' => 'setHomeLanguages',
        'hostId' => 'setHostId',
        'id' => 'setId',
        'international' => 'setInternational',
        'isAbroad' => 'setIsAbroad',
        'isInternational' => 'setIsInternational',
        'isLatinoHispanic' => 'setIsLatinoHispanic',
        'latinoHispanic' => 'setLatinoHispanic',
        'isResponsibleSigner' => 'setIsResponsibleSigner',
        'inState' => 'setInState',
        'lastName' => 'setLastName',
        'livingStatus' => 'setLivingStatus',
        'locker' => 'setLocker',
        'lost' => 'setLost',
        'maidenName' => 'setMaidenName',
        'mailbox' => 'setMailbox',
        'middleName' => 'setMiddleName',
        'nickName' => 'setNickName',
        'passport' => 'setPassport',
        'primaryLanguage' => 'setPrimaryLanguage',
        'preferredName' => 'setPreferredName',
        'prefix' => 'setPrefix',
        'pronouns' => 'setPronouns',
        'races' => 'setRaces',
        'religion' => 'setReligion',
        'schoolProgram' => 'setSchoolProgram',
        'stateId' => 'setStateId',
        'studentId' => 'setStudentId',
        'suffix' => 'setSuffix',
        'visa' => 'setVisa',
        'fieldsToDelete' => 'setFieldsToDelete',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'affiliation' => 'getAffiliation',
        'birthPlace' => 'getBirthPlace',
        'boardingOrDay' => 'getBoardingOrDay',
        'ccEmail' => 'getCcEmail',
        'citizenship' => 'getCitizenship',
        'customFieldOne' => 'getCustomFieldOne',
        'customFieldTwo' => 'getCustomFieldTwo',
        'customFieldThree' => 'getCustomFieldThree',
        'customFieldFour' => 'getCustomFieldFour',
        'customFieldFive' => 'getCustomFieldFive',
        'customFieldSix' => 'getCustomFieldSix',
        'customFieldSeven' => 'getCustomFieldSeven',
        'customFieldEight' => 'getCustomFieldEight',
        'customFieldNine' => 'getCustomFieldNine',
        'customFieldTen' => 'getCustomFieldTen',
        'deceased' => 'getDeceased',
        'deceasedDate' => 'getDeceasedDate',
        'dob' => 'getDob',
        'email' => 'getEmail',
        'emailActive' => 'getEmailActive',
        'ethnicity' => 'getEthnicity',
        'firstName' => 'getFirstName',
        'gender' => 'getGender',
        'greeting' => 'getGreeting',
        'homeLanguages' => 'getHomeLanguages',
        'hostId' => 'getHostId',
        'id' => 'getId',
        'international' => 'getInternational',
        'isAbroad' => 'getIsAbroad',
        'isInternational' => 'getIsInternational',
        'isLatinoHispanic' => 'getIsLatinoHispanic',
        'latinoHispanic' => 'getLatinoHispanic',
        'isResponsibleSigner' => 'getIsResponsibleSigner',
        'inState' => 'getInState',
        'lastName' => 'getLastName',
        'livingStatus' => 'getLivingStatus',
        'locker' => 'getLocker',
        'lost' => 'getLost',
        'maidenName' => 'getMaidenName',
        'mailbox' => 'getMailbox',
        'middleName' => 'getMiddleName',
        'nickName' => 'getNickName',
        'passport' => 'getPassport',
        'primaryLanguage' => 'getPrimaryLanguage',
        'preferredName' => 'getPreferredName',
        'prefix' => 'getPrefix',
        'pronouns' => 'getPronouns',
        'races' => 'getRaces',
        'religion' => 'getReligion',
        'schoolProgram' => 'getSchoolProgram',
        'stateId' => 'getStateId',
        'studentId' => 'getStudentId',
        'suffix' => 'getSuffix',
        'visa' => 'getVisa',
        'fieldsToDelete' => 'getFieldsToDelete',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('affiliation', $data ?? [], null);
        $this->setIfExists('birthPlace', $data ?? [], null);
        $this->setIfExists('boardingOrDay', $data ?? [], null);
        $this->setIfExists('ccEmail', $data ?? [], null);
        $this->setIfExists('citizenship', $data ?? [], null);
        $this->setIfExists('customFieldOne', $data ?? [], null);
        $this->setIfExists('customFieldTwo', $data ?? [], null);
        $this->setIfExists('customFieldThree', $data ?? [], null);
        $this->setIfExists('customFieldFour', $data ?? [], null);
        $this->setIfExists('customFieldFive', $data ?? [], null);
        $this->setIfExists('customFieldSix', $data ?? [], null);
        $this->setIfExists('customFieldSeven', $data ?? [], null);
        $this->setIfExists('customFieldEight', $data ?? [], null);
        $this->setIfExists('customFieldNine', $data ?? [], null);
        $this->setIfExists('customFieldTen', $data ?? [], null);
        $this->setIfExists('deceased', $data ?? [], null);
        $this->setIfExists('deceasedDate', $data ?? [], null);
        $this->setIfExists('dob', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('emailActive', $data ?? [], null);
        $this->setIfExists('ethnicity', $data ?? [], null);
        $this->setIfExists('firstName', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('greeting', $data ?? [], null);
        $this->setIfExists('homeLanguages', $data ?? [], null);
        $this->setIfExists('hostId', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('international', $data ?? [], null);
        $this->setIfExists('isAbroad', $data ?? [], null);
        $this->setIfExists('isInternational', $data ?? [], null);
        $this->setIfExists('isLatinoHispanic', $data ?? [], null);
        $this->setIfExists('latinoHispanic', $data ?? [], null);
        $this->setIfExists('isResponsibleSigner', $data ?? [], null);
        $this->setIfExists('inState', $data ?? [], null);
        $this->setIfExists('lastName', $data ?? [], null);
        $this->setIfExists('livingStatus', $data ?? [], null);
        $this->setIfExists('locker', $data ?? [], null);
        $this->setIfExists('lost', $data ?? [], null);
        $this->setIfExists('maidenName', $data ?? [], null);
        $this->setIfExists('mailbox', $data ?? [], null);
        $this->setIfExists('middleName', $data ?? [], null);
        $this->setIfExists('nickName', $data ?? [], null);
        $this->setIfExists('passport', $data ?? [], null);
        $this->setIfExists('primaryLanguage', $data ?? [], null);
        $this->setIfExists('preferredName', $data ?? [], null);
        $this->setIfExists('prefix', $data ?? [], null);
        $this->setIfExists('pronouns', $data ?? [], null);
        $this->setIfExists('races', $data ?? [], null);
        $this->setIfExists('religion', $data ?? [], null);
        $this->setIfExists('schoolProgram', $data ?? [], null);
        $this->setIfExists('stateId', $data ?? [], null);
        $this->setIfExists('studentId', $data ?? [], null);
        $this->setIfExists('suffix', $data ?? [], null);
        $this->setIfExists('visa', $data ?? [], null);
        $this->setIfExists('fieldsToDelete', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets affiliation
     *
     * @return string|null
     */
    public function getAffiliation()
    {
        return $this->container['affiliation'];
    }

    /**
     * Sets affiliation
     *
     * @param string|null $affiliation The affiliation of a user
     *
     * @return self
     */
    public function setAffiliation($affiliation)
    {
        if (is_null($affiliation)) {
            array_push($this->openAPINullablesSetToNull, 'affiliation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('affiliation', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['affiliation'] = $affiliation;

        return $this;
    }

    /**
     * Gets birthPlace
     *
     * @return string|null
     */
    public function getBirthPlace()
    {
        return $this->container['birthPlace'];
    }

    /**
     * Sets birthPlace
     *
     * @param string|null $birthPlace The birthplace of the user
     *
     * @return self
     */
    public function setBirthPlace($birthPlace)
    {
        if (is_null($birthPlace)) {
            array_push($this->openAPINullablesSetToNull, 'birthPlace');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birthPlace', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['birthPlace'] = $birthPlace;

        return $this;
    }

    /**
     * Gets boardingOrDay
     *
     * @return string|null
     */
    public function getBoardingOrDay()
    {
        return $this->container['boardingOrDay'];
    }

    /**
     * Sets boardingOrDay
     *
     * @param string|null $boardingOrDay The boarding or day status. Accepted values: boarding, day, \"B\" and \"D\"
     *
     * @return self
     */
    public function setBoardingOrDay($boardingOrDay)
    {
        if (is_null($boardingOrDay)) {
            array_push($this->openAPINullablesSetToNull, 'boardingOrDay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('boardingOrDay', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['boardingOrDay'] = $boardingOrDay;

        return $this;
    }

    /**
     * Gets ccEmail
     *
     * @return string|null
     */
    public function getCcEmail()
    {
        return $this->container['ccEmail'];
    }

    /**
     * Sets ccEmail
     *
     * @param string|null $ccEmail The cc email address of a user
     *
     * @return self
     */
    public function setCcEmail($ccEmail)
    {
        if (is_null($ccEmail)) {
            array_push($this->openAPINullablesSetToNull, 'ccEmail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ccEmail', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ccEmail'] = $ccEmail;

        return $this;
    }

    /**
     * Gets citizenship
     *
     * @return string|null
     */
    public function getCitizenship()
    {
        return $this->container['citizenship'];
    }

    /**
     * Sets citizenship
     *
     * @param string|null $citizenship The descriptor or ID of the citizenship. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values.
     *
     * @return self
     */
    public function setCitizenship($citizenship)
    {
        if (is_null($citizenship)) {
            array_push($this->openAPINullablesSetToNull, 'citizenship');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('citizenship', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['citizenship'] = $citizenship;

        return $this;
    }

    /**
     * Gets customFieldOne
     *
     * @return string|null
     */
    public function getCustomFieldOne()
    {
        return $this->container['customFieldOne'];
    }

    /**
     * Sets customFieldOne
     *
     * @param string|null $customFieldOne A custom field on the user profile (one of ten)
     *
     * @return self
     */
    public function setCustomFieldOne($customFieldOne)
    {
        if (is_null($customFieldOne)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldOne');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldOne', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldOne'] = $customFieldOne;

        return $this;
    }

    /**
     * Gets customFieldTwo
     *
     * @return string|null
     */
    public function getCustomFieldTwo()
    {
        return $this->container['customFieldTwo'];
    }

    /**
     * Sets customFieldTwo
     *
     * @param string|null $customFieldTwo A custom field on the user profile (two of ten)
     *
     * @return self
     */
    public function setCustomFieldTwo($customFieldTwo)
    {
        if (is_null($customFieldTwo)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldTwo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldTwo', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldTwo'] = $customFieldTwo;

        return $this;
    }

    /**
     * Gets customFieldThree
     *
     * @return string|null
     */
    public function getCustomFieldThree()
    {
        return $this->container['customFieldThree'];
    }

    /**
     * Sets customFieldThree
     *
     * @param string|null $customFieldThree A custom field on the user profile (three of ten)
     *
     * @return self
     */
    public function setCustomFieldThree($customFieldThree)
    {
        if (is_null($customFieldThree)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldThree');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldThree', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldThree'] = $customFieldThree;

        return $this;
    }

    /**
     * Gets customFieldFour
     *
     * @return string|null
     */
    public function getCustomFieldFour()
    {
        return $this->container['customFieldFour'];
    }

    /**
     * Sets customFieldFour
     *
     * @param string|null $customFieldFour A custom field on the user profile (four of ten)
     *
     * @return self
     */
    public function setCustomFieldFour($customFieldFour)
    {
        if (is_null($customFieldFour)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldFour');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldFour', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldFour'] = $customFieldFour;

        return $this;
    }

    /**
     * Gets customFieldFive
     *
     * @return string|null
     */
    public function getCustomFieldFive()
    {
        return $this->container['customFieldFive'];
    }

    /**
     * Sets customFieldFive
     *
     * @param string|null $customFieldFive A custom field on the user profile (five of ten)
     *
     * @return self
     */
    public function setCustomFieldFive($customFieldFive)
    {
        if (is_null($customFieldFive)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldFive');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldFive', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldFive'] = $customFieldFive;

        return $this;
    }

    /**
     * Gets customFieldSix
     *
     * @return string|null
     */
    public function getCustomFieldSix()
    {
        return $this->container['customFieldSix'];
    }

    /**
     * Sets customFieldSix
     *
     * @param string|null $customFieldSix A custom field on the user profile (six of ten)
     *
     * @return self
     */
    public function setCustomFieldSix($customFieldSix)
    {
        if (is_null($customFieldSix)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldSix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldSix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldSix'] = $customFieldSix;

        return $this;
    }

    /**
     * Gets customFieldSeven
     *
     * @return string|null
     */
    public function getCustomFieldSeven()
    {
        return $this->container['customFieldSeven'];
    }

    /**
     * Sets customFieldSeven
     *
     * @param string|null $customFieldSeven A custom field on the user profile (seven of ten)
     *
     * @return self
     */
    public function setCustomFieldSeven($customFieldSeven)
    {
        if (is_null($customFieldSeven)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldSeven');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldSeven', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldSeven'] = $customFieldSeven;

        return $this;
    }

    /**
     * Gets customFieldEight
     *
     * @return string|null
     */
    public function getCustomFieldEight()
    {
        return $this->container['customFieldEight'];
    }

    /**
     * Sets customFieldEight
     *
     * @param string|null $customFieldEight A custom field on the user profile (eight of ten)
     *
     * @return self
     */
    public function setCustomFieldEight($customFieldEight)
    {
        if (is_null($customFieldEight)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldEight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldEight', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldEight'] = $customFieldEight;

        return $this;
    }

    /**
     * Gets customFieldNine
     *
     * @return string|null
     */
    public function getCustomFieldNine()
    {
        return $this->container['customFieldNine'];
    }

    /**
     * Sets customFieldNine
     *
     * @param string|null $customFieldNine A custom field on the user profile (nine of ten)
     *
     * @return self
     */
    public function setCustomFieldNine($customFieldNine)
    {
        if (is_null($customFieldNine)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldNine');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldNine', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldNine'] = $customFieldNine;

        return $this;
    }

    /**
     * Gets customFieldTen
     *
     * @return string|null
     */
    public function getCustomFieldTen()
    {
        return $this->container['customFieldTen'];
    }

    /**
     * Sets customFieldTen
     *
     * @param string|null $customFieldTen A custom field on the user profile (ten of ten)
     *
     * @return self
     */
    public function setCustomFieldTen($customFieldTen)
    {
        if (is_null($customFieldTen)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldTen');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldTen', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldTen'] = $customFieldTen;

        return $this;
    }

    /**
     * Gets deceased
     *
     * @return bool|null
     */
    public function getDeceased()
    {
        return $this->container['deceased'];
    }

    /**
     * Sets deceased
     *
     * @param bool|null $deceased Set to true if the user is deceased. Allowed value: true, false. Defaults to false.
     *
     * @return self
     */
    public function setDeceased($deceased)
    {
        if (is_null($deceased)) {
            throw new \InvalidArgumentException('non-nullable deceased cannot be null');
        }
        $this->container['deceased'] = $deceased;

        return $this;
    }

    /**
     * Gets deceasedDate
     *
     * @return \DateTime|null
     */
    public function getDeceasedDate()
    {
        return $this->container['deceasedDate'];
    }

    /**
     * Sets deceasedDate
     *
     * @param \DateTime|null $deceasedDate The deceased date of the user. Use ISO-8601 date format: 2022-04-08.
     *
     * @return self
     */
    public function setDeceasedDate($deceasedDate)
    {
        if (is_null($deceasedDate)) {
            array_push($this->openAPINullablesSetToNull, 'deceasedDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deceasedDate', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deceasedDate'] = $deceasedDate;

        return $this;
    }

    /**
     * Gets dob
     *
     * @return \DateTime|null
     */
    public function getDob()
    {
        return $this->container['dob'];
    }

    /**
     * Sets dob
     *
     * @param \DateTime|null $dob The birthday of a user
     *
     * @return self
     */
    public function setDob($dob)
    {
        if (is_null($dob)) {
            throw new \InvalidArgumentException('non-nullable dob cannot be null');
        }
        $this->container['dob'] = $dob;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address of a user
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets emailActive
     *
     * @return bool|null
     */
    public function getEmailActive()
    {
        return $this->container['emailActive'];
    }

    /**
     * Sets emailActive
     *
     * @param bool|null $emailActive Set to true if email is usable. Allowed value: true, false. Defaults to true.
     *
     * @return self
     */
    public function setEmailActive($emailActive)
    {
        if (is_null($emailActive)) {
            throw new \InvalidArgumentException('non-nullable emailActive cannot be null');
        }
        $this->container['emailActive'] = $emailActive;

        return $this;
    }

    /**
     * Gets ethnicity
     *
     * @return string|null
     */
    public function getEthnicity()
    {
        return $this->container['ethnicity'];
    }

    /**
     * Sets ethnicity
     *
     * @param string|null $ethnicity The descriptor or ID of the ethnicity. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values.
     *
     * @return self
     */
    public function setEthnicity($ethnicity)
    {
        if (is_null($ethnicity)) {
            array_push($this->openAPINullablesSetToNull, 'ethnicity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ethnicity', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ethnicity'] = $ethnicity;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName The first name of a user
     *
     * @return self
     */
    public function setFirstName($firstName)
    {
        if (is_null($firstName)) {
            array_push($this->openAPINullablesSetToNull, 'firstName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('firstName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender The gender of a user
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            array_push($this->openAPINullablesSetToNull, 'gender');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets greeting
     *
     * @return string|null
     */
    public function getGreeting()
    {
        return $this->container['greeting'];
    }

    /**
     * Sets greeting
     *
     * @param string|null $greeting The greeting of a user
     *
     * @return self
     */
    public function setGreeting($greeting)
    {
        if (is_null($greeting)) {
            array_push($this->openAPINullablesSetToNull, 'greeting');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('greeting', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['greeting'] = $greeting;

        return $this;
    }

    /**
     * Gets homeLanguages
     *
     * @return \SKY\School\Model\HomeLanguageAdd[]|null
     */
    public function getHomeLanguages()
    {
        return $this->container['homeLanguages'];
    }

    /**
     * Sets homeLanguages
     *
     * @param \SKY\School\Model\HomeLanguageAdd[]|null $homeLanguages A list of languages. Each entry is the descriptor or ID of the language. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values.
     *
     * @return self
     */
    public function setHomeLanguages($homeLanguages)
    {
        if (is_null($homeLanguages)) {
            array_push($this->openAPINullablesSetToNull, 'homeLanguages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('homeLanguages', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['homeLanguages'] = $homeLanguages;

        return $this;
    }

    /**
     * Gets hostId
     *
     * @return string|null
     */
    public function getHostId()
    {
        return $this->container['hostId'];
    }

    /**
     * Sets hostId
     *
     * @param string|null $hostId The HostId of a user
     *
     * @return self
     */
    public function setHostId($hostId)
    {
        if (is_null($hostId)) {
            array_push($this->openAPINullablesSetToNull, 'hostId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hostId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hostId'] = $hostId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID associated with a user
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets international
     *
     * @return string|null
     */
    public function getInternational()
    {
        return $this->container['international'];
    }

    /**
     * Sets international
     *
     * @param string|null $international Whether the user is an international user. This will return: Yes, No, or No answer.
     *
     * @return self
     */
    public function setInternational($international)
    {
        if (is_null($international)) {
            array_push($this->openAPINullablesSetToNull, 'international');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('international', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['international'] = $international;

        return $this;
    }

    /**
     * Gets isAbroad
     *
     * @return bool|null
     */
    public function getIsAbroad()
    {
        return $this->container['isAbroad'];
    }

    /**
     * Sets isAbroad
     *
     * @param bool|null $isAbroad Set to true if user is currently abroad. Allowed value: true, false. Defaults to false.
     *
     * @return self
     */
    public function setIsAbroad($isAbroad)
    {
        if (is_null($isAbroad)) {
            array_push($this->openAPINullablesSetToNull, 'isAbroad');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isAbroad', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isAbroad'] = $isAbroad;

        return $this;
    }

    /**
     * Gets isInternational
     *
     * @return bool|null
     */
    public function getIsInternational()
    {
        return $this->container['isInternational'];
    }

    /**
     * Sets isInternational
     *
     * @param bool|null $isInternational Set to true if user is international (will be deprecated 02/15/2024)
     *
     * @return self
     */
    public function setIsInternational($isInternational)
    {
        if (is_null($isInternational)) {
            throw new \InvalidArgumentException('non-nullable isInternational cannot be null');
        }
        $this->container['isInternational'] = $isInternational;

        return $this;
    }

    /**
     * Gets isLatinoHispanic
     *
     * @return bool|null
     */
    public function getIsLatinoHispanic()
    {
        return $this->container['isLatinoHispanic'];
    }

    /**
     * Sets isLatinoHispanic
     *
     * @param bool|null $isLatinoHispanic Set to true if  user is latino or hispanic (will be deprecated 02/15/2024).
     *
     * @return self
     */
    public function setIsLatinoHispanic($isLatinoHispanic)
    {
        if (is_null($isLatinoHispanic)) {
            array_push($this->openAPINullablesSetToNull, 'isLatinoHispanic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isLatinoHispanic', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isLatinoHispanic'] = $isLatinoHispanic;

        return $this;
    }

    /**
     * Gets latinoHispanic
     *
     * @return string|null
     */
    public function getLatinoHispanic()
    {
        return $this->container['latinoHispanic'];
    }

    /**
     * Sets latinoHispanic
     *
     * @param string|null $latinoHispanic Whether the user is Latino/Hispanic. Allowed values: Yes, No, or No answer.
     *
     * @return self
     */
    public function setLatinoHispanic($latinoHispanic)
    {
        if (is_null($latinoHispanic)) {
            array_push($this->openAPINullablesSetToNull, 'latinoHispanic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('latinoHispanic', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['latinoHispanic'] = $latinoHispanic;

        return $this;
    }

    /**
     * Gets isResponsibleSigner
     *
     * @return bool|null
     */
    public function getIsResponsibleSigner()
    {
        return $this->container['isResponsibleSigner'];
    }

    /**
     * Sets isResponsibleSigner
     *
     * @param bool|null $isResponsibleSigner Set to true if user is a responsible signer. Allowed value: true, false. Defaults to false.
     *
     * @return self
     */
    public function setIsResponsibleSigner($isResponsibleSigner)
    {
        if (is_null($isResponsibleSigner)) {
            throw new \InvalidArgumentException('non-nullable isResponsibleSigner cannot be null');
        }
        $this->container['isResponsibleSigner'] = $isResponsibleSigner;

        return $this;
    }

    /**
     * Gets inState
     *
     * @return \SKY\School\Model\UserInState|null
     */
    public function getInState()
    {
        return $this->container['inState'];
    }

    /**
     * Sets inState
     *
     * @param \SKY\School\Model\UserInState|null $inState inState
     *
     * @return self
     */
    public function setInState($inState)
    {
        if (is_null($inState)) {
            throw new \InvalidArgumentException('non-nullable inState cannot be null');
        }
        $this->container['inState'] = $inState;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName The last name of a user
     *
     * @return self
     */
    public function setLastName($lastName)
    {
        if (is_null($lastName)) {
            array_push($this->openAPINullablesSetToNull, 'lastName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets livingStatus
     *
     * @return string|null
     */
    public function getLivingStatus()
    {
        return $this->container['livingStatus'];
    }

    /**
     * Sets livingStatus
     *
     * @param string|null $livingStatus The living status of a user. Valid values are Single, Married, Separated, Divorced, Widowed, Partner.
     *
     * @return self
     */
    public function setLivingStatus($livingStatus)
    {
        if (is_null($livingStatus)) {
            array_push($this->openAPINullablesSetToNull, 'livingStatus');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('livingStatus', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['livingStatus'] = $livingStatus;

        return $this;
    }

    /**
     * Gets locker
     *
     * @return \SKY\School\Model\UserLocker|null
     */
    public function getLocker()
    {
        return $this->container['locker'];
    }

    /**
     * Sets locker
     *
     * @param \SKY\School\Model\UserLocker|null $locker locker
     *
     * @return self
     */
    public function setLocker($locker)
    {
        if (is_null($locker)) {
            throw new \InvalidArgumentException('non-nullable locker cannot be null');
        }
        $this->container['locker'] = $locker;

        return $this;
    }

    /**
     * Gets lost
     *
     * @return bool|null
     */
    public function getLost()
    {
        return $this->container['lost'];
    }

    /**
     * Sets lost
     *
     * @param bool|null $lost Set to true to mark user as being lost
     *
     * @return self
     */
    public function setLost($lost)
    {
        if (is_null($lost)) {
            throw new \InvalidArgumentException('non-nullable lost cannot be null');
        }
        $this->container['lost'] = $lost;

        return $this;
    }

    /**
     * Gets maidenName
     *
     * @return string|null
     */
    public function getMaidenName()
    {
        return $this->container['maidenName'];
    }

    /**
     * Sets maidenName
     *
     * @param string|null $maidenName The maiden name of a user
     *
     * @return self
     */
    public function setMaidenName($maidenName)
    {
        if (is_null($maidenName)) {
            array_push($this->openAPINullablesSetToNull, 'maidenName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maidenName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maidenName'] = $maidenName;

        return $this;
    }

    /**
     * Gets mailbox
     *
     * @return \SKY\School\Model\UserMailbox|null
     */
    public function getMailbox()
    {
        return $this->container['mailbox'];
    }

    /**
     * Sets mailbox
     *
     * @param \SKY\School\Model\UserMailbox|null $mailbox mailbox
     *
     * @return self
     */
    public function setMailbox($mailbox)
    {
        if (is_null($mailbox)) {
            throw new \InvalidArgumentException('non-nullable mailbox cannot be null');
        }
        $this->container['mailbox'] = $mailbox;

        return $this;
    }

    /**
     * Gets middleName
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middleName'];
    }

    /**
     * Sets middleName
     *
     * @param string|null $middleName The middle name of a user
     *
     * @return self
     */
    public function setMiddleName($middleName)
    {
        if (is_null($middleName)) {
            array_push($this->openAPINullablesSetToNull, 'middleName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('middleName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['middleName'] = $middleName;

        return $this;
    }

    /**
     * Gets nickName
     *
     * @return string|null
     */
    public function getNickName()
    {
        return $this->container['nickName'];
    }

    /**
     * Sets nickName
     *
     * @param string|null $nickName The nickname of a user  <b>This field will be deprecated after 90 days.</b>
     *
     * @return self
     */
    public function setNickName($nickName)
    {
        if (is_null($nickName)) {
            array_push($this->openAPINullablesSetToNull, 'nickName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nickName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nickName'] = $nickName;

        return $this;
    }

    /**
     * Gets passport
     *
     * @return \SKY\School\Model\UserPassport|null
     */
    public function getPassport()
    {
        return $this->container['passport'];
    }

    /**
     * Sets passport
     *
     * @param \SKY\School\Model\UserPassport|null $passport passport
     *
     * @return self
     */
    public function setPassport($passport)
    {
        if (is_null($passport)) {
            throw new \InvalidArgumentException('non-nullable passport cannot be null');
        }
        $this->container['passport'] = $passport;

        return $this;
    }

    /**
     * Gets primaryLanguage
     *
     * @return string|null
     */
    public function getPrimaryLanguage()
    {
        return $this->container['primaryLanguage'];
    }

    /**
     * Sets primaryLanguage
     *
     * @param string|null $primaryLanguage The descriptor or ID of the language. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values.
     *
     * @return self
     */
    public function setPrimaryLanguage($primaryLanguage)
    {
        if (is_null($primaryLanguage)) {
            array_push($this->openAPINullablesSetToNull, 'primaryLanguage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primaryLanguage', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primaryLanguage'] = $primaryLanguage;

        return $this;
    }

    /**
     * Gets preferredName
     *
     * @return string|null
     */
    public function getPreferredName()
    {
        return $this->container['preferredName'];
    }

    /**
     * Sets preferredName
     *
     * @param string|null $preferredName The preferred name of the user
     *
     * @return self
     */
    public function setPreferredName($preferredName)
    {
        if (is_null($preferredName)) {
            array_push($this->openAPINullablesSetToNull, 'preferredName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferredName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferredName'] = $preferredName;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix The prefix of a user
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (is_null($prefix)) {
            array_push($this->openAPINullablesSetToNull, 'prefix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prefix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets pronouns
     *
     * @return string|null
     */
    public function getPronouns()
    {
        return $this->container['pronouns'];
    }

    /**
     * Sets pronouns
     *
     * @param string|null $pronouns The descriptor or ID of the pronouns. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values.
     *
     * @return self
     */
    public function setPronouns($pronouns)
    {
        if (is_null($pronouns)) {
            array_push($this->openAPINullablesSetToNull, 'pronouns');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pronouns', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pronouns'] = $pronouns;

        return $this;
    }

    /**
     * Gets races
     *
     * @return \SKY\School\Model\UserAddRace[]|null
     */
    public function getRaces()
    {
        return $this->container['races'];
    }

    /**
     * Sets races
     *
     * @param \SKY\School\Model\UserAddRace[]|null $races A list of races. Each entry is the descriptor or ID of the race. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values.
     *
     * @return self
     */
    public function setRaces($races)
    {
        if (is_null($races)) {
            array_push($this->openAPINullablesSetToNull, 'races');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('races', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['races'] = $races;

        return $this;
    }

    /**
     * Gets religion
     *
     * @return string|null
     */
    public function getReligion()
    {
        return $this->container['religion'];
    }

    /**
     * Sets religion
     *
     * @param string|null $religion The descriptor or ID of the religion. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values.
     *
     * @return self
     */
    public function setReligion($religion)
    {
        if (is_null($religion)) {
            array_push($this->openAPINullablesSetToNull, 'religion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('religion', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['religion'] = $religion;

        return $this;
    }

    /**
     * Gets schoolProgram
     *
     * @return string|null
     */
    public function getSchoolProgram()
    {
        return $this->container['schoolProgram'];
    }

    /**
     * Sets schoolProgram
     *
     * @param string|null $schoolProgram The descriptor or ID of the school program. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values.
     *
     * @return self
     */
    public function setSchoolProgram($schoolProgram)
    {
        if (is_null($schoolProgram)) {
            array_push($this->openAPINullablesSetToNull, 'schoolProgram');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('schoolProgram', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['schoolProgram'] = $schoolProgram;

        return $this;
    }

    /**
     * Gets stateId
     *
     * @return string|null
     */
    public function getStateId()
    {
        return $this->container['stateId'];
    }

    /**
     * Sets stateId
     *
     * @param string|null $stateId The state assigned ID of the user
     *
     * @return self
     */
    public function setStateId($stateId)
    {
        if (is_null($stateId)) {
            array_push($this->openAPINullablesSetToNull, 'stateId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stateId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stateId'] = $stateId;

        return $this;
    }

    /**
     * Gets studentId
     *
     * @return string|null
     */
    public function getStudentId()
    {
        return $this->container['studentId'];
    }

    /**
     * Sets studentId
     *
     * @param string|null $studentId The school assigned ID of the user
     *
     * @return self
     */
    public function setStudentId($studentId)
    {
        if (is_null($studentId)) {
            array_push($this->openAPINullablesSetToNull, 'studentId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('studentId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['studentId'] = $studentId;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string|null
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string|null $suffix The suffix of a user
     *
     * @return self
     */
    public function setSuffix($suffix)
    {
        if (is_null($suffix)) {
            array_push($this->openAPINullablesSetToNull, 'suffix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suffix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets visa
     *
     * @return \SKY\School\Model\UserVisaAdd|null
     */
    public function getVisa()
    {
        return $this->container['visa'];
    }

    /**
     * Sets visa
     *
     * @param \SKY\School\Model\UserVisaAdd|null $visa visa
     *
     * @return self
     */
    public function setVisa($visa)
    {
        if (is_null($visa)) {
            throw new \InvalidArgumentException('non-nullable visa cannot be null');
        }
        $this->container['visa'] = $visa;

        return $this;
    }

    /**
     * Gets fieldsToDelete
     *
     * @return string[]|null
     */
    public function getFieldsToDelete()
    {
        return $this->container['fieldsToDelete'];
    }

    /**
     * Sets fieldsToDelete
     *
     * @param string[]|null $fieldsToDelete An array of strings representing field names.  Due to an inherent check against deleting data only accessible through the UI, this unusual step is necessary. To delete or clear data from a user field (such as middle_name or living_status), you must include the field in this array. If a field is included in this array, the data for that field will be deleted and this will override any other value set for the field in the request body. Only fields that can be cleared will be processed. Any required fields, Booleans or fields with no blank option will be ignored.  Allowed values: The field name as listed for the request body (e.g. \"middle_name\" or \"living_status\"). Fields within an object will include the object name and the field name separated by a period (e.g. \"passport.number\" or \"locker.number\").
     *
     * @return self
     */
    public function setFieldsToDelete($fieldsToDelete)
    {
        if (is_null($fieldsToDelete)) {
            array_push($this->openAPINullablesSetToNull, 'fieldsToDelete');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fieldsToDelete', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fieldsToDelete'] = $fieldsToDelete;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
