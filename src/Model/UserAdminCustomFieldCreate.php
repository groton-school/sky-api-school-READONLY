<?php
/**
 * UserAdminCustomFieldCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * UserAdminCustomFieldCreate Class Doc Comment
 *
 * @category Class
 * @description Object that describes the custom field to be created
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserAdminCustomFieldCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserAdminCustomFieldCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fieldId' => 'int',
        'dataTypeId' => 'int',
        'intValue' => 'int',
        'textValue' => 'string',
        'decimalValue' => 'float',
        'dateValue' => '\DateTime',
        'bitValue' => 'bool',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fieldId' => 'int32',
        'dataTypeId' => 'int32',
        'intValue' => 'int32',
        'textValue' => null,
        'decimalValue' => 'double',
        'dateValue' => 'date-time',
        'bitValue' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'fieldId' => false,
        'dataTypeId' => false,
        'intValue' => true,
        'textValue' => true,
        'decimalValue' => true,
        'dateValue' => true,
        'bitValue' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fieldId' => 'field_id',
        'dataTypeId' => 'data_type_id',
        'intValue' => 'int_value',
        'textValue' => 'text_value',
        'decimalValue' => 'decimal_value',
        'dateValue' => 'date_value',
        'bitValue' => 'bit_value',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fieldId' => 'setFieldId',
        'dataTypeId' => 'setDataTypeId',
        'intValue' => 'setIntValue',
        'textValue' => 'setTextValue',
        'decimalValue' => 'setDecimalValue',
        'dateValue' => 'setDateValue',
        'bitValue' => 'setBitValue',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fieldId' => 'getFieldId',
        'dataTypeId' => 'getDataTypeId',
        'intValue' => 'getIntValue',
        'textValue' => 'getTextValue',
        'decimalValue' => 'getDecimalValue',
        'dateValue' => 'getDateValue',
        'bitValue' => 'getBitValue',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('fieldId', $data ?? [], null);
        $this->setIfExists('dataTypeId', $data ?? [], null);
        $this->setIfExists('intValue', $data ?? [], null);
        $this->setIfExists('textValue', $data ?? [], null);
        $this->setIfExists('decimalValue', $data ?? [], null);
        $this->setIfExists('dateValue', $data ?? [], null);
        $this->setIfExists('bitValue', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fieldId
     *
     * @return int|null
     */
    public function getFieldId()
    {
        return $this->container['fieldId'];
    }

    /**
     * Sets fieldId
     *
     * @param int|null $fieldId The ID of the custom field to update. This value is returned from <a href=\"https://developer.sky.blackbaud.com/docs/services/school/operations/V1CustomfieldsGet\" target=\"_blank\">Core custom fields</a>.
     *
     * @return self
     */
    public function setFieldId($fieldId)
    {
        if (is_null($fieldId)) {
            throw new \InvalidArgumentException('non-nullable fieldId cannot be null');
        }
        $this->container['fieldId'] = $fieldId;

        return $this;
    }

    /**
     * Gets dataTypeId
     *
     * @return int|null
     */
    public function getDataTypeId()
    {
        return $this->container['dataTypeId'];
    }

    /**
     * Sets dataTypeId
     *
     * @param int|null $dataTypeId The ID of the data type of the custom field. This value is returned from <a href=\"https://developer.sky.blackbaud.com/docs/services/school/operations/V1CustomfieldsGet\" target=\"_blank\">Core custom fields</a>.
     *
     * @return self
     */
    public function setDataTypeId($dataTypeId)
    {
        if (is_null($dataTypeId)) {
            throw new \InvalidArgumentException('non-nullable dataTypeId cannot be null');
        }
        $this->container['dataTypeId'] = $dataTypeId;

        return $this;
    }

    /**
     * Gets intValue
     *
     * @return int|null
     */
    public function getIntValue()
    {
        return $this->container['intValue'];
    }

    /**
     * Sets intValue
     *
     * @param int|null $intValue If the field format is Number, use this property for the value of the custom field. Values must be a whole number (positive or negative).<br />  If the field format is Dropdown or Checkbox List, use this property for the value of the custom field. The value is the table value ID returned from <a href=\"https://developer.sky.blackbaud.com/docs/services/school/operations/V1CustomfieldsGet\" target=\"_blank\">Core custom fields</a>.
     *
     * @return self
     */
    public function setIntValue($intValue)
    {
        if (is_null($intValue)) {
            array_push($this->openAPINullablesSetToNull, 'intValue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('intValue', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['intValue'] = $intValue;

        return $this;
    }

    /**
     * Gets textValue
     *
     * @return string|null
     */
    public function getTextValue()
    {
        return $this->container['textValue'];
    }

    /**
     * Sets textValue
     *
     * @param string|null $textValue If the field format is Text input or Text paragraph, use this property for the value of the custom field.
     *
     * @return self
     */
    public function setTextValue($textValue)
    {
        if (is_null($textValue)) {
            array_push($this->openAPINullablesSetToNull, 'textValue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('textValue', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['textValue'] = $textValue;

        return $this;
    }

    /**
     * Gets decimalValue
     *
     * @return float|null
     */
    public function getDecimalValue()
    {
        return $this->container['decimalValue'];
    }

    /**
     * Sets decimalValue
     *
     * @param float|null $decimalValue If the field format is Currency, use this property for the value of the custom field. Values must be between 0.00 and 99,999,999.99.
     *
     * @return self
     */
    public function setDecimalValue($decimalValue)
    {
        if (is_null($decimalValue)) {
            array_push($this->openAPINullablesSetToNull, 'decimalValue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('decimalValue', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['decimalValue'] = $decimalValue;

        return $this;
    }

    /**
     * Gets dateValue
     *
     * @return \DateTime|null
     */
    public function getDateValue()
    {
        return $this->container['dateValue'];
    }

    /**
     * Sets dateValue
     *
     * @param \DateTime|null $dateValue If field format is Date, use this property for the value of the custom field. Values must be formatted YYYY/MM/DD.
     *
     * @return self
     */
    public function setDateValue($dateValue)
    {
        if (is_null($dateValue)) {
            array_push($this->openAPINullablesSetToNull, 'dateValue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dateValue', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dateValue'] = $dateValue;

        return $this;
    }

    /**
     * Gets bitValue
     *
     * @return bool|null
     */
    public function getBitValue()
    {
        return $this->container['bitValue'];
    }

    /**
     * Sets bitValue
     *
     * @param bool|null $bitValue If field format is Yes/No or Checkbox, use this property for the value of the custom field. Values must be 'true\" or 'false'.
     *
     * @return self
     */
    public function setBitValue($bitValue)
    {
        if (is_null($bitValue)) {
            array_push($this->openAPINullablesSetToNull, 'bitValue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bitValue', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bitValue'] = $bitValue;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
