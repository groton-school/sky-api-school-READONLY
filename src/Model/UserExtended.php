<?php
/**
 * UserExtended
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * UserExtended Class Doc Comment
 *
 * @category Class
 * @description UserExtended Model
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserExtended implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserExtended';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'addresses' => '\SKY\School\Model\AddressExRead[]',
        'abroad' => 'bool',
        'affiliation' => 'string',
        'auditDate' => '\DateTime',
        'birthDate' => '\DateTime',
        'birthPlace' => 'string',
        'boardingOrDay' => 'string',
        'ccEmailActive' => 'bool',
        'chatService' => 'string',
        'citizenship' => 'string',
        'createdDate' => '\DateTime',
        'customFieldEight' => 'string',
        'customFieldFive' => 'string',
        'customFieldFour' => 'string',
        'customFieldNine' => 'string',
        'customFieldOne' => 'string',
        'customFieldSeven' => 'string',
        'customFieldSix' => 'string',
        'customFieldTen' => 'string',
        'customFieldThree' => 'string',
        'customFieldTwo' => 'string',
        'deceased' => 'bool',
        'deceasedDate' => '\DateTime',
        'departDate' => '\DateTime',
        'display' => 'string',
        'education' => '\SKY\School\Model\EducationRead[]',
        'email' => 'string',
        'ccEmail' => 'string',
        'emailActive' => 'bool',
        'enrollDate' => '\DateTime',
        'ethnicity' => 'string',
        'firstName' => 'string',
        'gender' => 'string',
        'genderDescription' => 'string',
        'globalId' => 'int',
        'greeting' => 'string',
        'hostId' => 'string',
        'homeLanguages' => '\SKY\School\Model\HomeLanguageRead[]',
        'isLatinoHispanic' => 'bool',
        'isInternational' => 'bool',
        'isResponsibleSigner' => 'bool',
        'inState' => '\SKY\School\Model\UserInState',
        'international' => 'string',
        'lastModifiedDate' => '\DateTime',
        'lastName' => 'string',
        'lastSyncDate' => '\DateTime',
        'latinoHispanic' => 'string',
        'legacyUserName' => 'string',
        'livingArrangement' => 'string',
        'lost' => 'bool',
        'locker' => '\SKY\School\Model\UserLocker',
        'maidenName' => 'string',
        'mailbox' => '\SKY\School\Model\UserMailbox',
        'middleName' => 'string',
        'miscBio' => 'string',
        'nickName' => 'string',
        'occupations' => '\SKY\School\Model\OccupationRead[]',
        'passport' => '\SKY\School\Model\UserPassport',
        'personalBio' => 'string',
        'personalWebsite' => 'string',
        'phones' => '\SKY\School\Model\PhoneRead[]',
        'prefix' => 'string',
        'preferredName' => 'string',
        'primaryLanguage' => 'string',
        'profilePhoto' => '\SKY\School\Model\UserProfilePhoto',
        'profileUrl' => 'string',
        'pronouns' => 'string',
        'publicBio' => 'string',
        'races' => '\SKY\School\Model\RaceRead[]',
        'relationships' => '\SKY\School\Model\RelationshipRead[]',
        'religion' => 'string',
        'retireDate' => '\DateTime',
        'roles' => '\SKY\School\Model\Role[]',
        'screenName' => 'string',
        'schoolProgram' => 'string',
        'stateId' => 'string',
        'studentId' => 'string',
        'studentInfo' => '\SKY\School\Model\StudentInfo',
        'suffix' => 'string',
        'username' => 'string',
        'visa' => '\SKY\School\Model\UserVisa',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'addresses' => null,
        'abroad' => null,
        'affiliation' => null,
        'auditDate' => 'date-time',
        'birthDate' => 'date-time',
        'birthPlace' => null,
        'boardingOrDay' => null,
        'ccEmailActive' => null,
        'chatService' => null,
        'citizenship' => null,
        'createdDate' => 'date-time',
        'customFieldEight' => null,
        'customFieldFive' => null,
        'customFieldFour' => null,
        'customFieldNine' => null,
        'customFieldOne' => null,
        'customFieldSeven' => null,
        'customFieldSix' => null,
        'customFieldTen' => null,
        'customFieldThree' => null,
        'customFieldTwo' => null,
        'deceased' => null,
        'deceasedDate' => 'date-time',
        'departDate' => 'date-time',
        'display' => null,
        'education' => null,
        'email' => null,
        'ccEmail' => null,
        'emailActive' => null,
        'enrollDate' => 'date-time',
        'ethnicity' => null,
        'firstName' => null,
        'gender' => null,
        'genderDescription' => null,
        'globalId' => 'int32',
        'greeting' => null,
        'hostId' => null,
        'homeLanguages' => null,
        'isLatinoHispanic' => null,
        'isInternational' => null,
        'isResponsibleSigner' => null,
        'inState' => null,
        'international' => null,
        'lastModifiedDate' => 'date-time',
        'lastName' => null,
        'lastSyncDate' => 'date-time',
        'latinoHispanic' => null,
        'legacyUserName' => null,
        'livingArrangement' => null,
        'lost' => null,
        'locker' => null,
        'maidenName' => null,
        'mailbox' => null,
        'middleName' => null,
        'miscBio' => null,
        'nickName' => null,
        'occupations' => null,
        'passport' => null,
        'personalBio' => null,
        'personalWebsite' => null,
        'phones' => null,
        'prefix' => null,
        'preferredName' => null,
        'primaryLanguage' => null,
        'profilePhoto' => null,
        'profileUrl' => null,
        'pronouns' => null,
        'publicBio' => null,
        'races' => null,
        'relationships' => null,
        'religion' => null,
        'retireDate' => 'date-time',
        'roles' => null,
        'screenName' => null,
        'schoolProgram' => null,
        'stateId' => null,
        'studentId' => null,
        'studentInfo' => null,
        'suffix' => null,
        'username' => null,
        'visa' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'addresses' => true,
        'abroad' => false,
        'affiliation' => true,
        'auditDate' => true,
        'birthDate' => true,
        'birthPlace' => true,
        'boardingOrDay' => true,
        'ccEmailActive' => false,
        'chatService' => true,
        'citizenship' => true,
        'createdDate' => true,
        'customFieldEight' => true,
        'customFieldFive' => true,
        'customFieldFour' => true,
        'customFieldNine' => true,
        'customFieldOne' => true,
        'customFieldSeven' => true,
        'customFieldSix' => true,
        'customFieldTen' => true,
        'customFieldThree' => true,
        'customFieldTwo' => true,
        'deceased' => false,
        'deceasedDate' => true,
        'departDate' => true,
        'display' => true,
        'education' => true,
        'email' => true,
        'ccEmail' => true,
        'emailActive' => false,
        'enrollDate' => true,
        'ethnicity' => true,
        'firstName' => true,
        'gender' => true,
        'genderDescription' => true,
        'globalId' => true,
        'greeting' => true,
        'hostId' => true,
        'homeLanguages' => true,
        'isLatinoHispanic' => false,
        'isInternational' => false,
        'isResponsibleSigner' => false,
        'inState' => false,
        'international' => true,
        'lastModifiedDate' => true,
        'lastName' => true,
        'lastSyncDate' => true,
        'latinoHispanic' => true,
        'legacyUserName' => true,
        'livingArrangement' => true,
        'lost' => false,
        'locker' => false,
        'maidenName' => true,
        'mailbox' => false,
        'middleName' => true,
        'miscBio' => true,
        'nickName' => true,
        'occupations' => true,
        'passport' => false,
        'personalBio' => true,
        'personalWebsite' => true,
        'phones' => true,
        'prefix' => true,
        'preferredName' => true,
        'primaryLanguage' => true,
        'profilePhoto' => false,
        'profileUrl' => true,
        'pronouns' => true,
        'publicBio' => true,
        'races' => true,
        'relationships' => true,
        'religion' => true,
        'retireDate' => true,
        'roles' => true,
        'screenName' => true,
        'schoolProgram' => true,
        'stateId' => true,
        'studentId' => true,
        'studentInfo' => false,
        'suffix' => true,
        'username' => true,
        'visa' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'addresses' => 'addresses',
        'abroad' => 'abroad',
        'affiliation' => 'affiliation',
        'auditDate' => 'audit_date',
        'birthDate' => 'birth_date',
        'birthPlace' => 'birth_place',
        'boardingOrDay' => 'boarding_or_day',
        'ccEmailActive' => 'cc_email_active',
        'chatService' => 'chat_service',
        'citizenship' => 'citizenship',
        'createdDate' => 'created_date',
        'customFieldEight' => 'custom_field_eight',
        'customFieldFive' => 'custom_field_five',
        'customFieldFour' => 'custom_field_four',
        'customFieldNine' => 'custom_field_nine',
        'customFieldOne' => 'custom_field_one',
        'customFieldSeven' => 'custom_field_seven',
        'customFieldSix' => 'custom_field_six',
        'customFieldTen' => 'custom_field_ten',
        'customFieldThree' => 'custom_field_three',
        'customFieldTwo' => 'custom_field_two',
        'deceased' => 'deceased',
        'deceasedDate' => 'deceased_date',
        'departDate' => 'depart_date',
        'display' => 'display',
        'education' => 'education',
        'email' => 'email',
        'ccEmail' => 'cc_email',
        'emailActive' => 'email_active',
        'enrollDate' => 'enroll_date',
        'ethnicity' => 'ethnicity',
        'firstName' => 'first_name',
        'gender' => 'gender',
        'genderDescription' => 'gender_description',
        'globalId' => 'global_id',
        'greeting' => 'greeting',
        'hostId' => 'host_id',
        'homeLanguages' => 'home_languages',
        'isLatinoHispanic' => 'is_latino_hispanic',
        'isInternational' => 'is_international',
        'isResponsibleSigner' => 'is_responsible_signer',
        'inState' => 'in_state',
        'international' => 'international',
        'lastModifiedDate' => 'last_modified_date',
        'lastName' => 'last_name',
        'lastSyncDate' => 'last_sync_date',
        'latinoHispanic' => 'latino_hispanic',
        'legacyUserName' => 'legacy_user_name',
        'livingArrangement' => 'living_arrangement',
        'lost' => 'lost',
        'locker' => 'locker',
        'maidenName' => 'maiden_name',
        'mailbox' => 'mailbox',
        'middleName' => 'middle_name',
        'miscBio' => 'misc_bio',
        'nickName' => 'nick_name',
        'occupations' => 'occupations',
        'passport' => 'passport',
        'personalBio' => 'personal_bio',
        'personalWebsite' => 'personal_website',
        'phones' => 'phones',
        'prefix' => 'prefix',
        'preferredName' => 'preferred_name',
        'primaryLanguage' => 'primary_language',
        'profilePhoto' => 'profile_photo',
        'profileUrl' => 'profile_url',
        'pronouns' => 'pronouns',
        'publicBio' => 'public_bio',
        'races' => 'races',
        'relationships' => 'relationships',
        'religion' => 'religion',
        'retireDate' => 'retire_date',
        'roles' => 'roles',
        'screenName' => 'screen_name',
        'schoolProgram' => 'school_program',
        'stateId' => 'state_id',
        'studentId' => 'student_id',
        'studentInfo' => 'student_info',
        'suffix' => 'suffix',
        'username' => 'username',
        'visa' => 'visa',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'addresses' => 'setAddresses',
        'abroad' => 'setAbroad',
        'affiliation' => 'setAffiliation',
        'auditDate' => 'setAuditDate',
        'birthDate' => 'setBirthDate',
        'birthPlace' => 'setBirthPlace',
        'boardingOrDay' => 'setBoardingOrDay',
        'ccEmailActive' => 'setCcEmailActive',
        'chatService' => 'setChatService',
        'citizenship' => 'setCitizenship',
        'createdDate' => 'setCreatedDate',
        'customFieldEight' => 'setCustomFieldEight',
        'customFieldFive' => 'setCustomFieldFive',
        'customFieldFour' => 'setCustomFieldFour',
        'customFieldNine' => 'setCustomFieldNine',
        'customFieldOne' => 'setCustomFieldOne',
        'customFieldSeven' => 'setCustomFieldSeven',
        'customFieldSix' => 'setCustomFieldSix',
        'customFieldTen' => 'setCustomFieldTen',
        'customFieldThree' => 'setCustomFieldThree',
        'customFieldTwo' => 'setCustomFieldTwo',
        'deceased' => 'setDeceased',
        'deceasedDate' => 'setDeceasedDate',
        'departDate' => 'setDepartDate',
        'display' => 'setDisplay',
        'education' => 'setEducation',
        'email' => 'setEmail',
        'ccEmail' => 'setCcEmail',
        'emailActive' => 'setEmailActive',
        'enrollDate' => 'setEnrollDate',
        'ethnicity' => 'setEthnicity',
        'firstName' => 'setFirstName',
        'gender' => 'setGender',
        'genderDescription' => 'setGenderDescription',
        'globalId' => 'setGlobalId',
        'greeting' => 'setGreeting',
        'hostId' => 'setHostId',
        'homeLanguages' => 'setHomeLanguages',
        'isLatinoHispanic' => 'setIsLatinoHispanic',
        'isInternational' => 'setIsInternational',
        'isResponsibleSigner' => 'setIsResponsibleSigner',
        'inState' => 'setInState',
        'international' => 'setInternational',
        'lastModifiedDate' => 'setLastModifiedDate',
        'lastName' => 'setLastName',
        'lastSyncDate' => 'setLastSyncDate',
        'latinoHispanic' => 'setLatinoHispanic',
        'legacyUserName' => 'setLegacyUserName',
        'livingArrangement' => 'setLivingArrangement',
        'lost' => 'setLost',
        'locker' => 'setLocker',
        'maidenName' => 'setMaidenName',
        'mailbox' => 'setMailbox',
        'middleName' => 'setMiddleName',
        'miscBio' => 'setMiscBio',
        'nickName' => 'setNickName',
        'occupations' => 'setOccupations',
        'passport' => 'setPassport',
        'personalBio' => 'setPersonalBio',
        'personalWebsite' => 'setPersonalWebsite',
        'phones' => 'setPhones',
        'prefix' => 'setPrefix',
        'preferredName' => 'setPreferredName',
        'primaryLanguage' => 'setPrimaryLanguage',
        'profilePhoto' => 'setProfilePhoto',
        'profileUrl' => 'setProfileUrl',
        'pronouns' => 'setPronouns',
        'publicBio' => 'setPublicBio',
        'races' => 'setRaces',
        'relationships' => 'setRelationships',
        'religion' => 'setReligion',
        'retireDate' => 'setRetireDate',
        'roles' => 'setRoles',
        'screenName' => 'setScreenName',
        'schoolProgram' => 'setSchoolProgram',
        'stateId' => 'setStateId',
        'studentId' => 'setStudentId',
        'studentInfo' => 'setStudentInfo',
        'suffix' => 'setSuffix',
        'username' => 'setUsername',
        'visa' => 'setVisa',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'addresses' => 'getAddresses',
        'abroad' => 'getAbroad',
        'affiliation' => 'getAffiliation',
        'auditDate' => 'getAuditDate',
        'birthDate' => 'getBirthDate',
        'birthPlace' => 'getBirthPlace',
        'boardingOrDay' => 'getBoardingOrDay',
        'ccEmailActive' => 'getCcEmailActive',
        'chatService' => 'getChatService',
        'citizenship' => 'getCitizenship',
        'createdDate' => 'getCreatedDate',
        'customFieldEight' => 'getCustomFieldEight',
        'customFieldFive' => 'getCustomFieldFive',
        'customFieldFour' => 'getCustomFieldFour',
        'customFieldNine' => 'getCustomFieldNine',
        'customFieldOne' => 'getCustomFieldOne',
        'customFieldSeven' => 'getCustomFieldSeven',
        'customFieldSix' => 'getCustomFieldSix',
        'customFieldTen' => 'getCustomFieldTen',
        'customFieldThree' => 'getCustomFieldThree',
        'customFieldTwo' => 'getCustomFieldTwo',
        'deceased' => 'getDeceased',
        'deceasedDate' => 'getDeceasedDate',
        'departDate' => 'getDepartDate',
        'display' => 'getDisplay',
        'education' => 'getEducation',
        'email' => 'getEmail',
        'ccEmail' => 'getCcEmail',
        'emailActive' => 'getEmailActive',
        'enrollDate' => 'getEnrollDate',
        'ethnicity' => 'getEthnicity',
        'firstName' => 'getFirstName',
        'gender' => 'getGender',
        'genderDescription' => 'getGenderDescription',
        'globalId' => 'getGlobalId',
        'greeting' => 'getGreeting',
        'hostId' => 'getHostId',
        'homeLanguages' => 'getHomeLanguages',
        'isLatinoHispanic' => 'getIsLatinoHispanic',
        'isInternational' => 'getIsInternational',
        'isResponsibleSigner' => 'getIsResponsibleSigner',
        'inState' => 'getInState',
        'international' => 'getInternational',
        'lastModifiedDate' => 'getLastModifiedDate',
        'lastName' => 'getLastName',
        'lastSyncDate' => 'getLastSyncDate',
        'latinoHispanic' => 'getLatinoHispanic',
        'legacyUserName' => 'getLegacyUserName',
        'livingArrangement' => 'getLivingArrangement',
        'lost' => 'getLost',
        'locker' => 'getLocker',
        'maidenName' => 'getMaidenName',
        'mailbox' => 'getMailbox',
        'middleName' => 'getMiddleName',
        'miscBio' => 'getMiscBio',
        'nickName' => 'getNickName',
        'occupations' => 'getOccupations',
        'passport' => 'getPassport',
        'personalBio' => 'getPersonalBio',
        'personalWebsite' => 'getPersonalWebsite',
        'phones' => 'getPhones',
        'prefix' => 'getPrefix',
        'preferredName' => 'getPreferredName',
        'primaryLanguage' => 'getPrimaryLanguage',
        'profilePhoto' => 'getProfilePhoto',
        'profileUrl' => 'getProfileUrl',
        'pronouns' => 'getPronouns',
        'publicBio' => 'getPublicBio',
        'races' => 'getRaces',
        'relationships' => 'getRelationships',
        'religion' => 'getReligion',
        'retireDate' => 'getRetireDate',
        'roles' => 'getRoles',
        'screenName' => 'getScreenName',
        'schoolProgram' => 'getSchoolProgram',
        'stateId' => 'getStateId',
        'studentId' => 'getStudentId',
        'studentInfo' => 'getStudentInfo',
        'suffix' => 'getSuffix',
        'username' => 'getUsername',
        'visa' => 'getVisa',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('addresses', $data ?? [], null);
        $this->setIfExists('abroad', $data ?? [], null);
        $this->setIfExists('affiliation', $data ?? [], null);
        $this->setIfExists('auditDate', $data ?? [], null);
        $this->setIfExists('birthDate', $data ?? [], null);
        $this->setIfExists('birthPlace', $data ?? [], null);
        $this->setIfExists('boardingOrDay', $data ?? [], null);
        $this->setIfExists('ccEmailActive', $data ?? [], null);
        $this->setIfExists('chatService', $data ?? [], null);
        $this->setIfExists('citizenship', $data ?? [], null);
        $this->setIfExists('createdDate', $data ?? [], null);
        $this->setIfExists('customFieldEight', $data ?? [], null);
        $this->setIfExists('customFieldFive', $data ?? [], null);
        $this->setIfExists('customFieldFour', $data ?? [], null);
        $this->setIfExists('customFieldNine', $data ?? [], null);
        $this->setIfExists('customFieldOne', $data ?? [], null);
        $this->setIfExists('customFieldSeven', $data ?? [], null);
        $this->setIfExists('customFieldSix', $data ?? [], null);
        $this->setIfExists('customFieldTen', $data ?? [], null);
        $this->setIfExists('customFieldThree', $data ?? [], null);
        $this->setIfExists('customFieldTwo', $data ?? [], null);
        $this->setIfExists('deceased', $data ?? [], null);
        $this->setIfExists('deceasedDate', $data ?? [], null);
        $this->setIfExists('departDate', $data ?? [], null);
        $this->setIfExists('display', $data ?? [], null);
        $this->setIfExists('education', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('ccEmail', $data ?? [], null);
        $this->setIfExists('emailActive', $data ?? [], null);
        $this->setIfExists('enrollDate', $data ?? [], null);
        $this->setIfExists('ethnicity', $data ?? [], null);
        $this->setIfExists('firstName', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('genderDescription', $data ?? [], null);
        $this->setIfExists('globalId', $data ?? [], null);
        $this->setIfExists('greeting', $data ?? [], null);
        $this->setIfExists('hostId', $data ?? [], null);
        $this->setIfExists('homeLanguages', $data ?? [], null);
        $this->setIfExists('isLatinoHispanic', $data ?? [], null);
        $this->setIfExists('isInternational', $data ?? [], null);
        $this->setIfExists('isResponsibleSigner', $data ?? [], null);
        $this->setIfExists('inState', $data ?? [], null);
        $this->setIfExists('international', $data ?? [], null);
        $this->setIfExists('lastModifiedDate', $data ?? [], null);
        $this->setIfExists('lastName', $data ?? [], null);
        $this->setIfExists('lastSyncDate', $data ?? [], null);
        $this->setIfExists('latinoHispanic', $data ?? [], null);
        $this->setIfExists('legacyUserName', $data ?? [], null);
        $this->setIfExists('livingArrangement', $data ?? [], null);
        $this->setIfExists('lost', $data ?? [], null);
        $this->setIfExists('locker', $data ?? [], null);
        $this->setIfExists('maidenName', $data ?? [], null);
        $this->setIfExists('mailbox', $data ?? [], null);
        $this->setIfExists('middleName', $data ?? [], null);
        $this->setIfExists('miscBio', $data ?? [], null);
        $this->setIfExists('nickName', $data ?? [], null);
        $this->setIfExists('occupations', $data ?? [], null);
        $this->setIfExists('passport', $data ?? [], null);
        $this->setIfExists('personalBio', $data ?? [], null);
        $this->setIfExists('personalWebsite', $data ?? [], null);
        $this->setIfExists('phones', $data ?? [], null);
        $this->setIfExists('prefix', $data ?? [], null);
        $this->setIfExists('preferredName', $data ?? [], null);
        $this->setIfExists('primaryLanguage', $data ?? [], null);
        $this->setIfExists('profilePhoto', $data ?? [], null);
        $this->setIfExists('profileUrl', $data ?? [], null);
        $this->setIfExists('pronouns', $data ?? [], null);
        $this->setIfExists('publicBio', $data ?? [], null);
        $this->setIfExists('races', $data ?? [], null);
        $this->setIfExists('relationships', $data ?? [], null);
        $this->setIfExists('religion', $data ?? [], null);
        $this->setIfExists('retireDate', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('screenName', $data ?? [], null);
        $this->setIfExists('schoolProgram', $data ?? [], null);
        $this->setIfExists('stateId', $data ?? [], null);
        $this->setIfExists('studentId', $data ?? [], null);
        $this->setIfExists('studentInfo', $data ?? [], null);
        $this->setIfExists('suffix', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('visa', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID associated with a user
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \SKY\School\Model\AddressExRead[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \SKY\School\Model\AddressExRead[]|null $addresses List of the user addresses
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        if (is_null($addresses)) {
            array_push($this->openAPINullablesSetToNull, 'addresses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addresses', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets abroad
     *
     * @return bool|null
     */
    public function getAbroad()
    {
        return $this->container['abroad'];
    }

    /**
     * Sets abroad
     *
     * @param bool|null $abroad Returns true if the current user is abroad
     *
     * @return self
     */
    public function setAbroad($abroad)
    {
        if (is_null($abroad)) {
            throw new \InvalidArgumentException('non-nullable abroad cannot be null');
        }
        $this->container['abroad'] = $abroad;

        return $this;
    }

    /**
     * Gets affiliation
     *
     * @return string|null
     */
    public function getAffiliation()
    {
        return $this->container['affiliation'];
    }

    /**
     * Sets affiliation
     *
     * @param string|null $affiliation The affiliation in the user profile
     *
     * @return self
     */
    public function setAffiliation($affiliation)
    {
        if (is_null($affiliation)) {
            array_push($this->openAPINullablesSetToNull, 'affiliation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('affiliation', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['affiliation'] = $affiliation;

        return $this;
    }

    /**
     * Gets auditDate
     *
     * @return \DateTime|null
     */
    public function getAuditDate()
    {
        return $this->container['auditDate'];
    }

    /**
     * Sets auditDate
     *
     * @param \DateTime|null $auditDate The audit date from a user profile; Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setAuditDate($auditDate)
    {
        if (is_null($auditDate)) {
            array_push($this->openAPINullablesSetToNull, 'auditDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('auditDate', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['auditDate'] = $auditDate;

        return $this;
    }

    /**
     * Gets birthDate
     *
     * @return \DateTime|null
     */
    public function getBirthDate()
    {
        return $this->container['birthDate'];
    }

    /**
     * Sets birthDate
     *
     * @param \DateTime|null $birthDate The birth date in the user profile; Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setBirthDate($birthDate)
    {
        if (is_null($birthDate)) {
            array_push($this->openAPINullablesSetToNull, 'birthDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birthDate', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['birthDate'] = $birthDate;

        return $this;
    }

    /**
     * Gets birthPlace
     *
     * @return string|null
     */
    public function getBirthPlace()
    {
        return $this->container['birthPlace'];
    }

    /**
     * Sets birthPlace
     *
     * @param string|null $birthPlace The birth place in the user profile
     *
     * @return self
     */
    public function setBirthPlace($birthPlace)
    {
        if (is_null($birthPlace)) {
            array_push($this->openAPINullablesSetToNull, 'birthPlace');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birthPlace', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['birthPlace'] = $birthPlace;

        return $this;
    }

    /**
     * Gets boardingOrDay
     *
     * @return string|null
     */
    public function getBoardingOrDay()
    {
        return $this->container['boardingOrDay'];
    }

    /**
     * Sets boardingOrDay
     *
     * @param string|null $boardingOrDay The 'Boarding Or Day' status of the user. 'B' for boarding and 'D' for day, or will be a blank string if not set.
     *
     * @return self
     */
    public function setBoardingOrDay($boardingOrDay)
    {
        if (is_null($boardingOrDay)) {
            array_push($this->openAPINullablesSetToNull, 'boardingOrDay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('boardingOrDay', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['boardingOrDay'] = $boardingOrDay;

        return $this;
    }

    /**
     * Gets ccEmailActive
     *
     * @return bool|null
     */
    public function getCcEmailActive()
    {
        return $this->container['ccEmailActive'];
    }

    /**
     * Sets ccEmailActive
     *
     * @param bool|null $ccEmailActive Returns true if the users carbon copy email is active
     *
     * @return self
     */
    public function setCcEmailActive($ccEmailActive)
    {
        if (is_null($ccEmailActive)) {
            throw new \InvalidArgumentException('non-nullable ccEmailActive cannot be null');
        }
        $this->container['ccEmailActive'] = $ccEmailActive;

        return $this;
    }

    /**
     * Gets chatService
     *
     * @return string|null
     */
    public function getChatService()
    {
        return $this->container['chatService'];
    }

    /**
     * Sets chatService
     *
     * @param string|null $chatService The chat service in the user profile
     *
     * @return self
     */
    public function setChatService($chatService)
    {
        if (is_null($chatService)) {
            array_push($this->openAPINullablesSetToNull, 'chatService');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chatService', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['chatService'] = $chatService;

        return $this;
    }

    /**
     * Gets citizenship
     *
     * @return string|null
     */
    public function getCitizenship()
    {
        return $this->container['citizenship'];
    }

    /**
     * Sets citizenship
     *
     * @param string|null $citizenship The citizenship field in the user profile
     *
     * @return self
     */
    public function setCitizenship($citizenship)
    {
        if (is_null($citizenship)) {
            array_push($this->openAPINullablesSetToNull, 'citizenship');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('citizenship', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['citizenship'] = $citizenship;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime|null $createdDate The created date in the user profile
     *
     * @return self
     */
    public function setCreatedDate($createdDate)
    {
        if (is_null($createdDate)) {
            array_push($this->openAPINullablesSetToNull, 'createdDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('createdDate', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets customFieldEight
     *
     * @return string|null
     */
    public function getCustomFieldEight()
    {
        return $this->container['customFieldEight'];
    }

    /**
     * Sets customFieldEight
     *
     * @param string|null $customFieldEight A custom field on the user profile (eight of ten)
     *
     * @return self
     */
    public function setCustomFieldEight($customFieldEight)
    {
        if (is_null($customFieldEight)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldEight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldEight', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldEight'] = $customFieldEight;

        return $this;
    }

    /**
     * Gets customFieldFive
     *
     * @return string|null
     */
    public function getCustomFieldFive()
    {
        return $this->container['customFieldFive'];
    }

    /**
     * Sets customFieldFive
     *
     * @param string|null $customFieldFive A custom field on the user profile (five of ten)
     *
     * @return self
     */
    public function setCustomFieldFive($customFieldFive)
    {
        if (is_null($customFieldFive)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldFive');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldFive', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldFive'] = $customFieldFive;

        return $this;
    }

    /**
     * Gets customFieldFour
     *
     * @return string|null
     */
    public function getCustomFieldFour()
    {
        return $this->container['customFieldFour'];
    }

    /**
     * Sets customFieldFour
     *
     * @param string|null $customFieldFour A custom field on the user profile (four of ten)
     *
     * @return self
     */
    public function setCustomFieldFour($customFieldFour)
    {
        if (is_null($customFieldFour)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldFour');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldFour', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldFour'] = $customFieldFour;

        return $this;
    }

    /**
     * Gets customFieldNine
     *
     * @return string|null
     */
    public function getCustomFieldNine()
    {
        return $this->container['customFieldNine'];
    }

    /**
     * Sets customFieldNine
     *
     * @param string|null $customFieldNine A custom field on the user profile (nine of ten)
     *
     * @return self
     */
    public function setCustomFieldNine($customFieldNine)
    {
        if (is_null($customFieldNine)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldNine');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldNine', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldNine'] = $customFieldNine;

        return $this;
    }

    /**
     * Gets customFieldOne
     *
     * @return string|null
     */
    public function getCustomFieldOne()
    {
        return $this->container['customFieldOne'];
    }

    /**
     * Sets customFieldOne
     *
     * @param string|null $customFieldOne A custom feild on the user profile (one of ten)
     *
     * @return self
     */
    public function setCustomFieldOne($customFieldOne)
    {
        if (is_null($customFieldOne)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldOne');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldOne', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldOne'] = $customFieldOne;

        return $this;
    }

    /**
     * Gets customFieldSeven
     *
     * @return string|null
     */
    public function getCustomFieldSeven()
    {
        return $this->container['customFieldSeven'];
    }

    /**
     * Sets customFieldSeven
     *
     * @param string|null $customFieldSeven A custom field on the user profile (seven of ten)
     *
     * @return self
     */
    public function setCustomFieldSeven($customFieldSeven)
    {
        if (is_null($customFieldSeven)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldSeven');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldSeven', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldSeven'] = $customFieldSeven;

        return $this;
    }

    /**
     * Gets customFieldSix
     *
     * @return string|null
     */
    public function getCustomFieldSix()
    {
        return $this->container['customFieldSix'];
    }

    /**
     * Sets customFieldSix
     *
     * @param string|null $customFieldSix A custom field on the user profile (six of ten)
     *
     * @return self
     */
    public function setCustomFieldSix($customFieldSix)
    {
        if (is_null($customFieldSix)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldSix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldSix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldSix'] = $customFieldSix;

        return $this;
    }

    /**
     * Gets customFieldTen
     *
     * @return string|null
     */
    public function getCustomFieldTen()
    {
        return $this->container['customFieldTen'];
    }

    /**
     * Sets customFieldTen
     *
     * @param string|null $customFieldTen A custom field on the user profile (ten of ten)
     *
     * @return self
     */
    public function setCustomFieldTen($customFieldTen)
    {
        if (is_null($customFieldTen)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldTen');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldTen', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldTen'] = $customFieldTen;

        return $this;
    }

    /**
     * Gets customFieldThree
     *
     * @return string|null
     */
    public function getCustomFieldThree()
    {
        return $this->container['customFieldThree'];
    }

    /**
     * Sets customFieldThree
     *
     * @param string|null $customFieldThree A custom field on the user profile (three of ten)
     *
     * @return self
     */
    public function setCustomFieldThree($customFieldThree)
    {
        if (is_null($customFieldThree)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldThree');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldThree', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldThree'] = $customFieldThree;

        return $this;
    }

    /**
     * Gets customFieldTwo
     *
     * @return string|null
     */
    public function getCustomFieldTwo()
    {
        return $this->container['customFieldTwo'];
    }

    /**
     * Sets customFieldTwo
     *
     * @param string|null $customFieldTwo A custom field on the user profile (two of ten)
     *
     * @return self
     */
    public function setCustomFieldTwo($customFieldTwo)
    {
        if (is_null($customFieldTwo)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldTwo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldTwo', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldTwo'] = $customFieldTwo;

        return $this;
    }

    /**
     * Gets deceased
     *
     * @return bool|null
     */
    public function getDeceased()
    {
        return $this->container['deceased'];
    }

    /**
     * Sets deceased
     *
     * @param bool|null $deceased Set to true if the user is deceased. Allowed value: true, false. Defaults to false.
     *
     * @return self
     */
    public function setDeceased($deceased)
    {
        if (is_null($deceased)) {
            throw new \InvalidArgumentException('non-nullable deceased cannot be null');
        }
        $this->container['deceased'] = $deceased;

        return $this;
    }

    /**
     * Gets deceasedDate
     *
     * @return \DateTime|null
     */
    public function getDeceasedDate()
    {
        return $this->container['deceasedDate'];
    }

    /**
     * Sets deceasedDate
     *
     * @param \DateTime|null $deceasedDate The deceased date in the user profile; Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setDeceasedDate($deceasedDate)
    {
        if (is_null($deceasedDate)) {
            array_push($this->openAPINullablesSetToNull, 'deceasedDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deceasedDate', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deceasedDate'] = $deceasedDate;

        return $this;
    }

    /**
     * Gets departDate
     *
     * @return \DateTime|null
     */
    public function getDepartDate()
    {
        return $this->container['departDate'];
    }

    /**
     * Sets departDate
     *
     * @param \DateTime|null $departDate The depart date from a user profile; Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setDepartDate($departDate)
    {
        if (is_null($departDate)) {
            array_push($this->openAPINullablesSetToNull, 'departDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('departDate', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['departDate'] = $departDate;

        return $this;
    }

    /**
     * Gets display
     *
     * @return string|null
     */
    public function getDisplay()
    {
        return $this->container['display'];
    }

    /**
     * Sets display
     *
     * @param string|null $display Display name field generated from first name, last name, preferred name, and grad year (read only)
     *
     * @return self
     */
    public function setDisplay($display)
    {
        if (is_null($display)) {
            array_push($this->openAPINullablesSetToNull, 'display');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('display', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['display'] = $display;

        return $this;
    }

    /**
     * Gets education
     *
     * @return \SKY\School\Model\EducationRead[]|null
     */
    public function getEducation()
    {
        return $this->container['education'];
    }

    /**
     * Sets education
     *
     * @param \SKY\School\Model\EducationRead[]|null $education List of the user educational institutions
     *
     * @return self
     */
    public function setEducation($education)
    {
        if (is_null($education)) {
            array_push($this->openAPINullablesSetToNull, 'education');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('education', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['education'] = $education;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address of a user
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets ccEmail
     *
     * @return string|null
     */
    public function getCcEmail()
    {
        return $this->container['ccEmail'];
    }

    /**
     * Sets ccEmail
     *
     * @param string|null $ccEmail The cc email address of a user
     *
     * @return self
     */
    public function setCcEmail($ccEmail)
    {
        if (is_null($ccEmail)) {
            array_push($this->openAPINullablesSetToNull, 'ccEmail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ccEmail', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ccEmail'] = $ccEmail;

        return $this;
    }

    /**
     * Gets emailActive
     *
     * @return bool|null
     */
    public function getEmailActive()
    {
        return $this->container['emailActive'];
    }

    /**
     * Sets emailActive
     *
     * @param bool|null $emailActive Returns true if the users e-mail is ok to send to
     *
     * @return self
     */
    public function setEmailActive($emailActive)
    {
        if (is_null($emailActive)) {
            throw new \InvalidArgumentException('non-nullable emailActive cannot be null');
        }
        $this->container['emailActive'] = $emailActive;

        return $this;
    }

    /**
     * Gets enrollDate
     *
     * @return \DateTime|null
     */
    public function getEnrollDate()
    {
        return $this->container['enrollDate'];
    }

    /**
     * Sets enrollDate
     *
     * @param \DateTime|null $enrollDate The enroll date from a user profile. Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setEnrollDate($enrollDate)
    {
        if (is_null($enrollDate)) {
            array_push($this->openAPINullablesSetToNull, 'enrollDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enrollDate', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enrollDate'] = $enrollDate;

        return $this;
    }

    /**
     * Gets ethnicity
     *
     * @return string|null
     */
    public function getEthnicity()
    {
        return $this->container['ethnicity'];
    }

    /**
     * Sets ethnicity
     *
     * @param string|null $ethnicity The ethnicity field from a user profile
     *
     * @return self
     */
    public function setEthnicity($ethnicity)
    {
        if (is_null($ethnicity)) {
            array_push($this->openAPINullablesSetToNull, 'ethnicity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ethnicity', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ethnicity'] = $ethnicity;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName The first name of a user
     *
     * @return self
     */
    public function setFirstName($firstName)
    {
        if (is_null($firstName)) {
            array_push($this->openAPINullablesSetToNull, 'firstName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('firstName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender The gender of the user
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            array_push($this->openAPINullablesSetToNull, 'gender');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets genderDescription
     *
     * @return string|null
     */
    public function getGenderDescription()
    {
        return $this->container['genderDescription'];
    }

    /**
     * Sets genderDescription
     *
     * @param string|null $genderDescription The gender description of the user
     *
     * @return self
     */
    public function setGenderDescription($genderDescription)
    {
        if (is_null($genderDescription)) {
            array_push($this->openAPINullablesSetToNull, 'genderDescription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('genderDescription', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['genderDescription'] = $genderDescription;

        return $this;
    }

    /**
     * Gets globalId
     *
     * @return int|null
     */
    public function getGlobalId()
    {
        return $this->container['globalId'];
    }

    /**
     * Sets globalId
     *
     * @param int|null $globalId Global id associated with user
     *
     * @return self
     */
    public function setGlobalId($globalId)
    {
        if (is_null($globalId)) {
            array_push($this->openAPINullablesSetToNull, 'globalId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('globalId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['globalId'] = $globalId;

        return $this;
    }

    /**
     * Gets greeting
     *
     * @return string|null
     */
    public function getGreeting()
    {
        return $this->container['greeting'];
    }

    /**
     * Sets greeting
     *
     * @param string|null $greeting The greeting in the user profile
     *
     * @return self
     */
    public function setGreeting($greeting)
    {
        if (is_null($greeting)) {
            array_push($this->openAPINullablesSetToNull, 'greeting');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('greeting', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['greeting'] = $greeting;

        return $this;
    }

    /**
     * Gets hostId
     *
     * @return string|null
     */
    public function getHostId()
    {
        return $this->container['hostId'];
    }

    /**
     * Sets hostId
     *
     * @param string|null $hostId The hostId in the user profile
     *
     * @return self
     */
    public function setHostId($hostId)
    {
        if (is_null($hostId)) {
            array_push($this->openAPINullablesSetToNull, 'hostId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hostId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hostId'] = $hostId;

        return $this;
    }

    /**
     * Gets homeLanguages
     *
     * @return \SKY\School\Model\HomeLanguageRead[]|null
     */
    public function getHomeLanguages()
    {
        return $this->container['homeLanguages'];
    }

    /**
     * Sets homeLanguages
     *
     * @param \SKY\School\Model\HomeLanguageRead[]|null $homeLanguages List of user home languages
     *
     * @return self
     */
    public function setHomeLanguages($homeLanguages)
    {
        if (is_null($homeLanguages)) {
            array_push($this->openAPINullablesSetToNull, 'homeLanguages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('homeLanguages', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['homeLanguages'] = $homeLanguages;

        return $this;
    }

    /**
     * Gets isLatinoHispanic
     *
     * @return bool|null
     */
    public function getIsLatinoHispanic()
    {
        return $this->container['isLatinoHispanic'];
    }

    /**
     * Sets isLatinoHispanic
     *
     * @param bool|null $isLatinoHispanic <b>Deprecated</b>: The islatinohispanic in the user profile
     *
     * @return self
     */
    public function setIsLatinoHispanic($isLatinoHispanic)
    {
        if (is_null($isLatinoHispanic)) {
            throw new \InvalidArgumentException('non-nullable isLatinoHispanic cannot be null');
        }
        $this->container['isLatinoHispanic'] = $isLatinoHispanic;

        return $this;
    }

    /**
     * Gets isInternational
     *
     * @return bool|null
     */
    public function getIsInternational()
    {
        return $this->container['isInternational'];
    }

    /**
     * Sets isInternational
     *
     * @param bool|null $isInternational The isinternational in the user profile (will be deprecated 02/15/2024)
     *
     * @return self
     */
    public function setIsInternational($isInternational)
    {
        if (is_null($isInternational)) {
            throw new \InvalidArgumentException('non-nullable isInternational cannot be null');
        }
        $this->container['isInternational'] = $isInternational;

        return $this;
    }

    /**
     * Gets isResponsibleSigner
     *
     * @return bool|null
     */
    public function getIsResponsibleSigner()
    {
        return $this->container['isResponsibleSigner'];
    }

    /**
     * Sets isResponsibleSigner
     *
     * @param bool|null $isResponsibleSigner The isresponsiblesigner in the user profile
     *
     * @return self
     */
    public function setIsResponsibleSigner($isResponsibleSigner)
    {
        if (is_null($isResponsibleSigner)) {
            throw new \InvalidArgumentException('non-nullable isResponsibleSigner cannot be null');
        }
        $this->container['isResponsibleSigner'] = $isResponsibleSigner;

        return $this;
    }

    /**
     * Gets inState
     *
     * @return \SKY\School\Model\UserInState|null
     */
    public function getInState()
    {
        return $this->container['inState'];
    }

    /**
     * Sets inState
     *
     * @param \SKY\School\Model\UserInState|null $inState inState
     *
     * @return self
     */
    public function setInState($inState)
    {
        if (is_null($inState)) {
            throw new \InvalidArgumentException('non-nullable inState cannot be null');
        }
        $this->container['inState'] = $inState;

        return $this;
    }

    /**
     * Gets international
     *
     * @return string|null
     */
    public function getInternational()
    {
        return $this->container['international'];
    }

    /**
     * Sets international
     *
     * @param string|null $international The value the user has selected for Is International. This will return: Yes, No, or No answer.
     *
     * @return self
     */
    public function setInternational($international)
    {
        if (is_null($international)) {
            array_push($this->openAPINullablesSetToNull, 'international');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('international', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['international'] = $international;

        return $this;
    }

    /**
     * Gets lastModifiedDate
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['lastModifiedDate'];
    }

    /**
     * Sets lastModifiedDate
     *
     * @param \DateTime|null $lastModifiedDate The last modified date in the user profile
     *
     * @return self
     */
    public function setLastModifiedDate($lastModifiedDate)
    {
        if (is_null($lastModifiedDate)) {
            array_push($this->openAPINullablesSetToNull, 'lastModifiedDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastModifiedDate', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastModifiedDate'] = $lastModifiedDate;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName The last name of a user
     *
     * @return self
     */
    public function setLastName($lastName)
    {
        if (is_null($lastName)) {
            array_push($this->openAPINullablesSetToNull, 'lastName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets lastSyncDate
     *
     * @return \DateTime|null
     */
    public function getLastSyncDate()
    {
        return $this->container['lastSyncDate'];
    }

    /**
     * Sets lastSyncDate
     *
     * @param \DateTime|null $lastSyncDate The last sync date of a user profile; Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setLastSyncDate($lastSyncDate)
    {
        if (is_null($lastSyncDate)) {
            array_push($this->openAPINullablesSetToNull, 'lastSyncDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastSyncDate', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastSyncDate'] = $lastSyncDate;

        return $this;
    }

    /**
     * Gets latinoHispanic
     *
     * @return string|null
     */
    public function getLatinoHispanic()
    {
        return $this->container['latinoHispanic'];
    }

    /**
     * Sets latinoHispanic
     *
     * @param string|null $latinoHispanic The value the user has selected for Is Latino Hispanic. This will return: Yes, No, or No answer.
     *
     * @return self
     */
    public function setLatinoHispanic($latinoHispanic)
    {
        if (is_null($latinoHispanic)) {
            array_push($this->openAPINullablesSetToNull, 'latinoHispanic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('latinoHispanic', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['latinoHispanic'] = $latinoHispanic;

        return $this;
    }

    /**
     * Gets legacyUserName
     *
     * @return string|null
     */
    public function getLegacyUserName()
    {
        return $this->container['legacyUserName'];
    }

    /**
     * Sets legacyUserName
     *
     * @param string|null $legacyUserName The last sync date of a user profile
     *
     * @return self
     */
    public function setLegacyUserName($legacyUserName)
    {
        if (is_null($legacyUserName)) {
            array_push($this->openAPINullablesSetToNull, 'legacyUserName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legacyUserName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legacyUserName'] = $legacyUserName;

        return $this;
    }

    /**
     * Gets livingArrangement
     *
     * @return string|null
     */
    public function getLivingArrangement()
    {
        return $this->container['livingArrangement'];
    }

    /**
     * Sets livingArrangement
     *
     * @param string|null $livingArrangement The living arrangement in the user profile
     *
     * @return self
     */
    public function setLivingArrangement($livingArrangement)
    {
        if (is_null($livingArrangement)) {
            array_push($this->openAPINullablesSetToNull, 'livingArrangement');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('livingArrangement', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['livingArrangement'] = $livingArrangement;

        return $this;
    }

    /**
     * Gets lost
     *
     * @return bool|null
     */
    public function getLost()
    {
        return $this->container['lost'];
    }

    /**
     * Sets lost
     *
     * @param bool|null $lost Returns true if lost is selected under sensitive information in a personal profile (read only)
     *
     * @return self
     */
    public function setLost($lost)
    {
        if (is_null($lost)) {
            throw new \InvalidArgumentException('non-nullable lost cannot be null');
        }
        $this->container['lost'] = $lost;

        return $this;
    }

    /**
     * Gets locker
     *
     * @return \SKY\School\Model\UserLocker|null
     */
    public function getLocker()
    {
        return $this->container['locker'];
    }

    /**
     * Sets locker
     *
     * @param \SKY\School\Model\UserLocker|null $locker locker
     *
     * @return self
     */
    public function setLocker($locker)
    {
        if (is_null($locker)) {
            throw new \InvalidArgumentException('non-nullable locker cannot be null');
        }
        $this->container['locker'] = $locker;

        return $this;
    }

    /**
     * Gets maidenName
     *
     * @return string|null
     */
    public function getMaidenName()
    {
        return $this->container['maidenName'];
    }

    /**
     * Sets maidenName
     *
     * @param string|null $maidenName The maiden name of a user
     *
     * @return self
     */
    public function setMaidenName($maidenName)
    {
        if (is_null($maidenName)) {
            array_push($this->openAPINullablesSetToNull, 'maidenName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maidenName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maidenName'] = $maidenName;

        return $this;
    }

    /**
     * Gets mailbox
     *
     * @return \SKY\School\Model\UserMailbox|null
     */
    public function getMailbox()
    {
        return $this->container['mailbox'];
    }

    /**
     * Sets mailbox
     *
     * @param \SKY\School\Model\UserMailbox|null $mailbox mailbox
     *
     * @return self
     */
    public function setMailbox($mailbox)
    {
        if (is_null($mailbox)) {
            throw new \InvalidArgumentException('non-nullable mailbox cannot be null');
        }
        $this->container['mailbox'] = $mailbox;

        return $this;
    }

    /**
     * Gets middleName
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middleName'];
    }

    /**
     * Sets middleName
     *
     * @param string|null $middleName The middle name of a user
     *
     * @return self
     */
    public function setMiddleName($middleName)
    {
        if (is_null($middleName)) {
            array_push($this->openAPINullablesSetToNull, 'middleName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('middleName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['middleName'] = $middleName;

        return $this;
    }

    /**
     * Gets miscBio
     *
     * @return string|null
     */
    public function getMiscBio()
    {
        return $this->container['miscBio'];
    }

    /**
     * Sets miscBio
     *
     * @param string|null $miscBio The misc bio from the user profile
     *
     * @return self
     */
    public function setMiscBio($miscBio)
    {
        if (is_null($miscBio)) {
            array_push($this->openAPINullablesSetToNull, 'miscBio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('miscBio', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['miscBio'] = $miscBio;

        return $this;
    }

    /**
     * Gets nickName
     *
     * @return string|null
     */
    public function getNickName()
    {
        return $this->container['nickName'];
    }

    /**
     * Sets nickName
     *
     * @param string|null $nickName The nickname of a user  <b>This field will be deprecated after 90 days.</b>
     *
     * @return self
     */
    public function setNickName($nickName)
    {
        if (is_null($nickName)) {
            array_push($this->openAPINullablesSetToNull, 'nickName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nickName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nickName'] = $nickName;

        return $this;
    }

    /**
     * Gets occupations
     *
     * @return \SKY\School\Model\OccupationRead[]|null
     */
    public function getOccupations()
    {
        return $this->container['occupations'];
    }

    /**
     * Sets occupations
     *
     * @param \SKY\School\Model\OccupationRead[]|null $occupations List of the users occupations
     *
     * @return self
     */
    public function setOccupations($occupations)
    {
        if (is_null($occupations)) {
            array_push($this->openAPINullablesSetToNull, 'occupations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('occupations', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['occupations'] = $occupations;

        return $this;
    }

    /**
     * Gets passport
     *
     * @return \SKY\School\Model\UserPassport|null
     */
    public function getPassport()
    {
        return $this->container['passport'];
    }

    /**
     * Sets passport
     *
     * @param \SKY\School\Model\UserPassport|null $passport passport
     *
     * @return self
     */
    public function setPassport($passport)
    {
        if (is_null($passport)) {
            throw new \InvalidArgumentException('non-nullable passport cannot be null');
        }
        $this->container['passport'] = $passport;

        return $this;
    }

    /**
     * Gets personalBio
     *
     * @return string|null
     */
    public function getPersonalBio()
    {
        return $this->container['personalBio'];
    }

    /**
     * Sets personalBio
     *
     * @param string|null $personalBio The personal bio from the user profile
     *
     * @return self
     */
    public function setPersonalBio($personalBio)
    {
        if (is_null($personalBio)) {
            array_push($this->openAPINullablesSetToNull, 'personalBio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('personalBio', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['personalBio'] = $personalBio;

        return $this;
    }

    /**
     * Gets personalWebsite
     *
     * @return string|null
     */
    public function getPersonalWebsite()
    {
        return $this->container['personalWebsite'];
    }

    /**
     * Sets personalWebsite
     *
     * @param string|null $personalWebsite The personal website in the user profile
     *
     * @return self
     */
    public function setPersonalWebsite($personalWebsite)
    {
        if (is_null($personalWebsite)) {
            array_push($this->openAPINullablesSetToNull, 'personalWebsite');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('personalWebsite', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['personalWebsite'] = $personalWebsite;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return \SKY\School\Model\PhoneRead[]|null
     */
    public function getPhones()
    {
        return $this->container['phones'];
    }

    /**
     * Sets phones
     *
     * @param \SKY\School\Model\PhoneRead[]|null $phones List of the user phone numbers
     *
     * @return self
     */
    public function setPhones($phones)
    {
        if (is_null($phones)) {
            array_push($this->openAPINullablesSetToNull, 'phones');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phones', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix The prefix of a user
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (is_null($prefix)) {
            array_push($this->openAPINullablesSetToNull, 'prefix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prefix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets preferredName
     *
     * @return string|null
     */
    public function getPreferredName()
    {
        return $this->container['preferredName'];
    }

    /**
     * Sets preferredName
     *
     * @param string|null $preferredName The preferred name of the user
     *
     * @return self
     */
    public function setPreferredName($preferredName)
    {
        if (is_null($preferredName)) {
            array_push($this->openAPINullablesSetToNull, 'preferredName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferredName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferredName'] = $preferredName;

        return $this;
    }

    /**
     * Gets primaryLanguage
     *
     * @return string|null
     */
    public function getPrimaryLanguage()
    {
        return $this->container['primaryLanguage'];
    }

    /**
     * Sets primaryLanguage
     *
     * @param string|null $primaryLanguage The primary language for the user profile.
     *
     * @return self
     */
    public function setPrimaryLanguage($primaryLanguage)
    {
        if (is_null($primaryLanguage)) {
            array_push($this->openAPINullablesSetToNull, 'primaryLanguage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primaryLanguage', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primaryLanguage'] = $primaryLanguage;

        return $this;
    }

    /**
     * Gets profilePhoto
     *
     * @return \SKY\School\Model\UserProfilePhoto|null
     */
    public function getProfilePhoto()
    {
        return $this->container['profilePhoto'];
    }

    /**
     * Sets profilePhoto
     *
     * @param \SKY\School\Model\UserProfilePhoto|null $profilePhoto profilePhoto
     *
     * @return self
     */
    public function setProfilePhoto($profilePhoto)
    {
        if (is_null($profilePhoto)) {
            throw new \InvalidArgumentException('non-nullable profilePhoto cannot be null');
        }
        $this->container['profilePhoto'] = $profilePhoto;

        return $this;
    }

    /**
     * Gets profileUrl
     *
     * @return string|null
     */
    public function getProfileUrl()
    {
        return $this->container['profileUrl'];
    }

    /**
     * Sets profileUrl
     *
     * @param string|null $profileUrl The profile url for a user profile
     *
     * @return self
     */
    public function setProfileUrl($profileUrl)
    {
        if (is_null($profileUrl)) {
            array_push($this->openAPINullablesSetToNull, 'profileUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profileUrl', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['profileUrl'] = $profileUrl;

        return $this;
    }

    /**
     * Gets pronouns
     *
     * @return string|null
     */
    public function getPronouns()
    {
        return $this->container['pronouns'];
    }

    /**
     * Sets pronouns
     *
     * @param string|null $pronouns The pronouns of the user.
     *
     * @return self
     */
    public function setPronouns($pronouns)
    {
        if (is_null($pronouns)) {
            array_push($this->openAPINullablesSetToNull, 'pronouns');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pronouns', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pronouns'] = $pronouns;

        return $this;
    }

    /**
     * Gets publicBio
     *
     * @return string|null
     */
    public function getPublicBio()
    {
        return $this->container['publicBio'];
    }

    /**
     * Sets publicBio
     *
     * @param string|null $publicBio The public bio of the user.
     *
     * @return self
     */
    public function setPublicBio($publicBio)
    {
        if (is_null($publicBio)) {
            array_push($this->openAPINullablesSetToNull, 'publicBio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('publicBio', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['publicBio'] = $publicBio;

        return $this;
    }

    /**
     * Gets races
     *
     * @return \SKY\School\Model\RaceRead[]|null
     */
    public function getRaces()
    {
        return $this->container['races'];
    }

    /**
     * Sets races
     *
     * @param \SKY\School\Model\RaceRead[]|null $races List of the races object for the user profile.
     *
     * @return self
     */
    public function setRaces($races)
    {
        if (is_null($races)) {
            array_push($this->openAPINullablesSetToNull, 'races');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('races', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['races'] = $races;

        return $this;
    }

    /**
     * Gets relationships
     *
     * @return \SKY\School\Model\RelationshipRead[]|null
     */
    public function getRelationships()
    {
        return $this->container['relationships'];
    }

    /**
     * Sets relationships
     *
     * @param \SKY\School\Model\RelationshipRead[]|null $relationships List of the user relationships
     *
     * @return self
     */
    public function setRelationships($relationships)
    {
        if (is_null($relationships)) {
            array_push($this->openAPINullablesSetToNull, 'relationships');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('relationships', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['relationships'] = $relationships;

        return $this;
    }

    /**
     * Gets religion
     *
     * @return string|null
     */
    public function getReligion()
    {
        return $this->container['religion'];
    }

    /**
     * Sets religion
     *
     * @param string|null $religion The religion field from a user profile
     *
     * @return self
     */
    public function setReligion($religion)
    {
        if (is_null($religion)) {
            array_push($this->openAPINullablesSetToNull, 'religion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('religion', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['religion'] = $religion;

        return $this;
    }

    /**
     * Gets retireDate
     *
     * @return \DateTime|null
     */
    public function getRetireDate()
    {
        return $this->container['retireDate'];
    }

    /**
     * Sets retireDate
     *
     * @param \DateTime|null $retireDate The retire date in the user profile; Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setRetireDate($retireDate)
    {
        if (is_null($retireDate)) {
            array_push($this->openAPINullablesSetToNull, 'retireDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('retireDate', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['retireDate'] = $retireDate;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return \SKY\School\Model\Role[]|null
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param \SKY\School\Model\Role[]|null $roles List of the user roles
     *
     * @return self
     */
    public function setRoles($roles)
    {
        if (is_null($roles)) {
            array_push($this->openAPINullablesSetToNull, 'roles');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roles', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets screenName
     *
     * @return string|null
     */
    public function getScreenName()
    {
        return $this->container['screenName'];
    }

    /**
     * Sets screenName
     *
     * @param string|null $screenName The screen name in the user profile
     *
     * @return self
     */
    public function setScreenName($screenName)
    {
        if (is_null($screenName)) {
            array_push($this->openAPINullablesSetToNull, 'screenName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('screenName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['screenName'] = $screenName;

        return $this;
    }

    /**
     * Gets schoolProgram
     *
     * @return string|null
     */
    public function getSchoolProgram()
    {
        return $this->container['schoolProgram'];
    }

    /**
     * Sets schoolProgram
     *
     * @param string|null $schoolProgram The school program of the user
     *
     * @return self
     */
    public function setSchoolProgram($schoolProgram)
    {
        if (is_null($schoolProgram)) {
            array_push($this->openAPINullablesSetToNull, 'schoolProgram');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('schoolProgram', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['schoolProgram'] = $schoolProgram;

        return $this;
    }

    /**
     * Gets stateId
     *
     * @return string|null
     */
    public function getStateId()
    {
        return $this->container['stateId'];
    }

    /**
     * Sets stateId
     *
     * @param string|null $stateId The state id of the user
     *
     * @return self
     */
    public function setStateId($stateId)
    {
        if (is_null($stateId)) {
            array_push($this->openAPINullablesSetToNull, 'stateId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stateId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stateId'] = $stateId;

        return $this;
    }

    /**
     * Gets studentId
     *
     * @return string|null
     */
    public function getStudentId()
    {
        return $this->container['studentId'];
    }

    /**
     * Sets studentId
     *
     * @param string|null $studentId Student ID
     *
     * @return self
     */
    public function setStudentId($studentId)
    {
        if (is_null($studentId)) {
            array_push($this->openAPINullablesSetToNull, 'studentId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('studentId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['studentId'] = $studentId;

        return $this;
    }

    /**
     * Gets studentInfo
     *
     * @return \SKY\School\Model\StudentInfo|null
     */
    public function getStudentInfo()
    {
        return $this->container['studentInfo'];
    }

    /**
     * Sets studentInfo
     *
     * @param \SKY\School\Model\StudentInfo|null $studentInfo studentInfo
     *
     * @return self
     */
    public function setStudentInfo($studentInfo)
    {
        if (is_null($studentInfo)) {
            throw new \InvalidArgumentException('non-nullable studentInfo cannot be null');
        }
        $this->container['studentInfo'] = $studentInfo;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string|null
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string|null $suffix The suffix of a user
     *
     * @return self
     */
    public function setSuffix($suffix)
    {
        if (is_null($suffix)) {
            array_push($this->openAPINullablesSetToNull, 'suffix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suffix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username The username used to access the system
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            array_push($this->openAPINullablesSetToNull, 'username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('username', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets visa
     *
     * @return \SKY\School\Model\UserVisa|null
     */
    public function getVisa()
    {
        return $this->container['visa'];
    }

    /**
     * Sets visa
     *
     * @param \SKY\School\Model\UserVisa|null $visa visa
     *
     * @return self
     */
    public function setVisa($visa)
    {
        if (is_null($visa)) {
            throw new \InvalidArgumentException('non-nullable visa cannot be null');
        }
        $this->container['visa'] = $visa;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
