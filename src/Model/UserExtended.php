<?php
/**
 * UserExtended
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * UserExtended Class Doc Comment
 *
 * @category Class
 * @description UserExtended Model
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserExtended implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserExtended';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'addresses' => '\SKY\School\Model\AddressExRead[]',
        'abroad' => 'bool',
        'affiliation' => 'string',
        'audit_date' => '\DateTime',
        'birth_date' => '\DateTime',
        'birth_place' => 'string',
        'boarding_or_day' => 'string',
        'cc_email_active' => 'bool',
        'chat_service' => 'string',
        'citizenship' => 'string',
        'created_date' => '\DateTime',
        'custom_field_eight' => 'string',
        'custom_field_five' => 'string',
        'custom_field_four' => 'string',
        'custom_field_nine' => 'string',
        'custom_field_one' => 'string',
        'custom_field_seven' => 'string',
        'custom_field_six' => 'string',
        'custom_field_ten' => 'string',
        'custom_field_three' => 'string',
        'custom_field_two' => 'string',
        'deceased' => 'bool',
        'deceased_date' => '\DateTime',
        'depart_date' => '\DateTime',
        'display' => 'string',
        'education' => '\SKY\School\Model\EducationRead[]',
        'email' => 'string',
        'cc_email' => 'string',
        'email_active' => 'bool',
        'enroll_date' => '\DateTime',
        'ethnicity' => 'string',
        'first_name' => 'string',
        'gender' => 'string',
        'gender_description' => 'string',
        'global_id' => 'int',
        'greeting' => 'string',
        'host_id' => 'string',
        'home_languages' => '\SKY\School\Model\HomeLanguageRead[]',
        'is_latino_hispanic' => 'bool',
        'is_international' => 'bool',
        'is_responsible_signer' => 'bool',
        'in_state' => '\SKY\School\Model\UserInState',
        'international' => 'string',
        'last_modified_date' => '\DateTime',
        'last_name' => 'string',
        'last_sync_date' => '\DateTime',
        'latino_hispanic' => 'string',
        'legacy_user_name' => 'string',
        'living_arrangement' => 'string',
        'lost' => 'bool',
        'locker' => '\SKY\School\Model\UserLocker',
        'maiden_name' => 'string',
        'mailbox' => '\SKY\School\Model\UserMailbox',
        'middle_name' => 'string',
        'misc_bio' => 'string',
        'nick_name' => 'string',
        'occupations' => '\SKY\School\Model\OccupationRead[]',
        'passport' => '\SKY\School\Model\UserPassport',
        'personal_bio' => 'string',
        'personal_website' => 'string',
        'phones' => '\SKY\School\Model\PhoneRead[]',
        'prefix' => 'string',
        'preferred_name' => 'string',
        'primary_language' => 'string',
        'profile_photo' => '\SKY\School\Model\UserProfilePhoto',
        'profile_url' => 'string',
        'pronouns' => 'string',
        'public_bio' => 'string',
        'races' => '\SKY\School\Model\RaceRead[]',
        'relationships' => '\SKY\School\Model\RelationshipRead[]',
        'religion' => 'string',
        'retire_date' => '\DateTime',
        'roles' => '\SKY\School\Model\Role[]',
        'screen_name' => 'string',
        'school_program' => 'string',
        'state_id' => 'string',
        'student_id' => 'string',
        'student_info' => '\SKY\School\Model\StudentInfo',
        'suffix' => 'string',
        'username' => 'string',
        'visa' => '\SKY\School\Model\UserVisa',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'addresses' => null,
        'abroad' => null,
        'affiliation' => null,
        'audit_date' => 'date-time',
        'birth_date' => 'date-time',
        'birth_place' => null,
        'boarding_or_day' => null,
        'cc_email_active' => null,
        'chat_service' => null,
        'citizenship' => null,
        'created_date' => 'date-time',
        'custom_field_eight' => null,
        'custom_field_five' => null,
        'custom_field_four' => null,
        'custom_field_nine' => null,
        'custom_field_one' => null,
        'custom_field_seven' => null,
        'custom_field_six' => null,
        'custom_field_ten' => null,
        'custom_field_three' => null,
        'custom_field_two' => null,
        'deceased' => null,
        'deceased_date' => 'date-time',
        'depart_date' => 'date-time',
        'display' => null,
        'education' => null,
        'email' => null,
        'cc_email' => null,
        'email_active' => null,
        'enroll_date' => 'date-time',
        'ethnicity' => null,
        'first_name' => null,
        'gender' => null,
        'gender_description' => null,
        'global_id' => 'int32',
        'greeting' => null,
        'host_id' => null,
        'home_languages' => null,
        'is_latino_hispanic' => null,
        'is_international' => null,
        'is_responsible_signer' => null,
        'in_state' => null,
        'international' => null,
        'last_modified_date' => 'date-time',
        'last_name' => null,
        'last_sync_date' => 'date-time',
        'latino_hispanic' => null,
        'legacy_user_name' => null,
        'living_arrangement' => null,
        'lost' => null,
        'locker' => null,
        'maiden_name' => null,
        'mailbox' => null,
        'middle_name' => null,
        'misc_bio' => null,
        'nick_name' => null,
        'occupations' => null,
        'passport' => null,
        'personal_bio' => null,
        'personal_website' => null,
        'phones' => null,
        'prefix' => null,
        'preferred_name' => null,
        'primary_language' => null,
        'profile_photo' => null,
        'profile_url' => null,
        'pronouns' => null,
        'public_bio' => null,
        'races' => null,
        'relationships' => null,
        'religion' => null,
        'retire_date' => 'date-time',
        'roles' => null,
        'screen_name' => null,
        'school_program' => null,
        'state_id' => null,
        'student_id' => null,
        'student_info' => null,
        'suffix' => null,
        'username' => null,
        'visa' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'addresses' => true,
        'abroad' => false,
        'affiliation' => true,
        'audit_date' => true,
        'birth_date' => true,
        'birth_place' => true,
        'boarding_or_day' => true,
        'cc_email_active' => false,
        'chat_service' => true,
        'citizenship' => true,
        'created_date' => true,
        'custom_field_eight' => true,
        'custom_field_five' => true,
        'custom_field_four' => true,
        'custom_field_nine' => true,
        'custom_field_one' => true,
        'custom_field_seven' => true,
        'custom_field_six' => true,
        'custom_field_ten' => true,
        'custom_field_three' => true,
        'custom_field_two' => true,
        'deceased' => false,
        'deceased_date' => true,
        'depart_date' => true,
        'display' => true,
        'education' => true,
        'email' => true,
        'cc_email' => true,
        'email_active' => false,
        'enroll_date' => true,
        'ethnicity' => true,
        'first_name' => true,
        'gender' => true,
        'gender_description' => true,
        'global_id' => true,
        'greeting' => true,
        'host_id' => true,
        'home_languages' => true,
        'is_latino_hispanic' => false,
        'is_international' => false,
        'is_responsible_signer' => false,
        'in_state' => false,
        'international' => true,
        'last_modified_date' => true,
        'last_name' => true,
        'last_sync_date' => true,
        'latino_hispanic' => true,
        'legacy_user_name' => true,
        'living_arrangement' => true,
        'lost' => false,
        'locker' => false,
        'maiden_name' => true,
        'mailbox' => false,
        'middle_name' => true,
        'misc_bio' => true,
        'nick_name' => true,
        'occupations' => true,
        'passport' => false,
        'personal_bio' => true,
        'personal_website' => true,
        'phones' => true,
        'prefix' => true,
        'preferred_name' => true,
        'primary_language' => true,
        'profile_photo' => false,
        'profile_url' => true,
        'pronouns' => true,
        'public_bio' => true,
        'races' => true,
        'relationships' => true,
        'religion' => true,
        'retire_date' => true,
        'roles' => true,
        'screen_name' => true,
        'school_program' => true,
        'state_id' => true,
        'student_id' => true,
        'student_info' => false,
        'suffix' => true,
        'username' => true,
        'visa' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'addresses' => 'addresses',
        'abroad' => 'abroad',
        'affiliation' => 'affiliation',
        'audit_date' => 'audit_date',
        'birth_date' => 'birth_date',
        'birth_place' => 'birth_place',
        'boarding_or_day' => 'boarding_or_day',
        'cc_email_active' => 'cc_email_active',
        'chat_service' => 'chat_service',
        'citizenship' => 'citizenship',
        'created_date' => 'created_date',
        'custom_field_eight' => 'custom_field_eight',
        'custom_field_five' => 'custom_field_five',
        'custom_field_four' => 'custom_field_four',
        'custom_field_nine' => 'custom_field_nine',
        'custom_field_one' => 'custom_field_one',
        'custom_field_seven' => 'custom_field_seven',
        'custom_field_six' => 'custom_field_six',
        'custom_field_ten' => 'custom_field_ten',
        'custom_field_three' => 'custom_field_three',
        'custom_field_two' => 'custom_field_two',
        'deceased' => 'deceased',
        'deceased_date' => 'deceased_date',
        'depart_date' => 'depart_date',
        'display' => 'display',
        'education' => 'education',
        'email' => 'email',
        'cc_email' => 'cc_email',
        'email_active' => 'email_active',
        'enroll_date' => 'enroll_date',
        'ethnicity' => 'ethnicity',
        'first_name' => 'first_name',
        'gender' => 'gender',
        'gender_description' => 'gender_description',
        'global_id' => 'global_id',
        'greeting' => 'greeting',
        'host_id' => 'host_id',
        'home_languages' => 'home_languages',
        'is_latino_hispanic' => 'is_latino_hispanic',
        'is_international' => 'is_international',
        'is_responsible_signer' => 'is_responsible_signer',
        'in_state' => 'in_state',
        'international' => 'international',
        'last_modified_date' => 'last_modified_date',
        'last_name' => 'last_name',
        'last_sync_date' => 'last_sync_date',
        'latino_hispanic' => 'latino_hispanic',
        'legacy_user_name' => 'legacy_user_name',
        'living_arrangement' => 'living_arrangement',
        'lost' => 'lost',
        'locker' => 'locker',
        'maiden_name' => 'maiden_name',
        'mailbox' => 'mailbox',
        'middle_name' => 'middle_name',
        'misc_bio' => 'misc_bio',
        'nick_name' => 'nick_name',
        'occupations' => 'occupations',
        'passport' => 'passport',
        'personal_bio' => 'personal_bio',
        'personal_website' => 'personal_website',
        'phones' => 'phones',
        'prefix' => 'prefix',
        'preferred_name' => 'preferred_name',
        'primary_language' => 'primary_language',
        'profile_photo' => 'profile_photo',
        'profile_url' => 'profile_url',
        'pronouns' => 'pronouns',
        'public_bio' => 'public_bio',
        'races' => 'races',
        'relationships' => 'relationships',
        'religion' => 'religion',
        'retire_date' => 'retire_date',
        'roles' => 'roles',
        'screen_name' => 'screen_name',
        'school_program' => 'school_program',
        'state_id' => 'state_id',
        'student_id' => 'student_id',
        'student_info' => 'student_info',
        'suffix' => 'suffix',
        'username' => 'username',
        'visa' => 'visa',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'addresses' => 'setAddresses',
        'abroad' => 'setAbroad',
        'affiliation' => 'setAffiliation',
        'audit_date' => 'setAuditDate',
        'birth_date' => 'setBirthDate',
        'birth_place' => 'setBirthPlace',
        'boarding_or_day' => 'setBoardingOrDay',
        'cc_email_active' => 'setCcEmailActive',
        'chat_service' => 'setChatService',
        'citizenship' => 'setCitizenship',
        'created_date' => 'setCreatedDate',
        'custom_field_eight' => 'setCustomFieldEight',
        'custom_field_five' => 'setCustomFieldFive',
        'custom_field_four' => 'setCustomFieldFour',
        'custom_field_nine' => 'setCustomFieldNine',
        'custom_field_one' => 'setCustomFieldOne',
        'custom_field_seven' => 'setCustomFieldSeven',
        'custom_field_six' => 'setCustomFieldSix',
        'custom_field_ten' => 'setCustomFieldTen',
        'custom_field_three' => 'setCustomFieldThree',
        'custom_field_two' => 'setCustomFieldTwo',
        'deceased' => 'setDeceased',
        'deceased_date' => 'setDeceasedDate',
        'depart_date' => 'setDepartDate',
        'display' => 'setDisplay',
        'education' => 'setEducation',
        'email' => 'setEmail',
        'cc_email' => 'setCcEmail',
        'email_active' => 'setEmailActive',
        'enroll_date' => 'setEnrollDate',
        'ethnicity' => 'setEthnicity',
        'first_name' => 'setFirstName',
        'gender' => 'setGender',
        'gender_description' => 'setGenderDescription',
        'global_id' => 'setGlobalId',
        'greeting' => 'setGreeting',
        'host_id' => 'setHostId',
        'home_languages' => 'setHomeLanguages',
        'is_latino_hispanic' => 'setIsLatinoHispanic',
        'is_international' => 'setIsInternational',
        'is_responsible_signer' => 'setIsResponsibleSigner',
        'in_state' => 'setInState',
        'international' => 'setInternational',
        'last_modified_date' => 'setLastModifiedDate',
        'last_name' => 'setLastName',
        'last_sync_date' => 'setLastSyncDate',
        'latino_hispanic' => 'setLatinoHispanic',
        'legacy_user_name' => 'setLegacyUserName',
        'living_arrangement' => 'setLivingArrangement',
        'lost' => 'setLost',
        'locker' => 'setLocker',
        'maiden_name' => 'setMaidenName',
        'mailbox' => 'setMailbox',
        'middle_name' => 'setMiddleName',
        'misc_bio' => 'setMiscBio',
        'nick_name' => 'setNickName',
        'occupations' => 'setOccupations',
        'passport' => 'setPassport',
        'personal_bio' => 'setPersonalBio',
        'personal_website' => 'setPersonalWebsite',
        'phones' => 'setPhones',
        'prefix' => 'setPrefix',
        'preferred_name' => 'setPreferredName',
        'primary_language' => 'setPrimaryLanguage',
        'profile_photo' => 'setProfilePhoto',
        'profile_url' => 'setProfileUrl',
        'pronouns' => 'setPronouns',
        'public_bio' => 'setPublicBio',
        'races' => 'setRaces',
        'relationships' => 'setRelationships',
        'religion' => 'setReligion',
        'retire_date' => 'setRetireDate',
        'roles' => 'setRoles',
        'screen_name' => 'setScreenName',
        'school_program' => 'setSchoolProgram',
        'state_id' => 'setStateId',
        'student_id' => 'setStudentId',
        'student_info' => 'setStudentInfo',
        'suffix' => 'setSuffix',
        'username' => 'setUsername',
        'visa' => 'setVisa',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'addresses' => 'getAddresses',
        'abroad' => 'getAbroad',
        'affiliation' => 'getAffiliation',
        'audit_date' => 'getAuditDate',
        'birth_date' => 'getBirthDate',
        'birth_place' => 'getBirthPlace',
        'boarding_or_day' => 'getBoardingOrDay',
        'cc_email_active' => 'getCcEmailActive',
        'chat_service' => 'getChatService',
        'citizenship' => 'getCitizenship',
        'created_date' => 'getCreatedDate',
        'custom_field_eight' => 'getCustomFieldEight',
        'custom_field_five' => 'getCustomFieldFive',
        'custom_field_four' => 'getCustomFieldFour',
        'custom_field_nine' => 'getCustomFieldNine',
        'custom_field_one' => 'getCustomFieldOne',
        'custom_field_seven' => 'getCustomFieldSeven',
        'custom_field_six' => 'getCustomFieldSix',
        'custom_field_ten' => 'getCustomFieldTen',
        'custom_field_three' => 'getCustomFieldThree',
        'custom_field_two' => 'getCustomFieldTwo',
        'deceased' => 'getDeceased',
        'deceased_date' => 'getDeceasedDate',
        'depart_date' => 'getDepartDate',
        'display' => 'getDisplay',
        'education' => 'getEducation',
        'email' => 'getEmail',
        'cc_email' => 'getCcEmail',
        'email_active' => 'getEmailActive',
        'enroll_date' => 'getEnrollDate',
        'ethnicity' => 'getEthnicity',
        'first_name' => 'getFirstName',
        'gender' => 'getGender',
        'gender_description' => 'getGenderDescription',
        'global_id' => 'getGlobalId',
        'greeting' => 'getGreeting',
        'host_id' => 'getHostId',
        'home_languages' => 'getHomeLanguages',
        'is_latino_hispanic' => 'getIsLatinoHispanic',
        'is_international' => 'getIsInternational',
        'is_responsible_signer' => 'getIsResponsibleSigner',
        'in_state' => 'getInState',
        'international' => 'getInternational',
        'last_modified_date' => 'getLastModifiedDate',
        'last_name' => 'getLastName',
        'last_sync_date' => 'getLastSyncDate',
        'latino_hispanic' => 'getLatinoHispanic',
        'legacy_user_name' => 'getLegacyUserName',
        'living_arrangement' => 'getLivingArrangement',
        'lost' => 'getLost',
        'locker' => 'getLocker',
        'maiden_name' => 'getMaidenName',
        'mailbox' => 'getMailbox',
        'middle_name' => 'getMiddleName',
        'misc_bio' => 'getMiscBio',
        'nick_name' => 'getNickName',
        'occupations' => 'getOccupations',
        'passport' => 'getPassport',
        'personal_bio' => 'getPersonalBio',
        'personal_website' => 'getPersonalWebsite',
        'phones' => 'getPhones',
        'prefix' => 'getPrefix',
        'preferred_name' => 'getPreferredName',
        'primary_language' => 'getPrimaryLanguage',
        'profile_photo' => 'getProfilePhoto',
        'profile_url' => 'getProfileUrl',
        'pronouns' => 'getPronouns',
        'public_bio' => 'getPublicBio',
        'races' => 'getRaces',
        'relationships' => 'getRelationships',
        'religion' => 'getReligion',
        'retire_date' => 'getRetireDate',
        'roles' => 'getRoles',
        'screen_name' => 'getScreenName',
        'school_program' => 'getSchoolProgram',
        'state_id' => 'getStateId',
        'student_id' => 'getStudentId',
        'student_info' => 'getStudentInfo',
        'suffix' => 'getSuffix',
        'username' => 'getUsername',
        'visa' => 'getVisa',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('addresses', $data ?? [], null);
        $this->setIfExists('abroad', $data ?? [], null);
        $this->setIfExists('affiliation', $data ?? [], null);
        $this->setIfExists('audit_date', $data ?? [], null);
        $this->setIfExists('birth_date', $data ?? [], null);
        $this->setIfExists('birth_place', $data ?? [], null);
        $this->setIfExists('boarding_or_day', $data ?? [], null);
        $this->setIfExists('cc_email_active', $data ?? [], null);
        $this->setIfExists('chat_service', $data ?? [], null);
        $this->setIfExists('citizenship', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('custom_field_eight', $data ?? [], null);
        $this->setIfExists('custom_field_five', $data ?? [], null);
        $this->setIfExists('custom_field_four', $data ?? [], null);
        $this->setIfExists('custom_field_nine', $data ?? [], null);
        $this->setIfExists('custom_field_one', $data ?? [], null);
        $this->setIfExists('custom_field_seven', $data ?? [], null);
        $this->setIfExists('custom_field_six', $data ?? [], null);
        $this->setIfExists('custom_field_ten', $data ?? [], null);
        $this->setIfExists('custom_field_three', $data ?? [], null);
        $this->setIfExists('custom_field_two', $data ?? [], null);
        $this->setIfExists('deceased', $data ?? [], null);
        $this->setIfExists('deceased_date', $data ?? [], null);
        $this->setIfExists('depart_date', $data ?? [], null);
        $this->setIfExists('display', $data ?? [], null);
        $this->setIfExists('education', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('cc_email', $data ?? [], null);
        $this->setIfExists('email_active', $data ?? [], null);
        $this->setIfExists('enroll_date', $data ?? [], null);
        $this->setIfExists('ethnicity', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('gender_description', $data ?? [], null);
        $this->setIfExists('global_id', $data ?? [], null);
        $this->setIfExists('greeting', $data ?? [], null);
        $this->setIfExists('host_id', $data ?? [], null);
        $this->setIfExists('home_languages', $data ?? [], null);
        $this->setIfExists('is_latino_hispanic', $data ?? [], null);
        $this->setIfExists('is_international', $data ?? [], null);
        $this->setIfExists('is_responsible_signer', $data ?? [], null);
        $this->setIfExists('in_state', $data ?? [], null);
        $this->setIfExists('international', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('last_sync_date', $data ?? [], null);
        $this->setIfExists('latino_hispanic', $data ?? [], null);
        $this->setIfExists('legacy_user_name', $data ?? [], null);
        $this->setIfExists('living_arrangement', $data ?? [], null);
        $this->setIfExists('lost', $data ?? [], null);
        $this->setIfExists('locker', $data ?? [], null);
        $this->setIfExists('maiden_name', $data ?? [], null);
        $this->setIfExists('mailbox', $data ?? [], null);
        $this->setIfExists('middle_name', $data ?? [], null);
        $this->setIfExists('misc_bio', $data ?? [], null);
        $this->setIfExists('nick_name', $data ?? [], null);
        $this->setIfExists('occupations', $data ?? [], null);
        $this->setIfExists('passport', $data ?? [], null);
        $this->setIfExists('personal_bio', $data ?? [], null);
        $this->setIfExists('personal_website', $data ?? [], null);
        $this->setIfExists('phones', $data ?? [], null);
        $this->setIfExists('prefix', $data ?? [], null);
        $this->setIfExists('preferred_name', $data ?? [], null);
        $this->setIfExists('primary_language', $data ?? [], null);
        $this->setIfExists('profile_photo', $data ?? [], null);
        $this->setIfExists('profile_url', $data ?? [], null);
        $this->setIfExists('pronouns', $data ?? [], null);
        $this->setIfExists('public_bio', $data ?? [], null);
        $this->setIfExists('races', $data ?? [], null);
        $this->setIfExists('relationships', $data ?? [], null);
        $this->setIfExists('religion', $data ?? [], null);
        $this->setIfExists('retire_date', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('screen_name', $data ?? [], null);
        $this->setIfExists('school_program', $data ?? [], null);
        $this->setIfExists('state_id', $data ?? [], null);
        $this->setIfExists('student_id', $data ?? [], null);
        $this->setIfExists('student_info', $data ?? [], null);
        $this->setIfExists('suffix', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('visa', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID associated with a user
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \SKY\School\Model\AddressExRead[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \SKY\School\Model\AddressExRead[]|null $addresses List of the user addresses
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        if (is_null($addresses)) {
            array_push($this->openAPINullablesSetToNull, 'addresses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('addresses', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets abroad
     *
     * @return bool|null
     */
    public function getAbroad()
    {
        return $this->container['abroad'];
    }

    /**
     * Sets abroad
     *
     * @param bool|null $abroad Returns true if the current user is abroad
     *
     * @return self
     */
    public function setAbroad($abroad)
    {
        if (is_null($abroad)) {
            throw new \InvalidArgumentException('non-nullable abroad cannot be null');
        }
        $this->container['abroad'] = $abroad;

        return $this;
    }

    /**
     * Gets affiliation
     *
     * @return string|null
     */
    public function getAffiliation()
    {
        return $this->container['affiliation'];
    }

    /**
     * Sets affiliation
     *
     * @param string|null $affiliation The affiliation in the user profile
     *
     * @return self
     */
    public function setAffiliation($affiliation)
    {
        if (is_null($affiliation)) {
            array_push($this->openAPINullablesSetToNull, 'affiliation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('affiliation', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['affiliation'] = $affiliation;

        return $this;
    }

    /**
     * Gets audit_date
     *
     * @return \DateTime|null
     */
    public function getAuditDate()
    {
        return $this->container['audit_date'];
    }

    /**
     * Sets audit_date
     *
     * @param \DateTime|null $audit_date The audit date from a user profile; Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setAuditDate($audit_date)
    {
        if (is_null($audit_date)) {
            array_push($this->openAPINullablesSetToNull, 'audit_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('audit_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['audit_date'] = $audit_date;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return \DateTime|null
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param \DateTime|null $birth_date The birth date in the user profile; Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setBirthDate($birth_date)
    {
        if (is_null($birth_date)) {
            array_push($this->openAPINullablesSetToNull, 'birth_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birth_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets birth_place
     *
     * @return string|null
     */
    public function getBirthPlace()
    {
        return $this->container['birth_place'];
    }

    /**
     * Sets birth_place
     *
     * @param string|null $birth_place The birth place in the user profile
     *
     * @return self
     */
    public function setBirthPlace($birth_place)
    {
        if (is_null($birth_place)) {
            array_push($this->openAPINullablesSetToNull, 'birth_place');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birth_place', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['birth_place'] = $birth_place;

        return $this;
    }

    /**
     * Gets boarding_or_day
     *
     * @return string|null
     */
    public function getBoardingOrDay()
    {
        return $this->container['boarding_or_day'];
    }

    /**
     * Sets boarding_or_day
     *
     * @param string|null $boarding_or_day The 'Boarding Or Day' status of the user. 'B' for boarding and 'D' for day, or will be a blank string if not set.
     *
     * @return self
     */
    public function setBoardingOrDay($boarding_or_day)
    {
        if (is_null($boarding_or_day)) {
            array_push($this->openAPINullablesSetToNull, 'boarding_or_day');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('boarding_or_day', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['boarding_or_day'] = $boarding_or_day;

        return $this;
    }

    /**
     * Gets cc_email_active
     *
     * @return bool|null
     */
    public function getCcEmailActive()
    {
        return $this->container['cc_email_active'];
    }

    /**
     * Sets cc_email_active
     *
     * @param bool|null $cc_email_active Returns true if the users carbon copy email is active
     *
     * @return self
     */
    public function setCcEmailActive($cc_email_active)
    {
        if (is_null($cc_email_active)) {
            throw new \InvalidArgumentException('non-nullable cc_email_active cannot be null');
        }
        $this->container['cc_email_active'] = $cc_email_active;

        return $this;
    }

    /**
     * Gets chat_service
     *
     * @return string|null
     */
    public function getChatService()
    {
        return $this->container['chat_service'];
    }

    /**
     * Sets chat_service
     *
     * @param string|null $chat_service The chat service in the user profile
     *
     * @return self
     */
    public function setChatService($chat_service)
    {
        if (is_null($chat_service)) {
            array_push($this->openAPINullablesSetToNull, 'chat_service');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chat_service', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['chat_service'] = $chat_service;

        return $this;
    }

    /**
     * Gets citizenship
     *
     * @return string|null
     */
    public function getCitizenship()
    {
        return $this->container['citizenship'];
    }

    /**
     * Sets citizenship
     *
     * @param string|null $citizenship The citizenship field in the user profile
     *
     * @return self
     */
    public function setCitizenship($citizenship)
    {
        if (is_null($citizenship)) {
            array_push($this->openAPINullablesSetToNull, 'citizenship');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('citizenship', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['citizenship'] = $citizenship;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime|null $created_date The created date in the user profile
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            array_push($this->openAPINullablesSetToNull, 'created_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets custom_field_eight
     *
     * @return string|null
     */
    public function getCustomFieldEight()
    {
        return $this->container['custom_field_eight'];
    }

    /**
     * Sets custom_field_eight
     *
     * @param string|null $custom_field_eight A custom field on the user profile (eight of ten)
     *
     * @return self
     */
    public function setCustomFieldEight($custom_field_eight)
    {
        if (is_null($custom_field_eight)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_eight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_eight', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_eight'] = $custom_field_eight;

        return $this;
    }

    /**
     * Gets custom_field_five
     *
     * @return string|null
     */
    public function getCustomFieldFive()
    {
        return $this->container['custom_field_five'];
    }

    /**
     * Sets custom_field_five
     *
     * @param string|null $custom_field_five A custom field on the user profile (five of ten)
     *
     * @return self
     */
    public function setCustomFieldFive($custom_field_five)
    {
        if (is_null($custom_field_five)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_five');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_five', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_five'] = $custom_field_five;

        return $this;
    }

    /**
     * Gets custom_field_four
     *
     * @return string|null
     */
    public function getCustomFieldFour()
    {
        return $this->container['custom_field_four'];
    }

    /**
     * Sets custom_field_four
     *
     * @param string|null $custom_field_four A custom field on the user profile (four of ten)
     *
     * @return self
     */
    public function setCustomFieldFour($custom_field_four)
    {
        if (is_null($custom_field_four)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_four');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_four', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_four'] = $custom_field_four;

        return $this;
    }

    /**
     * Gets custom_field_nine
     *
     * @return string|null
     */
    public function getCustomFieldNine()
    {
        return $this->container['custom_field_nine'];
    }

    /**
     * Sets custom_field_nine
     *
     * @param string|null $custom_field_nine A custom field on the user profile (nine of ten)
     *
     * @return self
     */
    public function setCustomFieldNine($custom_field_nine)
    {
        if (is_null($custom_field_nine)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_nine');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_nine', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_nine'] = $custom_field_nine;

        return $this;
    }

    /**
     * Gets custom_field_one
     *
     * @return string|null
     */
    public function getCustomFieldOne()
    {
        return $this->container['custom_field_one'];
    }

    /**
     * Sets custom_field_one
     *
     * @param string|null $custom_field_one A custom feild on the user profile (one of ten)
     *
     * @return self
     */
    public function setCustomFieldOne($custom_field_one)
    {
        if (is_null($custom_field_one)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_one');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_one', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_one'] = $custom_field_one;

        return $this;
    }

    /**
     * Gets custom_field_seven
     *
     * @return string|null
     */
    public function getCustomFieldSeven()
    {
        return $this->container['custom_field_seven'];
    }

    /**
     * Sets custom_field_seven
     *
     * @param string|null $custom_field_seven A custom field on the user profile (seven of ten)
     *
     * @return self
     */
    public function setCustomFieldSeven($custom_field_seven)
    {
        if (is_null($custom_field_seven)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_seven');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_seven', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_seven'] = $custom_field_seven;

        return $this;
    }

    /**
     * Gets custom_field_six
     *
     * @return string|null
     */
    public function getCustomFieldSix()
    {
        return $this->container['custom_field_six'];
    }

    /**
     * Sets custom_field_six
     *
     * @param string|null $custom_field_six A custom field on the user profile (six of ten)
     *
     * @return self
     */
    public function setCustomFieldSix($custom_field_six)
    {
        if (is_null($custom_field_six)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_six');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_six', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_six'] = $custom_field_six;

        return $this;
    }

    /**
     * Gets custom_field_ten
     *
     * @return string|null
     */
    public function getCustomFieldTen()
    {
        return $this->container['custom_field_ten'];
    }

    /**
     * Sets custom_field_ten
     *
     * @param string|null $custom_field_ten A custom field on the user profile (ten of ten)
     *
     * @return self
     */
    public function setCustomFieldTen($custom_field_ten)
    {
        if (is_null($custom_field_ten)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_ten');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_ten', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_ten'] = $custom_field_ten;

        return $this;
    }

    /**
     * Gets custom_field_three
     *
     * @return string|null
     */
    public function getCustomFieldThree()
    {
        return $this->container['custom_field_three'];
    }

    /**
     * Sets custom_field_three
     *
     * @param string|null $custom_field_three A custom field on the user profile (three of ten)
     *
     * @return self
     */
    public function setCustomFieldThree($custom_field_three)
    {
        if (is_null($custom_field_three)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_three');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_three', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_three'] = $custom_field_three;

        return $this;
    }

    /**
     * Gets custom_field_two
     *
     * @return string|null
     */
    public function getCustomFieldTwo()
    {
        return $this->container['custom_field_two'];
    }

    /**
     * Sets custom_field_two
     *
     * @param string|null $custom_field_two A custom field on the user profile (two of ten)
     *
     * @return self
     */
    public function setCustomFieldTwo($custom_field_two)
    {
        if (is_null($custom_field_two)) {
            array_push($this->openAPINullablesSetToNull, 'custom_field_two');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_field_two', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_field_two'] = $custom_field_two;

        return $this;
    }

    /**
     * Gets deceased
     *
     * @return bool|null
     */
    public function getDeceased()
    {
        return $this->container['deceased'];
    }

    /**
     * Sets deceased
     *
     * @param bool|null $deceased Set to true if the user is deceased. Allowed value: true, false. Defaults to false.
     *
     * @return self
     */
    public function setDeceased($deceased)
    {
        if (is_null($deceased)) {
            throw new \InvalidArgumentException('non-nullable deceased cannot be null');
        }
        $this->container['deceased'] = $deceased;

        return $this;
    }

    /**
     * Gets deceased_date
     *
     * @return \DateTime|null
     */
    public function getDeceasedDate()
    {
        return $this->container['deceased_date'];
    }

    /**
     * Sets deceased_date
     *
     * @param \DateTime|null $deceased_date The deceased date in the user profile; Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setDeceasedDate($deceased_date)
    {
        if (is_null($deceased_date)) {
            array_push($this->openAPINullablesSetToNull, 'deceased_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deceased_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deceased_date'] = $deceased_date;

        return $this;
    }

    /**
     * Gets depart_date
     *
     * @return \DateTime|null
     */
    public function getDepartDate()
    {
        return $this->container['depart_date'];
    }

    /**
     * Sets depart_date
     *
     * @param \DateTime|null $depart_date The depart date from a user profile; Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setDepartDate($depart_date)
    {
        if (is_null($depart_date)) {
            array_push($this->openAPINullablesSetToNull, 'depart_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('depart_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['depart_date'] = $depart_date;

        return $this;
    }

    /**
     * Gets display
     *
     * @return string|null
     */
    public function getDisplay()
    {
        return $this->container['display'];
    }

    /**
     * Sets display
     *
     * @param string|null $display Display name field generated from first name, last name, preferred name, and grad year (read only)
     *
     * @return self
     */
    public function setDisplay($display)
    {
        if (is_null($display)) {
            array_push($this->openAPINullablesSetToNull, 'display');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('display', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['display'] = $display;

        return $this;
    }

    /**
     * Gets education
     *
     * @return \SKY\School\Model\EducationRead[]|null
     */
    public function getEducation()
    {
        return $this->container['education'];
    }

    /**
     * Sets education
     *
     * @param \SKY\School\Model\EducationRead[]|null $education List of the user educational institutions
     *
     * @return self
     */
    public function setEducation($education)
    {
        if (is_null($education)) {
            array_push($this->openAPINullablesSetToNull, 'education');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('education', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['education'] = $education;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address of a user
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets cc_email
     *
     * @return string|null
     */
    public function getCcEmail()
    {
        return $this->container['cc_email'];
    }

    /**
     * Sets cc_email
     *
     * @param string|null $cc_email The cc email address of a user
     *
     * @return self
     */
    public function setCcEmail($cc_email)
    {
        if (is_null($cc_email)) {
            array_push($this->openAPINullablesSetToNull, 'cc_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cc_email', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cc_email'] = $cc_email;

        return $this;
    }

    /**
     * Gets email_active
     *
     * @return bool|null
     */
    public function getEmailActive()
    {
        return $this->container['email_active'];
    }

    /**
     * Sets email_active
     *
     * @param bool|null $email_active Returns true if the users e-mail is ok to send to
     *
     * @return self
     */
    public function setEmailActive($email_active)
    {
        if (is_null($email_active)) {
            throw new \InvalidArgumentException('non-nullable email_active cannot be null');
        }
        $this->container['email_active'] = $email_active;

        return $this;
    }

    /**
     * Gets enroll_date
     *
     * @return \DateTime|null
     */
    public function getEnrollDate()
    {
        return $this->container['enroll_date'];
    }

    /**
     * Sets enroll_date
     *
     * @param \DateTime|null $enroll_date The enroll date from a user profile. Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setEnrollDate($enroll_date)
    {
        if (is_null($enroll_date)) {
            array_push($this->openAPINullablesSetToNull, 'enroll_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enroll_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enroll_date'] = $enroll_date;

        return $this;
    }

    /**
     * Gets ethnicity
     *
     * @return string|null
     */
    public function getEthnicity()
    {
        return $this->container['ethnicity'];
    }

    /**
     * Sets ethnicity
     *
     * @param string|null $ethnicity The ethnicity field from a user profile
     *
     * @return self
     */
    public function setEthnicity($ethnicity)
    {
        if (is_null($ethnicity)) {
            array_push($this->openAPINullablesSetToNull, 'ethnicity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ethnicity', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ethnicity'] = $ethnicity;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name The first name of a user
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            array_push($this->openAPINullablesSetToNull, 'first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender The gender of the user
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            array_push($this->openAPINullablesSetToNull, 'gender');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets gender_description
     *
     * @return string|null
     */
    public function getGenderDescription()
    {
        return $this->container['gender_description'];
    }

    /**
     * Sets gender_description
     *
     * @param string|null $gender_description The gender description of the user
     *
     * @return self
     */
    public function setGenderDescription($gender_description)
    {
        if (is_null($gender_description)) {
            array_push($this->openAPINullablesSetToNull, 'gender_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender_description', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gender_description'] = $gender_description;

        return $this;
    }

    /**
     * Gets global_id
     *
     * @return int|null
     */
    public function getGlobalId()
    {
        return $this->container['global_id'];
    }

    /**
     * Sets global_id
     *
     * @param int|null $global_id Global id associated with user
     *
     * @return self
     */
    public function setGlobalId($global_id)
    {
        if (is_null($global_id)) {
            array_push($this->openAPINullablesSetToNull, 'global_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('global_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['global_id'] = $global_id;

        return $this;
    }

    /**
     * Gets greeting
     *
     * @return string|null
     */
    public function getGreeting()
    {
        return $this->container['greeting'];
    }

    /**
     * Sets greeting
     *
     * @param string|null $greeting The greeting in the user profile
     *
     * @return self
     */
    public function setGreeting($greeting)
    {
        if (is_null($greeting)) {
            array_push($this->openAPINullablesSetToNull, 'greeting');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('greeting', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['greeting'] = $greeting;

        return $this;
    }

    /**
     * Gets host_id
     *
     * @return string|null
     */
    public function getHostId()
    {
        return $this->container['host_id'];
    }

    /**
     * Sets host_id
     *
     * @param string|null $host_id The hostId in the user profile
     *
     * @return self
     */
    public function setHostId($host_id)
    {
        if (is_null($host_id)) {
            array_push($this->openAPINullablesSetToNull, 'host_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('host_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['host_id'] = $host_id;

        return $this;
    }

    /**
     * Gets home_languages
     *
     * @return \SKY\School\Model\HomeLanguageRead[]|null
     */
    public function getHomeLanguages()
    {
        return $this->container['home_languages'];
    }

    /**
     * Sets home_languages
     *
     * @param \SKY\School\Model\HomeLanguageRead[]|null $home_languages List of user home languages
     *
     * @return self
     */
    public function setHomeLanguages($home_languages)
    {
        if (is_null($home_languages)) {
            array_push($this->openAPINullablesSetToNull, 'home_languages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('home_languages', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['home_languages'] = $home_languages;

        return $this;
    }

    /**
     * Gets is_latino_hispanic
     *
     * @return bool|null
     */
    public function getIsLatinoHispanic()
    {
        return $this->container['is_latino_hispanic'];
    }

    /**
     * Sets is_latino_hispanic
     *
     * @param bool|null $is_latino_hispanic <b>Deprecated</b>: The islatinohispanic in the user profile
     *
     * @return self
     */
    public function setIsLatinoHispanic($is_latino_hispanic)
    {
        if (is_null($is_latino_hispanic)) {
            throw new \InvalidArgumentException('non-nullable is_latino_hispanic cannot be null');
        }
        $this->container['is_latino_hispanic'] = $is_latino_hispanic;

        return $this;
    }

    /**
     * Gets is_international
     *
     * @return bool|null
     */
    public function getIsInternational()
    {
        return $this->container['is_international'];
    }

    /**
     * Sets is_international
     *
     * @param bool|null $is_international The isinternational in the user profile (will be deprecated 02/15/2024)
     *
     * @return self
     */
    public function setIsInternational($is_international)
    {
        if (is_null($is_international)) {
            throw new \InvalidArgumentException('non-nullable is_international cannot be null');
        }
        $this->container['is_international'] = $is_international;

        return $this;
    }

    /**
     * Gets is_responsible_signer
     *
     * @return bool|null
     */
    public function getIsResponsibleSigner()
    {
        return $this->container['is_responsible_signer'];
    }

    /**
     * Sets is_responsible_signer
     *
     * @param bool|null $is_responsible_signer The isresponsiblesigner in the user profile
     *
     * @return self
     */
    public function setIsResponsibleSigner($is_responsible_signer)
    {
        if (is_null($is_responsible_signer)) {
            throw new \InvalidArgumentException('non-nullable is_responsible_signer cannot be null');
        }
        $this->container['is_responsible_signer'] = $is_responsible_signer;

        return $this;
    }

    /**
     * Gets in_state
     *
     * @return \SKY\School\Model\UserInState|null
     */
    public function getInState()
    {
        return $this->container['in_state'];
    }

    /**
     * Sets in_state
     *
     * @param \SKY\School\Model\UserInState|null $in_state in_state
     *
     * @return self
     */
    public function setInState($in_state)
    {
        if (is_null($in_state)) {
            throw new \InvalidArgumentException('non-nullable in_state cannot be null');
        }
        $this->container['in_state'] = $in_state;

        return $this;
    }

    /**
     * Gets international
     *
     * @return string|null
     */
    public function getInternational()
    {
        return $this->container['international'];
    }

    /**
     * Sets international
     *
     * @param string|null $international The value the user has selected for Is International. This will return: Yes, No, or No answer.
     *
     * @return self
     */
    public function setInternational($international)
    {
        if (is_null($international)) {
            array_push($this->openAPINullablesSetToNull, 'international');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('international', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['international'] = $international;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param \DateTime|null $last_modified_date The last modified date in the user profile
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            array_push($this->openAPINullablesSetToNull, 'last_modified_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_modified_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name The last name of a user
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            array_push($this->openAPINullablesSetToNull, 'last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets last_sync_date
     *
     * @return \DateTime|null
     */
    public function getLastSyncDate()
    {
        return $this->container['last_sync_date'];
    }

    /**
     * Sets last_sync_date
     *
     * @param \DateTime|null $last_sync_date The last sync date of a user profile; Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setLastSyncDate($last_sync_date)
    {
        if (is_null($last_sync_date)) {
            array_push($this->openAPINullablesSetToNull, 'last_sync_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_sync_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_sync_date'] = $last_sync_date;

        return $this;
    }

    /**
     * Gets latino_hispanic
     *
     * @return string|null
     */
    public function getLatinoHispanic()
    {
        return $this->container['latino_hispanic'];
    }

    /**
     * Sets latino_hispanic
     *
     * @param string|null $latino_hispanic The value the user has selected for Is Latino Hispanic. This will return: Yes, No, or No answer.
     *
     * @return self
     */
    public function setLatinoHispanic($latino_hispanic)
    {
        if (is_null($latino_hispanic)) {
            array_push($this->openAPINullablesSetToNull, 'latino_hispanic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('latino_hispanic', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['latino_hispanic'] = $latino_hispanic;

        return $this;
    }

    /**
     * Gets legacy_user_name
     *
     * @return string|null
     */
    public function getLegacyUserName()
    {
        return $this->container['legacy_user_name'];
    }

    /**
     * Sets legacy_user_name
     *
     * @param string|null $legacy_user_name The last sync date of a user profile
     *
     * @return self
     */
    public function setLegacyUserName($legacy_user_name)
    {
        if (is_null($legacy_user_name)) {
            array_push($this->openAPINullablesSetToNull, 'legacy_user_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legacy_user_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legacy_user_name'] = $legacy_user_name;

        return $this;
    }

    /**
     * Gets living_arrangement
     *
     * @return string|null
     */
    public function getLivingArrangement()
    {
        return $this->container['living_arrangement'];
    }

    /**
     * Sets living_arrangement
     *
     * @param string|null $living_arrangement The living arrangement in the user profile
     *
     * @return self
     */
    public function setLivingArrangement($living_arrangement)
    {
        if (is_null($living_arrangement)) {
            array_push($this->openAPINullablesSetToNull, 'living_arrangement');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('living_arrangement', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['living_arrangement'] = $living_arrangement;

        return $this;
    }

    /**
     * Gets lost
     *
     * @return bool|null
     */
    public function getLost()
    {
        return $this->container['lost'];
    }

    /**
     * Sets lost
     *
     * @param bool|null $lost Returns true if lost is selected under sensitive information in a personal profile (read only)
     *
     * @return self
     */
    public function setLost($lost)
    {
        if (is_null($lost)) {
            throw new \InvalidArgumentException('non-nullable lost cannot be null');
        }
        $this->container['lost'] = $lost;

        return $this;
    }

    /**
     * Gets locker
     *
     * @return \SKY\School\Model\UserLocker|null
     */
    public function getLocker()
    {
        return $this->container['locker'];
    }

    /**
     * Sets locker
     *
     * @param \SKY\School\Model\UserLocker|null $locker locker
     *
     * @return self
     */
    public function setLocker($locker)
    {
        if (is_null($locker)) {
            throw new \InvalidArgumentException('non-nullable locker cannot be null');
        }
        $this->container['locker'] = $locker;

        return $this;
    }

    /**
     * Gets maiden_name
     *
     * @return string|null
     */
    public function getMaidenName()
    {
        return $this->container['maiden_name'];
    }

    /**
     * Sets maiden_name
     *
     * @param string|null $maiden_name The maiden name of a user
     *
     * @return self
     */
    public function setMaidenName($maiden_name)
    {
        if (is_null($maiden_name)) {
            array_push($this->openAPINullablesSetToNull, 'maiden_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maiden_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maiden_name'] = $maiden_name;

        return $this;
    }

    /**
     * Gets mailbox
     *
     * @return \SKY\School\Model\UserMailbox|null
     */
    public function getMailbox()
    {
        return $this->container['mailbox'];
    }

    /**
     * Sets mailbox
     *
     * @param \SKY\School\Model\UserMailbox|null $mailbox mailbox
     *
     * @return self
     */
    public function setMailbox($mailbox)
    {
        if (is_null($mailbox)) {
            throw new \InvalidArgumentException('non-nullable mailbox cannot be null');
        }
        $this->container['mailbox'] = $mailbox;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name The middle name of a user
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        if (is_null($middle_name)) {
            array_push($this->openAPINullablesSetToNull, 'middle_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('middle_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets misc_bio
     *
     * @return string|null
     */
    public function getMiscBio()
    {
        return $this->container['misc_bio'];
    }

    /**
     * Sets misc_bio
     *
     * @param string|null $misc_bio The misc bio from the user profile
     *
     * @return self
     */
    public function setMiscBio($misc_bio)
    {
        if (is_null($misc_bio)) {
            array_push($this->openAPINullablesSetToNull, 'misc_bio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('misc_bio', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['misc_bio'] = $misc_bio;

        return $this;
    }

    /**
     * Gets nick_name
     *
     * @return string|null
     */
    public function getNickName()
    {
        return $this->container['nick_name'];
    }

    /**
     * Sets nick_name
     *
     * @param string|null $nick_name The nickname of a user  <b>This field will be deprecated after 90 days.</b>
     *
     * @return self
     */
    public function setNickName($nick_name)
    {
        if (is_null($nick_name)) {
            array_push($this->openAPINullablesSetToNull, 'nick_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nick_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nick_name'] = $nick_name;

        return $this;
    }

    /**
     * Gets occupations
     *
     * @return \SKY\School\Model\OccupationRead[]|null
     */
    public function getOccupations()
    {
        return $this->container['occupations'];
    }

    /**
     * Sets occupations
     *
     * @param \SKY\School\Model\OccupationRead[]|null $occupations List of the users occupations
     *
     * @return self
     */
    public function setOccupations($occupations)
    {
        if (is_null($occupations)) {
            array_push($this->openAPINullablesSetToNull, 'occupations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('occupations', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['occupations'] = $occupations;

        return $this;
    }

    /**
     * Gets passport
     *
     * @return \SKY\School\Model\UserPassport|null
     */
    public function getPassport()
    {
        return $this->container['passport'];
    }

    /**
     * Sets passport
     *
     * @param \SKY\School\Model\UserPassport|null $passport passport
     *
     * @return self
     */
    public function setPassport($passport)
    {
        if (is_null($passport)) {
            throw new \InvalidArgumentException('non-nullable passport cannot be null');
        }
        $this->container['passport'] = $passport;

        return $this;
    }

    /**
     * Gets personal_bio
     *
     * @return string|null
     */
    public function getPersonalBio()
    {
        return $this->container['personal_bio'];
    }

    /**
     * Sets personal_bio
     *
     * @param string|null $personal_bio The personal bio from the user profile
     *
     * @return self
     */
    public function setPersonalBio($personal_bio)
    {
        if (is_null($personal_bio)) {
            array_push($this->openAPINullablesSetToNull, 'personal_bio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('personal_bio', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['personal_bio'] = $personal_bio;

        return $this;
    }

    /**
     * Gets personal_website
     *
     * @return string|null
     */
    public function getPersonalWebsite()
    {
        return $this->container['personal_website'];
    }

    /**
     * Sets personal_website
     *
     * @param string|null $personal_website The personal website in the user profile
     *
     * @return self
     */
    public function setPersonalWebsite($personal_website)
    {
        if (is_null($personal_website)) {
            array_push($this->openAPINullablesSetToNull, 'personal_website');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('personal_website', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['personal_website'] = $personal_website;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return \SKY\School\Model\PhoneRead[]|null
     */
    public function getPhones()
    {
        return $this->container['phones'];
    }

    /**
     * Sets phones
     *
     * @param \SKY\School\Model\PhoneRead[]|null $phones List of the user phone numbers
     *
     * @return self
     */
    public function setPhones($phones)
    {
        if (is_null($phones)) {
            array_push($this->openAPINullablesSetToNull, 'phones');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phones', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix The prefix of a user
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (is_null($prefix)) {
            array_push($this->openAPINullablesSetToNull, 'prefix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prefix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets preferred_name
     *
     * @return string|null
     */
    public function getPreferredName()
    {
        return $this->container['preferred_name'];
    }

    /**
     * Sets preferred_name
     *
     * @param string|null $preferred_name The preferred name of the user
     *
     * @return self
     */
    public function setPreferredName($preferred_name)
    {
        if (is_null($preferred_name)) {
            array_push($this->openAPINullablesSetToNull, 'preferred_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferred_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferred_name'] = $preferred_name;

        return $this;
    }

    /**
     * Gets primary_language
     *
     * @return string|null
     */
    public function getPrimaryLanguage()
    {
        return $this->container['primary_language'];
    }

    /**
     * Sets primary_language
     *
     * @param string|null $primary_language The primary language for the user profile.
     *
     * @return self
     */
    public function setPrimaryLanguage($primary_language)
    {
        if (is_null($primary_language)) {
            array_push($this->openAPINullablesSetToNull, 'primary_language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('primary_language', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['primary_language'] = $primary_language;

        return $this;
    }

    /**
     * Gets profile_photo
     *
     * @return \SKY\School\Model\UserProfilePhoto|null
     */
    public function getProfilePhoto()
    {
        return $this->container['profile_photo'];
    }

    /**
     * Sets profile_photo
     *
     * @param \SKY\School\Model\UserProfilePhoto|null $profile_photo profile_photo
     *
     * @return self
     */
    public function setProfilePhoto($profile_photo)
    {
        if (is_null($profile_photo)) {
            throw new \InvalidArgumentException('non-nullable profile_photo cannot be null');
        }
        $this->container['profile_photo'] = $profile_photo;

        return $this;
    }

    /**
     * Gets profile_url
     *
     * @return string|null
     */
    public function getProfileUrl()
    {
        return $this->container['profile_url'];
    }

    /**
     * Sets profile_url
     *
     * @param string|null $profile_url The profile url for a user profile
     *
     * @return self
     */
    public function setProfileUrl($profile_url)
    {
        if (is_null($profile_url)) {
            array_push($this->openAPINullablesSetToNull, 'profile_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profile_url', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['profile_url'] = $profile_url;

        return $this;
    }

    /**
     * Gets pronouns
     *
     * @return string|null
     */
    public function getPronouns()
    {
        return $this->container['pronouns'];
    }

    /**
     * Sets pronouns
     *
     * @param string|null $pronouns The pronouns of the user.
     *
     * @return self
     */
    public function setPronouns($pronouns)
    {
        if (is_null($pronouns)) {
            array_push($this->openAPINullablesSetToNull, 'pronouns');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pronouns', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pronouns'] = $pronouns;

        return $this;
    }

    /**
     * Gets public_bio
     *
     * @return string|null
     */
    public function getPublicBio()
    {
        return $this->container['public_bio'];
    }

    /**
     * Sets public_bio
     *
     * @param string|null $public_bio The public bio of the user.
     *
     * @return self
     */
    public function setPublicBio($public_bio)
    {
        if (is_null($public_bio)) {
            array_push($this->openAPINullablesSetToNull, 'public_bio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('public_bio', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['public_bio'] = $public_bio;

        return $this;
    }

    /**
     * Gets races
     *
     * @return \SKY\School\Model\RaceRead[]|null
     */
    public function getRaces()
    {
        return $this->container['races'];
    }

    /**
     * Sets races
     *
     * @param \SKY\School\Model\RaceRead[]|null $races List of the races object for the user profile.
     *
     * @return self
     */
    public function setRaces($races)
    {
        if (is_null($races)) {
            array_push($this->openAPINullablesSetToNull, 'races');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('races', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['races'] = $races;

        return $this;
    }

    /**
     * Gets relationships
     *
     * @return \SKY\School\Model\RelationshipRead[]|null
     */
    public function getRelationships()
    {
        return $this->container['relationships'];
    }

    /**
     * Sets relationships
     *
     * @param \SKY\School\Model\RelationshipRead[]|null $relationships List of the user relationships
     *
     * @return self
     */
    public function setRelationships($relationships)
    {
        if (is_null($relationships)) {
            array_push($this->openAPINullablesSetToNull, 'relationships');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('relationships', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['relationships'] = $relationships;

        return $this;
    }

    /**
     * Gets religion
     *
     * @return string|null
     */
    public function getReligion()
    {
        return $this->container['religion'];
    }

    /**
     * Sets religion
     *
     * @param string|null $religion The religion field from a user profile
     *
     * @return self
     */
    public function setReligion($religion)
    {
        if (is_null($religion)) {
            array_push($this->openAPINullablesSetToNull, 'religion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('religion', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['religion'] = $religion;

        return $this;
    }

    /**
     * Gets retire_date
     *
     * @return \DateTime|null
     */
    public function getRetireDate()
    {
        return $this->container['retire_date'];
    }

    /**
     * Sets retire_date
     *
     * @param \DateTime|null $retire_date The retire date in the user profile; Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
     *
     * @return self
     */
    public function setRetireDate($retire_date)
    {
        if (is_null($retire_date)) {
            array_push($this->openAPINullablesSetToNull, 'retire_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('retire_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['retire_date'] = $retire_date;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return \SKY\School\Model\Role[]|null
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param \SKY\School\Model\Role[]|null $roles List of the user roles
     *
     * @return self
     */
    public function setRoles($roles)
    {
        if (is_null($roles)) {
            array_push($this->openAPINullablesSetToNull, 'roles');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roles', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets screen_name
     *
     * @return string|null
     */
    public function getScreenName()
    {
        return $this->container['screen_name'];
    }

    /**
     * Sets screen_name
     *
     * @param string|null $screen_name The screen name in the user profile
     *
     * @return self
     */
    public function setScreenName($screen_name)
    {
        if (is_null($screen_name)) {
            array_push($this->openAPINullablesSetToNull, 'screen_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('screen_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['screen_name'] = $screen_name;

        return $this;
    }

    /**
     * Gets school_program
     *
     * @return string|null
     */
    public function getSchoolProgram()
    {
        return $this->container['school_program'];
    }

    /**
     * Sets school_program
     *
     * @param string|null $school_program The school program of the user
     *
     * @return self
     */
    public function setSchoolProgram($school_program)
    {
        if (is_null($school_program)) {
            array_push($this->openAPINullablesSetToNull, 'school_program');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('school_program', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['school_program'] = $school_program;

        return $this;
    }

    /**
     * Gets state_id
     *
     * @return string|null
     */
    public function getStateId()
    {
        return $this->container['state_id'];
    }

    /**
     * Sets state_id
     *
     * @param string|null $state_id The state id of the user
     *
     * @return self
     */
    public function setStateId($state_id)
    {
        if (is_null($state_id)) {
            array_push($this->openAPINullablesSetToNull, 'state_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['state_id'] = $state_id;

        return $this;
    }

    /**
     * Gets student_id
     *
     * @return string|null
     */
    public function getStudentId()
    {
        return $this->container['student_id'];
    }

    /**
     * Sets student_id
     *
     * @param string|null $student_id Student ID
     *
     * @return self
     */
    public function setStudentId($student_id)
    {
        if (is_null($student_id)) {
            array_push($this->openAPINullablesSetToNull, 'student_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('student_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['student_id'] = $student_id;

        return $this;
    }

    /**
     * Gets student_info
     *
     * @return \SKY\School\Model\StudentInfo|null
     */
    public function getStudentInfo()
    {
        return $this->container['student_info'];
    }

    /**
     * Sets student_info
     *
     * @param \SKY\School\Model\StudentInfo|null $student_info student_info
     *
     * @return self
     */
    public function setStudentInfo($student_info)
    {
        if (is_null($student_info)) {
            throw new \InvalidArgumentException('non-nullable student_info cannot be null');
        }
        $this->container['student_info'] = $student_info;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string|null
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string|null $suffix The suffix of a user
     *
     * @return self
     */
    public function setSuffix($suffix)
    {
        if (is_null($suffix)) {
            array_push($this->openAPINullablesSetToNull, 'suffix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suffix', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username The username used to access the system
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            array_push($this->openAPINullablesSetToNull, 'username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('username', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets visa
     *
     * @return \SKY\School\Model\UserVisa|null
     */
    public function getVisa()
    {
        return $this->container['visa'];
    }

    /**
     * Sets visa
     *
     * @param \SKY\School\Model\UserVisa|null $visa visa
     *
     * @return self
     */
    public function setVisa($visa)
    {
        if (is_null($visa)) {
            throw new \InvalidArgumentException('non-nullable visa cannot be null');
        }
        $this->container['visa'] = $visa;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
