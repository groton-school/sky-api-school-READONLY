<?php
/**
 * ExcusedTypes
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * ExcusedTypes Class Doc Comment
 *
 * @category Class
 * @description
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ExcusedTypes implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ExcusedTypes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'category_description' => 'string',
        'category_id' => 'int',
        'excuse_type_id' => 'int',
        'excuse_description' => 'string',
        'use_in_calculations' => 'bool',
        'excused' => 'string',
        'duration' => 'string',
        'attendance_type' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'category_description' => null,
        'category_id' => 'int32',
        'excuse_type_id' => 'int32',
        'excuse_description' => null,
        'use_in_calculations' => null,
        'excused' => null,
        'duration' => null,
        'attendance_type' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'category_description' => true,
        'category_id' => true,
        'excuse_type_id' => true,
        'excuse_description' => true,
        'use_in_calculations' => true,
        'excused' => true,
        'duration' => true,
        'attendance_type' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category_description' => 'category_description',
        'category_id' => 'category_id',
        'excuse_type_id' => 'excuse_type_id',
        'excuse_description' => 'excuse_description',
        'use_in_calculations' => 'use_in_calculations',
        'excused' => 'excused',
        'duration' => 'duration',
        'attendance_type' => 'attendance_type',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category_description' => 'setCategoryDescription',
        'category_id' => 'setCategoryId',
        'excuse_type_id' => 'setExcuseTypeId',
        'excuse_description' => 'setExcuseDescription',
        'use_in_calculations' => 'setUseInCalculations',
        'excused' => 'setExcused',
        'duration' => 'setDuration',
        'attendance_type' => 'setAttendanceType',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category_description' => 'getCategoryDescription',
        'category_id' => 'getCategoryId',
        'excuse_type_id' => 'getExcuseTypeId',
        'excuse_description' => 'getExcuseDescription',
        'use_in_calculations' => 'getUseInCalculations',
        'excused' => 'getExcused',
        'duration' => 'getDuration',
        'attendance_type' => 'getAttendanceType',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EXCUSED_PRESENT = 'Present';
    public const EXCUSED_EXCUSED = 'Excused';
    public const EXCUSED_UNEXCUSED = 'Unexcused';
    public const DURATION_NA = 'NA';
    public const DURATION_FULL_DAY = 'FullDay';
    public const DURATION_HALF_DAY = 'HalfDay';
    public const ATTENDANCE_TYPE_PRESENT = 'Present';
    public const ATTENDANCE_TYPE_ABSENCE = 'Absence';
    public const ATTENDANCE_TYPE_TARDY = 'Tardy';
    public const ATTENDANCE_TYPE_VIRTUAL = 'Virtual';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExcusedAllowableValues()
    {
        return [
            self::EXCUSED_PRESENT,
            self::EXCUSED_EXCUSED,
            self::EXCUSED_UNEXCUSED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDurationAllowableValues()
    {
        return [
            self::DURATION_NA,
            self::DURATION_FULL_DAY,
            self::DURATION_HALF_DAY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAttendanceTypeAllowableValues()
    {
        return [
            self::ATTENDANCE_TYPE_PRESENT,
            self::ATTENDANCE_TYPE_ABSENCE,
            self::ATTENDANCE_TYPE_TARDY,
            self::ATTENDANCE_TYPE_VIRTUAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('category_description', $data ?? [], null);
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('excuse_type_id', $data ?? [], null);
        $this->setIfExists('excuse_description', $data ?? [], null);
        $this->setIfExists('use_in_calculations', $data ?? [], null);
        $this->setIfExists('excused', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('attendance_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getExcusedAllowableValues();
        if (!is_null($this->container['excused']) && !in_array($this->container['excused'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'excused', must be one of '%s'",
                $this->container['excused'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDurationAllowableValues();
        if (!is_null($this->container['duration']) && !in_array($this->container['duration'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'duration', must be one of '%s'",
                $this->container['duration'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAttendanceTypeAllowableValues();
        if (!is_null($this->container['attendance_type']) && !in_array($this->container['attendance_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'attendance_type', must be one of '%s'",
                $this->container['attendance_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category_description
     *
     * @return string|null
     */
    public function getCategoryDescription()
    {
        return $this->container['category_description'];
    }

    /**
     * Sets category_description
     *
     * @param string|null $category_description The category that the excuse associated with
     *
     * @return self
     */
    public function setCategoryDescription($category_description)
    {
        if (is_null($category_description)) {
            array_push($this->openAPINullablesSetToNull, 'category_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category_description', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['category_description'] = $category_description;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return int|null
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int|null $category_id The ID of category that the excuse associated with
     *
     * @return self
     */
    public function setCategoryId($category_id)
    {
        if (is_null($category_id)) {
            array_push($this->openAPINullablesSetToNull, 'category_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets excuse_type_id
     *
     * @return int|null
     */
    public function getExcuseTypeId()
    {
        return $this->container['excuse_type_id'];
    }

    /**
     * Sets excuse_type_id
     *
     * @param int|null $excuse_type_id The ID of the excuse type
     *
     * @return self
     */
    public function setExcuseTypeId($excuse_type_id)
    {
        if (is_null($excuse_type_id)) {
            array_push($this->openAPINullablesSetToNull, 'excuse_type_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('excuse_type_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['excuse_type_id'] = $excuse_type_id;

        return $this;
    }

    /**
     * Gets excuse_description
     *
     * @return string|null
     */
    public function getExcuseDescription()
    {
        return $this->container['excuse_description'];
    }

    /**
     * Sets excuse_description
     *
     * @param string|null $excuse_description The description of the excuse type
     *
     * @return self
     */
    public function setExcuseDescription($excuse_description)
    {
        if (is_null($excuse_description)) {
            array_push($this->openAPINullablesSetToNull, 'excuse_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('excuse_description', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['excuse_description'] = $excuse_description;

        return $this;
    }

    /**
     * Gets use_in_calculations
     *
     * @return bool|null
     */
    public function getUseInCalculations()
    {
        return $this->container['use_in_calculations'];
    }

    /**
     * Sets use_in_calculations
     *
     * @param bool|null $use_in_calculations The Use In Calculations flag
     *
     * @return self
     */
    public function setUseInCalculations($use_in_calculations)
    {
        if (is_null($use_in_calculations)) {
            array_push($this->openAPINullablesSetToNull, 'use_in_calculations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('use_in_calculations', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['use_in_calculations'] = $use_in_calculations;

        return $this;
    }

    /**
     * Gets excused
     *
     * @return string|null
     */
    public function getExcused()
    {
        return $this->container['excused'];
    }

    /**
     * Sets excused
     *
     * @param string|null $excused The Excused/Unexecused status
     *
     * @return self
     */
    public function setExcused($excused)
    {
        if (is_null($excused)) {
            array_push($this->openAPINullablesSetToNull, 'excused');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('excused', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getExcusedAllowableValues();
        if (!is_null($excused) && !in_array($excused, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'excused', must be one of '%s'",
                    $excused,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['excused'] = $excused;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return string|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param string|null $duration The Full Day/Half day status
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            array_push($this->openAPINullablesSetToNull, 'duration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('duration', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getDurationAllowableValues();
        if (!is_null($duration) && !in_array($duration, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'duration', must be one of '%s'",
                    $duration,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets attendance_type
     *
     * @return string|null
     */
    public function getAttendanceType()
    {
        return $this->container['attendance_type'];
    }

    /**
     * Sets attendance_type
     *
     * @param string|null $attendance_type The attendance type
     *
     * @return self
     */
    public function setAttendanceType($attendance_type)
    {
        if (is_null($attendance_type)) {
            array_push($this->openAPINullablesSetToNull, 'attendance_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('attendance_type', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getAttendanceTypeAllowableValues();
        if (!is_null($attendance_type) && !in_array($attendance_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'attendance_type', must be one of '%s'",
                    $attendance_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['attendance_type'] = $attendance_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
