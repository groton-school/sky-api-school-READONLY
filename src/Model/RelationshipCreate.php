<?php
/**
 * RelationshipCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * RelationshipCreate Class Doc Comment
 *
 * @category Class
 * @description
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RelationshipCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RelationshipCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'relationship_type' => 'string',
        'give_parental_access' => 'bool',
        'list_as_parent' => 'bool',
        'tuition_responsible_signer' => 'bool',
        'left_user' => 'int',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'relationship_type' => null,
        'give_parental_access' => null,
        'list_as_parent' => null,
        'tuition_responsible_signer' => null,
        'left_user' => 'int32',
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'relationship_type' => false,
        'give_parental_access' => true,
        'list_as_parent' => true,
        'tuition_responsible_signer' => true,
        'left_user' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'relationship_type' => 'relationship_type',
        'give_parental_access' => 'give_parental_access',
        'list_as_parent' => 'list_as_parent',
        'tuition_responsible_signer' => 'tuition_responsible_signer',
        'left_user' => 'left_user',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'relationship_type' => 'setRelationshipType',
        'give_parental_access' => 'setGiveParentalAccess',
        'list_as_parent' => 'setListAsParent',
        'tuition_responsible_signer' => 'setTuitionResponsibleSigner',
        'left_user' => 'setLeftUser',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'relationship_type' => 'getRelationshipType',
        'give_parental_access' => 'getGiveParentalAccess',
        'list_as_parent' => 'getListAsParent',
        'tuition_responsible_signer' => 'getTuitionResponsibleSigner',
        'left_user' => 'getLeftUser',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const RELATIONSHIP_TYPE_NOT_SET = 'NOT_SET';
    public const RELATIONSHIP_TYPE_STEP_PARENT_STEP_CHILD = 'StepParent_StepChild';
    public const RELATIONSHIP_TYPE_GR_GRAND_PARENT_GR_GRAND_CHILD = 'GrGrandParent_GrGrandChild';
    public const RELATIONSHIP_TYPE_GUARDIAN_WARD = 'Guardian_Ward';
    public const RELATIONSHIP_TYPE_AUNT_UNCLE_NIECE_NEPHEW = 'AuntUncle_NieceNephew';
    public const RELATIONSHIP_TYPE_GRANDPARENT_GRANDCHILD = 'Grandparent_Grandchild';
    public const RELATIONSHIP_TYPE_PARENT_CHILD = 'Parent_Child';
    public const RELATIONSHIP_TYPE_CUSTODIAN_STUDENT = 'Custodian_Student';
    public const RELATIONSHIP_TYPE_CONSULTANT_STUDENT = 'Consultant_Student';
    public const RELATIONSHIP_TYPE_CARETAKER_CHARGE = 'Caretaker_Charge';
    public const RELATIONSHIP_TYPE_SPOUSE_PARTNER_SPOUSE_PARTNER = 'SpousePartner_SpousePartner';
    public const RELATIONSHIP_TYPE_STEP_SIBLING_STEP_SIBLING = 'StepSibling_StepSibling';
    public const RELATIONSHIP_TYPE_EX_HUSBAND_EX_WIFE = 'ExHusband_ExWife';
    public const RELATIONSHIP_TYPE_ASSOCIATE_ASSOCIATE = 'Associate_Associate';
    public const RELATIONSHIP_TYPE_HALF_SIBLING_HALF_SIBLING = 'HalfSibling_HalfSibling';
    public const RELATIONSHIP_TYPE_HUSBAND_WIFE = 'Husband_Wife';
    public const RELATIONSHIP_TYPE_SPOUSE_SPOUSE = 'Spouse_Spouse';
    public const RELATIONSHIP_TYPE_SIBLING_SIBLING = 'Sibling_Sibling';
    public const RELATIONSHIP_TYPE_COUSIN_COUSIN = 'Cousin_Cousin';
    public const RELATIONSHIP_TYPE_FRIEND_FRIEND = 'Friend_Friend';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRelationshipTypeAllowableValues()
    {
        return [
            self::RELATIONSHIP_TYPE_NOT_SET,
            self::RELATIONSHIP_TYPE_STEP_PARENT_STEP_CHILD,
            self::RELATIONSHIP_TYPE_GR_GRAND_PARENT_GR_GRAND_CHILD,
            self::RELATIONSHIP_TYPE_GUARDIAN_WARD,
            self::RELATIONSHIP_TYPE_AUNT_UNCLE_NIECE_NEPHEW,
            self::RELATIONSHIP_TYPE_GRANDPARENT_GRANDCHILD,
            self::RELATIONSHIP_TYPE_PARENT_CHILD,
            self::RELATIONSHIP_TYPE_CUSTODIAN_STUDENT,
            self::RELATIONSHIP_TYPE_CONSULTANT_STUDENT,
            self::RELATIONSHIP_TYPE_CARETAKER_CHARGE,
            self::RELATIONSHIP_TYPE_SPOUSE_PARTNER_SPOUSE_PARTNER,
            self::RELATIONSHIP_TYPE_STEP_SIBLING_STEP_SIBLING,
            self::RELATIONSHIP_TYPE_EX_HUSBAND_EX_WIFE,
            self::RELATIONSHIP_TYPE_ASSOCIATE_ASSOCIATE,
            self::RELATIONSHIP_TYPE_HALF_SIBLING_HALF_SIBLING,
            self::RELATIONSHIP_TYPE_HUSBAND_WIFE,
            self::RELATIONSHIP_TYPE_SPOUSE_SPOUSE,
            self::RELATIONSHIP_TYPE_SIBLING_SIBLING,
            self::RELATIONSHIP_TYPE_COUSIN_COUSIN,
            self::RELATIONSHIP_TYPE_FRIEND_FRIEND,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('relationship_type', $data ?? [], null);
        $this->setIfExists('give_parental_access', $data ?? [], null);
        $this->setIfExists('list_as_parent', $data ?? [], null);
        $this->setIfExists('tuition_responsible_signer', $data ?? [], null);
        $this->setIfExists('left_user', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['relationship_type'] === null) {
            $invalidProperties[] = "'relationship_type' can't be null";
        }
        $allowedValues = $this->getRelationshipTypeAllowableValues();
        if (!is_null($this->container['relationship_type']) && !in_array($this->container['relationship_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'relationship_type', must be one of '%s'",
                $this->container['relationship_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['left_user'] === null) {
            $invalidProperties[] = "'left_user' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets relationship_type
     *
     * @return string
     */
    public function getRelationshipType()
    {
        return $this->container['relationship_type'];
    }

    /**
     * Sets relationship_type
     *
     * @param string $relationship_type The nature of the relationship; modeled where left_user 'is a' relationship to this individual. Required.
     *
     * @return self
     */
    public function setRelationshipType($relationship_type)
    {
        if (is_null($relationship_type)) {
            throw new \InvalidArgumentException('non-nullable relationship_type cannot be null');
        }
        $allowedValues = $this->getRelationshipTypeAllowableValues();
        if (!in_array($relationship_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'relationship_type', must be one of '%s'",
                    $relationship_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['relationship_type'] = $relationship_type;

        return $this;
    }

    /**
     * Gets give_parental_access
     *
     * @return bool|null
     */
    public function getGiveParentalAccess()
    {
        return $this->container['give_parental_access'];
    }

    /**
     * Sets give_parental_access
     *
     * @param bool|null $give_parental_access Toggles 'Give Parental Access' option.
     *
     * @return self
     */
    public function setGiveParentalAccess($give_parental_access)
    {
        if (is_null($give_parental_access)) {
            array_push($this->openAPINullablesSetToNull, 'give_parental_access');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('give_parental_access', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['give_parental_access'] = $give_parental_access;

        return $this;
    }

    /**
     * Gets list_as_parent
     *
     * @return bool|null
     */
    public function getListAsParent()
    {
        return $this->container['list_as_parent'];
    }

    /**
     * Sets list_as_parent
     *
     * @param bool|null $list_as_parent Toggles 'List as a Parent' option.
     *
     * @return self
     */
    public function setListAsParent($list_as_parent)
    {
        if (is_null($list_as_parent)) {
            array_push($this->openAPINullablesSetToNull, 'list_as_parent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('list_as_parent', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['list_as_parent'] = $list_as_parent;

        return $this;
    }

    /**
     * Gets tuition_responsible_signer
     *
     * @return bool|null
     */
    public function getTuitionResponsibleSigner()
    {
        return $this->container['tuition_responsible_signer'];
    }

    /**
     * Sets tuition_responsible_signer
     *
     * @param bool|null $tuition_responsible_signer Toggles 'Responsible for Signing Contract' option.
     *
     * @return self
     */
    public function setTuitionResponsibleSigner($tuition_responsible_signer)
    {
        if (is_null($tuition_responsible_signer)) {
            array_push($this->openAPINullablesSetToNull, 'tuition_responsible_signer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tuition_responsible_signer', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tuition_responsible_signer'] = $tuition_responsible_signer;

        return $this;
    }

    /**
     * Gets left_user
     *
     * @return int
     */
    public function getLeftUser()
    {
        return $this->container['left_user'];
    }

    /**
     * Sets left_user
     *
     * @param int $left_user ID of the other individual in the relationship with this person
     *
     * @return self
     */
    public function setLeftUser($left_user)
    {
        if (is_null($left_user)) {
            throw new \InvalidArgumentException('non-nullable left_user cannot be null');
        }
        $this->container['left_user'] = $left_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
