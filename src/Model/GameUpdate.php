<?php
/**
 * GameUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * GameUpdate Class Doc Comment
 *
 * @category Class
 * @description
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GameUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GameUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'game_id' => 'int',
        'schedule_type' => 'int',
        'title' => 'string',
        'game_date' => '\DateTime',
        'game_date_end' => '\DateTime',
        'cancel_type' => 'int',
        'home_away_type' => 'int',
        'location_id' => 'int',
        'location_ind' => 'int',
        'dismissal_time' => 'string',
        'departure_time' => 'string',
        'departure_note' => 'string',
        'pickup_time' => 'string',
        'pickup_note' => 'string',
        'league_ind' => 'bool',
        'scrimmage_ind' => 'bool',
        'tournament_ind' => 'bool',
        'invitational_ind' => 'bool',
        'playoff_ind' => 'bool',
        'additional_notes' => 'string',
        'news_id' => 'int',
        'send_notifications' => 'bool',
        'clear_reschedule' => 'bool',
        'skip_validation' => 'bool',
        'transportation' => '\SKY\School\Model\GameTransportation[]',
        'opponents' => '\SKY\School\Model\GameOpponent[]',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'game_id' => 'int32',
        'schedule_type' => 'int32',
        'title' => null,
        'game_date' => 'date-time',
        'game_date_end' => 'date-time',
        'cancel_type' => 'int32',
        'home_away_type' => 'int32',
        'location_id' => 'int32',
        'location_ind' => 'int32',
        'dismissal_time' => null,
        'departure_time' => null,
        'departure_note' => null,
        'pickup_time' => null,
        'pickup_note' => null,
        'league_ind' => null,
        'scrimmage_ind' => null,
        'tournament_ind' => null,
        'invitational_ind' => null,
        'playoff_ind' => null,
        'additional_notes' => null,
        'news_id' => 'int32',
        'send_notifications' => null,
        'clear_reschedule' => null,
        'skip_validation' => null,
        'transportation' => null,
        'opponents' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'game_id' => false,
        'schedule_type' => true,
        'title' => true,
        'game_date' => true,
        'game_date_end' => true,
        'cancel_type' => true,
        'home_away_type' => true,
        'location_id' => true,
        'location_ind' => true,
        'dismissal_time' => true,
        'departure_time' => true,
        'departure_note' => true,
        'pickup_time' => true,
        'pickup_note' => true,
        'league_ind' => true,
        'scrimmage_ind' => true,
        'tournament_ind' => true,
        'invitational_ind' => true,
        'playoff_ind' => true,
        'additional_notes' => true,
        'news_id' => true,
        'send_notifications' => true,
        'clear_reschedule' => true,
        'skip_validation' => true,
        'transportation' => true,
        'opponents' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'game_id' => 'game_id',
        'schedule_type' => 'schedule_type',
        'title' => 'title',
        'game_date' => 'game_date',
        'game_date_end' => 'game_date_end',
        'cancel_type' => 'cancel_type',
        'home_away_type' => 'home_away_type',
        'location_id' => 'location_id',
        'location_ind' => 'location_ind',
        'dismissal_time' => 'dismissal_time',
        'departure_time' => 'departure_time',
        'departure_note' => 'departure_note',
        'pickup_time' => 'pickup_time',
        'pickup_note' => 'pickup_note',
        'league_ind' => 'league_ind',
        'scrimmage_ind' => 'scrimmage_ind',
        'tournament_ind' => 'tournament_ind',
        'invitational_ind' => 'invitational_ind',
        'playoff_ind' => 'playoff_ind',
        'additional_notes' => 'additional_notes',
        'news_id' => 'news_id',
        'send_notifications' => 'send_notifications',
        'clear_reschedule' => 'clear_reschedule',
        'skip_validation' => 'skip_validation',
        'transportation' => 'transportation',
        'opponents' => 'opponents',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'game_id' => 'setGameId',
        'schedule_type' => 'setScheduleType',
        'title' => 'setTitle',
        'game_date' => 'setGameDate',
        'game_date_end' => 'setGameDateEnd',
        'cancel_type' => 'setCancelType',
        'home_away_type' => 'setHomeAwayType',
        'location_id' => 'setLocationId',
        'location_ind' => 'setLocationInd',
        'dismissal_time' => 'setDismissalTime',
        'departure_time' => 'setDepartureTime',
        'departure_note' => 'setDepartureNote',
        'pickup_time' => 'setPickupTime',
        'pickup_note' => 'setPickupNote',
        'league_ind' => 'setLeagueInd',
        'scrimmage_ind' => 'setScrimmageInd',
        'tournament_ind' => 'setTournamentInd',
        'invitational_ind' => 'setInvitationalInd',
        'playoff_ind' => 'setPlayoffInd',
        'additional_notes' => 'setAdditionalNotes',
        'news_id' => 'setNewsId',
        'send_notifications' => 'setSendNotifications',
        'clear_reschedule' => 'setClearReschedule',
        'skip_validation' => 'setSkipValidation',
        'transportation' => 'setTransportation',
        'opponents' => 'setOpponents',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'game_id' => 'getGameId',
        'schedule_type' => 'getScheduleType',
        'title' => 'getTitle',
        'game_date' => 'getGameDate',
        'game_date_end' => 'getGameDateEnd',
        'cancel_type' => 'getCancelType',
        'home_away_type' => 'getHomeAwayType',
        'location_id' => 'getLocationId',
        'location_ind' => 'getLocationInd',
        'dismissal_time' => 'getDismissalTime',
        'departure_time' => 'getDepartureTime',
        'departure_note' => 'getDepartureNote',
        'pickup_time' => 'getPickupTime',
        'pickup_note' => 'getPickupNote',
        'league_ind' => 'getLeagueInd',
        'scrimmage_ind' => 'getScrimmageInd',
        'tournament_ind' => 'getTournamentInd',
        'invitational_ind' => 'getInvitationalInd',
        'playoff_ind' => 'getPlayoffInd',
        'additional_notes' => 'getAdditionalNotes',
        'news_id' => 'getNewsId',
        'send_notifications' => 'getSendNotifications',
        'clear_reschedule' => 'getClearReschedule',
        'skip_validation' => 'getSkipValidation',
        'transportation' => 'getTransportation',
        'opponents' => 'getOpponents',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('game_id', $data ?? [], null);
        $this->setIfExists('schedule_type', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('game_date', $data ?? [], null);
        $this->setIfExists('game_date_end', $data ?? [], null);
        $this->setIfExists('cancel_type', $data ?? [], null);
        $this->setIfExists('home_away_type', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('location_ind', $data ?? [], null);
        $this->setIfExists('dismissal_time', $data ?? [], null);
        $this->setIfExists('departure_time', $data ?? [], null);
        $this->setIfExists('departure_note', $data ?? [], null);
        $this->setIfExists('pickup_time', $data ?? [], null);
        $this->setIfExists('pickup_note', $data ?? [], null);
        $this->setIfExists('league_ind', $data ?? [], null);
        $this->setIfExists('scrimmage_ind', $data ?? [], null);
        $this->setIfExists('tournament_ind', $data ?? [], null);
        $this->setIfExists('invitational_ind', $data ?? [], null);
        $this->setIfExists('playoff_ind', $data ?? [], null);
        $this->setIfExists('additional_notes', $data ?? [], null);
        $this->setIfExists('news_id', $data ?? [], null);
        $this->setIfExists('send_notifications', $data ?? [], null);
        $this->setIfExists('clear_reschedule', $data ?? [], null);
        $this->setIfExists('skip_validation', $data ?? [], null);
        $this->setIfExists('transportation', $data ?? [], null);
        $this->setIfExists('opponents', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['game_id'] === null) {
            $invalidProperties[] = "'game_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets game_id
     *
     * @return int
     */
    public function getGameId()
    {
        return $this->container['game_id'];
    }

    /**
     * Sets game_id
     *
     * @param int $game_id ID of the game to be updated
     *
     * @return self
     */
    public function setGameId($game_id)
    {
        if (is_null($game_id)) {
            throw new \InvalidArgumentException('non-nullable game_id cannot be null');
        }
        $this->container['game_id'] = $game_id;

        return $this;
    }

    /**
     * Gets schedule_type
     *
     * @return int|null
     */
    public function getScheduleType()
    {
        return $this->container['schedule_type'];
    }

    /**
     * Sets schedule_type
     *
     * @param int|null $schedule_type The Type of the event
     *
     * @return self
     */
    public function setScheduleType($schedule_type)
    {
        if (is_null($schedule_type)) {
            array_push($this->openAPINullablesSetToNull, 'schedule_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('schedule_type', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['schedule_type'] = $schedule_type;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Title of the game
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets game_date
     *
     * @return \DateTime|null
     */
    public function getGameDate()
    {
        return $this->container['game_date'];
    }

    /**
     * Sets game_date
     *
     * @param \DateTime|null $game_date Date and time of the game <br />  Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
     *
     * @return self
     */
    public function setGameDate($game_date)
    {
        if (is_null($game_date)) {
            array_push($this->openAPINullablesSetToNull, 'game_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('game_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['game_date'] = $game_date;

        return $this;
    }

    /**
     * Gets game_date_end
     *
     * @return \DateTime|null
     */
    public function getGameDateEnd()
    {
        return $this->container['game_date_end'];
    }

    /**
     * Sets game_date_end
     *
     * @param \DateTime|null $game_date_end Date and time the game is set to end <br />  Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
     *
     * @return self
     */
    public function setGameDateEnd($game_date_end)
    {
        if (is_null($game_date_end)) {
            array_push($this->openAPINullablesSetToNull, 'game_date_end');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('game_date_end', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['game_date_end'] = $game_date_end;

        return $this;
    }

    /**
     * Gets cancel_type
     *
     * @return int|null
     */
    public function getCancelType()
    {
        return $this->container['cancel_type'];
    }

    /**
     * Sets cancel_type
     *
     * @param int|null $cancel_type Set to 0 to Uncancel a game <br />  Set to 1 to Cancel a game <br />  Set to 2 to Reschedule a game <br />
     *
     * @return self
     */
    public function setCancelType($cancel_type)
    {
        if (is_null($cancel_type)) {
            array_push($this->openAPINullablesSetToNull, 'cancel_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cancel_type', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cancel_type'] = $cancel_type;

        return $this;
    }

    /**
     * Gets home_away_type
     *
     * @return int|null
     */
    public function getHomeAwayType()
    {
        return $this->container['home_away_type'];
    }

    /**
     * Sets home_away_type
     *
     * @param int|null $home_away_type Set to 0 for Home <br />  Set to 1 for Away <br />  Set to 2 for Neutral <br />  Set to 3 for TBD
     *
     * @return self
     */
    public function setHomeAwayType($home_away_type)
    {
        if (is_null($home_away_type)) {
            array_push($this->openAPINullablesSetToNull, 'home_away_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('home_away_type', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['home_away_type'] = $home_away_type;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int|null
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int|null $location_id ID of the location/venue of the game
     *
     * @return self
     */
    public function setLocationId($location_id)
    {
        if (is_null($location_id)) {
            array_push($this->openAPINullablesSetToNull, 'location_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets location_ind
     *
     * @return int|null
     */
    public function getLocationInd()
    {
        return $this->container['location_ind'];
    }

    /**
     * Sets location_ind
     *
     * @param int|null $location_ind Set to 0 when using a venue for ```location_id```<br />  Set to 1 when using a location for ```location_id```
     *
     * @return self
     */
    public function setLocationInd($location_ind)
    {
        if (is_null($location_ind)) {
            array_push($this->openAPINullablesSetToNull, 'location_ind');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location_ind', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location_ind'] = $location_ind;

        return $this;
    }

    /**
     * Gets dismissal_time
     *
     * @return string|null
     */
    public function getDismissalTime()
    {
        return $this->container['dismissal_time'];
    }

    /**
     * Sets dismissal_time
     *
     * @param string|null $dismissal_time Time for dismissal using 24-hour format: ```HH:mm```
     *
     * @return self
     */
    public function setDismissalTime($dismissal_time)
    {
        if (is_null($dismissal_time)) {
            array_push($this->openAPINullablesSetToNull, 'dismissal_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dismissal_time', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dismissal_time'] = $dismissal_time;

        return $this;
    }

    /**
     * Gets departure_time
     *
     * @return string|null
     */
    public function getDepartureTime()
    {
        return $this->container['departure_time'];
    }

    /**
     * Sets departure_time
     *
     * @param string|null $departure_time Time for departure using 24-hour format: ```HH:mm```
     *
     * @return self
     */
    public function setDepartureTime($departure_time)
    {
        if (is_null($departure_time)) {
            array_push($this->openAPINullablesSetToNull, 'departure_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('departure_time', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['departure_time'] = $departure_time;

        return $this;
    }

    /**
     * Gets departure_note
     *
     * @return string|null
     */
    public function getDepartureNote()
    {
        return $this->container['departure_note'];
    }

    /**
     * Sets departure_note
     *
     * @param string|null $departure_note Notes related to departure
     *
     * @return self
     */
    public function setDepartureNote($departure_note)
    {
        if (is_null($departure_note)) {
            array_push($this->openAPINullablesSetToNull, 'departure_note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('departure_note', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['departure_note'] = $departure_note;

        return $this;
    }

    /**
     * Gets pickup_time
     *
     * @return string|null
     */
    public function getPickupTime()
    {
        return $this->container['pickup_time'];
    }

    /**
     * Sets pickup_time
     *
     * @param string|null $pickup_time Time for pickup using 24-hour format: ```HH:mm```
     *
     * @return self
     */
    public function setPickupTime($pickup_time)
    {
        if (is_null($pickup_time)) {
            array_push($this->openAPINullablesSetToNull, 'pickup_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pickup_time', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pickup_time'] = $pickup_time;

        return $this;
    }

    /**
     * Gets pickup_note
     *
     * @return string|null
     */
    public function getPickupNote()
    {
        return $this->container['pickup_note'];
    }

    /**
     * Sets pickup_note
     *
     * @param string|null $pickup_note Notes related to pickup
     *
     * @return self
     */
    public function setPickupNote($pickup_note)
    {
        if (is_null($pickup_note)) {
            array_push($this->openAPINullablesSetToNull, 'pickup_note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pickup_note', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pickup_note'] = $pickup_note;

        return $this;
    }

    /**
     * Gets league_ind
     *
     * @return bool|null
     */
    public function getLeagueInd()
    {
        return $this->container['league_ind'];
    }

    /**
     * Sets league_ind
     *
     * @param bool|null $league_ind Set to true to indicate a league event
     *
     * @return self
     */
    public function setLeagueInd($league_ind)
    {
        if (is_null($league_ind)) {
            array_push($this->openAPINullablesSetToNull, 'league_ind');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('league_ind', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['league_ind'] = $league_ind;

        return $this;
    }

    /**
     * Gets scrimmage_ind
     *
     * @return bool|null
     */
    public function getScrimmageInd()
    {
        return $this->container['scrimmage_ind'];
    }

    /**
     * Sets scrimmage_ind
     *
     * @param bool|null $scrimmage_ind Set to true to indicate a scrimmage event
     *
     * @return self
     */
    public function setScrimmageInd($scrimmage_ind)
    {
        if (is_null($scrimmage_ind)) {
            array_push($this->openAPINullablesSetToNull, 'scrimmage_ind');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scrimmage_ind', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scrimmage_ind'] = $scrimmage_ind;

        return $this;
    }

    /**
     * Gets tournament_ind
     *
     * @return bool|null
     */
    public function getTournamentInd()
    {
        return $this->container['tournament_ind'];
    }

    /**
     * Sets tournament_ind
     *
     * @param bool|null $tournament_ind Set to true to indicate a tournament event
     *
     * @return self
     */
    public function setTournamentInd($tournament_ind)
    {
        if (is_null($tournament_ind)) {
            array_push($this->openAPINullablesSetToNull, 'tournament_ind');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tournament_ind', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tournament_ind'] = $tournament_ind;

        return $this;
    }

    /**
     * Gets invitational_ind
     *
     * @return bool|null
     */
    public function getInvitationalInd()
    {
        return $this->container['invitational_ind'];
    }

    /**
     * Sets invitational_ind
     *
     * @param bool|null $invitational_ind Set to true to indicate an invitational event
     *
     * @return self
     */
    public function setInvitationalInd($invitational_ind)
    {
        if (is_null($invitational_ind)) {
            array_push($this->openAPINullablesSetToNull, 'invitational_ind');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invitational_ind', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invitational_ind'] = $invitational_ind;

        return $this;
    }

    /**
     * Gets playoff_ind
     *
     * @return bool|null
     */
    public function getPlayoffInd()
    {
        return $this->container['playoff_ind'];
    }

    /**
     * Sets playoff_ind
     *
     * @param bool|null $playoff_ind Set to true to indicate a playoff event
     *
     * @return self
     */
    public function setPlayoffInd($playoff_ind)
    {
        if (is_null($playoff_ind)) {
            array_push($this->openAPINullablesSetToNull, 'playoff_ind');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('playoff_ind', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['playoff_ind'] = $playoff_ind;

        return $this;
    }

    /**
     * Gets additional_notes
     *
     * @return string|null
     */
    public function getAdditionalNotes()
    {
        return $this->container['additional_notes'];
    }

    /**
     * Sets additional_notes
     *
     * @param string|null $additional_notes Additional notes for the event
     *
     * @return self
     */
    public function setAdditionalNotes($additional_notes)
    {
        if (is_null($additional_notes)) {
            array_push($this->openAPINullablesSetToNull, 'additional_notes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_notes', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additional_notes'] = $additional_notes;

        return $this;
    }

    /**
     * Gets news_id
     *
     * @return int|null
     */
    public function getNewsId()
    {
        return $this->container['news_id'];
    }

    /**
     * Sets news_id
     *
     * @param int|null $news_id News ID
     *
     * @return self
     */
    public function setNewsId($news_id)
    {
        if (is_null($news_id)) {
            array_push($this->openAPINullablesSetToNull, 'news_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('news_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['news_id'] = $news_id;

        return $this;
    }

    /**
     * Gets send_notifications
     *
     * @return bool|null
     */
    public function getSendNotifications()
    {
        return $this->container['send_notifications'];
    }

    /**
     * Sets send_notifications
     *
     * @param bool|null $send_notifications Toggles 'Send Notification' option
     *
     * @return self
     */
    public function setSendNotifications($send_notifications)
    {
        if (is_null($send_notifications)) {
            array_push($this->openAPINullablesSetToNull, 'send_notifications');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('send_notifications', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['send_notifications'] = $send_notifications;

        return $this;
    }

    /**
     * Gets clear_reschedule
     *
     * @return bool|null
     */
    public function getClearReschedule()
    {
        return $this->container['clear_reschedule'];
    }

    /**
     * Sets clear_reschedule
     *
     * @param bool|null $clear_reschedule Set to true to remove the original scheduled game
     *
     * @return self
     */
    public function setClearReschedule($clear_reschedule)
    {
        if (is_null($clear_reschedule)) {
            array_push($this->openAPINullablesSetToNull, 'clear_reschedule');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clear_reschedule', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['clear_reschedule'] = $clear_reschedule;

        return $this;
    }

    /**
     * Gets skip_validation
     *
     * @return bool|null
     */
    public function getSkipValidation()
    {
        return $this->container['skip_validation'];
    }

    /**
     * Sets skip_validation
     *
     * @param bool|null $skip_validation Set to true to skip validation of this event
     *
     * @return self
     */
    public function setSkipValidation($skip_validation)
    {
        if (is_null($skip_validation)) {
            array_push($this->openAPINullablesSetToNull, 'skip_validation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('skip_validation', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['skip_validation'] = $skip_validation;

        return $this;
    }

    /**
     * Gets transportation
     *
     * @return \SKY\School\Model\GameTransportation[]|null
     */
    public function getTransportation()
    {
        return $this->container['transportation'];
    }

    /**
     * Sets transportation
     *
     * @param \SKY\School\Model\GameTransportation[]|null $transportation List of the transportation to be used for this game
     *
     * @return self
     */
    public function setTransportation($transportation)
    {
        if (is_null($transportation)) {
            array_push($this->openAPINullablesSetToNull, 'transportation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transportation', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transportation'] = $transportation;

        return $this;
    }

    /**
     * Gets opponents
     *
     * @return \SKY\School\Model\GameOpponent[]|null
     */
    public function getOpponents()
    {
        return $this->container['opponents'];
    }

    /**
     * Sets opponents
     *
     * @param \SKY\School\Model\GameOpponent[]|null $opponents List of Opponent ID's involved in this game
     *
     * @return self
     */
    public function setOpponents($opponents)
    {
        if (is_null($opponents)) {
            array_push($this->openAPINullablesSetToNull, 'opponents');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('opponents', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['opponents'] = $opponents;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
