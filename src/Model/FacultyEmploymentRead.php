<?php
/**
 * FacultyEmploymentRead
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * FacultyEmploymentRead Class Doc Comment
 *
 * @category Class
 * @description FacultyEmploymentRead model
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FacultyEmploymentRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FacultyEmploymentRead';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user_id' => 'int',
        'first_name' => 'string',
        'last_name' => 'string',
        'date_appointed' => '\DateTime',
        'date_departed' => '\DateTime',
        'school_levels' => 'string',
        'employee_roles' => 'string',
        'departments' => 'string',
        'grade_levels' => 'string',
        'main_sports' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user_id' => 'int32',
        'first_name' => null,
        'last_name' => null,
        'date_appointed' => 'date-time',
        'date_departed' => 'date-time',
        'school_levels' => null,
        'employee_roles' => null,
        'departments' => null,
        'grade_levels' => null,
        'main_sports' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'user_id' => true,
        'first_name' => true,
        'last_name' => true,
        'date_appointed' => true,
        'date_departed' => true,
        'school_levels' => true,
        'employee_roles' => true,
        'departments' => true,
        'grade_levels' => true,
        'main_sports' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_id' => 'user_id',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'date_appointed' => 'date_appointed',
        'date_departed' => 'date_departed',
        'school_levels' => 'school_levels',
        'employee_roles' => 'employee_roles',
        'departments' => 'departments',
        'grade_levels' => 'grade_levels',
        'main_sports' => 'main_sports',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_id' => 'setUserId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'date_appointed' => 'setDateAppointed',
        'date_departed' => 'setDateDeparted',
        'school_levels' => 'setSchoolLevels',
        'employee_roles' => 'setEmployeeRoles',
        'departments' => 'setDepartments',
        'grade_levels' => 'setGradeLevels',
        'main_sports' => 'setMainSports',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_id' => 'getUserId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'date_appointed' => 'getDateAppointed',
        'date_departed' => 'getDateDeparted',
        'school_levels' => 'getSchoolLevels',
        'employee_roles' => 'getEmployeeRoles',
        'departments' => 'getDepartments',
        'grade_levels' => 'getGradeLevels',
        'main_sports' => 'getMainSports',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('date_appointed', $data ?? [], null);
        $this->setIfExists('date_departed', $data ?? [], null);
        $this->setIfExists('school_levels', $data ?? [], null);
        $this->setIfExists('employee_roles', $data ?? [], null);
        $this->setIfExists('departments', $data ?? [], null);
        $this->setIfExists('grade_levels', $data ?? [], null);
        $this->setIfExists('main_sports', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id The users Id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            array_push($this->openAPINullablesSetToNull, 'user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name The users first name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            array_push($this->openAPINullablesSetToNull, 'first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name The users last name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            array_push($this->openAPINullablesSetToNull, 'last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets date_appointed
     *
     * @return \DateTime|null
     */
    public function getDateAppointed()
    {
        return $this->container['date_appointed'];
    }

    /**
     * Sets date_appointed
     *
     * @param \DateTime|null $date_appointed The date user was appointed
     *
     * @return self
     */
    public function setDateAppointed($date_appointed)
    {
        if (is_null($date_appointed)) {
            array_push($this->openAPINullablesSetToNull, 'date_appointed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_appointed', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_appointed'] = $date_appointed;

        return $this;
    }

    /**
     * Gets date_departed
     *
     * @return \DateTime|null
     */
    public function getDateDeparted()
    {
        return $this->container['date_departed'];
    }

    /**
     * Sets date_departed
     *
     * @param \DateTime|null $date_departed Date the user departed (if they have departed)
     *
     * @return self
     */
    public function setDateDeparted($date_departed)
    {
        if (is_null($date_departed)) {
            array_push($this->openAPINullablesSetToNull, 'date_departed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_departed', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_departed'] = $date_departed;

        return $this;
    }

    /**
     * Gets school_levels
     *
     * @return string|null
     */
    public function getSchoolLevels()
    {
        return $this->container['school_levels'];
    }

    /**
     * Sets school_levels
     *
     * @param string|null $school_levels A comma delimited list of schools this user is associated with.
     *
     * @return self
     */
    public function setSchoolLevels($school_levels)
    {
        if (is_null($school_levels)) {
            array_push($this->openAPINullablesSetToNull, 'school_levels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('school_levels', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['school_levels'] = $school_levels;

        return $this;
    }

    /**
     * Gets employee_roles
     *
     * @return string|null
     */
    public function getEmployeeRoles()
    {
        return $this->container['employee_roles'];
    }

    /**
     * Sets employee_roles
     *
     * @param string|null $employee_roles A comma delimited list of employee roles this user is associated with.
     *
     * @return self
     */
    public function setEmployeeRoles($employee_roles)
    {
        if (is_null($employee_roles)) {
            array_push($this->openAPINullablesSetToNull, 'employee_roles');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employee_roles', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employee_roles'] = $employee_roles;

        return $this;
    }

    /**
     * Gets departments
     *
     * @return string|null
     */
    public function getDepartments()
    {
        return $this->container['departments'];
    }

    /**
     * Sets departments
     *
     * @param string|null $departments A comma delimited list of departments this user is associated with.
     *
     * @return self
     */
    public function setDepartments($departments)
    {
        if (is_null($departments)) {
            array_push($this->openAPINullablesSetToNull, 'departments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('departments', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['departments'] = $departments;

        return $this;
    }

    /**
     * Gets grade_levels
     *
     * @return string|null
     */
    public function getGradeLevels()
    {
        return $this->container['grade_levels'];
    }

    /**
     * Sets grade_levels
     *
     * @param string|null $grade_levels A comma delimited list of grade levels this user is associated with.
     *
     * @return self
     */
    public function setGradeLevels($grade_levels)
    {
        if (is_null($grade_levels)) {
            array_push($this->openAPINullablesSetToNull, 'grade_levels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grade_levels', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grade_levels'] = $grade_levels;

        return $this;
    }

    /**
     * Gets main_sports
     *
     * @return string|null
     */
    public function getMainSports()
    {
        return $this->container['main_sports'];
    }

    /**
     * Sets main_sports
     *
     * @param string|null $main_sports A comma delimited list of sports this user is associated with.
     *
     * @return self
     */
    public function setMainSports($main_sports)
    {
        if (is_null($main_sports)) {
            array_push($this->openAPINullablesSetToNull, 'main_sports');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('main_sports', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['main_sports'] = $main_sports;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
