<?php
/**
 * CalendarItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * CalendarItem Class Doc Comment
 *
 * @category Class
 * @description Calendar item
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CalendarItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CalendarItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'associationId' => 'int',
        'briefDescription' => 'string',
        'buildingName' => 'string',
        'cancelled' => 'bool',
        'contactEmail' => 'string',
        'contactName' => 'string',
        'endDate' => '\DateTime',
        'eventId' => 'int',
        'eventType' => 'string',
        'categoryId' => 'int',
        'categoryName' => 'string',
        'homeAway' => 'string',
        'invitational' => 'bool',
        'league' => 'bool',
        'location' => 'string',
        'longDescription' => 'string',
        'opponent' => 'string',
        'playoff' => 'bool',
        'presetId' => 'int',
        'recurrenceId' => 'int',
        'registrationId' => 'int',
        'rescheduled' => 'bool',
        'rescheduleNote' => 'string',
        'roomName' => 'string',
        'scrimmage' => 'bool',
        'startDate' => '\DateTime',
        'title' => 'string',
        'tournament' => 'bool',
        'allDay' => 'bool',
        'totalDays' => 'int',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'associationId' => 'int32',
        'briefDescription' => null,
        'buildingName' => null,
        'cancelled' => null,
        'contactEmail' => null,
        'contactName' => null,
        'endDate' => 'date-time',
        'eventId' => 'int32',
        'eventType' => null,
        'categoryId' => 'int32',
        'categoryName' => null,
        'homeAway' => null,
        'invitational' => null,
        'league' => null,
        'location' => null,
        'longDescription' => null,
        'opponent' => null,
        'playoff' => null,
        'presetId' => 'int32',
        'recurrenceId' => 'int32',
        'registrationId' => 'int32',
        'rescheduled' => null,
        'rescheduleNote' => null,
        'roomName' => null,
        'scrimmage' => null,
        'startDate' => 'date-time',
        'title' => null,
        'tournament' => null,
        'allDay' => null,
        'totalDays' => 'int32',
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'associationId' => true,
        'briefDescription' => true,
        'buildingName' => true,
        'cancelled' => true,
        'contactEmail' => true,
        'contactName' => true,
        'endDate' => true,
        'eventId' => true,
        'eventType' => true,
        'categoryId' => true,
        'categoryName' => true,
        'homeAway' => true,
        'invitational' => true,
        'league' => true,
        'location' => true,
        'longDescription' => true,
        'opponent' => true,
        'playoff' => true,
        'presetId' => true,
        'recurrenceId' => true,
        'registrationId' => true,
        'rescheduled' => true,
        'rescheduleNote' => true,
        'roomName' => true,
        'scrimmage' => true,
        'startDate' => true,
        'title' => true,
        'tournament' => true,
        'allDay' => true,
        'totalDays' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'associationId' => 'association_id',
        'briefDescription' => 'brief_description',
        'buildingName' => 'building_name',
        'cancelled' => 'cancelled',
        'contactEmail' => 'contact_email',
        'contactName' => 'contact_name',
        'endDate' => 'end_date',
        'eventId' => 'event_id',
        'eventType' => 'event_type',
        'categoryId' => 'category_id',
        'categoryName' => 'category_name',
        'homeAway' => 'home_away',
        'invitational' => 'invitational',
        'league' => 'league',
        'location' => 'location',
        'longDescription' => 'long_description',
        'opponent' => 'opponent',
        'playoff' => 'playoff',
        'presetId' => 'preset_id',
        'recurrenceId' => 'recurrence_id',
        'registrationId' => 'registration_id',
        'rescheduled' => 'rescheduled',
        'rescheduleNote' => 'reschedule_note',
        'roomName' => 'room_name',
        'scrimmage' => 'scrimmage',
        'startDate' => 'start_date',
        'title' => 'title',
        'tournament' => 'tournament',
        'allDay' => 'all_day',
        'totalDays' => 'total_days',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'associationId' => 'setAssociationId',
        'briefDescription' => 'setBriefDescription',
        'buildingName' => 'setBuildingName',
        'cancelled' => 'setCancelled',
        'contactEmail' => 'setContactEmail',
        'contactName' => 'setContactName',
        'endDate' => 'setEndDate',
        'eventId' => 'setEventId',
        'eventType' => 'setEventType',
        'categoryId' => 'setCategoryId',
        'categoryName' => 'setCategoryName',
        'homeAway' => 'setHomeAway',
        'invitational' => 'setInvitational',
        'league' => 'setLeague',
        'location' => 'setLocation',
        'longDescription' => 'setLongDescription',
        'opponent' => 'setOpponent',
        'playoff' => 'setPlayoff',
        'presetId' => 'setPresetId',
        'recurrenceId' => 'setRecurrenceId',
        'registrationId' => 'setRegistrationId',
        'rescheduled' => 'setRescheduled',
        'rescheduleNote' => 'setRescheduleNote',
        'roomName' => 'setRoomName',
        'scrimmage' => 'setScrimmage',
        'startDate' => 'setStartDate',
        'title' => 'setTitle',
        'tournament' => 'setTournament',
        'allDay' => 'setAllDay',
        'totalDays' => 'setTotalDays',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'associationId' => 'getAssociationId',
        'briefDescription' => 'getBriefDescription',
        'buildingName' => 'getBuildingName',
        'cancelled' => 'getCancelled',
        'contactEmail' => 'getContactEmail',
        'contactName' => 'getContactName',
        'endDate' => 'getEndDate',
        'eventId' => 'getEventId',
        'eventType' => 'getEventType',
        'categoryId' => 'getCategoryId',
        'categoryName' => 'getCategoryName',
        'homeAway' => 'getHomeAway',
        'invitational' => 'getInvitational',
        'league' => 'getLeague',
        'location' => 'getLocation',
        'longDescription' => 'getLongDescription',
        'opponent' => 'getOpponent',
        'playoff' => 'getPlayoff',
        'presetId' => 'getPresetId',
        'recurrenceId' => 'getRecurrenceId',
        'registrationId' => 'getRegistrationId',
        'rescheduled' => 'getRescheduled',
        'rescheduleNote' => 'getRescheduleNote',
        'roomName' => 'getRoomName',
        'scrimmage' => 'getScrimmage',
        'startDate' => 'getStartDate',
        'title' => 'getTitle',
        'tournament' => 'getTournament',
        'allDay' => 'getAllDay',
        'totalDays' => 'getTotalDays',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('associationId', $data ?? [], null);
        $this->setIfExists('briefDescription', $data ?? [], null);
        $this->setIfExists('buildingName', $data ?? [], null);
        $this->setIfExists('cancelled', $data ?? [], null);
        $this->setIfExists('contactEmail', $data ?? [], null);
        $this->setIfExists('contactName', $data ?? [], null);
        $this->setIfExists('endDate', $data ?? [], null);
        $this->setIfExists('eventId', $data ?? [], null);
        $this->setIfExists('eventType', $data ?? [], null);
        $this->setIfExists('categoryId', $data ?? [], null);
        $this->setIfExists('categoryName', $data ?? [], null);
        $this->setIfExists('homeAway', $data ?? [], null);
        $this->setIfExists('invitational', $data ?? [], null);
        $this->setIfExists('league', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('longDescription', $data ?? [], null);
        $this->setIfExists('opponent', $data ?? [], null);
        $this->setIfExists('playoff', $data ?? [], null);
        $this->setIfExists('presetId', $data ?? [], null);
        $this->setIfExists('recurrenceId', $data ?? [], null);
        $this->setIfExists('registrationId', $data ?? [], null);
        $this->setIfExists('rescheduled', $data ?? [], null);
        $this->setIfExists('rescheduleNote', $data ?? [], null);
        $this->setIfExists('roomName', $data ?? [], null);
        $this->setIfExists('scrimmage', $data ?? [], null);
        $this->setIfExists('startDate', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('tournament', $data ?? [], null);
        $this->setIfExists('allDay', $data ?? [], null);
        $this->setIfExists('totalDays', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets associationId
     *
     * @return int|null
     */
    public function getAssociationId()
    {
        return $this->container['associationId'];
    }

    /**
     * Sets associationId
     *
     * @param int|null $associationId The association id for the event
     *
     * @return self
     */
    public function setAssociationId($associationId)
    {
        if (is_null($associationId)) {
            array_push($this->openAPINullablesSetToNull, 'associationId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('associationId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['associationId'] = $associationId;

        return $this;
    }

    /**
     * Gets briefDescription
     *
     * @return string|null
     */
    public function getBriefDescription()
    {
        return $this->container['briefDescription'];
    }

    /**
     * Sets briefDescription
     *
     * @param string|null $briefDescription The brief description of the event
     *
     * @return self
     */
    public function setBriefDescription($briefDescription)
    {
        if (is_null($briefDescription)) {
            array_push($this->openAPINullablesSetToNull, 'briefDescription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('briefDescription', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['briefDescription'] = $briefDescription;

        return $this;
    }

    /**
     * Gets buildingName
     *
     * @return string|null
     */
    public function getBuildingName()
    {
        return $this->container['buildingName'];
    }

    /**
     * Sets buildingName
     *
     * @param string|null $buildingName The name of the building where the event is being held
     *
     * @return self
     */
    public function setBuildingName($buildingName)
    {
        if (is_null($buildingName)) {
            array_push($this->openAPINullablesSetToNull, 'buildingName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buildingName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buildingName'] = $buildingName;

        return $this;
    }

    /**
     * Gets cancelled
     *
     * @return bool|null
     */
    public function getCancelled()
    {
        return $this->container['cancelled'];
    }

    /**
     * Sets cancelled
     *
     * @param bool|null $cancelled If the event is an athletic game, returns true if it is canceled
     *
     * @return self
     */
    public function setCancelled($cancelled)
    {
        if (is_null($cancelled)) {
            array_push($this->openAPINullablesSetToNull, 'cancelled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cancelled', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cancelled'] = $cancelled;

        return $this;
    }

    /**
     * Gets contactEmail
     *
     * @return string|null
     */
    public function getContactEmail()
    {
        return $this->container['contactEmail'];
    }

    /**
     * Sets contactEmail
     *
     * @param string|null $contactEmail The email of the event contact
     *
     * @return self
     */
    public function setContactEmail($contactEmail)
    {
        if (is_null($contactEmail)) {
            array_push($this->openAPINullablesSetToNull, 'contactEmail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contactEmail', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contactEmail'] = $contactEmail;

        return $this;
    }

    /**
     * Gets contactName
     *
     * @return string|null
     */
    public function getContactName()
    {
        return $this->container['contactName'];
    }

    /**
     * Sets contactName
     *
     * @param string|null $contactName The name of the event contact
     *
     * @return self
     */
    public function setContactName($contactName)
    {
        if (is_null($contactName)) {
            array_push($this->openAPINullablesSetToNull, 'contactName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contactName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contactName'] = $contactName;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime|null $endDate The date the event ends
     *
     * @return self
     */
    public function setEndDate($endDate)
    {
        if (is_null($endDate)) {
            array_push($this->openAPINullablesSetToNull, 'endDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('endDate', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets eventId
     *
     * @return int|null
     */
    public function getEventId()
    {
        return $this->container['eventId'];
    }

    /**
     * Sets eventId
     *
     * @param int|null $eventId The id of the event
     *
     * @return self
     */
    public function setEventId($eventId)
    {
        if (is_null($eventId)) {
            array_push($this->openAPINullablesSetToNull, 'eventId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eventId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['eventId'] = $eventId;

        return $this;
    }

    /**
     * Gets eventType
     *
     * @return string|null
     */
    public function getEventType()
    {
        return $this->container['eventType'];
    }

    /**
     * Sets eventType
     *
     * @param string|null $eventType The type of the event
     *
     * @return self
     */
    public function setEventType($eventType)
    {
        if (is_null($eventType)) {
            array_push($this->openAPINullablesSetToNull, 'eventType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eventType', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['eventType'] = $eventType;

        return $this;
    }

    /**
     * Gets categoryId
     *
     * @return int|null
     */
    public function getCategoryId()
    {
        return $this->container['categoryId'];
    }

    /**
     * Sets categoryId
     *
     * @param int|null $categoryId The id of the category the event belongs to
     *
     * @return self
     */
    public function setCategoryId($categoryId)
    {
        if (is_null($categoryId)) {
            array_push($this->openAPINullablesSetToNull, 'categoryId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('categoryId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['categoryId'] = $categoryId;

        return $this;
    }

    /**
     * Gets categoryName
     *
     * @return string|null
     */
    public function getCategoryName()
    {
        return $this->container['categoryName'];
    }

    /**
     * Sets categoryName
     *
     * @param string|null $categoryName The name of the category the event belongs to
     *
     * @return self
     */
    public function setCategoryName($categoryName)
    {
        if (is_null($categoryName)) {
            array_push($this->openAPINullablesSetToNull, 'categoryName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('categoryName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['categoryName'] = $categoryName;

        return $this;
    }

    /**
     * Gets homeAway
     *
     * @return string|null
     */
    public function getHomeAway()
    {
        return $this->container['homeAway'];
    }

    /**
     * Sets homeAway
     *
     * @param string|null $homeAway If the event is an athletic game, returns the home or away status of the game
     *
     * @return self
     */
    public function setHomeAway($homeAway)
    {
        if (is_null($homeAway)) {
            array_push($this->openAPINullablesSetToNull, 'homeAway');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('homeAway', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['homeAway'] = $homeAway;

        return $this;
    }

    /**
     * Gets invitational
     *
     * @return bool|null
     */
    public function getInvitational()
    {
        return $this->container['invitational'];
    }

    /**
     * Sets invitational
     *
     * @param bool|null $invitational If the event is an athletic game, returns true if the game is an invitational
     *
     * @return self
     */
    public function setInvitational($invitational)
    {
        if (is_null($invitational)) {
            array_push($this->openAPINullablesSetToNull, 'invitational');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invitational', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invitational'] = $invitational;

        return $this;
    }

    /**
     * Gets league
     *
     * @return bool|null
     */
    public function getLeague()
    {
        return $this->container['league'];
    }

    /**
     * Sets league
     *
     * @param bool|null $league If the event is an athletic game, returns true if the game is a league game
     *
     * @return self
     */
    public function setLeague($league)
    {
        if (is_null($league)) {
            array_push($this->openAPINullablesSetToNull, 'league');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('league', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['league'] = $league;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location The location of the event
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            array_push($this->openAPINullablesSetToNull, 'location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets longDescription
     *
     * @return string|null
     */
    public function getLongDescription()
    {
        return $this->container['longDescription'];
    }

    /**
     * Sets longDescription
     *
     * @param string|null $longDescription The long description of the event
     *
     * @return self
     */
    public function setLongDescription($longDescription)
    {
        if (is_null($longDescription)) {
            array_push($this->openAPINullablesSetToNull, 'longDescription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('longDescription', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['longDescription'] = $longDescription;

        return $this;
    }

    /**
     * Gets opponent
     *
     * @return string|null
     */
    public function getOpponent()
    {
        return $this->container['opponent'];
    }

    /**
     * Sets opponent
     *
     * @param string|null $opponent If the event is an athletic game, returns the name of the opponent
     *
     * @return self
     */
    public function setOpponent($opponent)
    {
        if (is_null($opponent)) {
            array_push($this->openAPINullablesSetToNull, 'opponent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('opponent', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['opponent'] = $opponent;

        return $this;
    }

    /**
     * Gets playoff
     *
     * @return bool|null
     */
    public function getPlayoff()
    {
        return $this->container['playoff'];
    }

    /**
     * Sets playoff
     *
     * @param bool|null $playoff If the event is an athletic game, returns true if the game is a playoff game
     *
     * @return self
     */
    public function setPlayoff($playoff)
    {
        if (is_null($playoff)) {
            array_push($this->openAPINullablesSetToNull, 'playoff');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('playoff', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['playoff'] = $playoff;

        return $this;
    }

    /**
     * Gets presetId
     *
     * @return int|null
     */
    public function getPresetId()
    {
        return $this->container['presetId'];
    }

    /**
     * Sets presetId
     *
     * @param int|null $presetId The event preset id
     *
     * @return self
     */
    public function setPresetId($presetId)
    {
        if (is_null($presetId)) {
            array_push($this->openAPINullablesSetToNull, 'presetId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('presetId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['presetId'] = $presetId;

        return $this;
    }

    /**
     * Gets recurrenceId
     *
     * @return int|null
     */
    public function getRecurrenceId()
    {
        return $this->container['recurrenceId'];
    }

    /**
     * Sets recurrenceId
     *
     * @param int|null $recurrenceId The recurrence id of the event
     *
     * @return self
     */
    public function setRecurrenceId($recurrenceId)
    {
        if (is_null($recurrenceId)) {
            array_push($this->openAPINullablesSetToNull, 'recurrenceId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recurrenceId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recurrenceId'] = $recurrenceId;

        return $this;
    }

    /**
     * Gets registrationId
     *
     * @return int|null
     */
    public function getRegistrationId()
    {
        return $this->container['registrationId'];
    }

    /**
     * Sets registrationId
     *
     * @param int|null $registrationId the registration id of the event
     *
     * @return self
     */
    public function setRegistrationId($registrationId)
    {
        if (is_null($registrationId)) {
            array_push($this->openAPINullablesSetToNull, 'registrationId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registrationId', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registrationId'] = $registrationId;

        return $this;
    }

    /**
     * Gets rescheduled
     *
     * @return bool|null
     */
    public function getRescheduled()
    {
        return $this->container['rescheduled'];
    }

    /**
     * Sets rescheduled
     *
     * @param bool|null $rescheduled If the event is an athletic game, returns true if the game was rescheduled
     *
     * @return self
     */
    public function setRescheduled($rescheduled)
    {
        if (is_null($rescheduled)) {
            array_push($this->openAPINullablesSetToNull, 'rescheduled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rescheduled', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rescheduled'] = $rescheduled;

        return $this;
    }

    /**
     * Gets rescheduleNote
     *
     * @return string|null
     */
    public function getRescheduleNote()
    {
        return $this->container['rescheduleNote'];
    }

    /**
     * Sets rescheduleNote
     *
     * @param string|null $rescheduleNote If the event is an athletic game, the rescheduled note (usually the reason for the reschedule)
     *
     * @return self
     */
    public function setRescheduleNote($rescheduleNote)
    {
        if (is_null($rescheduleNote)) {
            array_push($this->openAPINullablesSetToNull, 'rescheduleNote');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rescheduleNote', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rescheduleNote'] = $rescheduleNote;

        return $this;
    }

    /**
     * Gets roomName
     *
     * @return string|null
     */
    public function getRoomName()
    {
        return $this->container['roomName'];
    }

    /**
     * Sets roomName
     *
     * @param string|null $roomName The name of the room where the event is being held
     *
     * @return self
     */
    public function setRoomName($roomName)
    {
        if (is_null($roomName)) {
            array_push($this->openAPINullablesSetToNull, 'roomName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roomName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roomName'] = $roomName;

        return $this;
    }

    /**
     * Gets scrimmage
     *
     * @return bool|null
     */
    public function getScrimmage()
    {
        return $this->container['scrimmage'];
    }

    /**
     * Sets scrimmage
     *
     * @param bool|null $scrimmage If the event is an athletic game, returns true if the game is a scrimmage
     *
     * @return self
     */
    public function setScrimmage($scrimmage)
    {
        if (is_null($scrimmage)) {
            array_push($this->openAPINullablesSetToNull, 'scrimmage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scrimmage', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scrimmage'] = $scrimmage;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime|null $startDate The date the event starts
     *
     * @return self
     */
    public function setStartDate($startDate)
    {
        if (is_null($startDate)) {
            array_push($this->openAPINullablesSetToNull, 'startDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('startDate', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title of the event
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets tournament
     *
     * @return bool|null
     */
    public function getTournament()
    {
        return $this->container['tournament'];
    }

    /**
     * Sets tournament
     *
     * @param bool|null $tournament If the event is an athletic game, returns true if the game is part of a tournament
     *
     * @return self
     */
    public function setTournament($tournament)
    {
        if (is_null($tournament)) {
            array_push($this->openAPINullablesSetToNull, 'tournament');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tournament', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tournament'] = $tournament;

        return $this;
    }

    /**
     * Gets allDay
     *
     * @return bool|null
     */
    public function getAllDay()
    {
        return $this->container['allDay'];
    }

    /**
     * Sets allDay
     *
     * @param bool|null $allDay Returns true if the event happens all day
     *
     * @return self
     */
    public function setAllDay($allDay)
    {
        if (is_null($allDay)) {
            array_push($this->openAPINullablesSetToNull, 'allDay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allDay', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['allDay'] = $allDay;

        return $this;
    }

    /**
     * Gets totalDays
     *
     * @return int|null
     */
    public function getTotalDays()
    {
        return $this->container['totalDays'];
    }

    /**
     * Sets totalDays
     *
     * @param int|null $totalDays Shows the total number of days the event spans
     *
     * @return self
     */
    public function setTotalDays($totalDays)
    {
        if (is_null($totalDays)) {
            array_push($this->openAPINullablesSetToNull, 'totalDays');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('totalDays', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['totalDays'] = $totalDays;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
