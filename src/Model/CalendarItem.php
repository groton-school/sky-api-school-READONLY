<?php
/**
 * CalendarItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * CalendarItem Class Doc Comment
 *
 * @category Class
 * @description Calendar item
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CalendarItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CalendarItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'association_id' => 'int',
        'brief_description' => 'string',
        'building_name' => 'string',
        'cancelled' => 'bool',
        'contact_email' => 'string',
        'contact_name' => 'string',
        'end_date' => '\DateTime',
        'event_id' => 'int',
        'event_type' => 'string',
        'category_id' => 'int',
        'category_name' => 'string',
        'home_away' => 'string',
        'invitational' => 'bool',
        'league' => 'bool',
        'location' => 'string',
        'long_description' => 'string',
        'opponent' => 'string',
        'playoff' => 'bool',
        'preset_id' => 'int',
        'recurrence_id' => 'int',
        'registration_id' => 'int',
        'rescheduled' => 'bool',
        'reschedule_note' => 'string',
        'room_name' => 'string',
        'scrimmage' => 'bool',
        'start_date' => '\DateTime',
        'title' => 'string',
        'tournament' => 'bool',
        'all_day' => 'bool',
        'total_days' => 'int',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'association_id' => 'int32',
        'brief_description' => null,
        'building_name' => null,
        'cancelled' => null,
        'contact_email' => null,
        'contact_name' => null,
        'end_date' => 'date-time',
        'event_id' => 'int32',
        'event_type' => null,
        'category_id' => 'int32',
        'category_name' => null,
        'home_away' => null,
        'invitational' => null,
        'league' => null,
        'location' => null,
        'long_description' => null,
        'opponent' => null,
        'playoff' => null,
        'preset_id' => 'int32',
        'recurrence_id' => 'int32',
        'registration_id' => 'int32',
        'rescheduled' => null,
        'reschedule_note' => null,
        'room_name' => null,
        'scrimmage' => null,
        'start_date' => 'date-time',
        'title' => null,
        'tournament' => null,
        'all_day' => null,
        'total_days' => 'int32',
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'association_id' => true,
        'brief_description' => true,
        'building_name' => true,
        'cancelled' => true,
        'contact_email' => true,
        'contact_name' => true,
        'end_date' => true,
        'event_id' => true,
        'event_type' => true,
        'category_id' => true,
        'category_name' => true,
        'home_away' => true,
        'invitational' => true,
        'league' => true,
        'location' => true,
        'long_description' => true,
        'opponent' => true,
        'playoff' => true,
        'preset_id' => true,
        'recurrence_id' => true,
        'registration_id' => true,
        'rescheduled' => true,
        'reschedule_note' => true,
        'room_name' => true,
        'scrimmage' => true,
        'start_date' => true,
        'title' => true,
        'tournament' => true,
        'all_day' => true,
        'total_days' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'association_id' => 'association_id',
        'brief_description' => 'brief_description',
        'building_name' => 'building_name',
        'cancelled' => 'cancelled',
        'contact_email' => 'contact_email',
        'contact_name' => 'contact_name',
        'end_date' => 'end_date',
        'event_id' => 'event_id',
        'event_type' => 'event_type',
        'category_id' => 'category_id',
        'category_name' => 'category_name',
        'home_away' => 'home_away',
        'invitational' => 'invitational',
        'league' => 'league',
        'location' => 'location',
        'long_description' => 'long_description',
        'opponent' => 'opponent',
        'playoff' => 'playoff',
        'preset_id' => 'preset_id',
        'recurrence_id' => 'recurrence_id',
        'registration_id' => 'registration_id',
        'rescheduled' => 'rescheduled',
        'reschedule_note' => 'reschedule_note',
        'room_name' => 'room_name',
        'scrimmage' => 'scrimmage',
        'start_date' => 'start_date',
        'title' => 'title',
        'tournament' => 'tournament',
        'all_day' => 'all_day',
        'total_days' => 'total_days',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'association_id' => 'setAssociationId',
        'brief_description' => 'setBriefDescription',
        'building_name' => 'setBuildingName',
        'cancelled' => 'setCancelled',
        'contact_email' => 'setContactEmail',
        'contact_name' => 'setContactName',
        'end_date' => 'setEndDate',
        'event_id' => 'setEventId',
        'event_type' => 'setEventType',
        'category_id' => 'setCategoryId',
        'category_name' => 'setCategoryName',
        'home_away' => 'setHomeAway',
        'invitational' => 'setInvitational',
        'league' => 'setLeague',
        'location' => 'setLocation',
        'long_description' => 'setLongDescription',
        'opponent' => 'setOpponent',
        'playoff' => 'setPlayoff',
        'preset_id' => 'setPresetId',
        'recurrence_id' => 'setRecurrenceId',
        'registration_id' => 'setRegistrationId',
        'rescheduled' => 'setRescheduled',
        'reschedule_note' => 'setRescheduleNote',
        'room_name' => 'setRoomName',
        'scrimmage' => 'setScrimmage',
        'start_date' => 'setStartDate',
        'title' => 'setTitle',
        'tournament' => 'setTournament',
        'all_day' => 'setAllDay',
        'total_days' => 'setTotalDays',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'association_id' => 'getAssociationId',
        'brief_description' => 'getBriefDescription',
        'building_name' => 'getBuildingName',
        'cancelled' => 'getCancelled',
        'contact_email' => 'getContactEmail',
        'contact_name' => 'getContactName',
        'end_date' => 'getEndDate',
        'event_id' => 'getEventId',
        'event_type' => 'getEventType',
        'category_id' => 'getCategoryId',
        'category_name' => 'getCategoryName',
        'home_away' => 'getHomeAway',
        'invitational' => 'getInvitational',
        'league' => 'getLeague',
        'location' => 'getLocation',
        'long_description' => 'getLongDescription',
        'opponent' => 'getOpponent',
        'playoff' => 'getPlayoff',
        'preset_id' => 'getPresetId',
        'recurrence_id' => 'getRecurrenceId',
        'registration_id' => 'getRegistrationId',
        'rescheduled' => 'getRescheduled',
        'reschedule_note' => 'getRescheduleNote',
        'room_name' => 'getRoomName',
        'scrimmage' => 'getScrimmage',
        'start_date' => 'getStartDate',
        'title' => 'getTitle',
        'tournament' => 'getTournament',
        'all_day' => 'getAllDay',
        'total_days' => 'getTotalDays',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('association_id', $data ?? [], null);
        $this->setIfExists('brief_description', $data ?? [], null);
        $this->setIfExists('building_name', $data ?? [], null);
        $this->setIfExists('cancelled', $data ?? [], null);
        $this->setIfExists('contact_email', $data ?? [], null);
        $this->setIfExists('contact_name', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('event_id', $data ?? [], null);
        $this->setIfExists('event_type', $data ?? [], null);
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('category_name', $data ?? [], null);
        $this->setIfExists('home_away', $data ?? [], null);
        $this->setIfExists('invitational', $data ?? [], null);
        $this->setIfExists('league', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('long_description', $data ?? [], null);
        $this->setIfExists('opponent', $data ?? [], null);
        $this->setIfExists('playoff', $data ?? [], null);
        $this->setIfExists('preset_id', $data ?? [], null);
        $this->setIfExists('recurrence_id', $data ?? [], null);
        $this->setIfExists('registration_id', $data ?? [], null);
        $this->setIfExists('rescheduled', $data ?? [], null);
        $this->setIfExists('reschedule_note', $data ?? [], null);
        $this->setIfExists('room_name', $data ?? [], null);
        $this->setIfExists('scrimmage', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('tournament', $data ?? [], null);
        $this->setIfExists('all_day', $data ?? [], null);
        $this->setIfExists('total_days', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets association_id
     *
     * @return int|null
     */
    public function getAssociationId()
    {
        return $this->container['association_id'];
    }

    /**
     * Sets association_id
     *
     * @param int|null $association_id The association id for the event
     *
     * @return self
     */
    public function setAssociationId($association_id)
    {
        if (is_null($association_id)) {
            array_push($this->openAPINullablesSetToNull, 'association_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('association_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['association_id'] = $association_id;

        return $this;
    }

    /**
     * Gets brief_description
     *
     * @return string|null
     */
    public function getBriefDescription()
    {
        return $this->container['brief_description'];
    }

    /**
     * Sets brief_description
     *
     * @param string|null $brief_description The brief description of the event
     *
     * @return self
     */
    public function setBriefDescription($brief_description)
    {
        if (is_null($brief_description)) {
            array_push($this->openAPINullablesSetToNull, 'brief_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brief_description', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brief_description'] = $brief_description;

        return $this;
    }

    /**
     * Gets building_name
     *
     * @return string|null
     */
    public function getBuildingName()
    {
        return $this->container['building_name'];
    }

    /**
     * Sets building_name
     *
     * @param string|null $building_name The name of the building where the event is being held
     *
     * @return self
     */
    public function setBuildingName($building_name)
    {
        if (is_null($building_name)) {
            array_push($this->openAPINullablesSetToNull, 'building_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('building_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['building_name'] = $building_name;

        return $this;
    }

    /**
     * Gets cancelled
     *
     * @return bool|null
     */
    public function getCancelled()
    {
        return $this->container['cancelled'];
    }

    /**
     * Sets cancelled
     *
     * @param bool|null $cancelled If the event is an athletic game, returns true if it is canceled
     *
     * @return self
     */
    public function setCancelled($cancelled)
    {
        if (is_null($cancelled)) {
            array_push($this->openAPINullablesSetToNull, 'cancelled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cancelled', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cancelled'] = $cancelled;

        return $this;
    }

    /**
     * Gets contact_email
     *
     * @return string|null
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     *
     * @param string|null $contact_email The email of the event contact
     *
     * @return self
     */
    public function setContactEmail($contact_email)
    {
        if (is_null($contact_email)) {
            array_push($this->openAPINullablesSetToNull, 'contact_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact_email', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string|null
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string|null $contact_name The name of the event contact
     *
     * @return self
     */
    public function setContactName($contact_name)
    {
        if (is_null($contact_name)) {
            array_push($this->openAPINullablesSetToNull, 'contact_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date The date the event ends
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            array_push($this->openAPINullablesSetToNull, 'end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets event_id
     *
     * @return int|null
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     *
     * @param int|null $event_id The id of the event
     *
     * @return self
     */
    public function setEventId($event_id)
    {
        if (is_null($event_id)) {
            array_push($this->openAPINullablesSetToNull, 'event_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('event_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets event_type
     *
     * @return string|null
     */
    public function getEventType()
    {
        return $this->container['event_type'];
    }

    /**
     * Sets event_type
     *
     * @param string|null $event_type The type of the event
     *
     * @return self
     */
    public function setEventType($event_type)
    {
        if (is_null($event_type)) {
            array_push($this->openAPINullablesSetToNull, 'event_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('event_type', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['event_type'] = $event_type;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return int|null
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int|null $category_id The id of the category the event belongs to
     *
     * @return self
     */
    public function setCategoryId($category_id)
    {
        if (is_null($category_id)) {
            array_push($this->openAPINullablesSetToNull, 'category_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets category_name
     *
     * @return string|null
     */
    public function getCategoryName()
    {
        return $this->container['category_name'];
    }

    /**
     * Sets category_name
     *
     * @param string|null $category_name The name of the category the event belongs to
     *
     * @return self
     */
    public function setCategoryName($category_name)
    {
        if (is_null($category_name)) {
            array_push($this->openAPINullablesSetToNull, 'category_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['category_name'] = $category_name;

        return $this;
    }

    /**
     * Gets home_away
     *
     * @return string|null
     */
    public function getHomeAway()
    {
        return $this->container['home_away'];
    }

    /**
     * Sets home_away
     *
     * @param string|null $home_away If the event is an athletic game, returns the home or away status of the game
     *
     * @return self
     */
    public function setHomeAway($home_away)
    {
        if (is_null($home_away)) {
            array_push($this->openAPINullablesSetToNull, 'home_away');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('home_away', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['home_away'] = $home_away;

        return $this;
    }

    /**
     * Gets invitational
     *
     * @return bool|null
     */
    public function getInvitational()
    {
        return $this->container['invitational'];
    }

    /**
     * Sets invitational
     *
     * @param bool|null $invitational If the event is an athletic game, returns true if the game is an invitational
     *
     * @return self
     */
    public function setInvitational($invitational)
    {
        if (is_null($invitational)) {
            array_push($this->openAPINullablesSetToNull, 'invitational');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invitational', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invitational'] = $invitational;

        return $this;
    }

    /**
     * Gets league
     *
     * @return bool|null
     */
    public function getLeague()
    {
        return $this->container['league'];
    }

    /**
     * Sets league
     *
     * @param bool|null $league If the event is an athletic game, returns true if the game is a league game
     *
     * @return self
     */
    public function setLeague($league)
    {
        if (is_null($league)) {
            array_push($this->openAPINullablesSetToNull, 'league');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('league', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['league'] = $league;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location The location of the event
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            array_push($this->openAPINullablesSetToNull, 'location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets long_description
     *
     * @return string|null
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     *
     * @param string|null $long_description The long description of the event
     *
     * @return self
     */
    public function setLongDescription($long_description)
    {
        if (is_null($long_description)) {
            array_push($this->openAPINullablesSetToNull, 'long_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('long_description', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets opponent
     *
     * @return string|null
     */
    public function getOpponent()
    {
        return $this->container['opponent'];
    }

    /**
     * Sets opponent
     *
     * @param string|null $opponent If the event is an athletic game, returns the name of the opponent
     *
     * @return self
     */
    public function setOpponent($opponent)
    {
        if (is_null($opponent)) {
            array_push($this->openAPINullablesSetToNull, 'opponent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('opponent', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['opponent'] = $opponent;

        return $this;
    }

    /**
     * Gets playoff
     *
     * @return bool|null
     */
    public function getPlayoff()
    {
        return $this->container['playoff'];
    }

    /**
     * Sets playoff
     *
     * @param bool|null $playoff If the event is an athletic game, returns true if the game is a playoff game
     *
     * @return self
     */
    public function setPlayoff($playoff)
    {
        if (is_null($playoff)) {
            array_push($this->openAPINullablesSetToNull, 'playoff');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('playoff', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['playoff'] = $playoff;

        return $this;
    }

    /**
     * Gets preset_id
     *
     * @return int|null
     */
    public function getPresetId()
    {
        return $this->container['preset_id'];
    }

    /**
     * Sets preset_id
     *
     * @param int|null $preset_id The event preset id
     *
     * @return self
     */
    public function setPresetId($preset_id)
    {
        if (is_null($preset_id)) {
            array_push($this->openAPINullablesSetToNull, 'preset_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preset_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preset_id'] = $preset_id;

        return $this;
    }

    /**
     * Gets recurrence_id
     *
     * @return int|null
     */
    public function getRecurrenceId()
    {
        return $this->container['recurrence_id'];
    }

    /**
     * Sets recurrence_id
     *
     * @param int|null $recurrence_id The recurrence id of the event
     *
     * @return self
     */
    public function setRecurrenceId($recurrence_id)
    {
        if (is_null($recurrence_id)) {
            array_push($this->openAPINullablesSetToNull, 'recurrence_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recurrence_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recurrence_id'] = $recurrence_id;

        return $this;
    }

    /**
     * Gets registration_id
     *
     * @return int|null
     */
    public function getRegistrationId()
    {
        return $this->container['registration_id'];
    }

    /**
     * Sets registration_id
     *
     * @param int|null $registration_id the registration id of the event
     *
     * @return self
     */
    public function setRegistrationId($registration_id)
    {
        if (is_null($registration_id)) {
            array_push($this->openAPINullablesSetToNull, 'registration_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registration_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registration_id'] = $registration_id;

        return $this;
    }

    /**
     * Gets rescheduled
     *
     * @return bool|null
     */
    public function getRescheduled()
    {
        return $this->container['rescheduled'];
    }

    /**
     * Sets rescheduled
     *
     * @param bool|null $rescheduled If the event is an athletic game, returns true if the game was rescheduled
     *
     * @return self
     */
    public function setRescheduled($rescheduled)
    {
        if (is_null($rescheduled)) {
            array_push($this->openAPINullablesSetToNull, 'rescheduled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rescheduled', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rescheduled'] = $rescheduled;

        return $this;
    }

    /**
     * Gets reschedule_note
     *
     * @return string|null
     */
    public function getRescheduleNote()
    {
        return $this->container['reschedule_note'];
    }

    /**
     * Sets reschedule_note
     *
     * @param string|null $reschedule_note If the event is an athletic game, the rescheduled note (usually the reason for the reschedule)
     *
     * @return self
     */
    public function setRescheduleNote($reschedule_note)
    {
        if (is_null($reschedule_note)) {
            array_push($this->openAPINullablesSetToNull, 'reschedule_note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reschedule_note', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reschedule_note'] = $reschedule_note;

        return $this;
    }

    /**
     * Gets room_name
     *
     * @return string|null
     */
    public function getRoomName()
    {
        return $this->container['room_name'];
    }

    /**
     * Sets room_name
     *
     * @param string|null $room_name The name of the room where the event is being held
     *
     * @return self
     */
    public function setRoomName($room_name)
    {
        if (is_null($room_name)) {
            array_push($this->openAPINullablesSetToNull, 'room_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('room_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['room_name'] = $room_name;

        return $this;
    }

    /**
     * Gets scrimmage
     *
     * @return bool|null
     */
    public function getScrimmage()
    {
        return $this->container['scrimmage'];
    }

    /**
     * Sets scrimmage
     *
     * @param bool|null $scrimmage If the event is an athletic game, returns true if the game is a scrimmage
     *
     * @return self
     */
    public function setScrimmage($scrimmage)
    {
        if (is_null($scrimmage)) {
            array_push($this->openAPINullablesSetToNull, 'scrimmage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scrimmage', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scrimmage'] = $scrimmage;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date The date the event starts
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            array_push($this->openAPINullablesSetToNull, 'start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_date', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title of the event
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets tournament
     *
     * @return bool|null
     */
    public function getTournament()
    {
        return $this->container['tournament'];
    }

    /**
     * Sets tournament
     *
     * @param bool|null $tournament If the event is an athletic game, returns true if the game is part of a tournament
     *
     * @return self
     */
    public function setTournament($tournament)
    {
        if (is_null($tournament)) {
            array_push($this->openAPINullablesSetToNull, 'tournament');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tournament', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tournament'] = $tournament;

        return $this;
    }

    /**
     * Gets all_day
     *
     * @return bool|null
     */
    public function getAllDay()
    {
        return $this->container['all_day'];
    }

    /**
     * Sets all_day
     *
     * @param bool|null $all_day Returns true if the event happens all day
     *
     * @return self
     */
    public function setAllDay($all_day)
    {
        if (is_null($all_day)) {
            array_push($this->openAPINullablesSetToNull, 'all_day');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('all_day', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['all_day'] = $all_day;

        return $this;
    }

    /**
     * Gets total_days
     *
     * @return int|null
     */
    public function getTotalDays()
    {
        return $this->container['total_days'];
    }

    /**
     * Sets total_days
     *
     * @param int|null $total_days Shows the total number of days the event spans
     *
     * @return self
     */
    public function setTotalDays($total_days)
    {
        if (is_null($total_days)) {
            array_push($this->openAPINullablesSetToNull, 'total_days');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_days', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_days'] = $total_days;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
