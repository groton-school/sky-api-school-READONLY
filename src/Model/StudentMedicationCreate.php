<?php
/**
 * StudentMedicationCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * StudentMedicationCreate Class Doc Comment
 *
 * @category Class
 * @description Student medication create
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StudentMedicationCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StudentMedicationCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'userId' => 'int',
        'medicationType' => 'string',
        'dateAsOf' => '\DateTime',
        'dateUntil' => '\DateTime',
        'location' => 'string',
        'dosage' => 'string',
        'dispense' => '\SKY\School\Model\MedicationDosageCreate',
        'conditions' => 'int[]',
        'allergies' => 'int[]',
        'notes' => 'string',
        'roleAccess' => '\SKY\School\Model\MedicalSecurityRole[]',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'userId' => 'int32',
        'medicationType' => null,
        'dateAsOf' => 'date-time',
        'dateUntil' => 'date-time',
        'location' => null,
        'dosage' => null,
        'dispense' => null,
        'conditions' => 'int32',
        'allergies' => 'int32',
        'notes' => null,
        'roleAccess' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'userId' => false,
        'medicationType' => false,
        'dateAsOf' => false,
        'dateUntil' => true,
        'location' => true,
        'dosage' => true,
        'dispense' => false,
        'conditions' => true,
        'allergies' => true,
        'notes' => true,
        'roleAccess' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'userId' => 'user_id',
        'medicationType' => 'medication_type',
        'dateAsOf' => 'date_as_of',
        'dateUntil' => 'date_until',
        'location' => 'location',
        'dosage' => 'dosage',
        'dispense' => 'dispense',
        'conditions' => 'conditions',
        'allergies' => 'allergies',
        'notes' => 'notes',
        'roleAccess' => 'role_access',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'userId' => 'setUserId',
        'medicationType' => 'setMedicationType',
        'dateAsOf' => 'setDateAsOf',
        'dateUntil' => 'setDateUntil',
        'location' => 'setLocation',
        'dosage' => 'setDosage',
        'dispense' => 'setDispense',
        'conditions' => 'setConditions',
        'allergies' => 'setAllergies',
        'notes' => 'setNotes',
        'roleAccess' => 'setRoleAccess',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'userId' => 'getUserId',
        'medicationType' => 'getMedicationType',
        'dateAsOf' => 'getDateAsOf',
        'dateUntil' => 'getDateUntil',
        'location' => 'getLocation',
        'dosage' => 'getDosage',
        'dispense' => 'getDispense',
        'conditions' => 'getConditions',
        'allergies' => 'getAllergies',
        'notes' => 'getNotes',
        'roleAccess' => 'getRoleAccess',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('userId', $data ?? [], null);
        $this->setIfExists('medicationType', $data ?? [], null);
        $this->setIfExists('dateAsOf', $data ?? [], null);
        $this->setIfExists('dateUntil', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('dosage', $data ?? [], null);
        $this->setIfExists('dispense', $data ?? [], null);
        $this->setIfExists('conditions', $data ?? [], null);
        $this->setIfExists('allergies', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('roleAccess', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['userId'] === null) {
            $invalidProperties[] = "'userId' can't be null";
        }
        if ($this->container['medicationType'] === null) {
            $invalidProperties[] = "'medicationType' can't be null";
        }
        if ($this->container['dateAsOf'] === null) {
            $invalidProperties[] = "'dateAsOf' can't be null";
        }
        if ($this->container['dispense'] === null) {
            $invalidProperties[] = "'dispense' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets userId
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param int $userId The ID of the student
     *
     * @return self
     */
    public function setUserId($userId)
    {
        if (is_null($userId)) {
            throw new \InvalidArgumentException('non-nullable userId cannot be null');
        }
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets medicationType
     *
     * @return string
     */
    public function getMedicationType()
    {
        return $this->container['medicationType'];
    }

    /**
     * Sets medicationType
     *
     * @param string $medicationType The ID or description of the medication type
     *
     * @return self
     */
    public function setMedicationType($medicationType)
    {
        if (is_null($medicationType)) {
            throw new \InvalidArgumentException('non-nullable medicationType cannot be null');
        }
        $this->container['medicationType'] = $medicationType;

        return $this;
    }

    /**
     * Gets dateAsOf
     *
     * @return \DateTime
     */
    public function getDateAsOf()
    {
        return $this->container['dateAsOf'];
    }

    /**
     * Sets dateAsOf
     *
     * @param \DateTime $dateAsOf The date when medication began. Use format ...  Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
     *
     * @return self
     */
    public function setDateAsOf($dateAsOf)
    {
        if (is_null($dateAsOf)) {
            throw new \InvalidArgumentException('non-nullable dateAsOf cannot be null');
        }
        $this->container['dateAsOf'] = $dateAsOf;

        return $this;
    }

    /**
     * Gets dateUntil
     *
     * @return \DateTime|null
     */
    public function getDateUntil()
    {
        return $this->container['dateUntil'];
    }

    /**
     * Sets dateUntil
     *
     * @param \DateTime|null $dateUntil The date when medication ended. Use format ...  Uses <a href=\"https://tools.ietf.org/html/rfc3339\" target=\"_blank\">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
     *
     * @return self
     */
    public function setDateUntil($dateUntil)
    {
        if (is_null($dateUntil)) {
            array_push($this->openAPINullablesSetToNull, 'dateUntil');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dateUntil', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dateUntil'] = $dateUntil;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location The ID or description of the location of the medication.
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            array_push($this->openAPINullablesSetToNull, 'location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets dosage
     *
     * @return string|null
     */
    public function getDosage()
    {
        return $this->container['dosage'];
    }

    /**
     * Sets dosage
     *
     * @param string|null $dosage The dosage of the medication to dispense
     *
     * @return self
     */
    public function setDosage($dosage)
    {
        if (is_null($dosage)) {
            array_push($this->openAPINullablesSetToNull, 'dosage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dosage', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dosage'] = $dosage;

        return $this;
    }

    /**
     * Gets dispense
     *
     * @return \SKY\School\Model\MedicationDosageCreate
     */
    public function getDispense()
    {
        return $this->container['dispense'];
    }

    /**
     * Sets dispense
     *
     * @param \SKY\School\Model\MedicationDosageCreate $dispense dispense
     *
     * @return self
     */
    public function setDispense($dispense)
    {
        if (is_null($dispense)) {
            throw new \InvalidArgumentException('non-nullable dispense cannot be null');
        }
        $this->container['dispense'] = $dispense;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return int[]|null
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param int[]|null $conditions The list of student condition IDs for the condition. If included, this list will replace the existing list of conditions on the medication.
     *
     * @return self
     */
    public function setConditions($conditions)
    {
        if (is_null($conditions)) {
            array_push($this->openAPINullablesSetToNull, 'conditions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('conditions', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets allergies
     *
     * @return int[]|null
     */
    public function getAllergies()
    {
        return $this->container['allergies'];
    }

    /**
     * Sets allergies
     *
     * @param int[]|null $allergies The list of student allergy IDs for the allergy. If included, this list will replace the existing list of allegies on the medication.
     *
     * @return self
     */
    public function setAllergies($allergies)
    {
        if (is_null($allergies)) {
            array_push($this->openAPINullablesSetToNull, 'allergies');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allergies', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['allergies'] = $allergies;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes Notes for medication
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            array_push($this->openAPINullablesSetToNull, 'notes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notes', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets roleAccess
     *
     * @return \SKY\School\Model\MedicalSecurityRole[]|null
     */
    public function getRoleAccess()
    {
        return $this->container['roleAccess'];
    }

    /**
     * Sets roleAccess
     *
     * @param \SKY\School\Model\MedicalSecurityRole[]|null $roleAccess Array of roles
     *
     * @return self
     */
    public function setRoleAccess($roleAccess)
    {
        if (is_null($roleAccess)) {
            array_push($this->openAPINullablesSetToNull, 'roleAccess');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roleAccess', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roleAccess'] = $roleAccess;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
