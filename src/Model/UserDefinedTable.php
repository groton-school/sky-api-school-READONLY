<?php
/**
 * UserDefinedTable
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * UserDefinedTable Class Doc Comment
 *
 * @category Class
 * @description User Defined Table
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserDefinedTable implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserDefinedTable';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'table_id' => 'int',
        'table_name' => 'string',
        'use_abbreviations' => 'bool',
        'in_use' => 'bool',
        'base_table' => 'bool',
        'system_table' => 'bool',
        'require_abbreviation' => 'bool',
        'modify_user' => 'string',
        'vendor_id' => 'int',
        'values' => '\SKY\School\Model\UserDefinedTableValue[]',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'table_id' => 'int32',
        'table_name' => null,
        'use_abbreviations' => null,
        'in_use' => null,
        'base_table' => null,
        'system_table' => null,
        'require_abbreviation' => null,
        'modify_user' => null,
        'vendor_id' => 'int32',
        'values' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'table_id' => true,
        'table_name' => true,
        'use_abbreviations' => true,
        'in_use' => true,
        'base_table' => true,
        'system_table' => true,
        'require_abbreviation' => true,
        'modify_user' => true,
        'vendor_id' => true,
        'values' => true,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'table_id' => 'table_id',
        'table_name' => 'table_name',
        'use_abbreviations' => 'use_abbreviations',
        'in_use' => 'in_use',
        'base_table' => 'base_table',
        'system_table' => 'system_table',
        'require_abbreviation' => 'require_abbreviation',
        'modify_user' => 'modify_user',
        'vendor_id' => 'vendor_id',
        'values' => 'values',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'table_id' => 'setTableId',
        'table_name' => 'setTableName',
        'use_abbreviations' => 'setUseAbbreviations',
        'in_use' => 'setInUse',
        'base_table' => 'setBaseTable',
        'system_table' => 'setSystemTable',
        'require_abbreviation' => 'setRequireAbbreviation',
        'modify_user' => 'setModifyUser',
        'vendor_id' => 'setVendorId',
        'values' => 'setValues',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'table_id' => 'getTableId',
        'table_name' => 'getTableName',
        'use_abbreviations' => 'getUseAbbreviations',
        'in_use' => 'getInUse',
        'base_table' => 'getBaseTable',
        'system_table' => 'getSystemTable',
        'require_abbreviation' => 'getRequireAbbreviation',
        'modify_user' => 'getModifyUser',
        'vendor_id' => 'getVendorId',
        'values' => 'getValues',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('table_id', $data ?? [], null);
        $this->setIfExists('table_name', $data ?? [], null);
        $this->setIfExists('use_abbreviations', $data ?? [], null);
        $this->setIfExists('in_use', $data ?? [], null);
        $this->setIfExists('base_table', $data ?? [], null);
        $this->setIfExists('system_table', $data ?? [], null);
        $this->setIfExists('require_abbreviation', $data ?? [], null);
        $this->setIfExists('modify_user', $data ?? [], null);
        $this->setIfExists('vendor_id', $data ?? [], null);
        $this->setIfExists('values', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets table_id
     *
     * @return int|null
     */
    public function getTableId()
    {
        return $this->container['table_id'];
    }

    /**
     * Sets table_id
     *
     * @param int|null $table_id
     *
     * @return self
     */
    public function setTableId($table_id)
    {
        if (is_null($table_id)) {
            array_push($this->openAPINullablesSetToNull, 'table_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('table_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['table_id'] = $table_id;

        return $this;
    }

    /**
     * Gets table_name
     *
     * @return string|null
     */
    public function getTableName()
    {
        return $this->container['table_name'];
    }

    /**
     * Sets table_name
     *
     * @param string|null $table_name
     *
     * @return self
     */
    public function setTableName($table_name)
    {
        if (is_null($table_name)) {
            array_push($this->openAPINullablesSetToNull, 'table_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('table_name', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['table_name'] = $table_name;

        return $this;
    }

    /**
     * Gets use_abbreviations
     *
     * @return bool|null
     */
    public function getUseAbbreviations()
    {
        return $this->container['use_abbreviations'];
    }

    /**
     * Sets use_abbreviations
     *
     * @param bool|null $use_abbreviations
     *
     * @return self
     */
    public function setUseAbbreviations($use_abbreviations)
    {
        if (is_null($use_abbreviations)) {
            array_push($this->openAPINullablesSetToNull, 'use_abbreviations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('use_abbreviations', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['use_abbreviations'] = $use_abbreviations;

        return $this;
    }

    /**
     * Gets in_use
     *
     * @return bool|null
     */
    public function getInUse()
    {
        return $this->container['in_use'];
    }

    /**
     * Sets in_use
     *
     * @param bool|null $in_use
     *
     * @return self
     */
    public function setInUse($in_use)
    {
        if (is_null($in_use)) {
            array_push($this->openAPINullablesSetToNull, 'in_use');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('in_use', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['in_use'] = $in_use;

        return $this;
    }

    /**
     * Gets base_table
     *
     * @return bool|null
     */
    public function getBaseTable()
    {
        return $this->container['base_table'];
    }

    /**
     * Sets base_table
     *
     * @param bool|null $base_table
     *
     * @return self
     */
    public function setBaseTable($base_table)
    {
        if (is_null($base_table)) {
            array_push($this->openAPINullablesSetToNull, 'base_table');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('base_table', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['base_table'] = $base_table;

        return $this;
    }

    /**
     * Gets system_table
     *
     * @return bool|null
     */
    public function getSystemTable()
    {
        return $this->container['system_table'];
    }

    /**
     * Sets system_table
     *
     * @param bool|null $system_table
     *
     * @return self
     */
    public function setSystemTable($system_table)
    {
        if (is_null($system_table)) {
            array_push($this->openAPINullablesSetToNull, 'system_table');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('system_table', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['system_table'] = $system_table;

        return $this;
    }

    /**
     * Gets require_abbreviation
     *
     * @return bool|null
     */
    public function getRequireAbbreviation()
    {
        return $this->container['require_abbreviation'];
    }

    /**
     * Sets require_abbreviation
     *
     * @param bool|null $require_abbreviation
     *
     * @return self
     */
    public function setRequireAbbreviation($require_abbreviation)
    {
        if (is_null($require_abbreviation)) {
            array_push($this->openAPINullablesSetToNull, 'require_abbreviation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('require_abbreviation', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['require_abbreviation'] = $require_abbreviation;

        return $this;
    }

    /**
     * Gets modify_user
     *
     * @return string|null
     */
    public function getModifyUser()
    {
        return $this->container['modify_user'];
    }

    /**
     * Sets modify_user
     *
     * @param string|null $modify_user
     *
     * @return self
     */
    public function setModifyUser($modify_user)
    {
        if (is_null($modify_user)) {
            array_push($this->openAPINullablesSetToNull, 'modify_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('modify_user', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['modify_user'] = $modify_user;

        return $this;
    }

    /**
     * Gets vendor_id
     *
     * @return int|null
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     *
     * @param int|null $vendor_id
     *
     * @return self
     */
    public function setVendorId($vendor_id)
    {
        if (is_null($vendor_id)) {
            array_push($this->openAPINullablesSetToNull, 'vendor_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vendor_id', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }

    /**
     * Gets values
     *
     * @return \SKY\School\Model\UserDefinedTableValue[]|null
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     *
     * @param \SKY\School\Model\UserDefinedTableValue[]|null $values
     *
     * @return self
     */
    public function setValues($values)
    {
        if (is_null($values)) {
            array_push($this->openAPINullablesSetToNull, 'values');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('values', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['values'] = $values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
