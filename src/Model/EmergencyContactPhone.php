<?php
/**
 * EmergencyContactPhone
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Model;

use ArrayAccess;
use SKY\School\ObjectSerializer;

/**
 * EmergencyContactPhone Class Doc Comment
 *
 * @category Class
 * @description Emergency Contact Phone Model
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmergencyContactPhone implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmergencyContactPhone';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'callDialer' => 'string',
        'contactId' => 'int',
        'firstName' => 'string',
        'lastName' => 'string',
        'phoneId' => 'int',
        'phoneIndexId' => 'int',
        'phoneNumber' => 'string',
        'phoneType' => 'string',
        'relationship' => 'string',
        'relationshipId' => 'int',
        'relationshipUserId' => 'int',
        'sortOrder' => 'int',
        'userContactId' => 'int',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'callDialer' => null,
        'contactId' => 'int32',
        'firstName' => null,
        'lastName' => null,
        'phoneId' => 'int32',
        'phoneIndexId' => 'int32',
        'phoneNumber' => null,
        'phoneType' => null,
        'relationship' => null,
        'relationshipId' => 'int32',
        'relationshipUserId' => 'int32',
        'sortOrder' => 'int32',
        'userContactId' => 'int32',
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'callDialer' => true,
        'contactId' => false,
        'firstName' => true,
        'lastName' => true,
        'phoneId' => false,
        'phoneIndexId' => false,
        'phoneNumber' => true,
        'phoneType' => true,
        'relationship' => true,
        'relationshipId' => false,
        'relationshipUserId' => false,
        'sortOrder' => true,
        'userContactId' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'callDialer' => 'call_dialer',
        'contactId' => 'contact_id',
        'firstName' => 'first_name',
        'lastName' => 'last_name',
        'phoneId' => 'phone_id',
        'phoneIndexId' => 'phone_index_id',
        'phoneNumber' => 'phone_number',
        'phoneType' => 'phone_type',
        'relationship' => 'relationship',
        'relationshipId' => 'relationship_id',
        'relationshipUserId' => 'relationship_user_id',
        'sortOrder' => 'sort_order',
        'userContactId' => 'user_contact_id',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'callDialer' => 'setCallDialer',
        'contactId' => 'setContactId',
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'phoneId' => 'setPhoneId',
        'phoneIndexId' => 'setPhoneIndexId',
        'phoneNumber' => 'setPhoneNumber',
        'phoneType' => 'setPhoneType',
        'relationship' => 'setRelationship',
        'relationshipId' => 'setRelationshipId',
        'relationshipUserId' => 'setRelationshipUserId',
        'sortOrder' => 'setSortOrder',
        'userContactId' => 'setUserContactId',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'callDialer' => 'getCallDialer',
        'contactId' => 'getContactId',
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'phoneId' => 'getPhoneId',
        'phoneIndexId' => 'getPhoneIndexId',
        'phoneNumber' => 'getPhoneNumber',
        'phoneType' => 'getPhoneType',
        'relationship' => 'getRelationship',
        'relationshipId' => 'getRelationshipId',
        'relationshipUserId' => 'getRelationshipUserId',
        'sortOrder' => 'getSortOrder',
        'userContactId' => 'getUserContactId',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('callDialer', $data ?? [], null);
        $this->setIfExists('contactId', $data ?? [], null);
        $this->setIfExists('firstName', $data ?? [], null);
        $this->setIfExists('lastName', $data ?? [], null);
        $this->setIfExists('phoneId', $data ?? [], null);
        $this->setIfExists('phoneIndexId', $data ?? [], null);
        $this->setIfExists('phoneNumber', $data ?? [], null);
        $this->setIfExists('phoneType', $data ?? [], null);
        $this->setIfExists('relationship', $data ?? [], null);
        $this->setIfExists('relationshipId', $data ?? [], null);
        $this->setIfExists('relationshipUserId', $data ?? [], null);
        $this->setIfExists('sortOrder', $data ?? [], null);
        $this->setIfExists('userContactId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Emergency contact phone ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets callDialer
     *
     * @return string|null
     */
    public function getCallDialer()
    {
        return $this->container['callDialer'];
    }

    /**
     * Sets callDialer
     *
     * @param string|null $callDialer Call dialer
     *
     * @return self
     */
    public function setCallDialer($callDialer)
    {
        if (is_null($callDialer)) {
            array_push($this->openAPINullablesSetToNull, 'callDialer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('callDialer', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['callDialer'] = $callDialer;

        return $this;
    }

    /**
     * Gets contactId
     *
     * @return int|null
     */
    public function getContactId()
    {
        return $this->container['contactId'];
    }

    /**
     * Sets contactId
     *
     * @param int|null $contactId Contact ID
     *
     * @return self
     */
    public function setContactId($contactId)
    {
        if (is_null($contactId)) {
            throw new \InvalidArgumentException('non-nullable contactId cannot be null');
        }
        $this->container['contactId'] = $contactId;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName The first name of the emergency contact
     *
     * @return self
     */
    public function setFirstName($firstName)
    {
        if (is_null($firstName)) {
            array_push($this->openAPINullablesSetToNull, 'firstName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('firstName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string|null $lastName The last name of the emergency contact
     *
     * @return self
     */
    public function setLastName($lastName)
    {
        if (is_null($lastName)) {
            array_push($this->openAPINullablesSetToNull, 'lastName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastName', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets phoneId
     *
     * @return int|null
     */
    public function getPhoneId()
    {
        return $this->container['phoneId'];
    }

    /**
     * Sets phoneId
     *
     * @param int|null $phoneId Phone ID
     *
     * @return self
     */
    public function setPhoneId($phoneId)
    {
        if (is_null($phoneId)) {
            throw new \InvalidArgumentException('non-nullable phoneId cannot be null');
        }
        $this->container['phoneId'] = $phoneId;

        return $this;
    }

    /**
     * Gets phoneIndexId
     *
     * @return int|null
     */
    public function getPhoneIndexId()
    {
        return $this->container['phoneIndexId'];
    }

    /**
     * Sets phoneIndexId
     *
     * @param int|null $phoneIndexId Phone index ID
     *
     * @return self
     */
    public function setPhoneIndexId($phoneIndexId)
    {
        if (is_null($phoneIndexId)) {
            throw new \InvalidArgumentException('non-nullable phoneIndexId cannot be null');
        }
        $this->container['phoneIndexId'] = $phoneIndexId;

        return $this;
    }

    /**
     * Gets phoneNumber
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phoneNumber'];
    }

    /**
     * Sets phoneNumber
     *
     * @param string|null $phoneNumber Phone number
     *
     * @return self
     */
    public function setPhoneNumber($phoneNumber)
    {
        if (is_null($phoneNumber)) {
            array_push($this->openAPINullablesSetToNull, 'phoneNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phoneNumber', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phoneNumber'] = $phoneNumber;

        return $this;
    }

    /**
     * Gets phoneType
     *
     * @return string|null
     */
    public function getPhoneType()
    {
        return $this->container['phoneType'];
    }

    /**
     * Sets phoneType
     *
     * @param string|null $phoneType Phone type
     *
     * @return self
     */
    public function setPhoneType($phoneType)
    {
        if (is_null($phoneType)) {
            array_push($this->openAPINullablesSetToNull, 'phoneType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phoneType', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phoneType'] = $phoneType;

        return $this;
    }

    /**
     * Gets relationship
     *
     * @return string|null
     */
    public function getRelationship()
    {
        return $this->container['relationship'];
    }

    /**
     * Sets relationship
     *
     * @param string|null $relationship The relationship of the emergency contact to the user
     *
     * @return self
     */
    public function setRelationship($relationship)
    {
        if (is_null($relationship)) {
            array_push($this->openAPINullablesSetToNull, 'relationship');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('relationship', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['relationship'] = $relationship;

        return $this;
    }

    /**
     * Gets relationshipId
     *
     * @return int|null
     */
    public function getRelationshipId()
    {
        return $this->container['relationshipId'];
    }

    /**
     * Sets relationshipId
     *
     * @param int|null $relationshipId The relationship ID of the emergency contact to the user
     *
     * @return self
     */
    public function setRelationshipId($relationshipId)
    {
        if (is_null($relationshipId)) {
            throw new \InvalidArgumentException('non-nullable relationshipId cannot be null');
        }
        $this->container['relationshipId'] = $relationshipId;

        return $this;
    }

    /**
     * Gets relationshipUserId
     *
     * @return int|null
     */
    public function getRelationshipUserId()
    {
        return $this->container['relationshipUserId'];
    }

    /**
     * Sets relationshipUserId
     *
     * @param int|null $relationshipUserId The user ID of the emergency contact
     *
     * @return self
     */
    public function setRelationshipUserId($relationshipUserId)
    {
        if (is_null($relationshipUserId)) {
            throw new \InvalidArgumentException('non-nullable relationshipUserId cannot be null');
        }
        $this->container['relationshipUserId'] = $relationshipUserId;

        return $this;
    }

    /**
     * Gets sortOrder
     *
     * @return int|null
     */
    public function getSortOrder()
    {
        return $this->container['sortOrder'];
    }

    /**
     * Sets sortOrder
     *
     * @param int|null $sortOrder Sort order
     *
     * @return self
     */
    public function setSortOrder($sortOrder)
    {
        if (is_null($sortOrder)) {
            array_push($this->openAPINullablesSetToNull, 'sortOrder');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sortOrder', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sortOrder'] = $sortOrder;

        return $this;
    }

    /**
     * Gets userContactId
     *
     * @return int|null
     */
    public function getUserContactId()
    {
        return $this->container['userContactId'];
    }

    /**
     * Sets userContactId
     *
     * @param int|null $userContactId User contact ID
     *
     * @return self
     */
    public function setUserContactId($userContactId)
    {
        if (is_null($userContactId)) {
            throw new \InvalidArgumentException('non-nullable userContactId cannot be null');
        }
        $this->container['userContactId'] = $userContactId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
