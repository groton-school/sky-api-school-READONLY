/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Core roles
         * @description Returns a collection of core school user roles.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li><li>Any Manager Role</li></ul>
         */
        get: operations["v1rolesget"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/years": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Core years
         * @description Returns a collection of core school years.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Academic Group Manager</li><li>Schedule Manager</li><li>Platform Manager</li><li>Any Manager Role</li></ul>
         */
        get: operations["v1yearsget"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/levels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Core school levels
         * @description Returns a collection of core school levels.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li><li>Any Manager Role</li></ul>
         */
        get: operations["v1levelsget"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/gradelevels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Core grade levels
         * @description Returns a collection of core school grade levels.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Academic Group Manager</li><li>Schedule Manager</li><li>Platform Manager</li><li>Any Manager Role</li></ul>
         */
        get: operations["v1gradelevelsget"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/offeringtypes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Core offering types
         * @description Returns a collection of core school offering types.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Academic Group Manager</li><li>Schedule Manager</li><li>Platform Manager</li></ul>
         */
        get: operations["v1offeringtypesget"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/terms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Core terms
         * @description Returns a collection of core school terms.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Academic Group Manager</li><li>Schedule Manager</li><li>Platform Manager</li><li>Any Manager Role</li></ul>
         */
        get: operations["v1termsget"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users by role(s)
         * @description Returns a paginated collection of users, limited to 100 users per page.<br />
         *     Use the record number as the ```marker``` value to return the next set of results. For example: ```marker=101``` will return the second set of results.<br />
         *     Results are dependent on the directory settings of each user.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Billing Clerk</li><li>Password Manager</li><li>Contact Card Manager</li><li>Platform Manager</li></ul>
         */
        get: operations["v1usersget"];
        put?: never;
        /**
         * User create
         * @description Creates a new user record.<br />
         *     Returns the newly created ID. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Platform Manager</li><li>Contact Card Manager</li></ul>
         */
        post: operations["V1UsersPost"];
        delete?: never;
        options?: never;
        head?: never;
        /**
         * User update
         * @description Updates the record of a single user. <b>Note:</b> Deleting/clearing data from a field requires the use of the ```fields_to_delete``` property described below <br />
         *     Returns the ID of the user just updated upon success. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Platform Manager</li><li>Contact Card Manager</li></ul>
         */
        patch: operations["V1UsersPatch"];
        trace?: never;
    };
    "/v1/academics/sections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Academics sections by school level
         * @description Returns a collection of academic sections for the specified school level.<br />
         *     Requires the following role in the Education Management system:
         *     <ul><li>Academic Group Manager</li></ul>
         */
        get: operations["V1AcademicsSectionsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/academics/sections/{section_id}/assignments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Academics assignments by section
         * @description Returns a collection of assignments for the specified ```section_id```.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Academic Group Manager</li><li>Student</li><li>Teacher</li><li>Pending Teacher</li></ul>
         */
        get: operations["V1AcademicsSectionsBySection_idAssignmentsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{user_id}/relationships": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users relationships by user
         * @description Returns a collection of a relationships for the specified ```user_id```.
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Payment Services Manager</li><li>Integration Manager</li><li>Contact Card Manager</li><li>Platform Manager</li></ul>
         */
        get: operations["V1UsersByUser_idRelationshipsGet"];
        put?: never;
        /**
         * Users relationship create
         * @description Creates a relationship record for the specified ```user_id```.<br />
         *     This doesn't create a user profile for the related individual.<br />
         *     Returns 200 OK
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Payment Services Manager</li><li>Integration Manager</li><li>Contact Card Manager</li><li>Platform Manager</li></ul>
         */
        post: operations["V1UsersByUser_idRelationshipsPost"];
        /**
         * Users relationship delete
         * @description Removes a relationship record from the specified ```user_id```.<br />
         *     If the related individual is also a user, the user profile of that user is preserved. Individuals may need to review or update their emergency contacts.
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Payment Services Manager</li><li>Integration Manager</li><li>Contact Card Manager</li><li>Platform Manager</li></ul>
         */
        delete: operations["V1UsersByUser_idRelationshipsDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/phonetypes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users phone types
         * @description Returns a collection of phone types.
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li><li>Any Manager Role</li></ul>
         */
        get: operations["V1UsersPhonetypesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/extended": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users extended by role(s)
         * @description Returns a paginated collection of extended user details, limited to 1000 users per page.<br />
         *     Use the last user's ID as the ```marker``` value to return the next set of results.<br />
         *     Requires the following role in the Education Management system:
         *     <ul><li>SKY API Data Sync</li></ul>
         */
        get: operations["V1UsersExtendedGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/academics/sections/{section_id}/students": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Academics students by section
         * @description Returns a collection of students in the specified ```section_id```.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Academic Group Manager</li><li>Teacher</li></ul>
         */
        get: operations["V1AcademicsSectionsBySection_idStudentsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/changed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users changed by base role(s)
         * @description Returns a paginated collection of users that have been created or modified within the specified timeframe. The timeframe is from the start_date to the start_date plus seven days.<br />
         *     Requires the following role in the Education Management system:
         *     <ul><li>SKY API Data Sync</li></ul>
         */
        get: operations["V1UsersChangedGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{user_id}/phones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users phones by user
         * @description Returns a collection phone numbers for the specified ```user_id```.
         */
        get: operations["V1UsersByUser_idPhonesGet"];
        put?: never;
        /**
         * Users phone create
         * @description Creates a new phone record for the specified ```user_id```.<br />
         *     Returns the ID of the phone number created.
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li><li>Platform Manager</li><li>Contact Card Manager</li></ul>
         */
        post: operations["V1UsersByUser_idPhonesPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{user_id}/occupations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users occupations by user ID
         * @description Returns a collection of occupations for the specified ```user_id```. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li></ul>
         */
        get: operations["V1UsersByUser_idOccupationsGet"];
        put?: never;
        /**
         * Users occupation create
         * @description Creates an occupation record for the specified ```user_id```.<br />
         *     Returns the ID of the occupation created. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li><li>Platform Manager</li><li>Contact Card Manager</li></ul>
         */
        post: operations["V1UsersByUser_idOccupationsPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{user_id}/emergencycontacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users emergency contacts by user ID
         * @description Returns a collection of emergency contacts for the specified ```user_id```.
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li></ul>
         */
        get: operations["V1UsersByUser_idEmergencycontactsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/athletics/teams/{team_id}/roster": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Athletics team roster
         * @description Returns a collection of players and coaches for the specified athletic team's ID. <br />
         *     The ```team_id``` can be retrieved using the GET athletics teams endpoint. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Athletic Group Manager</li><li>Team Schedule Manager</li><li>Coach</li><li>Pending Coach</li></ul>
         */
        get: operations["V1AthleticsTeamsByTeam_idRosterGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/athletics/sports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Athletics sports
         * @description Returns a collection of athletic sports.<br />
         *     Use the optional ```season_id``` to filter the results by season.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Athletic Group Manager</li><li>Schedule Manager</li><li>Page Manager</li><li>Coach</li><li>Pending Coach</li></ul>
         */
        get: operations["V1AthleticsSportsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/academics/sections/students": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Academics enroll students into sections
         * @description Adds bulk enrollment data (students and/or teachers) for the specified section(s).<br />
         *     Returns True if successful, otherwise false.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Academic Group Manager</li><li>Schedule Manager</li></ul>
         */
        post: operations["V1AcademicsSectionsStudentsPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/athletics/schedules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Athletics schedules
         * @description Returns a collection of athletic games for the current school year. <br />
         *     Use the ```start_date``` and/or ```end_date``` to filter to a specific timeframe. <br />
         *     Returns data for a specific team by setting the ```team_id``` using the GET teams endpoint. <br />
         *     Returns both games and practices by setting ```include_practice``` to true. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Athletic Group Manager</li><li>Team Schedule Manager</li><li>Schedule Manager</li><li>Coach</li><li>Pending Coach</li></ul>
         */
        get: operations["V1AthleticsSchedulesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/athletics/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Athletics teams
         * @description Returns a collection of athletic teams for the current school year. <br />
         *     Use the optional ```school_year``` parameter to specify a different year. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Athletic Group Manager</li><li>Team Schedule Manager</li><li>Coach</li><li>Pending Coach</li></ul>
         */
        get: operations["V1AthleticsTeamsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/attendance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Attendance record
         * @description Returns a collection of student attendance records for the specified day.<br></br>
         *     Please use this <a href="https://webfiles-sc1.blackbaud.com/support/helpfiles/k12-kb/sis-tutorial-attendance-setup.html"> Attendance Setup Guide</a> to verify your attendance settings.<br></br>
         *     Requires the following role in the Education Management system:
         *     <ul><li>Attendance Manager</li></ul>
         */
        get: operations["V1AttendanceGet"];
        put?: never;
        /**
         * Attendance record create
         * @description Creates a new attendance record for the specified student.<br></br>
         *     Please use this <a href="https://webfiles-sc1.blackbaud.com/support/helpfiles/k12-kb/sis-tutorial-attendance-setup.html"> Attendance Setup Guide</a> to verify your attendance settings.<br></br>
         *     Requires the following role in the Education Management system:
         *     <ul><li>Attendance Manager</li></ul>
         */
        post: operations["V1AttendancePost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/academics/teachers/{teacher_id}/sections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Academics sections by teacher
         * @description Returns a collection of sections for the specified ```teacher_id```.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Academic Group Manager</li><li>Teacher</li></ul>
         */
        get: operations["V1AcademicsTeachersByTeacher_idSectionsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/academics/departments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Academics departments
         * @description Returns a collection of academic departments.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Academic Group Manager</li><li>Platform Manager</li><li>Any Manager Role</li></ul>
         */
        get: operations["V1AcademicsDepartmentsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/academics/sections/{section_id}/cycles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Academics cycles by section
         * @description Returns a collection of cycles for the specified ```section_id```.<br />
         *     Requires the following role in the Education Management system:
         *     <ul><li>Academic Group Manager</li></ul>
         */
        get: operations["V1AcademicsSectionsBySection_idCyclesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/academics/schedules/sets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Academics schedule sets by level
         * @description Returns a collection of Schedule Sets for the specified ```level_num```.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Academic Group Manager</li><li>Schedule Manager</li></ul>
         */
        get: operations["V1AcademicsSchedulesSetsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/academics/schedules/sets/{schedule_set_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Academics schedule set
         * @description Returns details about the specified ```schedule_set_id```.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Academic Group Manager</li><li>Schedule Manager</li></ul>
         */
        get: operations["V1AcademicsSchedulesSetsBySchedule_set_idGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * User by ID
         * @description Returns data for the specified ```user_id```. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li></ul>
         */
        get: operations["V1UsersByUser_idGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{user_id}/addresses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users addresses by user ID
         * @description Returns a collection of addresses. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li></ul>
         */
        get: operations["V1UsersByUser_idAddressesGet"];
        put?: never;
        /**
         * Users address create
         * @description Returns the ID of the address just created. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li><li>Platform Manager</li><li>Contact Card Manager</li></ul>
         */
        post: operations["V1UsersByUser_idAddressesPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/addresstypes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users address types
         * @description Returns a collection of address types. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li><li>Any Manager Role</li></ul>
         */
        get: operations["V1UsersAddresstypesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{user_id}/addresses/{address_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Users address update
         * @description Returns ID of the address just updated. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li><li>Platform Manager</li><li>Contact Card Manager</li></ul>
         */
        patch: operations["V1UsersByUser_idAddressesByAddress_idPatch"];
        trace?: never;
    };
    "/v1/users/{user_id}/education": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users education by user
         * @description Returns a collection of education information for the specified ```user_id```. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li></ul>
         */
        get: operations["V1UsersByUser_idEducationGet"];
        put?: never;
        /**
         * Users education create
         * @description Creates an education entry for a user. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li><li>Platform Manager</li><li>Contact Card Manager</li></ul>
         */
        post: operations["V1UsersByUser_idEducationPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/academics/specialdays": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Academics special days
         * @description Returns a collection of special days.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Academic Group Manager</li><li>Schedule Manager</li></ul>
         */
        get: operations["V1AcademicsSpecialdaysGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/academics/courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Academics courses
         * @description Returns a collection of academic courses, filtered by department and/or school level.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Academic Group Manager</li><li>Platform Manager</li></ul>
         */
        get: operations["V1AcademicsCoursesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/types/attendancetypes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Types attendance types
         * @description Returns a collection of attendance types.<br></br>
         *     Requires the following role in the Education Management system:
         *     <ul><li>SKY API Basic</li></ul>
         */
        get: operations["V1TypesAttendancetypesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/types/excusedurationtypes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Types excuse duration types
         * @description Returns a collection of excuse duration types.<br></br>
         *     Requires the following role in the Education Management system:
         *     <ul><li>SKY API Basic</li></ul>
         */
        get: operations["V1TypesExcusedurationtypesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/types/excusedtypes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Types excused types
         * @description Returns a collection of excused types.<br></br>
         *     Requires the following role in the Education Management system:
         *     <ul><li>SKY API Basic</li><li>Any Manager Role</li></ul>
         */
        get: operations["V1TypesExcusedtypesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/academics/schedules/master": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Academics master schedule
         * @description Returns a collection of Master Schedule days within the date range provided.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Academic Group Manager</li><li>Schedule Manager</li></ul>
         */
        get: operations["V1AcademicsSchedulesMasterGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/athletics/sportslevels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Athletics sports levels
         * @description Returns a collection of athletic sports levels.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Team Schedule Manager</li><li>Coach</li><li>Pending Coach</li><li>Any Manager Role</li></ul>
         */
        get: operations["V1AthleticsSportslevelsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admissions/checklists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Admissions checklists (Legacy)
         * @description Returns a collection of admissions checklists.<br></br>
         *     Use the optional ```search_text``` to apply a case-insensitive search against check lists "name".<br />
         *     Use the optional ```inactive``` to return only inactive checklists (default is both).<br />
         *     Requires the following role in the Education Management system:
         *     <ul><li>Admissions Manager</li></ul>
         */
        get: operations["V1AdmissionsChecklistsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/audit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users audit by role ID
         * @description Returns a collection of audit information based on the specified ```role_id``` within the dates provided.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li></ul>
         */
        get: operations["V1UsersAuditGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/venues/buildings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Athletics buildings
         * @description Returns a collection of buildings.
         *     <p><b>Requires the 'Team Schedule Manager', 'Coach', 'Athletic Group Manager' or 'Pending Coach' role in the K12 system.</b></p>
         */
        get: operations["V1VenuesBuildingsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admissions/candidates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Admissions candidates (Legacy)
         * @description Returns a collection of admissions candidates.<br></br>
         *     Requires one of the following roles in the Education Management system:
         *     <ul><li>Admissions Manager</li><li>Platform Manager</li><li>SKY API Data Sync</li></ul>
         *     NOTE: The following fields have been deprecated and are no longer returned as of 01/01/2023.
         *      <ul><li>school_decision</li><li>school_decision_type</li><li>candidate_decision</li><li>candidate_decision_type</li></ul>
         *     Use the school decision and candidate decision objects instead.<br /><br />
         *
         *     NOTE: The filter for school_year_id has been replaced by school_year.<br />
         *     The school_year_id filter has been deprecated and no longer functions as of 01/01/2023.
         */
        get: operations["V1AdmissionsCandidatesGet"];
        put?: never;
        /**
         * Admissions candidate create (Legacy)
         * @description Creates a new admissions candidate record.<br></br>
         *     Returns the ID of the newly created candidate.<br></br>
         *     Requires one of the following roles in the Education Management system:
         *     <ul><li>Admissions Manager</li><li>Admissions Staff</li></ul>
         */
        post: operations["V1AdmissionsCandidatesPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/enroll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Users enrollment create
         * @description Creates the users enrollment record.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li></ul>
         */
        post: operations["V1UsersEnrollPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/athletics/venues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Athletics venues
         * @description Returns a collection of athletic venues. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Athletic Group Manager</li><li>Team Schedule Manager</li><li>Coach</li><li>Pending Coach</li></ul>
         */
        get: operations["V1AthleticsVenuesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/athletics/transportationtypes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Athletics transportation types
         * @description Returns a collection of athletic transportation types. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Athletic Group Manager</li><li>Team Schedule Manager</li><li>Schedule Manager</li><li>Coach</li><li>Pending Coach</li><li>Any Manager Role</li></ul>
         */
        get: operations["V1AthleticsTransportationtypesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/athletics/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Athletics locations
         * @description Returns a collection of athletic locations. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Athletic Group Manager</li><li>Team Schedule Manager</li><li>Schedule Manager</li><li>Coach</li><li>Pending Coach</li></ul>
         */
        get: operations["V1AthleticsLocationsGet"];
        put?: never;
        /**
         * Athletics location create
         * @description Creates a new athletic location. <br />
         *     The location can optionally be tied to an opponent using the ```opponent_id``` from the GET opponents endpoint. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Athletic Group Manager</li><li>Team Schedule Manager</li><li>Schedule Manager</li><li>Coach</li><li>Pending Coach</li></ul>
         */
        post: operations["V1AthleticsLocationsPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/athletics/opponents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Athletics opponents
         * @description Returns a collection of athletic opponents. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Athletic Group Manager</li><li>Team Schedule Manager</li><li>Page Manager</li><li>Coach</li><li>Pending Coach</li></ul>
         */
        get: operations["V1AthleticsOpponentsGet"];
        put?: never;
        /**
         * Athletics opponent create
         * @description Creates a new athletic opponent. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Athletic Group Manager</li><li>Team Schedule Manager</li><li>Schedule Manager</li><li>Page Manager</li><li>Coach</li><li>Pending Coach</li></ul>
         */
        post: operations["V1AthleticsOpponentsPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/athletics/teams/{team_id}/schedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Athletics game create
         * @description Creates a new athletic game for the specified ```team_id```. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Athletic Group Manager</li><li>Team Schedule Manager</li><li>Schedule Manager</li><li>Coach</li><li>Pending Coach</li></ul>
         */
        post: operations["V1AthleticsTeamsByTeam_idSchedulePost"];
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Athletics game update
         * @description Updates the game data for the specified ```team_id``` and athletic ```game_id```. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Athletic Group Manager</li><li>Team Schedule Manager</li><li>Schedule Manager</li><li>Coach</li><li>Pending Coach</li></ul>
         */
        patch: operations["V1AthleticsTeamsByTeam_idSchedulePatch"];
        trace?: never;
    };
    "/v1/academics/enrollments/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Academics student enrollment list
         * @description Returns a collection of course sections in which the provided student is enrolled.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Academic Group Manager</li><li>Schedule Manager</li></ul>
         */
        get: operations["V1AcademicsEnrollmentsByUser_idGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admissions/checkliststatus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Admissions checklist status (Legacy)
         * @description Returns a collection of admissions checklist statuses.<br />
         *     Requires the following role in the Education Management system:
         *     <ul><li>Admissions Manager</li></ul>
         */
        get: operations["V1AdmissionsCheckliststatusGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{user_id}/employment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users employment by user ID
         * @description Returns the employment details for the specified ```user_id```.  <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li></ul>
         */
        get: operations["V1UsersByUser_idEmploymentGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Users employment update
         * @description Updates the employment information for a user. <br />
         *     Requires the following role in the Education Management system:
         *     <ul><li>SKY API Data Sync</li><li>SKY API Platform Manager</li></ul>
         */
        patch: operations["V1UsersByUser_idEmploymentPatch"];
        trace?: never;
    };
    "/v1/users/extended/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users extended by user
         * @description Returns extended user details for the specified ```user_id```.<br />
         *     Requires the following role in the Education Management system:
         *     <ul><li>SKY API Data Sync</li></ul>
         */
        get: operations["V1UsersExtendedByUser_idGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/athletics/teams/{team_id}/schedule/practice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Athletics practice create
         * @description Creates a new athletic practice for the specified ```team_id```. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Team Schedule Manager</li><li>Page Manager</li></ul>
         */
        post: operations["V1AthleticsTeamsByTeam_idSchedulePracticePost"];
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Athletics practice update
         * @description Updates the practice data for the specified athletic practice ```id```. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Athletic Group Manager</li></ul>
         */
        patch: operations["V1AthleticsTeamsByTeam_idSchedulePracticePatch"];
        trace?: never;
    };
    "/v1/athletics/teams/{team_id}/schedule/practice/{practice_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Athletics practice delete
         * @description Removes the athletic ```practice_id``` for the specified ```team_id```. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Team Schedule Manager</li><li>Page Manager</li></ul>
         */
        delete: operations["V1AthleticsTeamsByTeam_idSchedulePracticeByPractice_idDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/athletics/teams/{team_id}/schedule/{game_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Athletics game delete
         * @description Removes an athletic ```game_id``` for the specified ```team_id```. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Team Schedule Manager</li><li>Page Manager</li></ul>
         */
        delete: operations["V1AthleticsTeamsByTeam_idScheduleByGame_idDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/lists/advanced/{list_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Single
         * @description Returns a collection of results from a basic or advanced list.<br /><b>Note</b>: The requested list must have access permissions enabled for a role listed below or the user requesting the list needs read permission to that list.<br />
         *     Requires one of the following roles in the Education Management system:
         *     <ul><li>Page Manager</li><li>Content Editor</li><li>Teacher</li><li>Coach</li><li>Community Group Manager</li><li>Mentor Manager</li><li>Alumni Group Manager</li><li>Athletic Group Manager</li><li>Academic Group Manager</li><li>System Group Manager</li><li>Content Manager</li><li>Community Group Owner</li><li>Dorm Group Manager</li><li>Activity Group Manager</li><li>Advisory Group Manager</li><li>Advisor</li><li>Dorm Supervisor</li><li>Activity Leader</li><li>Pending Teacher</li><li>Pending Advisor</li><li>Pending Dorm Supervisor</li><li>Pending Activity Leader</li><li>Platform Manager</li><li>SkyApi Data Sync</li></ul><b>Rate Limiting:</b><ul><li>Any successful calls made to the GET List Single endpoint will have no restrictions</li><li>Any call resulting in an error to the GET List Single endpoint will trigger a temporary time-out on the Environment and BBID of the calls origin. This time-out/hold will be for 60 seconds. After that calls may resume.</li><li>If calls are made to the endpoint while the time-out is in place the response back will be Status 429 too many requests and an error of "Limited by error rate" will appear.</li></ul>
         */
        get: operations["V1ListsAdvancedByList_idGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/gendertypes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users gender types
         * @description Returns a collection of gender types. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li><li>Any Manager Role</li></ul>
         */
        get: operations["V1UsersGendertypesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/lists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List of Lists
         * @description Returns a list of basic or advanced lists the authorized user has access to<br />
         *     Requires the following role in the Education Management system:
         *     <ul><li>Page Manager</li><li>Content Editor</li><li>Teacher</li><li>Coach</li><li>Community Group Manager</li><li>Mentor Manager</li><li>Alumni Group Manager</li><li>Athletic Group Manager</li><li>Academic Group Manager</li><li>System Group Manager</li><li>Content Manager</li><li>Community Group Owner</li><li>Dorm Group Manager</li><li>Activity Group Manager</li><li>Advisory Group Manager</li><li>Advisor</li><li>Dorm Supervisor</li><li>Activity Leader</li><li>Pending Teacher</li><li>Pending Advisor</li><li>Pending Dorm Supervisor</li><li>Pending Activity Leader</li><li>Platform Manager</li><li>SkyApi Data Sync</li></ul>
         */
        get: operations["V1ListsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/advisories/sections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Advisories sections by school level
         * @description Returns a collection of advisory sections for the specified school level<br></br>
         *     Requires the following role in the Education Management system:
         *     <ul><li>Sky API Advisory Group Manager</li></ul>
         */
        get: operations["V1AdvisoriesSectionsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/bbidstatus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users BBID status by role(s).
         * @description Returns a paginated collection of users education management BBID status, limited to 1000 users per page.<br />
         *     Use the last user's ID as the ```marker``` value to return the next set of results.<br />
         *     Requires one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li><li>Platform Manager</li></ul>
         */
        get: operations["V1UsersBbidstatusGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/activities/sections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Activities sections by school level
         * @description Returns a collection of activity sections for the specified school level.<br />
         *     Requires the following role in the Education Management system:
         *     <ul><li>Activity Group Manager</li></ul>
         */
        get: operations["V1ActivitiesSectionsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/timezone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Core time zone
         * @description Returns the current time zone set for the school.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Academic Group Manager</li><li>Platform Manager</li><li>Any Manager Role</li></ul>
         */
        get: operations["V1TimezoneGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/testscores": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test scores by user ID
         * @description Returns a collection of test scores.<br></br>
         *     Requires the following role in the Education Management system:
         *     <ul><li>Grading Manager</li></ul>
         */
        get: operations["V1TestscoresGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/athletics/highlights/{highlight_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Athletics highlights by ID
         * @description Returns an athletic game's highlights for the specified ```highlight_id```. <br />
         *     This ID can be obtained via the GET athletics schedules endpoint for a game if highlights exist for that game. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Athletic Group Manager</li><li>Team Schedule Manager</li><li>Schedule Manager</li><li>Page Manager</li><li>Coach</li><li>Pending Coach</li></ul>
         */
        get: operations["V1AthleticsHighlightsByHighlight_idGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/events/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Events categories
         * @description Returns a collection of event categories.<br />
         *     Requires one of the following roles in the Education Management system:
         *     <ul><li>Content Manager</li><li>Platform Manager</li></ul>
         */
        get: operations["V1EventsCategoriesGet"];
        put?: never;
        /**
         * Events category create
         * @description Returns the ID of the created Events Category<br />
         *     Requires one of the following roles in the Education Management system:
         *     <ul><li>Content Manager</li><li>Platform Manager</li></ul><param name="eventCategory"></param><param name="cancellationToken"></param>
         */
        post: operations["V1EventsCategoriesPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/emergencycontacts/changed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users emergency contact changes
         * @description Returns a paginated collection of all emergency contacts for all users that have had changes since the specified ```start_date```. <br />
         *     If no date is specified then this returns a paginated collection of all emergency contacts for all users. <br />
         *     Use the last user's ID as the ```marker``` value to return the next set of results.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li></ul>
         */
        get: operations["V1UsersEmergencycontactsChangedGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Core sessions
         * @description Returns a collection of sessions for a higher education institution.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Academic Group Manager</li><li>Platform Manager</li></ul>
         */
        get: operations["V1SessionsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dorms/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Dorms by school level
         * @description Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Dorm Group Manager</li><li>Dorm Supervisor</li><li>Pending Dorm Supervisor</li></ul>
         */
        get: operations["V1DormsAllGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/athletics/result": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Athletics game result
         * @description Creates a result/score for the specified athletic game ``` schedule_id ```. <br />
         *     Existing schedule IDs can be retrieved via the GET athletics schedules endpoint as well as after calling POST athletics game. <br /><br />
         *     NOTE: There are two types of game results: Team vs team scores (schedule_type: 0) and Team placement or team total points scores (schedule_type: 1). The score reporting for the two types is distinctly different. <br /><b>For team vs team scores</b><br />
         *     Each opponent will list in the opponents array with a value for ```win_loss```, ```score``` and ```score_versus```. <br />
         *     Example:
         *
         *     ```
         *
         *     {
         *       "schedule_id": 1331482,
         *       "send_notification": false,
         *       "schedule_type": 0,
         *       "opponents": [
         *           {
         *               "opponent_id": 41406,
         *               "win_loss": "Win",
         *               "score": "5",
         *               "score_versus": "2",
         *           },
         *           {
         *               "opponent_id": 41407,
         *               "win_loss": "Loss",
         *               "score": "1",
         *               "score_versus": "3",
         *           }
         *          ]
         *      }
         *     ```
         *     <b>For team placement or team total points scores </b><br />
         *     The Home team <b>and</b> each opponent will list in the opponents array with a value for ```score``` but only the home team will have a value for ```win_loss``` and ```score_versus``` can be omitted for all. The home team�s ```opponent_id``` will be -1 in the opponents array. <br /><br />
         *     Example:
         *
         *      ```
         *     {
         *         "schedule_id": 1331482,
         *         "send_notification": false,
         *         "schedule_type": 1,
         *         "opponents": [
         *             {
         *                 "opponent_id": -1,
         *                 "score": "1st",
         *                 "win_loss": "Win"
         *             },
         *             {
         *                 "opponent_id": 41406,
         *                 "score": "2nd",
         *                 "win_loss": ""
         *             },
         *             {
         *          "opponent_id": 41407,
         *                 "score": "3rd",
         *                 "win_loss": ""
         *             }
         *         ]
         *      }
         *
         *      ```
         *      <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Team Schedule Manager</li><li>Page Manager</li><li>Coach</li><li>Pending Coach</li></ul>
         */
        post: operations["V1AthleticsResultPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/testscores/testtypes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test and Subtest types
         * @description Returns a collection of test and subtest types for a school.<br />
         *     Requires the following role in the Education Management system:
         *     <ul><li>Grading Manager</li><li>Any Manager Role</li></ul>
         */
        get: operations["V1TestscoresTesttypesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/testscores/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test Score create
         * @description Creates a test score for a student ```user_id```<br />
         *     Requires the following role in the Education Management system:
         *     <ul><li>Grading Manager</li></ul>
         */
        post: operations["V1TestscoresByUser_idPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{user_id}/emergencycontacts/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Users emergency contact user create
         * @description Activates an existing inactive or suggested emergency contact for a user.  To add a new user emergency contact, add the correct relationship between users first.<br />
         *     To add a non-user emergency contact please see the Emergency Contact Non-User Create route.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li></ul>
         */
        post: operations["V1UsersByUser_idEmergencycontactsUserPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{user_id}/emergencycontacts/nonuser": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Users emergency contact non-user create
         * @description Creates a non-user emergency contact for the given user.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li></ul>
         */
        post: operations["V1UsersByUser_idEmergencycontactsNonuserPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/schedules/meetings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Schedules meetings
         * @description Returns a list of section meetings for a given date.  When ```end_date``` is supplied a range of meetings between the given dates is returned.<br />```offering_types``` can take a single or multiple values as a comma delimited ```string``` of integers, defaults to 1<br />```end_date``` cannot be more than 30 days past the ```start_date```. Default date range is 30 days.<br /><ul><li>Academics: 1</li><li>Activities: 2</li><li>Advisory: 3</li><li>Athletics: 9</li></ul>
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Academics Group Manager</li><li>Advisory Group Manager</li><li>Platform Manager</li><li>Activity Group Manager</li><li>Athletic Group Manager</li><li>Scheduling Manager</li></ul>
         */
        get: operations["V1SchedulesMeetingsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/schedules/{student_id}/meetings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Schedules - Meetings for a student
         * @description Returns a list of meetings for a given student for a specific date.  When ```end_date``` is supplied a range of meetings between the given dates is returned.<br />```end_date``` cannot be more than 30 days past the ```start_date```. Default date range is 30 days.<br />
         *     Requires at least one of the following roles in the Education Management system and group page access should be set for one of the roles:
         *     <ul><li>Student</li><li>Parent</li><li>Attendance Manager</li><li>Schedule Manager</li></ul>
         */
        get: operations["V1SchedulesByStudent_idMeetingsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{parent_id}/students": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users Children of Parent
         * @description Returns a collection of children of the specified ```parent_id```.<br />
         *     Requires the logged in ```user_id``` matches the specified ```parent_id```.
         *     Requires the following role in the Education Management system:
         *     <ul><li>Parent</li></ul>
         */
        get: operations["V1UsersByParent_idStudentsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/academics/student/{student_id}/sections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Academics sections for student
         * @description Returns a collection of sections for the specified ```student_id```.<br />
         *     The user requesting the information must be the student, parent of the student or faculty member associated with the student.<br />
         *     The ```cumulative_gade``` is shown if the user has the correct access to view it.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Student</li><li>Parent</li><li>Faculty</li></ul>
         */
        get: operations["V1AcademicsStudentByStudent_idSectionsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/events/calendar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Calendar for User
         * @description Returns a list of events for the calling user.
         *     Requires one of the following roles in the Education Management system:
         *     <ul><li>Student</li><li>Parent</li><li>Teacher</li></ul>
         */
        get: operations["V1EventsCalendarGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/academics/{student_id}/assignments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Academics assignments for student
         * @description Returns assignments for a student that are assigned or due within the date range specified.<br />
         *     If no ```end_date``` is supplied it defaults to 31 days past the ```start_date```
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Student</li><li>Parent</li></ul>
         */
        get: operations["V1AcademicsByStudent_idAssignmentsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/academics/{student_id}/{section_id}/gradedassignments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Academics graded assignments for student
         * @description Returns the graded assignments for the specified ```student_id``` and their ```section_id```.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Student</li><li>Parent</li></ul>
         */
        get: operations["V1AcademicsByStudent_idBySection_idGradedassignmentsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users Get Me
         * @description Returns information about the caller.
         */
        get: operations["V1UsersMeGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customfields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Core custom fields
         * @description Returns a collection of admin custom fields.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Platform Manager</li></ul>
         */
        get: operations["V1CustomfieldsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/customfields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users custom fields list by base role(s)
         * @description Returns a paginated collection of users with custom admin fields, limited to 100 users per page.
         *     This includes both user custom fields and administration view only custom fields.<br />
         *     Use the last user ```id``` number as the ```marker``` value to return the next set of results.
         *     For example: ```marker=23232323``` will return a second set of results beginning with the next user ID in the result set.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Platform Manager</li></ul>
         */
        get: operations["V1UsersCustomfieldsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/content/news/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Content News Categories
         * @description Returns a collection of Content News Categories
         *     Requires at least one of the following roles in the Education Management System:
         *     <ul><li>Parent</li><li>Faculty</li><li>Student</li></ul>
         */
        get: operations["V1ContentNewsCategoriesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/content/news/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Content News Items
         * @description Returns a collection of Content News Items
         *     Requires at least one of the following roles in the Education Management System:
         *     <ul><li>Parent</li><li>Faculty</li><li>Student</li></ul>
         */
        get: operations["V1ContentNewsItemsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/academics/enrollments/changes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Academics Student Enrollments Changes
         * @description Returns a collection of students with enrollment changes on or after the date parameter.<br />
         *     The maximum period of time that can be specified is 30 days from start_date, if end_date is not provided or is greater than 30 days from start_date it will be set to start_date + 30 days.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Schedule Manager</li><li>Academic Group Manager</li></ul>
         */
        get: operations["V1AcademicsEnrollmentsChangesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/directories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Directories
         * @description Returns a collection of directories the logged in user has access to
         *     Requires at least one of the following roles in the Education Management System:
         *     <ul><li>Parent</li><li>Faculty</li><li>Student</li></ul>
         */
        get: operations["V1DirectoriesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/directories/{directory_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Directories results
         * @description Returns a collection of directory results the logged in user has access to<br />```search``` is an optional search string to filter directory results.<br />```search_all``` allows the search string to be used for all fields.<br />
         *     When set to ```false```, only searches name fields. defaults to ```true```.<br />
         *     Requires at least one of the following roles in the Education Management System:
         *     <ul><li>Parent</li><li>Faculty</li><li>Student</li></ul>
         */
        get: operations["V1DirectoriesByDirectory_idGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/content/events/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Content Events Categories
         * @description Returns a collection of Content Events Categories
         *     Requires at least one of the following roles in the Education Management System:
         *     <ul><li>Parent</li><li>Faculty</li><li>Student</li></ul>
         */
        get: operations["V1ContentEventsCategoriesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/degrees/studentdegrees/{student_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Degrees student degrees by ID
         * @description Returns a collection of degree/diplomas assigned to the student.<br></br>
         *     Each degree/diploma has a collection of majors, minors and/or concentrations as appropriate for that degree or diploma.<br></br>
         *     Requires the following role in the Education Management system:
         *     <ul><li>Degree Manager</li><li>Diploma Manager</li><li>Student</li><li>Parent</li></ul>
         */
        get: operations["V1DegreesStudentdegreesByStudent_idGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/admissions/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Admissions statuses (Legacy)
         * @description Returns a collection of admissions statuses.<br />
         *     Requires one of the following roles in the Education Management system:
         *     <ul><li>Admissions Manager</li><li>Platform Manager</li><li>SKY API Data Sync</li></ul>
         */
        get: operations["V1AdmissionsStatusGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/enrollments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users enrollments by year
         * @description Returns a collection of users and their enrollments for a single school year.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Admissions manager</li><li>Platform manager</li><li>SKY API Data Sync</li></ul>
         */
        get: operations["V1UsersEnrollmentsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{user_id}/customfields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users custom fields single
         * @description Returns a collection of custom fields for a single ```user_id```.
         *     This includes both user custom fields and administration view only custom fields.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Platform Manager</li></ul>
         */
        get: operations["V1UsersByUser_idCustomfieldsGet"];
        put?: never;
        /**
         * Users custom fields create
         * @description Creates an admin custom field for a user. <br />
         *     Does not create any of the ten default custom fields, every user has those fields created for them by default.  To update those fields see User Custom Field Values Update. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Platform Manager</li></ul>
         */
        post: operations["V1UsersByUser_idCustomfieldsPost"];
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Users custom fields update
         * @description Updates an admin custom field for a user. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Platform Manager</li></ul>
         */
        patch: operations["V1UsersByUser_idCustomfieldsPatch"];
        trace?: never;
    };
    "/v1/content/resources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Content Resource Board
         * @description Returns a collection of Resources
         *     Requires at least one of the following roles in the Education Management System:
         *     <ul><li>Parent</li><li>Faculty</li><li>Student</li></ul>
         */
        get: operations["V1ContentResourcesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/types/tables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Types table types
         * @description Returns a collection of table types.<br></br>
         *     System tables will have an ID that is a negative number (Example: -100)
         *     User defined tables will have an ID that is a positive number (Example: 100)
         */
        get: operations["V1TypesTablesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/types/tablevalues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Types table values
         * @description Returns a collection of table values.<br></br>
         *     Either ```tableId``` or ```tableName``` parameter is required, but not both.  For example, If a ```tableId``` is provided, then any value provided for ```tableName``` will be ignored.
         *     In the case that the calling user does not have permissions to view the data being requested no results will be returned.
         */
        get: operations["V1TypesTablevaluesGet"];
        put?: never;
        /**
         * Types table values create
         * @description Add a new table value to a table type.<br></br>
         *     Allowed table types: Allergy, Condition, Admission
         */
        post: operations["V1TypesTablevaluesPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/medical/securityroles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Medical Security Roles
         * @description Returns the user roles available for additional access control when posting medical data like student allergies or student medication. <br />
         *     The ```role_access``` object in those post endpoints takes in the role IDs returned here.
         */
        get: operations["V1MedicalSecurityrolesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/medical/allergiesconditions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Medical allergies/conditions create (DEPRECATED)
         * @description Creates medical allergy/condition record for a student.<br />
         *     Returns the newly created ID. <br />
         *     Requires one of the following roles in the Education Management system:
         *     <ul><li>Nurse</li></ul>
         *
         *     ***This endpoint is DEPRECATED and will no longer function as of 2024-09-01***
         */
        post: operations["V1MedicalAllergiesconditionsPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/medical/users/{user_id}/allergiesconditions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Medical allergies/conditions for a student (DEPRECATED)
         * @description Returns a list of allergies/conditions for the specified ```user_id```. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Nurse</li></ul>
         *
         *     ***This endpoint is DEPRECATED and will no longer function as of 2024-09-01***
         */
        get: operations["V1MedicalUsersByUser_idAllergiesconditionsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/medical/users/{user_id}/medications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Medical medications for a student
         * @description Returns a list of medications for the specified ```user_id```. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Nurse</li></ul>
         */
        get: operations["V1MedicalUsersByUser_idMedicationsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/medical/medications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Medical medications create
         * @description Create a medication for a student.<br />
         *     Returns the newly created ID. <br />
         *     Requires one of the following roles in the Education Management system:
         *     <ul><li>Nurse</li></ul>
         */
        post: operations["V1MedicalMedicationsPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/medical/users/{user_id}/immunizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Medical immunizations for a student
         * @description Returns a collection of medical immunizations for the specified ```user_id```. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Nurse</li></ul>
         */
        get: operations["V1MedicalUsersByUser_idImmunizationsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/medical/immunizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Medical immunizations update
         * @description Updates a medical immunization for a student.<br />
         *     Requires one of the following roles in the Education Management system:
         *     <ul><li>Nurse</li></ul>
         */
        post: operations["V1MedicalImmunizationsPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{user_id}/addresses/share": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Users address create - shared
         * @description For an existing user, create a link to an existing address.<br />
         *     Returns the ID of the address just shared. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Contact Card Manager</li><li>Platform Manager</li><li>SKY API Data Sync</li></ul>
         */
        post: operations["V1UsersByUser_idAddressesSharePost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{user_id}/phones/share": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Users phone create - shared
         * @description For an existing user, create a link to an existing phone number.<br />
         *     Returns the ID of the phone number just shared. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Contact Card Manager</li><li>Platform Manager</li><li>SKY API Data Sync</li></ul>
         */
        post: operations["V1UsersByUser_idPhonesSharePost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/medical/users/{user_id}/athleticrequirements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Medical athletic requirements for a student
         * @description Returns a collection of medical athletic requirements for a student. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Nurse</li><li>Coach</li></ul>
         */
        get: operations["V1MedicalUsersByUser_idAthleticrequirementsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/medical/allergies/{allergy_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Medical allergies delete
         * @description Delete a medical allergy for a student.<br />
         *     Requires one of the following roles in the Education Management system:
         *     <ul><li>Nurse</li></ul>
         */
        delete: operations["V1MedicalAllergiesByAllergy_idDelete"];
        options?: never;
        head?: never;
        /**
         * Medical allergies update
         * @description Update a medical allergy for a student.<br />
         *     Requires one of the following roles in the Education Management system:
         *     <ul><li>Nurse</li></ul>
         */
        patch: operations["V1MedicalAllergiesByAllergy_idPatch"];
        trace?: never;
    };
    "/v1/medical/conditions/{condition_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Medical conditions delete
         * @description Delete a medical condition for a student.<br />
         *     Requires one of the following roles in the Education Management system:
         *     <ul><li>Nurse</li></ul>
         */
        delete: operations["V1MedicalConditionsByCondition_idDelete"];
        options?: never;
        head?: never;
        /**
         * Medical conditions update
         * @description Update a medical condition for a student.<br />
         *     Requires one of the following roles in the Education Management system:
         *     <ul><li>Nurse</li></ul>
         */
        patch: operations["V1MedicalConditionsByCondition_idPatch"];
        trace?: never;
    };
    "/v1/medical/medications/{medication_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Medical medications delete
         * @description Delete a medication for a student.<br />
         *     Requires one of the following roles in the Education Management system:
         *     <ul><li>Nurse</li></ul>
         */
        delete: operations["V1MedicalMedicationsByMedication_idDelete"];
        options?: never;
        head?: never;
        /**
         * Medical medication update
         * @description Updates a medical medication for a student.<br />
         *     Requires one of the following roles in the Education Management system:
         *     <ul><li>Nurse</li></ul>
         */
        patch: operations["V1MedicalMedicationsByMedication_idPatch"];
        trace?: never;
    };
    "/v1/medical/allergies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Medical allergies create
         * @description Creates an allergy for a student.<br />
         *     Returns the newly created ID. <br />
         *     Requires one of the following roles in the Education Management system:
         *     <ul><li>Nurse</li></ul>
         */
        post: operations["V1MedicalAllergiesPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/medical/conditions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Medical conditions create
         * @description Creates a condition for a student.<br />
         *     Returns the newly created ID. <br />
         *     Requires one of the following roles in the Education Management system:
         *     <ul><li>Nurse</li></ul>
         */
        post: operations["V1MedicalConditionsPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/medical/users/{user_id}/allergies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Medical allergies for a student
         * @description Returns the medical allergies for a student.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Nurse</li></ul>
         */
        get: operations["V1MedicalUsersByUser_idAllergiesGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/medical/users/{user_id}/conditions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Medical conditions for a student
         * @description Returns the medical conditions for a student.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Nurse</li></ul>
         */
        get: operations["V1MedicalUsersByUser_idConditionsGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{user_id}/customfields/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Users custom fields list create
         * @description Creates a list of admin custom field for a user. <br />
         *     Does not create any of the ten default custom fields, every user has those fields created for them by default.  To update those fields see User Custom Field Values Update. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Platform Manager</li></ul>
         */
        post: operations["V1UsersByUser_idCustomfieldsListPost"];
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Users custom fields list update
         * @description Updates a list of admin custom field for a user. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Platform Manager</li></ul>
         */
        patch: operations["V1UsersByUser_idCustomfieldsListPatch"];
        trace?: never;
    };
    "/v1/users/{user_id}/occupations/{occupation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Users occupation delete
         * @description Deletes an occupation entry for a user.<br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li><li>Platform Manager</li><li>Contact Card Manager</li></ul>
         */
        delete: operations["V1UsersByUser_idOccupationsByOccupation_idDelete"];
        options?: never;
        head?: never;
        /**
         * Users occupation update
         * @description Updates an occupation entry for a user.<br />
         *     Returns the ID of the occupation updated. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li><li>Platform Manager</li><li>Contact Card Manager</li></ul>
         */
        patch: operations["V1UsersByUser_idOccupationsByOccupation_idPatch"];
        trace?: never;
    };
    "/v1/users/{user_id}/education/{education_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Users education delete
         * @description Deletes an education entry for a user. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li><li>Platform Manager</li><li>Contact Card Manager</li></ul>
         */
        delete: operations["V1UsersByUser_idEducationByEducation_idDelete"];
        options?: never;
        head?: never;
        /**
         * Users education update
         * @description Updates an education entry for a user. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li><li>Platform Manager</li><li>Contact Card Manager</li></ul>
         */
        patch: operations["V1UsersByUser_idEducationByEducation_idPatch"];
        trace?: never;
    };
    "/v1/users/{user_id}/addresses/{address_id}/{address_type_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Users address delete
         * @description Removes the specified address from the user. <br />
         *     If the address is shared, other users linked to the address will not be affected. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li><li>Platform Manager</li><li>Contact Card Manager</li></ul>
         */
        delete: operations["V1UsersByUser_idAddressesByAddress_idByAddress_type_idDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{user_id}/phones/{phone_id}/{phone_type_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Users phone delete
         * @description Removes the specified phone from the user. <br />
         *     If the phone is shared, other users linked to the phone will not be affected. <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>SKY API Data Sync</li><li>Platform Manager</li><li>Contact Card Manager</li></ul>
         */
        delete: operations["V1UsersByUser_idPhonesByPhone_idByPhone_type_idDelete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{user_id}/phones/{phone_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Users phone update
         * @description Updates an exising phone record for the specified ```user_id```.<br />
         *     Returns the ID of the phone number updated.
         */
        patch: operations["V1UsersByUser_idPhonesByPhone_idPatch"];
        trace?: never;
    };
    "/v1/medical/athleticclearance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Medical athletic requirements update
         * @description Updates a medical athletic requirements for a student.<br />
         *     Requires one of the following roles in the Education Management system:
         *     <ul><li>Nurse</li></ul>
         */
        post: operations["V1MedicalAthleticclearancePost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/employment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Users employment by role(s)
         * @description Returns a paginated collection of users employment details based on base roles, limited to 1000 users per page.<br />
         *     Use the last user's ID as the ```marker``` value to return the next set of results.<br />
         *     Requires the following role in the Education Management system:
         *     <ul><li>SKY API Data Sync</li><li>SKY API Platform Manager</li></ul>
         */
        get: operations["V1UsersEmploymentGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{user_id}/relationships/{left_user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Users relationship update
         * @description Updates a relationship record for the specified ```user_id```.<br />
         *     Returns 200 OK
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Contact Card Manager</li><li>Platform Manager</li></ul>
         */
        patch: operations["V1UsersByUser_idRelationshipsByLeft_user_idPatch"];
        trace?: never;
    };
    "/v1/communitygroups/rosters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Community groups rosters (BETA)
         * @description Returns the community group rosters for a selected year. Uses current school year by default.<br />
         *     Requires the following role in the Education Management system:
         *     <ul><li>Schedule Manager</li><li>Community Group Manager</li></ul>
         *
         *     ***This endpoint is in BETA. It may be removed or replaced with a 90 day deprecation period.***
         */
        get: operations["V1CommunitygroupsRostersGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/testscores/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test scores (BETA)
         * @description Returns a collection of test scores.<br></br>
         *     Requires one of the following role in the Education Management system:
         *     <ul><li>Grading Manager</li><li>Admissions Manager</li></ul>
         *
         *     ***This endpoint is in BETA. It may be removed or replaced with a 90 day deprecation period.***
         */
        get: operations["V1TestscoresAllGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/academics/rosters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Academics rosters (BETA)
         * @description Returns the academic rosters for a selected year. Uses current school year by default.<br />
         *     Requires the following role in the Education Management system:
         *     <ul><li>Schedule Manager</li><li>Academic Group Manager</li></ul>
         *
         *     ***This endpoint is in BETA. It may be removed or replaced with a 90 day deprecation period.***
         */
        get: operations["V1AcademicsRostersGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/academics/sections/{section_id}/customfields/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Academics sections custom fields list create (BETA)
         * @description Add custom field data to an academic section <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Academic group manager</li><li>Platform Manager</li></ul>
         *
         *     ***This endpoint is in BETA. It may be removed or replaced with a 90 day deprecation period.***
         */
        post: operations["V1AcademicsSectionsBySection_idCustomfieldsListPost"];
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Academics sections custom fields list update (BETA)
         * @description Update the custom field data for an academic section <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Academic group manager</li><li>Platform Manager</li></ul>
         *
         *     ***This endpoint is in BETA. It may be removed or replaced with a 90 day deprecation period.***
         */
        patch: operations["V1AcademicsSectionsBySection_idCustomfieldsListPatch"];
        trace?: never;
    };
    "/v1/activities/rosters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Activities rosters (BETA)
         * @description Returns the activity rosters for a selected year. Uses current school year by default.<br />
         *     Requires the following role in the Education Management system:
         *     <ul><li>Schedule Manager</li><li>Activity Group Manager</li></ul>
         *
         *     ***This endpoint is in BETA. It may be removed or replaced with a 90 day deprecation period.***
         */
        get: operations["V1ActivitiesRostersGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/advisories/rosters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Advisories rosters (BETA)
         * @description Returns the Advisory rosters for a selected year. Uses current school year by default.<br />
         *     Requires the following role in the Education Management system:
         *     <ul><li>Schedule Manager</li><li>Advisory Group Manager</li></ul>
         *
         *     ***This endpoint is in BETA. It may be removed or replaced with a 90 day deprecation period.***
         */
        get: operations["V1AdvisoriesRostersGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/athletics/rosters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Athletics rosters (BETA)
         * @description Returns the athletic rosters for a selected year. Uses current school year by default.<br />
         *     Requires the following role in the Education Management system:
         *     <ul><li>Schedule Manager</li><li>Athletic Group Manager</li></ul>
         *
         *     ***This endpoint is in BETA. It may be removed or replaced with a 90 day deprecation period.***
         */
        get: operations["V1AthleticsRostersGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/academics/courses/{course_id}/customfields/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Academics courses custom fields list create (BETA)
         * @description Add custom field data to a course <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Academic group manager</li><li>Platform Manager</li></ul>
         *
         *     ***This endpoint is in BETA. It may be removed or replaced with a 90 day deprecation period.***
         */
        post: operations["V1AcademicsCoursesByCourse_idCustomfieldsListPost"];
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Academics courses custom fields list update (BETA)
         * @description Update the custom field data for a course <br />
         *     Requires at least one of the following roles in the Education Management system:
         *     <ul><li>Academic group manager</li><li>Platform Manager</li></ul>
         *
         *     ***This endpoint is in BETA. It may be removed or replaced with a 90 day deprecation period.***
         */
        patch: operations["V1AcademicsCoursesByCourse_idCustomfieldsListPatch"];
        trace?: never;
    };
    "/v1/dorms/rosters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Dorms rosters (BETA)
         * @description Returns the dorm rosters for a selected year. Uses current school year by default.<br />
         *     Requires the following role in the Education Management system:
         *     <ul><li>Schedule Manager</li><li>Dorm Group Manager</li></ul>
         *
         *     ***This endpoint is in BETA. It may be removed or replaced with a 90 day deprecation period.***
         */
        get: operations["V1DormsRostersGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Academics Section Model */
        AcademicsSection: {
            /** @description The list of teachers for this section */
            teachers?: components["schemas"]["Teacher"][] | null;
            /** @description The list of custom fields for the section */
            custom_fields?: components["schemas"]["CustumFieldReadModel"][] | null;
            /**
             * Format: int32
             * @description The ID of the section
             */
            id?: number;
            /** @description The identifier used to reference a course; the Course Code is a user-entered value */
            course_code?: string | null;
            duration?: components["schemas"]["Duration"];
            /**
             * Format: int32
             * @description The ID of the first section in a series of terms
             */
            lead_section_id?: number | null;
            /** @description The name of the section */
            name?: string | null;
            /**
             * Format: int32
             * @description The ID of an offered course
             */
            offering_id?: number | null;
            /**
             * Format: int32
             * @description The ID that leads you back to the offered section
             */
            parent_section_id?: number | null;
            /**
             * Format: int32
             * @description The ID of the room the section is held in
             */
            room_id?: number | null;
            /** @description The school year date range in which the section occurs */
            school_year?: string | null;
            /** @description The identifier used to differentiate between multiple sections that contain a course; the Section Identifier is a user-entered value */
            section_identifier?: string | null;
        };
        /** @description A Collection */
        AcademicsSectionCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["AcademicsSection"][] | null;
        };
        /** @description Student Academic Section Model */
        AcademicsSectionStudent: {
            /**
             * Format: int32
             * @description The ID of the section
             */
            section_id?: number;
            /** @description The section display value (name and block) */
            section_display_name?: string | null;
            /** @description The name of the room where the section takes place */
            school_level_name?: string | null;
            /** @description The name of the room where the section takes place */
            room_name?: string | null;
            /** @description The name of the schedule block for this section */
            block_name?: string | null;
            /**
             * Format: int32
             * @description The ID of the first section in a series of terms
             */
            lead_section_id?: number | null;
            /**
             * Format: int32
             * @description The ID of the marking period for this section
             */
            marking_period_id?: number | null;
            /**
             * Format: int32
             * @description The duration ID for a section
             */
            duration_id?: number | null;
            /**
             * Format: double
             * @description The cumulative grade for this section and student
             */
            cumulative_grade?: number | null;
        };
        /** @description A Collection */
        AcademicsSectionStudentCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["AcademicsSectionStudent"][] | null;
        };
        /** @description Activities Section Model */
        ActivitiesSection: {
            /** @description The list of leaders for this section */
            leaders?: components["schemas"]["Leader"][] | null;
            /**
             * Format: int32
             * @description The ID of the section
             */
            id?: number;
            /** @description The identifier used to reference a course; the Course Code is a user-entered value */
            course_code?: string | null;
            duration?: components["schemas"]["Duration"];
            /**
             * Format: int32
             * @description The ID of the first section in a series of terms
             */
            lead_section_id?: number | null;
            /** @description The name of the section */
            name?: string | null;
            /**
             * Format: int32
             * @description The ID of an offered course
             */
            offering_id?: number | null;
            /**
             * Format: int32
             * @description The ID that leads you back to the offered section
             */
            parent_section_id?: number | null;
            /**
             * Format: int32
             * @description The ID of the room the section is held in
             */
            room_id?: number | null;
            /** @description The school year date range in which the section occurs */
            school_year?: string | null;
            /** @description The identifier used to differentiate between multiple sections that contain a course; the Section Identifier is a user-entered value */
            section_identifier?: string | null;
        };
        /** @description A Collection */
        ActivitiesSectionCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["ActivitiesSection"][] | null;
        };
        /** @description Request object for adding table values */
        AddTableValuesRequest: {
            /** @description The ID or description of the table type */
            table: string;
            /** @description An array of table values to add to the table */
            table_values: components["schemas"]["TableValueAdd"][];
        };
        /** @description Response object on adding table values */
        AddTableValuesResponse: {
            /** @description Array of table values IDs */
            table_value_ids?: number[] | null;
        };
        /** @description AddressAdd Model */
        AddressAdd: {
            /**
             * Format: int32
             * @description The ID of the user of the address
             */
            user_id: number;
            /**
             * Format: int32
             * @description Address Type ID associated with an address. The list of address types can be found using the <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1UsersAddresstypesGet">GET Users Address Types List</a>.
             */
            type_id: number;
            salutations?: components["schemas"]["Salutations"];
            /** @description Country full name (United States) */
            country?: string | null;
            /** @description Address Line 1 (123 Main Street) */
            line_one: string;
            /** @description Address Line 2 (Suite 100) */
            line_two?: string | null;
            /** @description Address Line 3 */
            line_three?: string | null;
            /** @description City (Charleston) */
            city: string;
            /** @description State 2 letter abbreviation (SC) or full name.  Required only if Country property is United States */
            state?: string | null;
            /** @description Postal code */
            postal_code?: string | null;
            /** @description Province */
            province?: string | null;
            /** @description Region */
            region?: string | null;
            /** @description Set to true to set this address as the mailing address */
            mailing_address?: boolean;
            /** @description Set to true to make this the primary address */
            primary?: boolean;
        };
        /** @description AddressExRead Model */
        AddressExRead: {
            /**
             * Format: int32
             * @description The ID of the address
             */
            id?: number;
            /** @description The 'Type' of the address */
            address_type?: string | null;
            salutations?: components["schemas"]["Salutations"];
            /** @description The city for the address */
            city?: string | null;
            /** @description The country for the address */
            country?: string | null;
            /** @description The first line of the address */
            line_one?: string | null;
            /** @description The third line of the address */
            line_three?: string | null;
            /** @description The second line of the address */
            line_two?: string | null;
            /** @description Returns True if user accepts mail from the address */
            mailing_address?: boolean;
            /** @description The postal code for the address */
            postal_code?: string | null;
            /** @description Returns true if the address is primary */
            primary?: boolean;
            /** @description The province for the address */
            province?: string | null;
            /** @description The region for the address */
            region?: string | null;
            /** @description Returns true if the address is shared with other users */
            shared?: boolean;
            /** @description The state for the address */
            state?: string | null;
            /**
             * Format: int32
             * @description The type ID associated with an address that is based upon a user's primary relationship to the address
             */
            type_id?: number | null;
            /**
             * Format: int32
             * @description The ID of the user of the address
             */
            user_id?: number | null;
        };
        /** @description AddressPatch Model */
        AddressPatch: {
            /**
             * Format: int32
             * @description The ID of the address
             */
            id?: number;
            /** @description The city for the address */
            city?: string | null;
            /** @description The country for the address */
            country?: string | null;
            /** @description The first line of the address */
            line_one?: string | null;
            /** @description The second line of the address */
            line_two?: string | null;
            /** @description The third line of the address */
            line_three?: string | null;
            /** @description Returns True if user accepts mail from the address */
            mailing_address?: boolean;
            /** @description The postal code for the address */
            postal_code?: string | null;
            /** @description Returns true if the address is primary */
            primary?: boolean;
            /** @description The province for the address */
            province?: string | null;
            /** @description The region for the address */
            region?: string | null;
            /** @description The state for the address */
            state?: string | null;
            /**
             * Format: int32
             * @description The type ID associated with an address that is based upon a user's primary relationship to the address
             */
            type_id?: number | null;
            /**
             * Format: int32
             * @description The ID of the user of the address
             */
            user_id?: number | null;
            /** @description Returns each instance of an address type for each relationship to the user */
            links?: components["schemas"]["AddressTypeLink"][] | null;
            salutations?: components["schemas"]["Salutations"];
            /** @description An array of strings representing field names.
             *     Due to an inherent check against deleting data only accessible through the UI, this unusual step is necessary. To delete or clear data from a user field (such as line_two or line_three), you must include the field in this array. If a field is included in this array, the data for that field will be deleted and this will override any other value set for the field in the request body. Only fields that can be cleared will be processed. Any required fields, Booleans or fields with no blank option will be ignored.
             *     Allowed values: The field name as listed for the request body (e.g. "line_two" or "line_three"). */
            fields_to_delete?: string[] | null;
        };
        /** @description AddressRead Model */
        AddressRead: {
            /**
             * Format: int32
             * @description The ID of the address
             */
            id?: number;
            /** @description The 'Type' of the address */
            address_type?: string | null;
            salutations?: components["schemas"]["Salutations"];
            /** @description The city for the address */
            city?: string | null;
            /** @description The country for the address */
            country?: string | null;
            /** @description The first line of the address */
            line_one?: string | null;
            /** @description The third line of the address */
            line_three?: string | null;
            /** @description The second line of the address */
            line_two?: string | null;
            /** @description Returns each instance of an address type for each relationship to the user */
            links?: components["schemas"]["AddressTypeLink"][] | null;
            /** @description Returns True if user accepts mail from the address */
            mailing_address?: boolean;
            /** @description The postal code for the address */
            postal_code?: string | null;
            /** @description Returns true if the address is primary */
            primary?: boolean;
            /** @description The province for the address */
            province?: string | null;
            /** @description The region for the address */
            region?: string | null;
            /** @description The state for the address */
            state?: string | null;
            /**
             * Format: int32
             * @description The type ID associated with an address that is based upon a user's primary relationship to the address
             */
            type_id?: number | null;
            /**
             * Format: int32
             * @description The ID of the user of the address
             */
            user_id?: number | null;
        };
        /** @description A Collection */
        AddressReadCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["AddressRead"][] | null;
        };
        AddressShare: {
            /**
             * Format: int32
             * @description The ID of the address to be shared with the user
             */
            id?: number;
            /**
             * Format: int32
             * @description The address type ID that the address should be for the user
             */
            address_type_id?: number;
        };
        /** @description AddressType Model */
        AddressType: {
            /**
             * Format: int32
             * @description The ID of the address type
             */
            id?: number;
            /** @description The name of the address type */
            type?: string | null;
        };
        /** @description A Collection */
        AddressTypeCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["AddressType"][] | null;
        };
        /** @description AddressTypeLink Model */
        AddressTypeLink: {
            /**
             * Format: int32
             * @description The ID of the type
             */
            type_id?: number | null;
            /** @description Returns true if the address is primary */
            primary?: boolean;
            /** @description Returns true if changes to an address are made to all users with a shared relationship (Read Only) */
            shared?: boolean;
            /** @description The relationship of the shared user */
            shared_relationship?: string | null;
            /** @description The name of the shared user */
            shared_user?: string | null;
            /** @description The name of the address type */
            type?: string | null;
            /**
             * Format: int32
             * @description The ID of the user
             */
            user_id?: number | null;
        };
        AdminCustomFields: {
            /** Format: int32 */
            field_id?: number | null;
            field_name?: string | null;
            /** Format: int32 */
            table_id?: number | null;
            table_name?: string | null;
            /** Format: int32 */
            data_type_id?: number | null;
            data_type?: string | null;
            /** Format: int32 */
            location_index_id?: number | null;
            location?: string | null;
            active?: boolean | null;
            unique?: boolean | null;
            required?: boolean | null;
            in_use?: boolean | null;
            usage_not_unique?: boolean | null;
            /** Format: int32 */
            location_id?: number | null;
            /** Format: int32 */
            sub_location_id?: number | null;
            sub_location?: string | null;
            use_abbreviation?: boolean | null;
            /** Format: int32 */
            vendor_id?: number | null;
            table?: components["schemas"]["UserDefinedTable"];
        };
        /** @description A Collection */
        AdminCustomFieldsCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["AdminCustomFields"][] | null;
        };
        /** @description Admissions Checklist */
        AdmissionsCheckList: {
            /**
             * Format: int32
             * @description Identifier for a given checklist
             */
            checklist_id?: number;
            /** @description Name of the checklist */
            name?: string | null;
            /** @description Indicates if the checklist is active */
            is_inactive?: boolean;
            /** @description Indicates if the checklist is locked */
            is_locked?: boolean;
            /** @description Indicates if the checklist is a sample */
            is_sample?: boolean;
        };
        /** @description A Collection */
        AdmissionsCheckListCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["AdmissionsCheckList"][] | null;
        };
        /** @description Admissions Checklist Status */
        AdmissionsChecklistStatus: {
            /**
             * Format: int32
             * @description Identifier for this status
             */
            status_id?: number | null;
            /** @description Name of the status */
            status_name?: string | null;
            /**
             * Format: int32
             * @description Order of the status (lower items are earlier in the order)
             */
            ordinal?: number | null;
        };
        /** @description A Collection */
        AdmissionsChecklistStatusCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["AdmissionsChecklistStatus"][] | null;
        };
        /** @description Admissions Checklist */
        AdmissionsStatuses: {
            /**
             * Format: int32
             * @description Identifier for a given status
             */
            id?: number | null;
            /** @description Name of the status */
            description?: string | null;
            /**
             * Format: int32
             * @description Next Status Id
             */
            next_status_id?: number | null;
        };
        /** @description A Collection */
        AdmissionsStatusesCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["AdmissionsStatuses"][] | null;
        };
        /** @description Advisor Model */
        Advisor: {
            /**
             * Format: int32
             * @description The user ID for the advisor
             */
            id?: number | null;
            /** @description The head advisor indicator */
            head?: boolean | null;
            /** @description The firstname and lastname of the advisor */
            name?: string | null;
        };
        /** @description Advisories Section Model */
        AdvisoriesSection: {
            /** @description The list of teachers for this section */
            advisors?: components["schemas"]["Advisor"][] | null;
            /**
             * Format: int32
             * @description The ID of the section
             */
            id?: number;
            /** @description The identifier used to reference a course; the Course Code is a user-entered value */
            course_code?: string | null;
            duration?: components["schemas"]["Duration"];
            /**
             * Format: int32
             * @description The ID of the first section in a series of terms
             */
            lead_section_id?: number | null;
            /** @description The name of the section */
            name?: string | null;
            /**
             * Format: int32
             * @description The ID of an offered course
             */
            offering_id?: number | null;
            /**
             * Format: int32
             * @description The ID that leads you back to the offered section
             */
            parent_section_id?: number | null;
            /**
             * Format: int32
             * @description The ID of the room the section is held in
             */
            room_id?: number | null;
            /** @description The school year date range in which the section occurs */
            school_year?: string | null;
            /** @description The identifier used to differentiate between multiple sections that contain a course; the Section Identifier is a user-entered value */
            section_identifier?: string | null;
        };
        /** @description A Collection */
        AdvisoriesSectionCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["AdvisoriesSection"][] | null;
        };
        /** @description Student medical allergy/condition */
        AllergiesAndConditionsView: {
            /**
             * Format: int32
             * @description The ID of student medical allergy/conditon
             */
            id?: number;
            /** @description Medical type */
            type?: string | null;
            allergy_condition_type?: components["schemas"]["IdDescriptorField"];
            /**
             * Format: date-time
             * @description The date the allergy or condition began. Use format ...
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            date_as_of?: string | null;
            /**
             * Format: date-time
             * @description The date the allergy or condition ended. Use format ...
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            date_until?: string | null;
            /** @description The notes for a allergy/condition */
            notes?: string | null;
            /** @description The signs of an allergic reaction */
            allergy_signs?: string | null;
            /** @description The response for a minor allergic reaction */
            minor_reaction_response?: string | null;
            /** @description The response for a major allergic reaction */
            major_reaction_response?: string | null;
            /** @description Collection of medicines */
            medications?: components["schemas"]["StudentMedicationRead"][] | null;
        };
        AllergyRead: {
            /**
             * Format: int32
             * @description The ID of student medical allergy
             */
            id?: number;
            allergy?: components["schemas"]["IdDescriptorField"];
        };
        ApplicationModel: {
            /** Format: int32 */
            id?: number | null;
            /** Format: date-time */
            date_submitted?: string | null;
            /** Format: date-time */
            date_processed?: string | null;
            source?: components["schemas"]["SourceModel"];
        };
        AreaOfStudyOutputModel: {
            /**
             * Format: int32
             * @description The Id of the area of study
             */
            id?: number | null;
            /** Format: int32 */
            primary_area_of_study_id?: number | null;
            /** @description The long description of the area of study */
            description?: string | null;
            /**
             * Format: int32
             * @description The designated award level for this area of study
             */
            award_level?: number | null;
            type?: string | null;
            degree?: components["schemas"]["Degree"];
        };
        /** @description Assignment Model */
        Assignment: {
            /**
             * Format: int32
             * @description The ID of the assignment
             */
            id?: number;
            /**
             * Format: date-time
             * @description The date the assignment was assigned; Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            date?: string | null;
            /** @description The description of the assignment */
            description?: string | null;
            /** @description Returns True if Discussion is enabled; Discussion is a user-defined value. */
            discussion?: boolean;
            /**
             * Format: date-time
             * @description The date the assignment is due; Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            due_date?: string | null;
            /**
             * Format: int32
             * @description The number of students enrolled in a class.
             */
            enrolled?: number | null;
            /**
             * Format: int32
             * @description Returns the number of assignments that have been graded
             */
            graded_count?: number | null;
            /**
             * Format: int32
             * @description The index ID of the assignment
             */
            index_id?: number | null;
            /** @description Whether the assignment is a major assignment or not; a major assignment is a user-defined value */
            major?: boolean;
            /** @description The name of the assignment */
            name?: string | null;
            /** @description Returns True if assignment is published when it's assigned; based on the Date property */
            publish_on_assigned?: boolean;
            /** @description Returns True if the assignment is published */
            published?: boolean;
            /**
             * Format: int32
             * @description Gets or sets the rank of the assignment
             */
            rank?: number | null;
            /**
             * Format: int32
             * @description The status of the assignment. The status corresponds with static system options. Allowed values: "0" for In Progress, "1" for Completed, "2" for Overdue, and "-1" for To Do.
             */
            status?: number | null;
            /** @description The assignment type (ex. Homework, Essay) */
            type?: string | null;
            /**
             * Format: int32
             * @description The Type ID of the assignment; the Type ID is a static system value.
             */
            type_id?: number | null;
        };
        /** @description A Collection */
        AssignmentCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["Assignment"][] | null;
        };
        /** @description Assignment Type Model */
        AssignmentType: {
            /**
             * Format: int32
             * @description The ID for the assignment type
             */
            id?: number | null;
            /** @description The name of the assignment type */
            name?: string | null;
            /** @description The calculated percentage for the assignment type for this section */
            percentage?: string | null;
            /**
             * Format: float
             * @description The weight applied to the assignment type
             */
            weight?: number | null;
        };
        /** @description Athletic requirement type */
        AthleticRequirementType: {
            /**
             * Format: int32
             * @description The ID of athletic requirement type
             */
            id?: number | null;
            /** @description The description of athletic requirement type */
            description?: string | null;
            /** @description The requirement frequency code: year, season */
            frequency?: string | null;
        };
        /** @description An object with athletic roster user information */
        AthleticRosters: {
            player?: components["schemas"]["Player"];
            user?: components["schemas"]["UserBaseRead"];
            /**
             * Format: date-time
             * @description The date enrolled
             */
            enroll_date?: string | null;
            /**
             * Format: date-time
             * @description The date dropped or left
             */
            depart_date?: string | null;
            leader?: components["schemas"]["RosterLeader"];
            photo?: components["schemas"]["ProfilePictureUrls"];
        };
        /** @description An object with section roster information */
        AthleticSectionRoster: {
            section?: components["schemas"]["Section"];
            /** @description An array of roster users assigned to the section. This includes members and leaders. */
            roster?: components["schemas"]["AthleticRosters"][] | null;
        };
        AthleticVenue: {
            /**
             * Format: int32
             * @description ID for the venue
             */
            id?: number | null;
            /** @description Name of the venue */
            name?: string | null;
        };
        /** @description A Collection */
        AthleticVenueCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["AthleticVenue"][] | null;
        };
        AttendanceCreate: {
            /**
             * Format: int32
             * @description ID of the student
             */
            student_user_id?: number | null;
            /**
             * Format: date-time
             * @description Start date of the Attendance report. The timestamp is required, but only the date portion is used. To specify a specific start time, use the start_time field.
             */
            begin_date?: string | null;
            /**
             * Format: date-time
             * @description End date of the Attendance report. The timestamp is required, but only the date portion is used. To specific a specific end time, use the end_time field.
             */
            end_date?: string | null;
            /** @description Start time of the Attendance report. If blank, will default to the beginning of the day ("00:00:00"). */
            start_time?: string | null;
            /** @description End time of the Attendance report. If blank, will default to the end of the day ("23:59:00"). */
            end_time?: string | null;
            /**
             * Format: int32
             * @description ID of the attendace execuse
             */
            excuse_type_id?: number | null;
            /** @description Description of the attendance report */
            excuse_comment?: string | null;
            /**
             * Format: int32
             * @description The user reporting the attendance. Defaults to user calling endpoint.
             */
            reported_by?: number | null;
        };
        /** @description Attendance Model */
        AttendanceGet: {
            /**
             * Format: int64
             * @description The ID of the attendance
             */
            id?: number;
            /** @description Attendance of record */
            attendance_of_record?: boolean;
            /** @description The type of the attendance */
            attendance_type?: boolean;
            /** @description The name of the block */
            block_name?: string | null;
            /** @description Attendance record comment */
            comment?: string | null;
            /**
             * Format: date-time
             * @description The date of the attendance record. Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            date?: string | null;
            /** @description The category description of the excuse */
            excuse_category_description?: string | null;
            /**
             * Format: int32
             * @description The category of the excuse
             */
            excuse_category_id?: number;
            /** @description The description of the excuse */
            excuse_description?: string | null;
            /**
             * Format: int32
             * @description The type of the excuse
             */
            excuse_type_id?: number;
            /**
             * Format: int32
             * @description Whether the absence was excused
             */
            excused?: number;
            /** @description The graduation year of the student */
            grad_year?: string | null;
            /** @description The grade of the student */
            grade?: string | null;
            /**
             * Format: int32
             * @description Grade level sort order
             */
            grade_level_sort?: number;
            /** @description The group name */
            group_name?: string | null;
            /** @description The phone file name */
            photo_file_name?: string | null;
            /** @description The section */
            section?: string | null;
            /**
             * Format: int32
             * @description The ID of the section
             */
            section_id?: number;
            /** @description The name of the student */
            student_name?: string | null;
            /**
             * Format: int32
             * @description The student user ID
             */
            student_user_id?: number;
            /** @description The name of the teacher */
            teacher_name?: string | null;
        };
        /** @description A Collection */
        AttendanceGetCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["AttendanceGet"][] | null;
        };
        AttendanceTypes: {
            /**
             * Format: int32
             * @description Individual was present
             */
            readonly present?: number;
            /**
             * Format: int32
             * @description Individual was absent
             */
            readonly absence?: number;
            /**
             * Format: int32
             * @description Individual was tardy
             */
            readonly tardy?: number;
        };
        BuildingRead: {
            /**
             * Format: int32
             * @description ID of the building
             */
            building_id?: number | null;
            /** @description Building Name */
            building_name?: string | null;
            /** @description Building group types */
            building_types?: ("Academics" | "Activities" | "Advisory" | "ResidenceLife" | "Athletics" | "Events")[] | null;
            /** @description Collection of rooms within the building */
            rooms?: components["schemas"]["BuildingRoomRead"][] | null;
        };
        /** @description A Collection */
        BuildingReadCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["BuildingRead"][] | null;
        };
        BuildingRoomRead: {
            /**
             * Format: int32
             * @description Identifier for the room
             */
            room_id?: number | null;
            /** @description Room number */
            room_number?: string | null;
            /** @description Room name */
            name?: string | null;
            /** @description Room code */
            code?: string | null;
            /** @description Room capacity */
            capacity?: string | null;
            /** @description Denotes how the room is used */
            room_type?: string | null;
            /**
             * Format: int32
             * @description Identifier for the room type
             */
            room_type_id?: number | null;
        };
        /** @description Model to define bulk enrollments for both students and teachers */
        BulkEnrollment: {
            /**
             * Format: int32
             * @description The duration ID of section to be enrolled in. Corresponds to the ```duration ID``` in the <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1AcademicsSectionsGet">section list</a>.
             */
            id: number;
            /**
             * Format: date-time
             * @description The effective date that users will be added to the sections. Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            enrollment_date: string;
            /** @description Comma delimited list of sections to which you want to add the users listed above into */
            section_ids: string;
            /** @description Comma delimited list of ids representing users to be added to the sections listed below */
            user_ids: string;
        };
        /** @description Calendar item */
        CalendarItem: {
            /**
             * Format: int32
             * @description The association id for the event
             */
            association_id?: number | null;
            /** @description The brief description of the event */
            brief_description?: string | null;
            /** @description The name of the building where the event is being held */
            building_name?: string | null;
            /** @description If the event is an athletic game, returns true if it is canceled */
            cancelled?: boolean | null;
            /** @description The email of the event contact */
            contact_email?: string | null;
            /** @description The name of the event contact */
            contact_name?: string | null;
            /**
             * Format: date-time
             * @description The date the event ends
             */
            end_date?: string | null;
            /**
             * Format: int32
             * @description The id of the event
             */
            event_id?: number | null;
            /** @description The type of the event */
            event_type?: string | null;
            /**
             * Format: int32
             * @description The id of the category the event belongs to
             */
            category_id?: number | null;
            /** @description The name of the category the event belongs to */
            category_name?: string | null;
            /** @description If the event is an athletic game, returns the home or away status of the game */
            home_away?: string | null;
            /** @description If the event is an athletic game, returns true if the game is an invitational */
            invitational?: boolean | null;
            /** @description If the event is an athletic game, returns true if the game is a league game */
            league?: boolean | null;
            /** @description The location of the event */
            location?: string | null;
            /** @description The long description of the event */
            long_description?: string | null;
            /** @description If the event is an athletic game, returns the name of the opponent */
            opponent?: string | null;
            /** @description If the event is an athletic game, returns true if the game is a playoff game */
            playoff?: boolean | null;
            /**
             * Format: int32
             * @description The event preset id
             */
            preset_id?: number | null;
            /**
             * Format: int32
             * @description The recurrence id of the event
             */
            recurrence_id?: number | null;
            /**
             * Format: int32
             * @description the registration id of the event
             */
            registration_id?: number | null;
            /** @description If the event is an athletic game, returns true if the game was rescheduled */
            rescheduled?: boolean | null;
            /** @description If the event is an athletic game, the rescheduled note (usually the reason for the reschedule) */
            reschedule_note?: string | null;
            /** @description The name of the room where the event is being held */
            room_name?: string | null;
            /** @description If the event is an athletic game, returns true if the game is a scrimmage */
            scrimmage?: boolean | null;
            /**
             * Format: date-time
             * @description The date the event starts
             */
            start_date?: string | null;
            /** @description The title of the event */
            title?: string | null;
            /** @description If the event is an athletic game, returns true if the game is part of a tournament */
            tournament?: boolean | null;
            /** @description Returns true if the event happens all day */
            all_day?: boolean | null;
            /**
             * Format: int32
             * @description Shows the total number of days the event spans
             */
            total_days?: number | null;
        };
        /** @description A Collection */
        CalendarItemCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["CalendarItem"][] | null;
        };
        /** @description Candidate Create */
        CandidateCreate: {
            /**
             * Format: int32
             * @description ID for the user to be added as a candidate.
             */
            user_id: number;
            /** @description The year for which the user is a candidate */
            entering_year: string;
            /**
             * Format: int32
             * @description The ID for the grade in which the candidate is entering
             */
            entering_grade_id: number;
            /**
             * Format: int32
             * @description ID of the checklist to be updated as part of candidates creation
             */
            checklist_id: number;
        };
        CandidateDecisionModel: {
            /** Format: int32 */
            id?: number | null;
            name?: string | null;
            decision_type?: string | null;
            /** Format: int32 */
            decision_type_id?: number | null;
            /** Format: date-time */
            date?: string | null;
        };
        /** @description An object with candidate event information */
        CandidateEventReadModel: {
            /**
             * Format: int32
             * @description The ID of the candidate event
             */
            id?: number | null;
            /** @description The name of the event */
            name?: string | null;
            type?: components["schemas"]["SourceModel"];
            /**
             * Format: date-time
             * @description The start time of the event
             */
            start_time?: string | null;
            /** @description True if the candidate is registered */
            is_registered?: boolean | null;
            /** @description True if the candidate attended the event */
            attended?: boolean | null;
            /** @description The comment on the candidate event */
            comment?: string | null;
        };
        /** @description An object with candidate interview information */
        CandidateInterviewReadModel: {
            /**
             * Format: int32
             * @description The ID of the candidate interview
             */
            id?: number | null;
            type?: components["schemas"]["SourceModel"];
            /**
             * Format: date-time
             * @description The start time of the interview
             */
            start_time?: string | null;
            /**
             * Format: date-time
             * @description The end time of the interview
             */
            end_time?: string | null;
            interviewer?: components["schemas"]["UserBaseReadModel"];
            /** @description Information for non-user interviewer */
            interviewer_other?: string | null;
            /** @description An array of accompanying adult objects */
            accompanying_adults?: components["schemas"]["UserBaseReadModel"][] | null;
            /**
             * Format: int32
             * @description The rating of the interview
             */
            rating?: number | null;
            /** @description True if interview was rescheduled */
            is_rescheduled?: boolean | null;
            /** @description True if candidate did not show for interview */
            did_not_show?: boolean | null;
            /** @description The comment for the interview */
            comment?: string | null;
        };
        /** @description Candidate Read */
        CandidateRead: {
            /**
             * Format: int32
             * @description Unique Identifer for this candidate
             */
            user_id?: number | null;
            /** @description Candidates first name */
            first_name?: string | null;
            /** @description Candidates last name */
            last_name?: string | null;
            /** @description Candidates middle name */
            middle_name?: string | null;
            /** @description Prefix */
            prefix?: string | null;
            /** @description Suffix */
            suffix?: string | null;
            /** @description Candidates nick name (if available) */
            nickname?: string | null;
            /** @description Role for this candidate. */
            role?: string | null;
            /**
             * Format: int32
             * @description Identifier for thier role
             */
            role_id?: number | null;
            /** @description Text representation of their current enrollment status */
            current_status?: string | null;
            /**
             * Format: int32
             * @description Identifier for their enrollment status
             */
            status_id?: number | null;
            /** @description Text representation of the school year the candidate will be joining */
            entering_year?: string | null;
            /**
             * Format: int32
             * @description Identifier for the school year the candidate will be joining
             */
            entering_year_id?: number | null;
            /** @description Text representation of the grade candidate will be joining */
            entering_grade?: string | null;
            /**
             * Format: int32
             * @description Identifier for the grade candidate will be joining
             */
            entering_grade_id?: number | null;
            /** @description Candidates email */
            email?: string | null;
            /** @description Comments */
            comment?: string | null;
            /** @description 1st Email of candidates parent */
            parent1_email?: string | null;
            /** @description 2nd email of candidates parent */
            parent2_email?: string | null;
            international?: boolean | null;
            school_program?: string | null;
            gender?: string | null;
            ethnicity?: string | null;
            boarding_or_day?: string | null;
            financial_aid?: boolean | null;
            /** Format: int32 */
            admissions_staff_id?: number | null;
            admissions_staff?: string | null;
            inquiry_source?: string | null;
            /** Format: int32 */
            inquiry_source_id?: number | null;
            referral_type?: string | null;
            /** Format: int32 */
            referral_type_id?: number | null;
            has_iep?: boolean | null;
            has_504?: boolean | null;
            created_by?: string | null;
            /** Format: date-time */
            created?: string | null;
            modified_by?: string | null;
            /** Format: date-time */
            modified?: string | null;
            preferred_name?: string | null;
            decision?: components["schemas"]["SchoolDecisionModel"];
            /** Format: int32 */
            family_id?: number | null;
            /**
             * Format: date-time
             * @description Current status date
             */
            current_status_date?: string | null;
            application?: components["schemas"]["ApplicationModel"];
            /** @description An array of candidate event objects */
            events?: components["schemas"]["CandidateEventReadModel"][] | null;
            /** @description An array of candidate interview objects */
            interviews?: components["schemas"]["CandidateInterviewReadModel"][] | null;
            /** @description An array of candidate visit objects */
            visits?: components["schemas"]["CandidateVisitReadModel"][] | null;
        };
        /** @description A Collection */
        CandidateReadCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["CandidateRead"][] | null;
        };
        /** @description An object with candidate visit information */
        CandidateVisitReadModel: {
            /**
             * Format: int32
             * @description The ID of the candidate visit
             */
            id?: number | null;
            type?: components["schemas"]["SourceModel"];
            /**
             * Format: date-time
             * @description The start time of the visit
             */
            start_time?: string | null;
            /**
             * Format: date-time
             * @description The start time of the visit
             */
            end_time?: string | null;
            guide?: components["schemas"]["UserBaseReadModel"];
            /** @description Information for non-user guide */
            guide_other?: string | null;
            /** @description An array of accompanying adult objects */
            accompanying_adults?: components["schemas"]["UserBaseReadModel"][] | null;
            /** @description True if visit was rescheduled */
            is_rescheduled?: boolean | null;
            /** @description True if candidate did not show for visit */
            did_not_show?: boolean | null;
            /** @description The comment for the visit */
            comment?: string | null;
        };
        /** @description News Category Model */
        Category: {
            /**
             * Format: int32
             * @description The Id of the news category
             */
            id?: number | null;
            /** @description The name of the news category */
            name?: string | null;
            /** @description The type of content type the news comes from */
            content_type?: string | null;
            /** @description Set to true if the new category is the primary source of the news item */
            primary?: boolean | null;
            /**
             * Format: date-time
             * @description The publish date
             */
            publish_date?: string | null;
            /**
             * Format: date-time
             * @description The date of expiration
             */
            expire_date?: string | null;
        };
        /** @description UserRead Model */
        ChildOfParent: {
            /**
             * Format: int32
             * @description The ID associated with a user
             */
            id?: number | null;
            /** @description Indicates if the user is an active student */
            student_is_active?: boolean | null;
            /** @description The current grade of a user */
            current_grade?: string | null;
            /** @description The grad year of a user */
            grad_year?: string | null;
            /** @description The email address of a user */
            email?: string | null;
            /** @description The first name of a user */
            first_name?: string | null;
            /** @description The last name of a user */
            last_name?: string | null;
            /** @description The middle name of a user */
            middle_name?: string | null;
            /** @description The nickname of a user
             *     <b>This field will be deprecated after 90 days.</b> */
            nick_name?: string | null;
            /** @description The preferred name of the user */
            preferred_name?: string | null;
            /** @description The prefix of a user */
            prefix?: string | null;
            /** @description The suffix of a user */
            suffix?: string | null;
            /** @description The preferred last name of the user */
            preferred_last_name?: string | null;
        };
        /** @description A Collection */
        ChildOfParentCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["ChildOfParent"][] | null;
        };
        Coach: {
            /**
             * Format: int32
             * @description ID of the coach
             */
            id?: number;
            /** @description Coach's first name */
            first_name?: string | null;
            /** @description Coach's last name */
            last_name?: string | null;
            /** @description Coach's title */
            title?: string | null;
            /** @description Preferred Name */
            preferred_name?: string | null;
        };
        /** @description A Collection */
        CoachCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["Coach"][] | null;
        };
        Concentration: {
            /**
             * Format: int32
             * @description The Id of the Degree, Major, Minor, or Concentration
             */
            id?: number;
            /** @description The name of the Degree, Major, Minor, or Concentration */
            name?: string | null;
            /** @description The abbreviation of the Degree, Major, Minor, or Concentration */
            abbreviation?: string | null;
        };
        ConditionRead: {
            /**
             * Format: int32
             * @description The ID of student medical condition
             */
            id?: number;
            condition?: components["schemas"]["IdDescriptorField"];
        };
        Course: {
            /**
             * Format: int32
             * @description The Offering Id of the Offering
             */
            offering_id?: number;
            /**
             * Format: int32
             * @description The length of the offering in terms
             */
            course_length?: number | null;
            /** @description The course code for the offering */
            course_code?: string | null;
            /** @description The name of the offering */
            course_title?: string | null;
            /** @description The description of the offering */
            course_description?: string | null;
            inactive?: boolean;
            /** Format: int32 */
            level_num?: number | null;
            /**
             * CourseBlockType
             * @enum {string|null}
             */
            block_type_id?: "Homeroom" | "Academic" | "Lunch" | "Double" | "NonAcademic" | null;
            /** Format: int32 */
            room_type_id?: number | null;
            /** Format: int32 */
            room_id?: number | null;
            /** Format: int32 */
            building_id?: number | null;
            /**
             * Format: float
             * @description The credits for the offering
             */
            credits?: number | null;
            custom_fields?: components["schemas"]["CustumFieldReadModel"][] | null;
        };
        /** @description A Collection */
        CourseCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["Course"][] | null;
        };
        /** @description Custom Field */
        CustomAdminField: {
            /** @description Id */
            id?: string | null;
            /**
             * Format: int32
             * @description Data Type Id
             */
            data_type_id?: number;
            /** @description Data Type */
            data_type?: string | null;
            /** @description Data Type Description */
            data_type_description?: string | null;
            /**
             * Format: int32
             * @description The custom field Id
             */
            field_id?: number;
            /** @description Field Name */
            field_name?: string | null;
            /** @description Bit Value */
            bit_value?: boolean | null;
            /**
             * Format: int32
             * @description Int Value
             */
            int_value?: number | null;
            /**
             * Format: float
             * @description Decimal Value
             */
            decimal_value?: number | null;
            /** @description Text Value */
            text_value?: string | null;
            /**
             * Format: date-time
             * @description Date Value
             */
            date_value?: string | null;
            /**
             * Format: int32
             * @description Last Modified User Id
             */
            last_modified_user_id?: number;
            /**
             * Format: date-time
             * @description Last Modified Date
             */
            last_modified_date?: string;
            /** @description Status */
            status?: boolean;
            /** @description Unique */
            unique?: boolean;
            /** @description Required */
            required?: boolean;
            /**
             * Format: int32
             * @description Table Id
             */
            table_id?: number | null;
            /**
             * Format: int32
             * @description Table Value Id
             */
            table_value_id?: number | null;
            /** @description Table Value */
            table_value?: string | null;
            /** @description Table Value Abbreviation */
            table_value_abbreviation?: string | null;
        };
        /** @description Custom Field Model for user or address or room or offering or section */
        CustumFieldReadModel: {
            /**
             * Format: int32
             * @description Usage id can be user id or address id or room id or offering id or sectionid
             */
            usage_id?: number | null;
            /**
             * Format: int32
             * @description Usage id of user define field for user or address or room or offering or section
             */
            udf_usage_id?: number | null;
            /**
             * Format: int32
             * @description Data Type Id
             */
            data_type_id?: number;
            /** @description Data Type */
            data_type?: string | null;
            /** @description Data Type Description */
            data_type_description?: string | null;
            /**
             * Format: int32
             * @description The custom field Id
             */
            field_id?: number;
            /** @description Field Name */
            field_name?: string | null;
            /** @description Bit Value */
            bit_value?: boolean | null;
            /**
             * Format: int32
             * @description Int Value
             */
            int_value?: number | null;
            /**
             * Format: float
             * @description Decimal Value
             */
            decimal_value?: number | null;
            /** @description Text Value */
            text_value?: string | null;
            /**
             * Format: date-time
             * @description Date Value
             */
            date_value?: string | null;
            /**
             * Format: int32
             * @description Last Modified User Id
             */
            last_modified_user_id?: number;
            /**
             * Format: date-time
             * @description Last Modified Date
             */
            last_modified_date?: string;
            /** @description Status */
            status?: boolean;
            /** @description Unique */
            unique?: boolean;
            /** @description Required */
            required?: boolean;
            /**
             * Format: int32
             * @description Table Id
             */
            table_id?: number | null;
            /**
             * Format: int32
             * @description Table Value Id
             */
            table_value_id?: number | null;
            /** @description Table Value */
            table_value?: string | null;
            /** @description Table Value Abbreviation */
            table_value_abbreviation?: string | null;
        };
        Cycle: {
            /** @description Name of the schedule rotation for the cycle */
            schedule_set?: string | null;
            /**
             * Format: int32
             * @description Id of the schedule rotation for the cycle
             */
            schedule_set_id?: number | null;
            /**
             * Format: int32
             * @description Week in the schedule rotation for the cycle
             */
            week?: number;
            /**
             * Format: int32
             * @description Day in the schedule rotation for the cycle
             */
            day?: number;
            /** @description Start time of the cycle */
            begin_time?: string | null;
            /** @description End time of the cycle */
            end_time?: string | null;
            /** @description Flag to indicate if the section meets on Sundays */
            sun?: boolean;
            /** @description Flag to indicate if the section meets on Mondays */
            mon?: boolean;
            /** @description Flag to indicate if the section meets on Tuesdays */
            tue?: boolean;
            /** @description Flag to indicate if the section meets on Wednesdays */
            wed?: boolean;
            /** @description Flag to indicate if the section meets on Thursdays */
            thu?: boolean;
            /** @description Flag to indicate if the section meets on Fridays */
            fri?: boolean;
            /** @description Flag to indicate if the section meets on Saturdays */
            sat?: boolean;
            /** @description Name of the room where this particular cycle meets */
            room_full_name?: string | null;
            /** @description Flag to indicate if the cycle has been canceled */
            canceled?: boolean;
        };
        /** @description Days for medication */
        Days: {
            /** @description Set to true to dispense medication on sunday. Allowed values: true, false */
            sunday?: boolean;
            /** @description Set to true to dispense medication on monday. Allowed values: true, false */
            monday?: boolean;
            /** @description Set to true to dispense medication on tuesday. Allowed values: true, false */
            tuesday?: boolean;
            /** @description Set to true to dispense medication on wednesday. Allowed values: true, false */
            wednesday?: boolean;
            /** @description Set to true to dispense medication on thursday. Allowed values: true, false */
            thursday?: boolean;
            /** @description Set to true to dispense medication on friday. Allowed values: true, false */
            friday?: boolean;
            /** @description Set to true to dispense medication on saturday. Allowed values: true, false */
            saturday?: boolean;
        };
        Degree: {
            /**
             * Format: int32
             * @description The Id of the Degree, Major, Minor, or Concentration
             */
            id?: number;
            /** @description The name of the Degree, Major, Minor, or Concentration */
            name?: string | null;
            /** @description The abbreviation of the Degree, Major, Minor, or Concentration */
            abbreviation?: string | null;
        };
        DegreeOutputModel: {
            /**
             * Format: int32
             * @description The Id of the area of study
             */
            id?: number | null;
            /**
             * Format: date-time
             * @description From User Area of Study Reference
             */
            declared_on?: string | null;
            /**
             * Format: date-time
             * @description From User Area of Study Group
             */
            completed_on?: string | null;
            /**
             * Format: date-time
             * @description From User Area of Study Group
             */
            conferred_on?: string | null;
            /**
             * Format: double
             * @description From User Area of Study Reference
             */
            credits_completed?: number | null;
            /**
             * Format: double
             * @description From User Area of Study Reference
             */
            credits_in_progress?: number | null;
            /**
             * Format: double
             * @description From User Area of Study Reference
             */
            credits_remaining?: number | null;
            /** @description The BBID of the user who created the area of study */
            created_by?: string | null;
            /** @description The BBID of the user who last modified the area of study */
            modified_by?: string | null;
            /**
             * Format: date-time
             * @description The date the area of study was created
             */
            created?: string | null;
            /**
             * Format: date-time
             * @description The date the area of study was last modified
             */
            modified?: string | null;
            requirement_set?: components["schemas"]["AreaOfStudyOutputModel"][] | null;
            majors?: components["schemas"]["UserAreaOfStudyReferenceOutputModel"][] | null;
            minors?: components["schemas"]["UserAreaOfStudyReferenceOutputModel"][] | null;
            concentrations?: components["schemas"]["UserAreaOfStudyReferenceOutputModel"][] | null;
        };
        /** @description Department model */
        Department: {
            /**
             * Format: int32
             * @description The ID of the department
             */
            id?: number | null;
            /** @description The description of the level this department is associated with */
            level_description?: string | null;
            /** @description The name of the department */
            name?: string | null;
            /**
             * Format: int32
             * @description The sort order of the department
             */
            sort?: number | null;
            /** @description True if department is academic */
            is_academic?: boolean;
            /** @description The description of the department */
            description?: string | null;
            /** @description An array of school levels for the department */
            school_levels?: components["schemas"]["SchoolLevel"][] | null;
        };
        /** @description A Collection */
        DepartmentCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["Department"][] | null;
        };
        DirectoryModel: {
            /**
             * Format: int32
             * @description The Id of the directory
             */
            id?: number;
            /** @description the name of the directory */
            name?: string | null;
            /**
             * Format: int32
             * @description The sort order that the directory should be displayed
             */
            sort?: number;
        };
        /** @description A Collection */
        DirectoryModelCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["DirectoryModel"][] | null;
        };
        /** @description Directory Result Model */
        DirectoryResult: {
            /**
             * Format: int32
             * @description The Id of the user
             */
            user_id?: number | null;
            /** @description The first name of the user */
            first_name?: string | null;
            /** @description The last name of the user */
            last_name?: string | null;
            /** @description The email address of the user */
            email?: string | null;
            /** @description The first line of the user address */
            address_line1?: string | null;
            /** @description The second line of the user address */
            address_line2?: string | null;
            /** @description The third line of the user address */
            address_line3?: string | null;
            /** @description The city the user lives in */
            city?: string | null;
            /** @description The state the user lives in */
            state?: string | null;
            /** @description The zip code the user lives in */
            zip?: string | null;
            /** @description The country the user lives in */
            country?: string | null;
            /** @description The user's home phone number */
            home_phone?: string | null;
            /** @description The user's cell phone number */
            cell_phone?: string | null;
            /** @description The user's office phone number */
            office_phone?: string | null;
            /** @description The user's secondary home phone number */
            home_phone2?: string | null;
            /** @description Returns true if the user has relationships */
            has_relationships?: boolean | null;
            /** @description The user's prefix */
            prefix?: string | null;
            /** @description The user's preferred name */
            preferred_name?: string | null;
            /** @description The user's profile photo */
            profile_photo?: string | null;
            /** @description The user's middle name */
            middlename?: string | null;
            /** @description The user's maiden name */
            maiden_name?: string | null;
            /** @description The user's suffix */
            suffix?: string | null;
            /** @description The user's graduation year */
            grad_year?: string | null;
            /** @description The user's grade */
            grade?: string | null;
            /** @description Grade display */
            grade_display?: string | null;
            /** @description The department the user belongs to */
            department?: string | null;
            /** @description How the user's department should be displayed */
            department_display?: string | null;
            /**
             * Format: int32
             * @description The Id of the user's spouse
             */
            spouse_id?: number | null;
            /** @description The user's children */
            child_names?: string | null;
            /**
             * Format: int32
             * @description The numeric grade of the user
             */
            grade_numeric?: number | null;
            /** @description The way the numeric grade should be displayed */
            grade_numeric_display?: string | null;
            /**
             * Format: int32
             * @description The total count of records
             */
            total_count?: number | null;
            /** @description Returns true if the user is deceased */
            deceased?: boolean | null;
            /** @description Returns true if the user is a student */
            student?: boolean | null;
            /**
             * Format: int32
             * @description The Id of the preferred address for the user
             */
            preferred_address_id?: number | null;
            /**
             * Format: double
             * @description Preferred address latitude
             */
            preferred_address_lat?: number | null;
            /**
             * Format: double
             * @description Preferred address longitude
             */
            preferred_address_lng?: number | null;
            /** @description The user's job title */
            job_title?: string | null;
        };
        /** @description A Collection */
        DirectoryResultCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["DirectoryResult"][] | null;
        };
        Dorm: {
            /** Format: int32 */
            available_spots?: number | null;
            /** Format: int32 */
            building_capacity?: number | null;
            /** Format: int32 */
            building_id?: number | null;
            building_name?: string | null;
            /** Format: int32 */
            building_enrollment?: number | null;
            /** Format: int32 */
            offering_type?: number | null;
            leaders?: components["schemas"]["DormLeader"][] | null;
            Rooms?: components["schemas"]["Room"][] | null;
            /** Format: int32 */
            section_id?: number | null;
        };
        /** @description A Collection */
        DormCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["Dorm"][] | null;
        };
        DormLeader: {
            /** Format: int32 */
            building_id?: number | null;
            display_name?: string | null;
            is_faculty?: boolean | null;
            is_admin?: boolean | null;
            is_head?: boolean | null;
            /** Format: int32 */
            owner_type?: number | null;
            /** Format: date-time */
            resident_from_date?: string | null;
            /** Format: int32 */
            room_id?: number | null;
            /** Format: int32 */
            section_id?: number | null;
            /** Format: int32 */
            user_id?: number | null;
            first_name?: string | null;
            last_name?: string | null;
            maiden_name?: string | null;
            prefix?: string | null;
            suffix?: string | null;
            middle_name?: string | null;
            display?: string | null;
            type?: string | null;
            /** Format: date-time */
            date_of_birth?: string | null;
        };
        DormStudentInfo: {
            grad_year?: string | null;
        };
        /** @description An object describing the term or season for the section */
        Duration: {
            /**
             * Format: int32
             * @description The ID of the duration
             */
            id?: number;
            /** @description The Name of the duration */
            name?: string | null;
        };
        /** @description EducationAdd Model */
        EducationAdd: {
            /** @description The name of the school. */
            school: string;
            /** @description The degree or diploma earned. */
            degree?: string | null;
            /** @description The major declared for the degree. */
            major?: string | null;
            /** @description The field of study at the school. */
            field?: string | null;
            /**
             * Format: int32
             * @description The graduation year.
             */
            grad_year?: number | null;
            /**
             * Format: int32
             * @description The order to list the school.
             */
            sort_order?: number | null;
        };
        /** @description EducationRead Model */
        EducationRead: {
            /**
             * Format: int32
             * @description The ID of the education
             */
            id?: number;
            /** @description The degree recieved */
            degree?: string | null;
            /** @description The field the major was received in */
            field?: string | null;
            /** @description The graduation year. ex. 2017 */
            grad_year?: string | null;
            /** @description The major course(s) of study */
            major?: string | null;
            /** @description The school name */
            school?: string | null;
            /**
             * Format: int32
             * @description The order the education appears in the UI
             */
            sort_order?: number | null;
        };
        /** @description A Collection */
        EducationReadCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["EducationRead"][] | null;
        };
        /** @description EducationUpdate Model */
        EducationUpdate: {
            /** @description The name of the school. */
            school?: string | null;
            /** @description The degree or diploma earned. */
            degree?: string | null;
            /** @description The major declared for the degree. */
            major?: string | null;
            /** @description The field of study at the school. */
            field?: string | null;
            /** @description The graduation year. */
            grad_year?: string | null;
            /** @description The order to list the school. */
            sort_order?: string | null;
        };
        /** @description Emergency Contact Changes */
        EmergencyContactChange: {
            /**
             * Format: int32
             * @description UserId
             */
            user_id?: number | null;
            /** @description The string representation of the call dialer settings in Education Management */
            call_dialer?: string | null;
            /**
             * Format: int32
             * @description EcUserId
             */
            ec_user_id?: number | null;
            /** @description First Name */
            firstname?: string | null;
            /** @description Last Name */
            lastname?: string | null;
            /** @description Phone Number */
            phone_number?: string | null;
            /** @description Phone  Type */
            phone_type?: string | null;
            /**
             * Format: int32
             * @description Phone Call Type
             */
            phone_call_type?: number | null;
            /** @description Email */
            email?: string | null;
            /**
             * Format: int32
             * @description Email Call Type
             */
            email_call_type?: number | null;
            /**
             * Format: int32
             * @description Record Type
             */
            record_type?: number | null;
            /**
             * Format: int32
             * @description Sort
             */
            sort?: number | null;
            /** @description inactive */
            inactive?: boolean | null;
            active?: boolean | null;
            /** @description Deleted Indicator */
            delete_indicator?: boolean | null;
            /** @description Roles */
            roles?: string | null;
            /** @description Student Indicator */
            student_indicator?: boolean | null;
            /** @description Faculty Indicator */
            faculty_indicator?: boolean | null;
            /** @description Staff Indicator */
            staff_indicator?: boolean | null;
            emergency_contact_change_emails?: components["schemas"]["EmergencyContactChangeEmail"][] | null;
            emergency_contact_change_phones?: components["schemas"]["EmergencyContactChangePhone"][] | null;
        };
        /** @description A Collection */
        EmergencyContactChangeCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["EmergencyContactChange"][] | null;
        };
        /** @description Emergency Contact Change Email Model */
        EmergencyContactChangeEmail: {
            /** @description Active Indicator */
            active?: boolean;
            /** @description Automated email type */
            automated_email?: string | null;
            /** @description The email address of a user */
            email?: string | null;
            /** @description The first name of the emergency contact */
            first_name?: string | null;
            /** @description The last name of the emergency contact */
            last_name?: string | null;
            /** @description The relationship of the emergency contact to the user */
            relationship?: string | null;
            /**
             * Format: int32
             * @description Sort order
             */
            sort_order?: number | null;
        };
        /** @description Emergency Contact Change Phone Model */
        EmergencyContactChangePhone: {
            /** @description Active Indicator */
            active?: boolean;
            /** @description Call dialer */
            call_dialer?: string | null;
            /** @description The first name of the emergency contact */
            first_name?: string | null;
            /** @description The last name of the emergency contact */
            last_name?: string | null;
            /** @description Phone number */
            phone_number?: string | null;
            /** @description Phone type */
            phone_type?: string | null;
            /** @description The relationship of the emergency contact to the user */
            relationship?: string | null;
            /**
             * Format: int32
             * @description Sort order
             */
            sort_order?: number | null;
        };
        /** @description Emergency Contact Email Model */
        EmergencyContactEmail: {
            /**
             * Format: int32
             * @description Emergency contact email ID
             */
            id?: number;
            /** @description Automated email type */
            automated_email?: string | null;
            /**
             * Format: int32
             * @description Contact ID
             */
            contact_id?: number;
            /** @description The email address of a user */
            email?: string | null;
            /** @description The first name of the emergency contact */
            first_name?: string | null;
            /** @description The last name of the emergency contact */
            last_name?: string | null;
            /** @description The relationship of the emergency contact to the user */
            relationship?: string | null;
            /**
             * Format: int32
             * @description The relationship ID for the user's emergency contact
             */
            relationship_id?: number;
            /**
             * Format: int32
             * @description The user ID of the emergency contact
             */
            relationship_user_id?: number;
            /**
             * Format: int32
             * @description Sort order
             */
            sort_order?: number | null;
            /**
             * Format: int32
             * @description User contact ID
             */
            user_contact_id?: number;
        };
        /** @description Emergency Contact List Model */
        EmergencyContactList: {
            /**
             * Format: int32
             * @description User ID
             */
            id?: number;
            /** @description List of emergency contact emails */
            email_contact_list?: components["schemas"]["EmergencyContactEmail"][] | null;
            /** @description List of emergency contact phones */
            phone_contact_list?: components["schemas"]["EmergencyContactPhone"][] | null;
        };
        /** @description Used to create a non-user emergency contact */
        EmergencyContactNonUserCreate: {
            /**
             * Format: int32
             * @description The value to be used for the automated email field.  0 = Never, 1 = Every Time, 2 = Emergency Only
             */
            automated_email?: number;
            /** @description The email address for the emergency contact */
            email?: string | null;
            /**
             * Format: int32
             * @description The value to be used for the automated call dialer field.  0 = Never, 1 = Every Time, 2 = Emergency Only
             */
            call_dialer?: number;
            /** @description This first name of the emergency contact */
            firstname?: string | null;
            /** @description The last name of the emergency contact */
            lastname?: string | null;
            /** @description The phone number of the emergency contact */
            phone_number?: string | null;
            /** @description The phone type of the phone number for the emergency contact */
            phone_type?: string | null;
            /** @description The relationship of the emergency contact */
            relationship?: string | null;
        };
        /** @description Emergency Contact Phone Model */
        EmergencyContactPhone: {
            /**
             * Format: int32
             * @description Emergency contact phone ID
             */
            id?: number;
            /** @description Call dialer */
            call_dialer?: string | null;
            /**
             * Format: int32
             * @description Contact ID
             */
            contact_id?: number;
            /** @description The first name of the emergency contact */
            first_name?: string | null;
            /** @description The last name of the emergency contact */
            last_name?: string | null;
            /**
             * Format: int32
             * @description Phone ID
             */
            phone_id?: number;
            /**
             * Format: int32
             * @description Phone index ID
             */
            phone_index_id?: number;
            /** @description Phone number */
            phone_number?: string | null;
            /** @description Phone type */
            phone_type?: string | null;
            /** @description The relationship of the emergency contact to the user */
            relationship?: string | null;
            /**
             * Format: int32
             * @description The relationship ID of the emergency contact to the user
             */
            relationship_id?: number;
            /**
             * Format: int32
             * @description The user ID of the emergency contact
             */
            relationship_user_id?: number;
            /**
             * Format: int32
             * @description Sort order
             */
            sort_order?: number | null;
            /**
             * Format: int32
             * @description User contact ID
             */
            user_contact_id?: number;
        };
        /** @description Used to create an emergency contact for a user. */
        EmergencyContactUserCreate: {
            /**
             * Format: int32
             * @description The value to be used for the automated email field.  0 = Never, 1 = Every Time, 2 = Emergency Only
             */
            automated_email?: number;
            /**
             * Format: int32
             * @description The value to be used for the automated call dialer field.  0 = Never, 1 = Every Time, 2 = Emergency Only
             */
            call_dialer?: number;
            /** @description The email address for the emergency contact */
            email?: string | null;
            /** @description The phone number for the emergency contact */
            phone_number?: string | null;
        };
        EmployeeDepartmentsEditModel: {
            /**
             * Format: int32
             * @description The ID of the department
             */
            department_id: number;
            /** @description Set to true if the employee is the department chair. Sets value to false if not included. */
            is_chair?: boolean | null;
        };
        EmployeeDepartmentsInfoModel: {
            /** @description True if user chairs of the department */
            is_chair?: boolean;
            /**
             * Format: int32
             * @description The ID of the role
             */
            id?: number;
            /** @description The description of the role */
            description?: string | null;
        };
        /** @description Employee Roles Info Model */
        EmployeeRolesInfoModel: {
            /**
             * Format: int32
             * @description The ID of the role
             */
            id?: number;
            /** @description The description of the role */
            description?: string | null;
            base_role?: components["schemas"]["IdDescriptorField"];
        };
        /** @description Section Model */
        Enrollment: {
            /**
             * Format: int32
             * @description The ID of the section
             */
            id?: number | null;
            /**
             * Format: date-time
             * @description The begin date of the course. Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            begin_date?: string;
            /**
             * Format: int32
             * @description The block ID for a section
             */
            block_id?: number | null;
            /** @description The block name for a section */
            block_name?: string | null;
            /** @description Returns true if the course has blocks */
            blocks?: boolean;
            /** @description The building name */
            building_name?: string | null;
            /**
             * Format: int32
             * @description changed sections
             */
            changed_sections?: number | null;
            /** @description The identifier used to reference a course; the Course Code is a user-entered value */
            course_code?: string | null;
            /**
             * Format: int32
             * @description The length of a course
             */
            course_length?: number | null;
            /** @description The title of the course */
            course_title?: string | null;
            /** @description The list of departments the section is associated with */
            departments?: components["schemas"]["Department"][] | null;
            /** @description distinction */
            distinction?: string | null;
            /**
             * Format: int32
             * @description was the course dropped
             */
            dropped?: number | null;
            /**
             * Format: date-time
             * @description The begin date of the duration. Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            duration_begin_date?: string;
            /** @description The description of the starting term of the section */
            duration_description?: string | null;
            /**
             * Format: date-time
             * @description The end date of the duration. Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            duration_end_date?: string;
            /**
             * Format: int32
             * @description The duration ID for a section
             */
            duration_id?: number;
            /** @description The starting term of the section */
            duration_name?: string | null;
            /**
             * Format: date-time
             * @description The end date of the course. Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            end_date?: string;
            /** @description The first name of the head teacher */
            faculty_first_name?: string | null;
            /** @description The last name of the head teacher */
            faculty_last_name?: string | null;
            /**
             * Format: int32
             * @description level number
             */
            level_number?: number;
            /** @description The description of an offering type */
            offering_description?: string | null;
            /**
             * Format: int32
             * @description The ID of an offered course
             */
            offering_id?: number | null;
            /**
             * Format: int32
             * @description The ID of an offering type
             */
            offering_type_id?: number | null;
            /**
             * Format: int32
             * @description The room ID for a section
             */
            room_id?: number | null;
            /** @description The room name for the section */
            room_name?: string | null;
            /** @description The room number for the section */
            room_number?: string | null;
            /** @description The school year date range in which the section occurs */
            school_year?: string | null;
            /** @description The identifier used to differentiate between multiple sections that contain a course; the Section Identifier is a user-entered value */
            section_identifier?: string | null;
            /** @description The list of custom fields for the section */
            custom_fields?: components["schemas"]["CustumFieldReadModel"][] | null;
        };
        EnrollmentChangeAudit: {
            /**
             * Format: int32
             * @description The Id of the section
             */
            section_id?: number | null;
            /** @description The course code */
            course_code?: string | null;
            /** @description The name of the section */
            section_name?: string | null;
            /**
             * Format: date-time
             * @description The date/tim the change was made
             */
            modified_date_time?: string | null;
            /**
             * Format: int32
             * @description the Id of the user who modified the enrollment record
             */
            modified_by?: number | null;
            /** @description The action that was taken. Values can ve either Inserted, Updated, or Deleted */
            action?: string | null;
        };
        /** @description Enrollment Changes Model */
        EnrollmentChanges: {
            /**
             * Format: int32
             * @description The ID of the student
             */
            id?: number | null;
            preferred_name?: string | null;
            first_name?: string | null;
            last_name?: string | null;
            changes?: components["schemas"]["EnrollmentChangeAudit"][] | null;
        };
        /** @description A Collection */
        EnrollmentChangesCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["EnrollmentChanges"][] | null;
        };
        /** @description A Collection */
        EnrollmentCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["Enrollment"][] | null;
        };
        /** @description Event Category Model */
        EventCategory: {
            /**
             * Format: int32
             * @description The ID of the event category
             */
            id?: number;
            /** @description The name of the event category */
            description?: string | null;
            /** @description The URL of the ICS feed used to populate the event category */
            calendar_url?: string | null;
            /** @description If set to True, brief description is included in events in the category */
            include_brief_description?: boolean | null;
            /** @description If set to True, long description is included in events in the category */
            include_long_description?: boolean | null;
            /** @description If set to True, the event category is public.  If set to False, it is secure and only users with the allowed list of roles can see the events in the category */
            public?: boolean | null;
            /** @description List of Role IDs that are allowed to see a secure event category */
            roles?: number[] | null;
        };
        /** @description A Collection */
        EventCategoryCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["EventCategory"][] | null;
        };
        /** @description EventCategoryCreateResponseExample */
        EventCategoryCreateResponseExample: {
            /**
             * Format: int32
             * @description Id
             */
            id?: number;
        };
        /** @description Events Category Model */
        EventsCategory: {
            /**
             * Format: int32
             * @description The ID for the category
             */
            category_id?: number;
            /** @description The name for the category */
            category_name?: string | null;
            /**
             * Format: int32
             * @description The ID for the association
             */
            association_id?: number;
            /** @description The name of the association */
            association_name?: string | null;
            /** @description RSS indicator */
            rss_ind?: boolean;
            /** @description RSS feed URL */
            rss_feed?: string | null;
        };
        /** @description A Collection */
        EventsCategoryCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["EventsCategory"][] | null;
        };
        ExcuseDurationTypes: {
            /**
             * Format: int32
             * @description Not Applicable
             */
            readonly na?: number;
            /**
             * Format: int32
             * @description Individual was excused for the full day
             */
            readonly full_day?: number;
            /**
             * Format: int32
             * @description Individual was excused for a half day
             */
            readonly half_day?: number;
        };
        ExcusedTypes: {
            /** @description The category that the excuse associated with */
            category_description?: string | null;
            /**
             * Format: int32
             * @description The ID of category that the excuse associated with
             */
            category_id?: number | null;
            /**
             * Format: int32
             * @description The ID of the excuse type
             */
            excuse_type_id?: number | null;
            /** @description The description of the excuse type */
            excuse_description?: string | null;
            /** @description The Use In Calculations flag */
            use_in_calculations?: boolean | null;
            /**
             * ReasonExcused
             * @description The Excused/Unexecused status
             * @enum {string|null}
             */
            excused?: "Present" | "Excused" | "Unexcused" | null;
            /**
             * ReasonDuration
             * @description The Full Day/Half day status
             * @enum {string|null}
             */
            duration?: "NA" | "FullDay" | "HalfDay" | null;
            /**
             * ReasonAttendanceType
             * @description The attendance type
             * @enum {string|null}
             */
            attendance_type?: "Present" | "Absence" | "Tardy" | "Virtual" | null;
        };
        /** @description A Collection */
        ExcusedTypesCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["ExcusedTypes"][] | null;
        };
        /** @description FacultyEmploymentRead model */
        FacultyEmploymentRead: {
            /**
             * Format: int32
             * @description The users Id
             */
            user_id?: number | null;
            /** @description The users first name */
            first_name?: string | null;
            /** @description The users last name */
            last_name?: string | null;
            /**
             * Format: date-time
             * @description The date user was appointed
             */
            date_appointed?: string | null;
            /**
             * Format: date-time
             * @description Date the user departed (if they have departed)
             */
            date_departed?: string | null;
            /** @description A comma delimited list of schools this user is associated with. */
            school_levels?: string | null;
            /** @description A comma delimited list of employee roles this user is associated with. */
            employee_roles?: string | null;
            /** @description A comma delimited list of departments this user is associated with. */
            departments?: string | null;
            /** @description A comma delimited list of grade levels this user is associated with. */
            grade_levels?: string | null;
            /** @description A comma delimited list of sports this user is associated with. */
            main_sports?: string | null;
        };
        /** @description List Field */
        Field: {
            /** @description The name of the field */
            name?: string | null;
            /** @description The value of the field */
            value?: string | null;
        };
        GameCreate: {
            /**
             * Format: int32
             * @description The Type of the event
             */
            schedule_type?: number | null;
            /** @description Title of the game */
            title?: string | null;
            /**
             * Format: date-time
             * @description Date and time of the game <br />
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            game_date: string;
            /**
             * Format: date-time
             * @description Date and time the game is set to end <br />
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            game_date_end?: string | null;
            /**
             * Format: int32
             * @description Defaults to 0 for a new game
             */
            cancel_type?: number | null;
            /**
             * Format: int32
             * @description Set to 0 for Home <br />
             *     Set to 1 for Away <br />
             *     Set to 2 for Neutral <br />
             *     Set to 3 for TBD
             */
            home_away_type?: number | null;
            /**
             * Format: int32
             * @description ID of the location/venue for the game
             */
            location_id?: number | null;
            /**
             * Format: int32
             * @description For Home games (location_ind=0), the ```location_id``` is an ID for an athletic field or room/building. Both of these are returned by GET Athletics venues.<br />
             *     For Away games (location_ind=1), the ```location_id``` is an ID for an opponent location. These are returned by GET Athletics locations.
             */
            location_ind?: number | null;
            /** @description Time for dismissal using 24-hour format: ```HH:mm``` */
            dismissal_time?: string | null;
            /** @description Time for departure using 24-hour format: ```HH:mm``` */
            departure_time?: string | null;
            /** @description Notes related to departure */
            departure_note?: string | null;
            /** @description Time for pickup using 24-hour format: ```HH:mm``` */
            pickup_time?: string | null;
            /** @description Notes related to pickup */
            pickup_note?: string | null;
            /** @description Set to true to indicate a league event */
            league_ind?: boolean | null;
            /** @description Set to true to indicate a scrimmage event */
            scrimmage_ind?: boolean | null;
            /** @description Set to true to indicate a tournament event */
            tournament_ind?: boolean | null;
            /** @description Set to true to indicate an invitational event */
            invitational_ind?: boolean | null;
            /** @description Set to true to indicate a playoff event */
            playoff_ind?: boolean | null;
            /** @description Additional notes for the event */
            additional_notes?: string | null;
            /**
             * Format: int32
             * @description News ID
             */
            news_id?: number | null;
            /** @description Toggles 'Send Notification' option */
            send_notifications?: boolean | null;
            /** @description Set to true to remove the original scheduled game */
            clear_reschedule?: boolean | null;
            /** @description Set to true to skip validation of this event */
            skip_validation?: boolean | null;
            /** @description List of the transportation to be used for this game */
            transportation?: components["schemas"]["GameTransportation"][] | null;
            /** @description List of Opponent ID's involved in this game */
            opponents?: components["schemas"]["GameOpponent"][] | null;
        };
        /** @description A game opponent */
        GameOpponent: {
            /**
             * Format: int32
             * @description the opponent id
             */
            opponent_id?: number;
        };
        GameTime: {
            /**
             * Format: date-time
             * @description Date of the game or practice. Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            date?: string | null;
            /** @description The time a game or practice starts */
            start?: string | null;
            /** @description The time a game or practice ends */
            end?: string | null;
            /** @description The duration of a game or practice */
            duration?: string | null;
        };
        GameTransportation: {
            /**
             * Format: int32
             * @description ID of the transportation item to be used
             */
            transportation_id?: number;
            /** @description Toggle if transportation should be booked for the full day */
            full_day?: boolean | null;
            /**
             * Format: date-time
             * @description Start date/time for transportation use <br />
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            begin_use?: string | null;
            /**
             * Format: date-time
             * @description End date/time for transportation use <br />
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            end_use?: string | null;
        };
        GameUpdate: {
            /**
             * Format: int32
             * @description ID of the game to be updated
             */
            game_id: number;
            /**
             * Format: int32
             * @description The Type of the event
             */
            schedule_type?: number | null;
            /** @description Title of the game */
            title?: string | null;
            /**
             * Format: date-time
             * @description Date and time of the game <br />
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            game_date?: string | null;
            /**
             * Format: date-time
             * @description Date and time the game is set to end <br />
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            game_date_end?: string | null;
            /**
             * Format: int32
             * @description Set to 0 to Uncancel a game <br />
             *     Set to 1 to Cancel a game <br />
             *     Set to 2 to Reschedule a game <br />
             */
            cancel_type?: number | null;
            /**
             * Format: int32
             * @description Set to 0 for Home <br />
             *     Set to 1 for Away <br />
             *     Set to 2 for Neutral <br />
             *     Set to 3 for TBD
             */
            home_away_type?: number | null;
            /**
             * Format: int32
             * @description ID of the location/venue of the game
             */
            location_id?: number | null;
            /**
             * Format: int32
             * @description Set to 0 when using a venue for ```location_id```<br />
             *     Set to 1 when using a location for ```location_id```
             */
            location_ind?: number | null;
            /** @description Time for dismissal using 24-hour format: ```HH:mm``` */
            dismissal_time?: string | null;
            /** @description Time for departure using 24-hour format: ```HH:mm``` */
            departure_time?: string | null;
            /** @description Notes related to departure */
            departure_note?: string | null;
            /** @description Time for pickup using 24-hour format: ```HH:mm``` */
            pickup_time?: string | null;
            /** @description Notes related to pickup */
            pickup_note?: string | null;
            /** @description Set to true to indicate a league event */
            league_ind?: boolean | null;
            /** @description Set to true to indicate a scrimmage event */
            scrimmage_ind?: boolean | null;
            /** @description Set to true to indicate a tournament event */
            tournament_ind?: boolean | null;
            /** @description Set to true to indicate an invitational event */
            invitational_ind?: boolean | null;
            /** @description Set to true to indicate a playoff event */
            playoff_ind?: boolean | null;
            /** @description Additional notes for the event */
            additional_notes?: string | null;
            /**
             * Format: int32
             * @description News ID
             */
            news_id?: number | null;
            /** @description Toggles 'Send Notification' option */
            send_notifications?: boolean | null;
            /** @description Set to true to remove the original scheduled game */
            clear_reschedule?: boolean | null;
            /** @description Set to true to skip validation of this event */
            skip_validation?: boolean | null;
            /** @description List of the transportation to be used for this game */
            transportation?: components["schemas"]["GameTransportation"][] | null;
            /** @description List of Opponent ID's involved in this game */
            opponents?: components["schemas"]["GameOpponent"][] | null;
        };
        GenderType: {
            /**
             * Format: int32
             * @description The ID of the gender type
             */
            id?: number | null;
            /**
             * Format: int32
             * @description The ID of the gender type specific to the school
             */
            gender_type_id?: number | null;
            /** @description The gender code */
            code?: string | null;
            /** @description The gender description */
            description?: string | null;
            /** @description True if the gender is active */
            active?: boolean | null;
            /**
             * Format: int32
             * @description The sort order of the gender type
             */
            sort_order?: number | null;
            /** @description The pronouns associated with the gender type */
            pronouns?: string | null;
        };
        /** @description A Collection */
        GenderTypeCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["GenderType"][] | null;
        };
        /** @description GradeLevel Model */
        GradeLevel: {
            /**
             * Format: int32
             * @description The ID of a grade level
             */
            id?: number | null;
            /** @description Returns true if the grade level is active */
            active?: boolean | null;
            /** @description The description of the grade level */
            description?: string | null;
            /** @description The abbreviation of the grade level */
            abbreviation?: string | null;
            /** @description The label used to identify a grade level */
            name?: string | null;
            /**
             * Format: int32
             * @description Returns integer value denoting what promotion a student receives when completing this grade, 1 = Promoted to next grade level, 2 = Graduate, 3 = No action
             */
            promote_to_code?: number | null;
        };
        /** @description A Collection */
        GradeLevelCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["GradeLevel"][] | null;
        };
        /** @description Highlight model for athletic game highlights */
        Highlight: {
            /**
             * Format: int32
             * @description Highlight ID
             */
            id?: number;
            /**
             * Format: int32
             * @description Athletic Schedule ID
             */
            athletic_schedule_id?: number | null;
            /** @description Author */
            author?: string | null;
            /** @description Headline */
            headline?: string | null;
            /** @description Brief Description */
            brief_description?: string | null;
            /** @description Long Description */
            long_description?: string | null;
            /**
             * Format: date-time
             * @description Publish Date
             */
            publish_date?: string | null;
            /**
             * Format: date-time
             * @description Expire Date
             */
            expire_date?: string | null;
            /** @description List of Photos */
            photos?: components["schemas"]["HighlightPhoto"][] | null;
        };
        /** @description Photo model */
        HighlightPhoto: {
            /**
             * Format: int32
             * @description Photo ID
             */
            id?: number | null;
            /** @description Photo Caption */
            caption?: string | null;
            /** @description Large Filename */
            large_filename?: string | null;
            /** @description Large Filename URL */
            large_filename_url?: string | null;
            /** @description Thumb Filename */
            thumb_filename?: string | null;
            /** @description Thumb Filename URL */
            thumb_filename_url?: string | null;
        };
        /** @description HomeLanguageAdd Model */
        HomeLanguageAdd: {
            /** @description The ID or description of the language to be added to the user */
            language?: string | null;
        };
        HomeLanguageRead: {
            /**
             * Format: int32
             * @description The Id of the language
             */
            id?: number;
            /** @description The description fo the language */
            description?: string | null;
        };
        IdDescriptorField: {
            /**
             * Format: int32
             * @description ID of the field
             */
            id?: number;
            /** @description Description of the field */
            description?: string | null;
        };
        /** @description Leader Model */
        Leader: {
            /**
             * Format: int32
             * @description The user ID for the leader
             */
            id?: number | null;
            /** @description The head leader indicator */
            head?: boolean | null;
            /** @description The firstname and lastname of the leader */
            name?: string | null;
        };
        /** @description An object with school level information */
        Level: {
            /**
             * Format: int32
             * @description The ID of a school level
             */
            id?: number | null;
            /** @description The abbreviation associated with a school level */
            abbreviation?: string | null;
            /** @description The label used to identify a school level */
            name?: string | null;
        };
        /** @description A Collection */
        LevelCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["Level"][] | null;
        };
        /** @description List Model */
        List: {
            /** @description The Rows of the list */
            rows?: components["schemas"]["Row"][] | null;
        };
        /** @description ListRead Class */
        ListRead: {
            /**
             * Format: int32
             * @description The id of the list
             */
            id?: number;
            /** @description The name of the list */
            name?: string | null;
            /** @description The list type, either Basic or Advanced */
            type?: string | null;
            /** @description The description of the list */
            description?: string | null;
            /** @description The category of the list */
            category?: string | null;
            /** @description The name of the user who created the list */
            created_by?: string | null;
            /**
             * Format: date-time
             * @description The date the list was created on
             */
            created?: string | null;
            /**
             * Format: date-time
             * @description The date the list was last modified
             */
            last_modified?: string | null;
        };
        /** @description A Collection */
        ListReadCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["ListRead"][] | null;
        };
        /** @description List Collection */
        ListResult: {
            /**
             * Format: int32
             * @description The number of records in the page
             */
            count?: number;
            /**
             * Format: int32
             * @description The number of the page for the current result set
             */
            page?: number;
            results?: components["schemas"]["List"];
        };
        Location: {
            /**
             * Format: int32
             * @description ID of the location
             */
            id?: number | null;
            /** @description Name of the location */
            name?: string | null;
            /** @description Address Line 1 */
            address_line1?: string | null;
            /** @description Address Line 2 */
            address_line2?: string | null;
            /** @description Address Line 3 */
            address_line3?: string | null;
            /** @description City */
            city?: string | null;
            /** @description State */
            state?: string | null;
            /** @description State abbreviation */
            state_short?: string | null;
            /** @description Country */
            country?: string | null;
            /** @description Zip */
            zip?: string | null;
            /** @description Province */
            province?: string | null;
            /** @description URL to the directions/map */
            map_url?: string | null;
            /** @description Directions to the location */
            directions?: string | null;
            /**
             * Format: int32
             * @description Travel time (minutes) to the location
             */
            travel_time?: number | null;
            /**
             * Format: int32
             * @description Opponent ID associated with this location
             */
            opponent_id?: number | null;
        };
        /** @description A Collection */
        LocationCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["Location"][] | null;
        };
        LocationCreateModel: {
            /**
             * Format: int32
             * @description ID of the opponent
             */
            opponent_id?: number | null;
            /** @description Name of the location */
            name: string;
            /** @description Directions to the location */
            directions?: string | null;
            /**
             * Format: int32
             * @description Travel time (minutes) to the location
             */
            travel_time?: number | null;
            /** @description Location Address Line 1 */
            address_line1?: string | null;
            /** @description Location Address Line 2 */
            address_line2?: string | null;
            /** @description Location Address Line 3 */
            address_line3?: string | null;
            /** @description Location City */
            city?: string | null;
            /** @description Location State */
            state?: string | null;
            /** @description Location State abbreviation */
            state_short?: string | null;
            /** @description Location Country */
            country?: string | null;
            /** @description Location Zip */
            zip?: string | null;
            /** @description Location Province */
            province?: string | null;
            /** @description URL to the directions/map */
            map_url?: string | null;
        };
        Major: {
            cip_prefix?: string | null;
            cip_suffix?: string | null;
            /**
             * Format: int32
             * @description The Id of the Degree, Major, Minor, or Concentration
             */
            id?: number;
            /** @description The name of the Degree, Major, Minor, or Concentration */
            name?: string | null;
            /** @description The abbreviation of the Degree, Major, Minor, or Concentration */
            abbreviation?: string | null;
        };
        MasterScheduleBlock: {
            /** Format: int32 */
            block_id?: number;
            block?: string | null;
            /** Format: date-time */
            start_time?: string | null;
            /** Format: date-time */
            end_time?: string | null;
            /** Format: int32 */
            offering_type?: number | null;
            is_canceled?: boolean;
        };
        MasterScheduleDay: {
            /** Format: date-time */
            calendar_day?: string | null;
            schedule_sets?: components["schemas"]["MasterScheduleSet"][] | null;
        };
        /** @description A Collection */
        MasterScheduleDayCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["MasterScheduleDay"][] | null;
        };
        MasterScheduleSet: {
            /** Format: int32 */
            schedule_set_id?: number | null;
            holiday_label?: string | null;
            day_label?: string | null;
            blocks?: components["schemas"]["MasterScheduleBlock"][] | null;
        };
        /** @description Media Model */
        MediaItem: {
            type?: string | null;
            title?: string | null;
            caption?: string | null;
            url?: string | null;
        };
        MedicalSecurityRole: {
            /**
             * Format: int32
             * @description The ID of role
             */
            role_id?: number | null;
            /** @description Set to true to allow access for this type of user */
            has_access?: boolean | null;
        };
        MedicationDosage: {
            /**
             * Format: int32
             * @description The frequency per day of the medication
             */
            times_a_day?: number;
            /** @description The frequency of the medication Daily/Specific days/ Custom */
            frequency?: string | null;
            days?: components["schemas"]["Days"];
        };
        /** @description Determines the frequency the medication is dispensed. */
        MedicationDosageCreate: {
            /**
             * Format: int32
             * @description The times per day to dispense the medication
             */
            times_a_day?: number;
            /** @description The weekly frequency to dispense the medication. Allowed values: every day, as needed, specific days. */
            frequency: string;
            days?: components["schemas"]["Days"];
        };
        /** @description Meeting */
        Meeting: {
            /**
             * Format: int32
             * @description The id of the section
             */
            section_id?: number;
            /** @description The section identifier */
            section_identifier?: string | null;
            /** @description The title of the course */
            course_title?: string | null;
            /** @description The auto generated name of the group */
            group_name?: string | null;
            /**
             * Format: int32
             * @description The id of the block
             */
            block_id?: number;
            /** @description The name of the block */
            block_name?: string | null;
            /**
             * Format: int32
             * @description The id of the room where the meeting takes place
             */
            room_id?: number;
            /** @description The name of the room where the meeting takes place */
            room_name?: string | null;
            /**
             * Format: int32
             * @description The room number where the meeting takes place
             */
            room_number?: number;
            /**
             * Format: int32
             * @description The room capacity
             */
            room_capacity?: number;
            /** @description The room code */
            room_code?: string | null;
            /**
             * Format: int32
             * @description The user id of the faculty member
             */
            faculty_user_id?: number;
            /** @description The combined name of the head faculty member */
            faculty_name?: string | null;
            /** @description The faculty member's first name */
            faculty_firstname?: string | null;
            /** @description The faculty member's last name */
            faculty_lastname?: string | null;
            /**
             * Format: date-time
             * @description The start time of the meeting
             */
            start_time?: string;
            /**
             * Format: date-time
             * @description The end time of the meeting
             */
            end_time?: string;
            /**
             * Format: date-time
             * @description The date the meeting takes place
             */
            meeting_date?: string;
            /** @description Returns true if attendance is required to be taken for this meeting */
            attendance_required?: boolean;
            /** @description Return true if attendance was taken */
            attendance_taken?: boolean;
            /**
             * Format: int32
             * @description The number of absent students for this meeting
             */
            num_absent?: number;
            /**
             * Format: int32
             * @description the id of the attendance record
             */
            attendance_id?: number;
            /**
             * Format: int32
             * @description The level number the meeting belongs to
             */
            level_number?: number;
            offering_type?: components["schemas"]["OfferingType"];
            /**
             * Format: date-time
             * @description The date the section was created
             */
            created_date?: string;
            /**
             * Format: date-time
             * @description The date the section was last modified
             */
            modified_date?: string;
            /**
             * Format: int32
             * @description The identifier of the user that last modified the section
             */
            last_modified_user_id?: number;
            /** @description The list of teachers for the meeting */
            teachers?: components["schemas"]["Teacher"][] | null;
        };
        /** @description A Collection */
        MeetingCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["Meeting"][] | null;
        };
        Minor: {
            /**
             * Format: int32
             * @description The Id of the Degree, Major, Minor, or Concentration
             */
            id?: number;
            /** @description The name of the Degree, Major, Minor, or Concentration */
            name?: string | null;
            /** @description The abbreviation of the Degree, Major, Minor, or Concentration */
            abbreviation?: string | null;
        };
        /** @description NewsCategory Model */
        NewsCategory: {
            /** Format: int32 */
            category_id?: number | null;
            category_name?: string | null;
            /** Format: int32 */
            association_id?: number | null;
            association_name?: string | null;
            rss_ind?: boolean | null;
            rss_feed?: string | null;
        };
        /** @description A Collection */
        NewsCategoryCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["NewsCategory"][] | null;
        };
        /** @description NewsItem Model */
        NewsItem: {
            /**
             * Format: int32
             * @description The ID of the news item
             */
            id?: number | null;
            /** @description The news item title */
            headline?: string | null;
            /** @description The author os the news item */
            author?: string | null;
            /** @description The short description field for the new item */
            short_description?: string | null;
            /** @description The long description field for the new item */
            long_description?: string | null;
            /** @description Returns true if the news item is featured */
            featured?: boolean | null;
            media_item?: components["schemas"]["MediaItem"][] | null;
            /**
             * Format: date-time
             * @description The date the news item was created.
             */
            date_created?: string | null;
            /** @description The list of categories the news item is published to */
            categories?: components["schemas"]["Category"][] | null;
        };
        /** @description A Collection */
        NewsItemCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["NewsItem"][] | null;
        };
        OccupationCreate: {
            /** @description Name of the employing business */
            business_name?: string | null;
            /** @description Employed individuals job title */
            job_title?: string | null;
            /** @description Url of the employing business */
            business_url?: string | null;
            /** @description Industry of the employing business */
            industry?: string | null;
            /** @description Maps to the employee's 'Organization' field */
            organization?: string | null;
            /** @description Maps to the employee's 'Profession' field */
            occupation?: string | null;
            /** @description Indicates if employer matches employee donations */
            matching_gift?: boolean | null;
            /**
             * Format: date-time
             * @description Employees start date at this business
             */
            begin_date?: string | null;
            /**
             * Format: date-time
             * @description Employees end date at this business
             */
            end_date?: string | null;
            /** @description Maps to the employee's 'Specialty' field */
            specialty?: string | null;
            /** @description Parent company of employing business */
            parent_company?: string | null;
            /** @description Description of the work done by the employee */
            job_function?: string | null;
            /**
             * Format: int32
             * @description Number of years employee has been at this business
             */
            years_employed?: number | null;
            /** @description Indicates if this is the individuals current employer */
            current?: boolean | null;
        };
        /** @description OccupationRead Model */
        OccupationRead: {
            /**
             * Format: int32
             * @description The ID of the occupation
             */
            id?: number | null;
            /**
             * Format: date-time
             * @description The begin date of the occupation; Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            begin_date?: string | null;
            /** @description The business name */
            business_name?: string | null;
            /** @description Returns True if the user is currently employed at the occupation */
            current?: boolean;
            /**
             * Format: date-time
             * @description The end date of the occupation; Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            end_date?: string | null;
            /** @description The industry */
            industry?: string | null;
            /** @description The function of the job* */
            job_function?: string | null;
            /** @description Returns True if the organization matches gifts */
            matching_gift?: boolean;
            /** @description The organization */
            organization?: string | null;
            /** @description The businesses' parent company */
            parent_company?: string | null;
            /** @description The name of the profession */
            profession?: string | null;
            /** @description The specialization */
            specialty?: string | null;
            /** @description The job title */
            title?: string | null;
            /** @description The URL of the business */
            url?: string | null;
            /**
             * Format: int32
             * @description The ID of the user that the occupation belongs to
             */
            user_id?: number | null;
            /**
             * Format: int32
             * @description The number of years employed
             */
            years_employed?: number | null;
        };
        /** @description A Collection */
        OccupationReadCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["OccupationRead"][] | null;
        };
        OccupationUpdate: {
            /** @description Name of the employing business */
            business_name?: string | null;
            /** @description Employed individuals job title */
            job_title?: string | null;
            /** @description Url of the employing business */
            business_url?: string | null;
            /** @description Industry of the employing business */
            industry?: string | null;
            /** @description Maps to the employee's 'Organization' field */
            organization?: string | null;
            /** @description Maps to the employee's 'Profession' field */
            occupation?: string | null;
            /** @description Indicates if employer matches employee donations. Allowed values: Yes, No, No Answer */
            matching_gift?: string | null;
            /** @description Employees start date at this business */
            begin_date?: string | null;
            /** @description Employees end date at this business */
            end_date?: string | null;
            /** @description Maps to the employee's 'Specialty' field */
            specialty?: string | null;
            /** @description Parent company of employing business */
            parent_company?: string | null;
            /** @description Description of the work done by the employee */
            job_function?: string | null;
            /** @description Number of years employee has been at this business */
            years_employed?: string | null;
            /** @description Indicates if this is the individuals current employer */
            currently_employed?: boolean | null;
        };
        /** @description An object with custom field information */
        OfferingAdminCustomFieldCreate: {
            /**
             * Format: int32
             * @description The ID of the custom field to update. This value is returned from <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1CustomfieldsGet" target="_blank">Core custom fields</a>.
             */
            field_id?: number;
            /**
             * Format: int32
             * @description The ID of the data type of the custom field. This value is returned from <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1CustomfieldsGet" target="_blank">Core custom fields</a>.
             */
            data_type_id: number;
            /**
             * Format: int32
             * @description If the field format is Number, use this property for the value of the custom field. Values must be a whole number (positive or negative).<br />
             *     If the field format is Dropdown or Checkbox List, use this property for the value of the custom field. The value is the table value ID returned from <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1CustomfieldsGet" target="_blank">Core custom fields</a>.
             */
            int_value?: number | null;
            /** @description If the field format is Text input or Text paragraph, use this property for the value of the custom field. */
            text_value?: string | null;
            /**
             * Format: double
             * @description If the field format is Currency, use this property for the value of the custom field. Values must be between 0.00 and 99,999,999.99.
             */
            decimal_value?: number | null;
            /**
             * Format: date-time
             * @description If field format is Date, use this property for the value of the custom field. Values must be formatted YYYY/MM/DD.
             */
            date_value?: string | null;
            /** @description If field format is Yes/No or Checkbox, use this property for the value of the custom field. Values must be 'true" or 'false'. */
            bit_value?: boolean | null;
        };
        /** @description An object with custom field information */
        OfferingAdminCustomFieldUpdate: {
            /**
             * Format: int32
             * @description The id of that instance of the custom field for the specified course.
             */
            id?: number;
            /**
             * Format: int32
             * @description The ID of the custom field to update. This value is returned from <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1CustomfieldsGet" target="_blank">Core custom fields</a>.
             */
            field_id?: number;
            /**
             * Format: int32
             * @description The ID of the data type of the custom field. This value is returned from <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1CustomfieldsGet" target="_blank">Core custom fields</a>.
             */
            data_type_id: number;
            /**
             * Format: int32
             * @description If the field format is Number, use this property for the value of the custom field. Values must be a whole number (positive or negative).<br />
             *     If the field format is Dropdown or Checkbox List, use this property for the value of the custom field. The value is the table value ID returned from <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1CustomfieldsGet" target="_blank">Core custom fields</a>.
             */
            int_value?: number | null;
            /** @description If the field format is Text input or Text paragraph, use this property for the value of the custom field. */
            text_value?: string | null;
            /**
             * Format: double
             * @description If the field format is Currency, use this property for the value of the custom field. Values must be between 0.00 and 99,999,999.99.
             */
            decimal_value?: number | null;
            /**
             * Format: date-time
             * @description If field format is Date, use this property for the value of the custom field. Values must be formatted YYYY/MM/DD.
             */
            date_value?: string | null;
            /** @description If field format is Yes/No or Checkbox, use this property for the value of the custom field. Values must be 'true" or 'false'. */
            bit_value?: boolean | null;
        };
        /** @description An object with offering information */
        OfferingModel: {
            /**
             * Format: int32
             * @description The Id of the Offering
             */
            id?: number;
            /** @description The name of the offering */
            name?: string | null;
            type?: components["schemas"]["OfferingType"];
            /** @description The course code for the offering */
            course_code?: string | null;
            /** @description The description of the offering */
            description?: string | null;
            /**
             * Format: int32
             * @description The length of the offering in terms
             */
            length?: number | null;
            /**
             * Format: float
             * @description The credits for the offering
             */
            credits?: number | null;
            school_level?: components["schemas"]["Level"];
            /** @description The School year of the offering */
            school_year?: string | null;
        };
        /** @description An object with offering type information */
        OfferingType: {
            /**
             * Format: int32
             * @description The ID of an offering type
             */
            id?: number;
            /** @description The description of an offering type */
            description?: string | null;
        };
        /** @description A Collection */
        OfferingTypeCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["OfferingType"][] | null;
        };
        Opponent: {
            /**
             * Format: int32
             * @description Opponents team ID
             */
            id?: number | null;
            /** @description Opponents team name */
            name?: string | null;
            /** @description The final score of the game. */
            score?: string | null;
            /** @description The outcome of the game. */
            win_loss?: string | null;
            /** @description The opponents part of the score */
            opponent_score?: string | null;
            /** @description The teams part of the score */
            team_score?: string | null;
        };
        OpponentFlyweight: {
            /**
             * Format: int32
             * @description ID ofthe opponent
             */
            id?: number | null;
            /** @description Name of the opponent */
            name?: string | null;
            /** @description indicates of the opponent is currently being used */
            in_use?: boolean | null;
        };
        /** @description A Collection */
        OpponentFlyweightCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["OpponentFlyweight"][] | null;
        };
        OpponentUpdateModel: {
            /** @description Opponents name. Required. */
            name: string;
            /** @description Opponents phone1 */
            phone1?: string | null;
            /** @description Athletic Directors first name */
            ad_first_name?: string | null;
            /** @description Athletic Directors last name */
            ad_last_name?: string | null;
            /** @description Athletic Directors email */
            ad_email?: string | null;
            /** @description Opponent fax */
            fax?: string | null;
            /** @description Opponent phone2 */
            phone2?: string | null;
            /** @description Asst. Athletic Directors first name */
            asst_ad_first_name?: string | null;
            /** @description Asst. Athletic Directors last name */
            asst_ad_last_name?: string | null;
            /** @description Asst. Athletic Directors email */
            asst_ad_email?: string | null;
            /**
             * Format: int32
             * @description Opponents Address Id
             */
            address_id?: number | null;
            /** @description Opponents Address Line 1 */
            address_line1?: string | null;
            /** @description Opponents Address Line 2 */
            address_line2?: string | null;
            /** @description Opponents Address Line 3 */
            address_line3?: string | null;
            /** @description Opponents City */
            city?: string | null;
            /** @description Opponents State */
            state_short?: string | null;
            /** @description Opponents Country */
            country?: string | null;
            /** @description Opponents Province */
            province?: string | null;
            /** @description Opponents Zip */
            zip?: string | null;
            /**
             * Format: int32
             * @description Opponents Conference Id
             */
            conference_id?: number | null;
        };
        /** @description PhoneAdd Model */
        PhoneAdd: {
            /** @description The phone number */
            number?: string | null;
            /**
             * Format: int32
             * @description The type ID of a phone number; the type ID corresponds with the type of phone number (ex. Cell, Work, Home)
             */
            type_id?: number | null;
        };
        /** @description PhoneRead Model */
        PhoneRead: {
            /**
             * Format: int32
             * @description The ID of the phone number
             */
            id?: number;
            /** @description The 'Type' of the phone number */
            phone_type?: string | null;
            /**
             * Format: int32
             * @description The Index ID of the phone number
             */
            index_id?: number | null;
            /** @description Returns each instance of a phone type for each relationship to the user */
            links?: components["schemas"]["PhoneTypeLink"][] | null;
            /** @description The phone number */
            number?: string | null;
            /**
             * Format: int32
             * @description The type ID of a phone number; the type ID corresponds with the type of phone number (ex. Cell, Work, Home)
             */
            type_id?: number | null;
            /**
             * Format: int32
             * @description The ID of the user the phone number belongs to
             */
            user_id?: number | null;
        };
        /** @description A Collection */
        PhoneReadCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["PhoneRead"][] | null;
        };
        PhoneShare: {
            /**
             * Format: int32
             * @description The ID of the phone number to be shared with the user
             */
            id?: number;
            /**
             * Format: int32
             * @description The phone type ID that the phone number should be for the user
             */
            phone_type_id?: number;
        };
        /** @description PhoneType Model */
        PhoneType: {
            /**
             * Format: int32
             * @description The type ID of a phone number; the type ID corresponds with the type of phone number (ex. Cell, Work, Home)
             */
            id?: number;
            /** @description The name of the phone type */
            type?: string | null;
        };
        /** @description A Collection */
        PhoneTypeCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["PhoneType"][] | null;
        };
        /** @description PhoneTypeLink Model */
        PhoneTypeLink: {
            /**
             * Format: int32
             * @description The type ID of a phone number; the type ID corresponds with the type of phone number (ex. Cell, Work, Home)
             */
            id?: number | null;
            /** @description Returns true if changes to a phone number are made to all users with a shared relationship (Read Only) */
            shared?: boolean;
            /** @description The relationship of the shared user */
            shared_relationship?: string | null;
            /** @description The name of the shared user */
            shared_user?: string | null;
            /** @description The name of the type */
            type_id?: string | null;
            /**
             * Format: int32
             * @description The ID of the user
             */
            user_id?: number | null;
        };
        /** @description PhoneUpdate Model */
        PhoneUpdate: {
            /** @description The phone number */
            number?: string | null;
            /**
             * Format: int32
             * @description The type ID of a phone number; the type ID corresponds with the type of phone number (ex. Cell, Work, Home)
             */
            type_id?: number | null;
        };
        /** @description Player Photos Url (roster photo or profile photo) */
        PhotoUrls: {
            /** @description URL to players Large photo */
            large_filename_url?: string | null;
            /** @description URL to player Thumbnail photo */
            thumb_filename_url?: string | null;
        };
        /** @description Player */
        Player: {
            /**
             * Format: int32
             * @description ID of the player
             */
            id?: number;
            /** @description A description of a players awards and achievments */
            accolades?: string | null;
            /** @description Players first name */
            first_name?: string | null;
            /** @description Height */
            height?: string | null;
            /** @description Hometown */
            hometown?: string | null;
            /**
             * Format: int32
             * @description Jersey number
             */
            jersey?: number | null;
            /** @description Players last name */
            last_name?: string | null;
            /** @description Player's position */
            position?: string | null;
            /** @description Returning letter */
            returning_letter?: boolean;
            /** @description Returns true if the player is a team captian */
            team_captain?: boolean;
            /** @description Weight */
            weight?: string | null;
            /** @description Preferred Name */
            preferred_name?: string | null;
            photos?: components["schemas"]["PhotoUrls"];
            /** @description Returns true if the player name is published */
            publish_name?: boolean;
            /** @description Returns true if the player height is published */
            publish_height?: boolean;
            /** @description Returns true if the player weight is published */
            publish_weight?: boolean;
            /** @description Returns true if the player photo is published */
            publish_photo?: boolean;
        };
        /** @description A Collection */
        PlayerCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["Player"][] | null;
        };
        PostResponse: {
            /** @description The return value for the POST */
            value?: boolean;
        };
        PracticeCreate: {
            /** @description Toggle to true to send a notification of this event */
            send_notification?: boolean | null;
            /** @description Title of the practice */
            title?: string | null;
            /**
             * Format: date-time
             * @description Date and time for practice to start <br />
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            practice_start_date: string;
            /**
             * Format: date-time
             * @description Date and time for practice to end <br />
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            practice_end_date?: string | null;
            /**
             * Format: int32
             * @description ID of the location of the practice
             */
            location_id?: number | null;
            /**
             * Format: int32
             * @description ID of the venue of the practice
             */
            room_id?: number | null;
            /**
             * Format: int32
             * @description ID of the transportation method for the practice
             */
            transportation_id?: number | null;
            /**
             * Format: date-time
             * @description Time that participants should be dismissed <br />
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            dismissal_time?: string | null;
            /**
             * Format: date-time
             * @description Time that team will depart for practice <br />
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            departure_time?: string | null;
            /**
             * Format: date-time
             * @description Time that participants should be picked up <br />
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            pickup_time?: string | null;
            /** @description Free form notes about this practice */
            practice_note?: string | null;
            /** @description Set to true to skip validation of this event */
            skip_validation?: boolean | null;
        };
        PracticeUpdate: {
            /**
             * Format: int32
             * @description The ID of the practice
             */
            id?: number;
            /** @description Toggle to true to send a notification of this event */
            send_notification?: boolean | null;
            /** @description The title of the practice */
            title?: string | null;
            /**
             * Format: date-time
             * @description Date and time for practice to start <br />
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            practice_start_date: string;
            /**
             * Format: date-time
             * @description Date and time for practice to end <br />
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            practice_end_date?: string | null;
            /**
             * Format: int32
             * @description ID of the location of the practice
             */
            location_id?: number | null;
            /**
             * Format: int32
             * @description ID of the venue of the practice
             */
            room_id?: number | null;
            /**
             * Format: int32
             * @description ID of the transportation method for the practice
             */
            transportation_id?: number | null;
            /**
             * Format: date-time
             * @description Time that participants should be dismissed <br />
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            dismissal_time?: string | null;
            /**
             * Format: date-time
             * @description Time that team will depart for practice <br />
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            departure_time?: string | null;
            /**
             * Format: date-time
             * @description Time that participants should be picked up <br />
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            pickup_time?: string | null;
            /** @description Free form notes about this practice */
            practice_note?: string | null;
            /** @description Set to true to skip validation of this event */
            skip_validation?: boolean | null;
        };
        /** @description An object with profile photo and thumbnail */
        ProfilePictureUrls: {
            /** @description URL to users Large profile picture */
            large_filename_url?: string | null;
            /** @description URL to users Thumbnail profile picture */
            thumb_filename_url?: string | null;
        };
        /** @description RaceRead Model */
        RaceRead: {
            /**
             * Format: int32
             * @description The ID of a race type
             */
            race_type_id?: number;
            /** @description The description of a race type */
            description?: string | null;
            /**
             * Format: int32
             * @description The ID of user and race type association
             */
            user_race_id?: number;
            /**
             * Format: int32
             * @description The ID of the user who is associated to race type
             */
            user_id?: number;
        };
        RelationshipCreate: {
            /**
             * RelationshipType
             * @description The nature of the relationship; modeled where left_user 'is a' relationship to this individual. Required.
             * @enum {string}
             */
            relationship_type: "NOT_SET" | "StepParent_StepChild" | "GrGrandParent_GrGrandChild" | "Guardian_Ward" | "AuntUncle_NieceNephew" | "Grandparent_Grandchild" | "Parent_Child" | "Custodian_Student" | "Consultant_Student" | "Caretaker_Charge" | "SpousePartner_SpousePartner" | "StepSibling_StepSibling" | "ExHusband_ExWife" | "Associate_Associate" | "HalfSibling_HalfSibling" | "Husband_Wife" | "Spouse_Spouse" | "Sibling_Sibling" | "Cousin_Cousin" | "Friend_Friend";
            /** @description Toggles 'Give Parental Access' option. */
            give_parental_access?: boolean | null;
            /** @description Toggles 'List as a Parent' option. */
            list_as_parent?: boolean | null;
            /** @description Toggles 'Responsible for Signing Contract' option. */
            tuition_responsible_signer?: boolean | null;
            /**
             * Format: int32
             * @description ID of the other individual in the relationship with this person
             */
            left_user: number;
            /** @description Set to true if the child user resides with the parent user. */
            resides_with?: boolean;
            /** @description Set to true to indicate the relationship user (specified by left_user) should not be contacted. */
            do_not_contact?: boolean;
            /** @description Set to true if the relationship user (specified by left_user) is the primary contact. */
            primary?: boolean;
            /** @description Comment for the relationship */
            comments?: string | null;
        };
        /** @description RelationshipRead Model */
        RelationshipRead: {
            /** @description ID of the relationship */
            id?: string | null;
            /** @description A comment describing the relationship */
            comment?: string | null;
            /** @description Returns True if the user can be contacted. Returns False if the user is marked as 'No Contact' in the UI. */
            contact?: boolean;
            /** @description The first name of the user(s) associated with the queried user */
            first_name?: string | null;
            /** @description The last name of the user(s) associated with the queried user */
            last_name?: string | null;
            /** @description Returns True if List as Parent is enabled in the UI for a user. If enabled, the user can be listed in directories as the student's parent */
            list_as_parent?: boolean;
            /** @description Returns True if Parental Access is enabled in the UI for a relationship type */
            parental_access?: boolean;
            /** @description Returns True if the user in a relationship is the primary user */
            primary?: boolean;
            /**
             * Format: int32
             * @description The enum value that describes the relationship (ex. Parent_Child = 6)
             */
            relationship?: number | null;
            /** @description Returns True if Resides With is enabled in the UI. If enabled, then the user in a relationship resides with the queried user */
            resides_with?: boolean;
            /** @description Returns True if a parent's contact information is displayable in the directory */
            show_parent?: boolean;
            /** @description Returns True if Responsible Signer is enabled in the UI for a user. If enabled, it indicates the user signs enrollment contracts in onBoard */
            tuition_responsible_signer?: boolean;
            /**
             * Format: int32
             * @description The ID of the relationship type. The ID corresponds with static options in the UI
             */
            type_id?: number | null;
            /**
             * Format: int32
             * @description The ID of the user associated with user_two_id
             */
            user_one_id?: number | null;
            /** @description The role of the user being queried */
            user_one_role?: string | null;
            /**
             * Format: int32
             * @description The ID of the user associated with user_one_id
             */
            user_two_id?: number | null;
        };
        /** @description A Collection */
        RelationshipReadCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["RelationshipRead"][] | null;
        };
        RelationshipUpdate: {
            /** @description Set to true if the parent user should have parental access for the child user. Defaults to false. Used only for Parent/Child relationship. */
            give_parental_access?: boolean | null;
            /** @description Set to true if the parent user should be listed as a parent of the child user. Defaults to false. Used only for Parent/Child relationship. */
            list_as_parent?: boolean | null;
            /** @description Set to true if the parent user is a responsible signer for the child user. Defaults to false. Used only for Parent/Child relationship. */
            tuition_responsible_signer?: boolean | null;
            /** @description Set to true if the child user resides with the parent user. Defaults to false. Used only for Parent/Child relationship. */
            resides_with?: boolean | null;
            /** @description Set to true to indicate the relationship user (specified by left_user) should not be contacted. Defaults to false. */
            do_not_contact?: boolean | null;
            /** @description Set to true if the relationship user (specified by left_user) is the primary contact. Defaults to false. When set to true, this will set primary for the current primary relationship to false. */
            primary?: boolean;
            /** @description The comment for the relationship. */
            comments?: string | null;
        };
        Resident: {
            /** Format: int32 */
            building_id?: number | null;
            is_admin?: boolean | null;
            is_head?: boolean | null;
            /** Format: int32 */
            owner_type?: number | null;
            /** Format: date-time */
            resident_from_date?: string | null;
            /** Format: int32 */
            room_id?: number | null;
            /** Format: int32 */
            section_id?: number | null;
            /** Format: int32 */
            user_id?: number | null;
            first_name?: string | null;
            last_name?: string | null;
            nick_name?: string | null;
            prefix?: string | null;
            suffix?: string | null;
            middle_name?: string | null;
            display?: string | null;
            /** Format: date-time */
            date_of_birth?: string | null;
            student_info?: components["schemas"]["DormStudentInfo"][] | null;
        };
        Resource: {
            /** Format: int32 */
            id?: number;
            title?: string | null;
            description?: string | null;
            photo?: string | null;
            type?: string | null;
            url?: string | null;
            category?: string | null;
        };
        /** @description A Collection */
        ResourceCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["Resource"][] | null;
        };
        /** @description Result Create Model */
        ResultCreate: {
            /**
             * Format: int32
             * @description ID for the scheduled event (game)
             */
            schedule_id: number;
            /**
             * Format: int32
             * @description Set to 0 for Versus scoring results <br />
             *     Set to 1 for Place/Points scoring results
             */
            schedule_type?: number;
            /** @description Toggle to true to send a notification of this event change */
            send_notification?: boolean;
            /** @description List of opponents to record results for */
            opponents?: components["schemas"]["ResultCreateOpponent"][] | null;
        };
        ResultCreateOpponent: {
            /**
             * Format: int32
             * @description For ```schedule_type=0```: the id of opponent. <br />
             *     For ```schedule_type=1```: Use -1 for the home team�s entry.Use the id of the opponent for the opponent entries.
             */
            opponent_id?: number;
            /** @description For ```schedule_type=0```: the score of the home team <br />
             *     For ```schedule_type=1```: the place(�1st", �2nd", etc.) or team point total of the opponent */
            score?: string | null;
            /** @description For ```schedule_type=0```: include value for each opponent. <br />
             *     For ```schedule_type=1```: include value for home team only.Not used/omitted for opponents. */
            win_loss?: string | null;
            /** @description For ```schedule_type=0```: the score of the opponent <br />
             *     For ```schedule_type=1```: not used/omitted */
            score_versus?: string | null;
        };
        /** @description Role Model */
        Role: {
            /**
             * Format: int32
             * @description The ID of a role
             */
            id?: number | null;
            /**
             * Format: int32
             * @description The ID used to associate roles with the original role; all roles are based upon preexisting base role IDs
             */
            base_role_id?: number | null;
            /** @description Returns True if the role is hidden */
            hidden?: boolean | null;
            /** @description The label used to identify a role */
            name?: string | null;
        };
        /** @description A Collection */
        RoleCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["Role"][] | null;
        };
        Room: {
            /**
             * Format: int32
             * @description ///
             */
            building_id?: number | null;
            capacity?: string | null;
            name?: string | null;
            /** Format: int32 */
            room_enrollment?: number | null;
            /** Format: int32 */
            room_id?: number | null;
            room_number?: string | null;
            residents?: components["schemas"]["Resident"][] | null;
        };
        Roster: {
            /**
             * Format: int32
             * @description The Team ID
             */
            id?: number;
            coaches?: components["schemas"]["CoachCollection"];
            players?: components["schemas"]["PlayerCollection"];
        };
        /** @description An object with leader information */
        RosterLeader: {
            /** @description True if the roster user is a leader. */
            is_leader?: boolean | null;
            /** @description True if the leader is the head teacher, head coach, etc. */
            is_head?: boolean | null;
            /** @description True if the leader is a faculty user */
            is_faculty?: boolean | null;
            /** @description The type of leader */
            type?: string | null;
        };
        /** @description An object with roster user information */
        RosterUser: {
            user?: components["schemas"]["UserBaseRead"];
            /**
             * Format: date-time
             * @description The date enrolled
             */
            enroll_date?: string | null;
            /**
             * Format: date-time
             * @description The date dropped or left
             */
            depart_date?: string | null;
            leader?: components["schemas"]["RosterLeader"];
            photo?: components["schemas"]["ProfilePictureUrls"];
        };
        /** @description Row Model */
        Row: {
            /** @description The fields of the list */
            columns?: components["schemas"]["Field"][] | null;
        };
        /** @description Salutations Model */
        Salutations: {
            /** @description The informal salutation for the address */
            informal?: string | null;
            /** @description The formal salutation for the address */
            formal?: string | null;
            /** @description The household salutation for the address */
            household?: string | null;
        };
        ScheduleItem: {
            /**
             * Format: int32
             * @description ID of the schedule item
             */
            id?: number | null;
            /** @description Returns True if the game or practice is marked as alumni */
            alumni?: boolean | null;
            /** @description Returns True if the game or practice was cancelled */
            cancelled?: boolean | null;
            /**
             * Format: date-time
             * @description Created date of the game or practice. Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            created?: string | null;
            /** @description Departure location of the game or practice */
            departure_location?: string | null;
            /** @description The time of departure before the game or practice */
            departure_time?: string | null;
            /** @description The game or practice description */
            description?: string | null;
            /** @description Directions to the game or practice */
            directions?: string | null;
            /** @description The time of dismissal before the game or practice */
            dismissal_time?: string | null;
            /** @description The time a game or practice ends */
            end_time?: string | null;
            /** @description The end time of the game or practice */
            end_time_span?: string | null;
            /** @description The title of the game or practice */
            title?: string | null;
            /** @description Returns True if the game or practice is marked as faculty */
            faculty?: boolean | null;
            /**
             * Format: date-time
             * @description Date of the game or practice. Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            game_date?: string | null;
            game_time?: components["schemas"]["GameTime"];
            /**
             * Format: int32
             * @description The ID of the game highlight
             */
            highlight_id?: number | null;
            /** @description Indicates whether the game is a home game or an away game */
            home_or_away?: string | null;
            /** @description Returns True if the game or practice is an invitational */
            invitational?: boolean | null;
            /**
             * Format: date-time
             * @description Modified date of the game or practice. Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            last_modified?: string | null;
            /** @description Returns True if the game is a league event */
            league?: boolean | null;
            /** @description Location of the game or practice */
            location?: string | null;
            /** @description Directions url to the game or practice */
            map_url?: string | null;
            /**
             * Format: int32
             * @description Returns 1 if the game is a meet, otherwise returns 0
             */
            meet?: number | null;
            /** @description Opponents for the gsame or practice */
            opponents?: components["schemas"]["Opponent"][] | null;
            /** @description The pickup time after the game or practice */
            pickup_time?: string | null;
            /** @description Returns True if the game or practice is a playoff */
            playoff?: boolean | null;
            /** @description Returns True if the event is a practice */
            practice?: boolean | null;
            /**
             * Format: int32
             * @description The id of the game or practice where this event was previously scheduled
             */
            previous_schedule_id?: number | null;
            /** @description Returns True if the game schedule is published */
            published?: boolean | null;
            /** @description Returns True if the game or practice requires dinner */
            require_dinner?: boolean | null;
            /** @description Returns True if the game or practice requires a lunch */
            require_lunch?: boolean | null;
            /** @description Returns True if the game or practice was rescheduled */
            rescheduled?: boolean | null;
            /**
             * Format: date-time
             * @description The date and time a game or practice has been rescheduled. Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            rescheduled_date?: string | null;
            /** @description The resaon a game or practice was rescheduled */
            rescheduled_note?: string | null;
            /**
             * Format: int32
             * @description The ID of the room a game or practice is being held
             */
            room_id?: number | null;
            /**
             * Format: int32
             * @description The schedule type
             */
            schedule_type?: number | null;
            /** @description Returns True if the game or practice is a scrimmage */
            scrimmage?: boolean | null;
            /**
             * Format: int32
             * @description The section ID
             */
            section_id?: number | null;
            /** @description Returns True if details for a game or practice are avalible */
            show_details?: boolean | null;
            /** @description Returns true if the game or practice should display "the directions on the school website */
            show_directions?: boolean | null;
            /** @description Returns true if the game or practice should display "vs" on the school website */
            show_versus?: boolean | null;
            /** @description The start time of the game or practice */
            start_time?: string | null;
            /**
             * Format: int32
             * @description ID of the team
             */
            team_id?: number;
            /** @description Time of the game or practice */
            time?: string | null;
            /** @description Returns True if the game or practice is a tournament */
            tournament?: boolean | null;
            /** @description The color of the uniforms for the game or practice */
            uniform_color?: string | null;
        };
        /** @description A Collection */
        ScheduleItemCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["ScheduleItem"][] | null;
        };
        ScheduleSet: {
            /** Format: int32 */
            schedule_set_id?: number;
            title?: string | null;
            meeting_time?: boolean;
            rotation?: boolean;
            /** Format: date-time */
            begin_date?: string | null;
            /** Format: date-time */
            end_date?: string | null;
        };
        ScheduleSetAccess: {
            /** Format: int32 */
            ScheduleSetId?: number | null;
            RoleDescription?: string | null;
            /** Format: int32 */
            RoleId?: number | null;
            /** Format: date-time */
            PublishDate?: string | null;
            /** Format: date-time */
            InsertDate?: string | null;
            /** Format: date-time */
            LastModifyDate?: string | null;
            /** Format: int32 */
            LastModifyUserId?: number | null;
            FieldsToNull?: string[] | null;
            vendor_external_id?: string | null;
        };
        /** @description A Collection */
        ScheduleSetCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["ScheduleSet"][] | null;
        };
        ScheduleSetDetails: {
            /** Format: int32 */
            ScheduleSetId?: number | null;
            ScheduleSetDescription?: string | null;
            ShortDescription?: string | null;
            /**
             * ScheduleSetDetailsOfferingType
             * @enum {string|null}
             */
            OfferingType?: "_0" | "_1" | "_2" | "_3" | "_4" | "_5" | "_6" | "_8" | "_9" | "_10" | "_11" | "_12" | "_13" | null;
            SchoolYearLabel?: string | null;
            /** Format: int32 */
            LevelNum?: number | null;
            /** Format: date-time */
            Effdate?: string | null;
            /** Format: date-time */
            Enddate?: string | null;
            /** Format: int32 */
            StartDay?: number | null;
            /** Format: int32 */
            StartWeek?: number | null;
            /** Format: int32 */
            MaxDay?: number | null;
            /** Format: int32 */
            MaxWeek?: number | null;
            MeetingList?: components["schemas"]["ScheduleSetMettingPattern"][] | null;
            AccessList?: components["schemas"]["ScheduleSetAccess"][] | null;
            RotationList?: components["schemas"]["ScheduleSetRotation"][] | null;
            DefinedRotationPattern?: boolean | null;
            MeetingTimeCreated?: boolean | null;
            BlockRotationCreated?: boolean | null;
            Sun?: boolean | null;
            Mon?: boolean | null;
            Tue?: boolean | null;
            Wed?: boolean | null;
            Thu?: boolean | null;
            Fri?: boolean | null;
            Sat?: boolean | null;
            SunInUse?: boolean | null;
            MonInUse?: boolean | null;
            TueInUse?: boolean | null;
            WedInUse?: boolean | null;
            ThuInUse?: boolean | null;
            FriInUse?: boolean | null;
            SatInUse?: boolean | null;
            /** Format: int32 */
            BlockGroupId?: number | null;
            /** Format: int32 */
            MeetingTimeId?: number | null;
            /** Format: date-time */
            InsertDate?: string | null;
            /** Format: date-time */
            LastModifyDate?: string | null;
            /** Format: int32 */
            LastModifyUserId?: number | null;
            FieldsToNull?: string[] | null;
            vendor_external_id?: string | null;
        };
        ScheduleSetMettingPattern: {
            /** Format: int32 */
            PatternNum?: number | null;
            Sun?: boolean | null;
            Mon?: boolean | null;
            Tue?: boolean | null;
            Wed?: boolean | null;
            Thu?: boolean | null;
            Fri?: boolean | null;
            Sat?: boolean | null;
            MeetingTimeList?: components["schemas"]["ScheduleSetMettingTime"][] | null;
            HasAttendance?: boolean | null;
        };
        ScheduleSetMettingTime: {
            /** Format: int32 */
            PatternNum?: number | null;
            /** Format: int32 */
            DailyOrdinal?: number | null;
            /** Format: date-time */
            BeginTime?: string | null;
            /** Format: date-time */
            EndTime?: string | null;
            HasAttendance?: boolean | null;
        };
        ScheduleSetRotation: {
            /** Format: int32 */
            WeekInCycle?: number | null;
            WeekDayList?: components["schemas"]["ScheduleSetRotationDay"][] | null;
        };
        ScheduleSetRotationDay: {
            /** Format: int32 */
            WeekInCycle?: number | null;
            /** Format: int32 */
            DayInCycle?: number | null;
            DayLabel?: string | null;
            RotaionDayMeetingList?: components["schemas"]["ScheduleSetRotationDayMeeting"][] | null;
        };
        ScheduleSetRotationDayMeeting: {
            /** Format: int32 */
            WeekInCycle?: number | null;
            /** Format: int32 */
            DayInCycle?: number | null;
            /** Format: int32 */
            DailyOrdinal?: number | null;
            /** Format: int32 */
            BlockId?: number | null;
            BlockName?: string | null;
        };
        SchoolBbidStatus: {
            /**
             * Format: int32
             * @description The id of the user in Education Management
             */
            id?: number;
            /** @description The users current authentication method */
            current_authentication?: string | null;
            /**
             * Format: int32
             * @description The number of days remaining on the users invitation
             */
            days_remaining?: number;
            /** @description The email of the user */
            email?: string | null;
            /** @description If the user is not able to be invited to use BBID via Education Management, this message should indicate why */
            invalid_message?: string | null;
            /**
             * Format: date-time
             * @description The date when the user was invited
             */
            invited?: string | null;
            /** @description The name of the user */
            name?: string | null;
            /**
             * Format: int32
             * @description The id of the users current status
             */
            status_id?: number;
            /** @description The users current status */
            status?: string | null;
            /** @description The users BBID Username */
            username?: string | null;
        };
        /** @description A Collection */
        SchoolBbidStatusCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["SchoolBbidStatus"][] | null;
        };
        SchoolDecisionModel: {
            /** Format: int32 */
            id?: number | null;
            name?: string | null;
            decision_type?: string | null;
            /** Format: int32 */
            decision_type_id?: number | null;
            /** Format: date-time */
            date?: string | null;
            /** Format: date-time */
            expire_date?: string | null;
            comment?: string | null;
            candidate_response?: components["schemas"]["CandidateDecisionModel"];
        };
        /** @description An object with school level information */
        SchoolLevel: {
            /**
             * Format: int32
             * @description Id
             */
            id?: number | null;
            /** @description description */
            description?: string | null;
            /** @description Abbreviation */
            abbreviation?: string | null;
        };
        SchoolSession: {
            /**
             * Format: int32
             * @description The Id of the session
             */
            id?: number | null;
            /** @description The name of the session */
            name?: string | null;
            /** @description The school year the session takes place */
            school_year_label?: string | null;
            /**
             * Format: int32
             * @description The id of the school year
             */
            school_year_id?: number | null;
            /**
             * Format: int32
             * @description The school level number where the session takes place
             */
            level_num?: number | null;
            /**
             * Format: date-time
             * @description The start date of the session
             */
            begin_date?: string | null;
            /**
             * Format: date-time
             * @description The end date of the session
             */
            end_date?: string | null;
            /** @description Returns true if the session is the current session */
            current?: boolean | null;
            /** @description Returns true if the session is currently in use */
            in_use?: boolean | null;
        };
        /** @description A Collection */
        SchoolSessionCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["SchoolSession"][] | null;
        };
        /** @description Season Model */
        Season: {
            /**
             * Format: int32
             * @description The ID of the season
             */
            id?: number;
            /** @description The name of the season */
            name?: string | null;
        };
        /** @description An object with section information */
        Section: {
            /**
             * Format: int32
             * @description The ID of the section. This is the the class ID for academics, team ID for athletics, building_id for dorms, etc. dependent on offering type
             */
            id?: number | null;
            /** @description The name of the roster group */
            name?: string | null;
            /** @description The section identifier */
            identifier?: string | null;
            offering?: components["schemas"]["OfferingModel"];
            duration?: components["schemas"]["Duration"];
            school_year?: components["schemas"]["Year"];
            /**
             * Format: int32
             * @description The section id for the lead section (i.e. first term) of the class.
             */
            lead_section_id?: number | null;
            /**
             * Format: date-time
             * @description The last modified date for the section
             */
            modified?: string | null;
            photo?: components["schemas"]["ProfilePictureUrls"];
        };
        SectionAdminCustomFieldCreate: {
            /**
             * Format: int32
             * @description The ID of the custom field to update. This value is returned from <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1CustomfieldsGet" target="_blank">Core custom fields</a>.
             */
            field_id?: number;
            /**
             * Format: int32
             * @description The ID of the data type of the custom field. This value is returned from <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1CustomfieldsGet" target="_blank">Core custom fields</a>.
             */
            data_type_id: number;
            /**
             * Format: int32
             * @description If the field format is Number, use this property for the value of the custom field. Values must be a whole number (positive or negative).<br />
             *     If the field format is Dropdown or Checkbox List, use this property for the value of the custom field. The value is the table value ID returned from <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1CustomfieldsGet" target="_blank">Core custom fields</a>.
             */
            int_value?: number | null;
            /** @description If the field format is Text input or Text paragraph, use this property for the value of the custom field. */
            text_value?: string | null;
            /**
             * Format: double
             * @description If the field format is Currency, use this property for the value of the custom field. Values must be between 0.00 and 99,999,999.99.
             */
            decimal_value?: number | null;
            /**
             * Format: date-time
             * @description If field format is Date, use this property for the value of the custom field. Values must be formatted YYYY/MM/DD.
             */
            date_value?: string | null;
            /** @description If field format is Yes/No or Checkbox, use this property for the value of the custom field. Values must be 'true" or 'false'. */
            bit_value?: boolean | null;
        };
        /** @description An object with custom field information */
        SectionAdminCustomFieldUpdate: {
            /**
             * Format: int32
             * @description The id of that instance of the custom field for the specified section.
             */
            id?: number;
            /**
             * Format: int32
             * @description The ID of the custom field to update. This value is returned from <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1CustomfieldsGet" target="_blank">Core custom fields</a>.
             */
            field_id?: number;
            /**
             * Format: int32
             * @description The ID of the data type of the custom field. This value is returned from <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1CustomfieldsGet" target="_blank">Core custom fields</a>.
             */
            data_type_id: number;
            /**
             * Format: int32
             * @description If the field format is Number, use this property for the value of the custom field. Values must be a whole number (positive or negative).<br />
             *     If the field format is Dropdown or Checkbox List, use this property for the value of the custom field. The value is the table value ID returned from <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1CustomfieldsGet" target="_blank">Core custom fields</a>.
             */
            int_value?: number | null;
            /** @description If the field format is Text input or Text paragraph, use this property for the value of the custom field. */
            text_value?: string | null;
            /**
             * Format: double
             * @description If the field format is Currency, use this property for the value of the custom field. Values must be between 0.00 and 99,999,999.99.
             */
            decimal_value?: number | null;
            /**
             * Format: date-time
             * @description If field format is Date, use this property for the value of the custom field. Values must be formatted YYYY/MM/DD.
             */
            date_value?: string | null;
            /** @description If field format is Yes/No or Checkbox, use this property for the value of the custom field. Values must be 'true" or 'false'. */
            bit_value?: boolean | null;
        };
        SectionCycles: {
            /**
             * Format: int32
             * @description The ID of the section
             */
            section_id?: number;
            /** @description The name of the course */
            course_title?: string | null;
            /** @description The section identifier */
            section_identifier?: string | null;
            /** @description Name of the block to which this section belongs */
            block_name?: string | null;
            /** @description The course code */
            course_code?: string | null;
            /** @description The collection of cycles for the section */
            cycles?: components["schemas"]["Cycle"][] | null;
        };
        /** @description An object with section roster information */
        SectionRosterModel: {
            section?: components["schemas"]["Section"];
            /** @description An array of roster users assigned to the section. This includes members and leaders. */
            roster?: components["schemas"]["RosterUser"][] | null;
        };
        /** @description Roles in the Education Management system that can see an allergy or condition */
        SecurityRole: {
            /**
             * Format: int32
             * @description The Id of the role
             */
            id?: number;
            /** @description The name of the role */
            name?: string | null;
        };
        /** @description A Collection */
        SecurityRoleCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["SecurityRole"][] | null;
        };
        SourceModel: {
            /**
             * Format: int32
             * @description ID of the field
             */
            id?: number | null;
            /** @description Description of the field */
            description?: string | null;
        };
        SpecialDay: {
            /** Format: int32 */
            id?: number | null;
            day_description?: string | null;
            /** Format: int32 */
            sort_order?: number | null;
            /**
             * RotationBehavior
             * @enum {string|null}
             */
            rotation_behavior?: "Bump" | "Skip" | null;
            blocks?: components["schemas"]["SpecialDayBlock"][] | null;
        };
        SpecialDayBlock: {
            /** Format: int32 */
            block_id?: number | null;
            block_description?: string | null;
            /** Format: date-time */
            start_time?: string | null;
            /** Format: date-time */
            end_time?: string | null;
        };
        /** @description A Collection */
        SpecialDayCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["SpecialDay"][] | null;
        };
        /** @description Sports Model */
        Sport: {
            /**
             * Format: int32
             * @description The ID of the sport
             */
            id?: number;
            level?: components["schemas"]["Level"];
            /** @description The name of the sport */
            name?: string | null;
            season?: components["schemas"]["Season"];
        };
        /** @description A Collection */
        SportCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["Sport"][] | null;
        };
        SportsLevel: {
            /**
             * Format: int32
             * @description The ID of the sport level
             */
            id?: number | null;
            /** @description The name of the sport level */
            name?: string | null;
            /** @description A description of the sport level */
            description?: string | null;
            /** @description Gender classification associated with this sport level ("M" or "F" et al) */
            gender?: string | null;
            /** @description Indicates where this sport competes (e.g. varsity or JV) */
            level_of_play?: string | null;
            /**
             * Format: int32
             * @description ID of the sport
             */
            sport_id?: number | null;
            /** @description Name of the sport */
            sport?: string | null;
            /**
             * Format: int32
             * @description ID of the season during which the sport competes
             */
            season_id?: number | null;
            /** @description Name of the season during which the sport competes */
            season?: string | null;
        };
        /** @description A Collection */
        SportsLevelCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["SportsLevel"][] | null;
        };
        /** @description Student Model */
        Student: {
            /**
             * Format: int32
             * @description The ID of the student
             */
            id?: number;
            /** @description The name of the student */
            name?: string | null;
        };
        /** @description An object for access role information. */
        StudentAccessRole: {
            /**
             * Format: int32
             * @description The ID of the role
             */
            id: number;
            /** @description Set to true to allow access for users with this role. */
            has_access?: boolean | null;
        };
        /** @description Student medical allergy */
        StudentAllergiesView: {
            /**
             * Format: int32
             * @description The ID of student medical allergy
             */
            id?: number;
            allergy?: components["schemas"]["IdDescriptorField"];
            /**
             * Format: date-time
             * @description The start date for the allergy.
             */
            date_as_of?: string | null;
            /**
             * Format: date-time
             * @description The end date for the allergy.
             */
            date_until?: string | null;
            /** @description The notes for the allergy. */
            notes?: string | null;
            /** @description The signs of an allergic reaction. */
            allergy_signs?: string | null;
            /** @description The response for a minor allergic reaction. */
            minor_reaction_response?: string | null;
            /** @description The response for a major allergic reaction. */
            major_reaction_response?: string | null;
            /** @description An array of student medication objects. */
            student_medications?: components["schemas"]["StudentMedication"][] | null;
        };
        /** @description Student allergy update */
        StudentAllergyUpdate: {
            /**
             * Format: date-time
             * @description The date the allergy began. Use format ...
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            date_as_of?: string | null;
            /**
             * Format: date-time
             * @description The date the allergy ended. Use format ...
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            date_until?: string | null;
            /** @description The notes for the allergy */
            notes?: string | null;
            /** @description The signs of an allergic reaction */
            allergy_signs?: string | null;
            /** @description The response for a minor allergic reaction */
            minor_reaction_response?: string | null;
            /** @description The response for a major allergic reaction */
            major_reaction_response?: string | null;
            /** @description Array of roles. If a role is not included, default access will be set to true */
            role_access?: components["schemas"]["MedicalSecurityRole"][] | null;
            /** @description The list of student medication IDs for the allergy. If included, this list will replace the existing list of medications. */
            medications?: number[] | null;
        };
        StudentAssignment: {
            /** @description The name of the section the assignment was assigned in */
            section_name?: string | null;
            /**
             * Format: int32
             * @description The id of the section the assignment was assigned in
             */
            section_id?: number | null;
            /**
             * Format: int32
             * @description The id of the assignment
             */
            assignment_id?: number | null;
            /** @description The short description for the assignment */
            short_description?: string | null;
            /**
             * Format: date-time
             * @description The date the assignment was assigned
             */
            date_assigned?: string | null;
            /**
             * Format: date-time
             * @description The date the assignment is due
             */
            date_due?: string | null;
            /** @description The long description of the assignment */
            long_description?: string | null;
            /** @description The type of the assignment */
            assignment_type?: string | null;
            /** @description Returns true if the assignment is included in the GradeBook */
            grade_book?: boolean;
            /** @description Returns true if the assignment is an online submission assignment */
            online_submission?: boolean;
            /**
             * Format: int32
             * @description The status of the assignment
             */
            assignment_status?: number | null;
            /** @description Returns true if this assignment is an assessment */
            assessment?: boolean;
            /**
             * Format: int32
             * @description The id of the assessment
             */
            assessment_id?: number | null;
            /** @description Returns true if the assessment is locked */
            assessment_locked?: boolean;
            /** Format: int32 */
            major?: number | null;
            /** @description Returns true if the assignment has a discussion */
            discussion?: boolean;
            /** @description Returns true if the assignment is formative */
            formative?: boolean;
            /** @description Returns true if ther student is exempt from this assignment */
            exempt?: boolean;
            /** @description Returns true if the assignment is incomplete */
            incomplete?: boolean;
            /** @description Returns true if the assignment is late */
            late?: boolean;
            /** @description Returns true if the assignment is missing */
            missing?: boolean;
            /** @description Returns true if the assignment is included in the rubric */
            rubric?: boolean;
            /** @description Returns true if the assignment is a user generated task */
            user_task?: boolean;
        };
        /** @description A Collection */
        StudentAssignmentCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["StudentAssignment"][] | null;
        };
        /** @description Athletic requirement */
        StudentAthleticRequirement: {
            /** @description The ID or description of the athletic requirement table value */
            athletic_type: string;
            /**
             * Format: date-time
             * @description The date the requirement was met. Use ISO-8601 date format: 2022-08-31.
             *     Excluding a date here will clear the athletic requirements of the student.
             */
            athletic_date?: string | null;
        };
        /** @description Student athletic clearance requirement model */
        StudentAthleticRequirementRead: {
            /**
             * Format: int32
             * @description The ID of student athletic requirement
             */
            id?: number;
            athletic_requirement_type?: components["schemas"]["AthleticRequirementType"];
            school_year?: components["schemas"]["IdDescriptorField"];
            season?: components["schemas"]["IdDescriptorField"];
            /** @description Returns true if athletic requirement exists for the student */
            is_complete?: boolean | null;
            /**
             * Format: date-time
             * @description The date of athletic requirement. Use format ...
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            athletic_requirement_date?: string | null;
        };
        /** @description Student medication */
        StudentAthleticRequirementUpdate: {
            /**
             * Format: int32
             * @description The user ID of the student.
             */
            user_id: number;
            /** @description The ID or label of the school year. Defaults to current school year. */
            school_year?: string | null;
            /** @description The ID of the athletic season. */
            season: string;
            /** @description An array of athletic requirement objects */
            athletics_requirement: components["schemas"]["StudentAthleticRequirement"][];
        };
        /** @description A Collection */
        StudentCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["Student"][] | null;
        };
        /** @description Student condition update */
        StudentConditionUpdate: {
            /**
             * Format: date-time
             * @description The date the condition began. Use format ...
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            date_as_of?: string | null;
            /**
             * Format: date-time
             * @description The date the condition ended. Use format ...
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            date_until?: string | null;
            /** @description The notes for the condition */
            notes?: string | null;
            /** @description Array of roles. If a role is not included, default access will be set to true */
            role_access?: components["schemas"]["MedicalSecurityRole"][] | null;
            /** @description The list of student medication IDs for the condition. If included, this list will replace the existing list of medications. */
            medications?: number[] | null;
        };
        /** @description Student medical condition */
        StudentConditionView: {
            /**
             * Format: int32
             * @description The ID of the student’s condition
             */
            id?: number;
            condition?: components["schemas"]["IdDescriptorField"];
            /**
             * Format: date-time
             * @description The start date for the condition.
             */
            date_as_of?: string | null;
            /**
             * Format: date-time
             * @description The end date for the condition.
             */
            date_until?: string | null;
            /** @description The notes for the condition. */
            notes?: string | null;
            /** @description An array of student medication objects. */
            student_medications?: components["schemas"]["StudentMedication"][] | null;
        };
        /** @description Student Graded Assignments Model */
        StudentGradedAssignment: {
            /**
             * Format: int32
             * @description The ID of the assignment
             */
            assignment_id?: number | null;
            /**
             * Format: int32
             * @description The index ID of the assignment
             */
            assignment_index_id?: number | null;
            /** @description The short description for the assignment */
            short_description?: string | null;
            /**
             * Format: date-time
             * @description The date the assignment was assigned
             */
            date_assigned?: string | null;
            /**
             * Format: date-time
             * @description The date the assignment is due
             */
            date_due?: string | null;
            /**
             * Format: float
             * @description The maximum points for the assignment
             */
            max_points?: number | null;
            /**
             * Format: float
             * @description The graded number of points for the assignment
             */
            points?: number | null;
            /**
             * Format: float
             * @description The percentage grade for the assignment
             */
            assignment_percentage?: number | null;
            /** @description The letter grade for the assignment */
            letter?: string | null;
            /**
             * Format: float
             * @description The cumulative grade for the section
             */
            section_grade?: number | null;
            /** @description Returns true if the assignment is formative */
            formative?: boolean | null;
            /** @description Returns true if the assignment is missing */
            missing?: boolean | null;
            /** @description Returns true if the assignment is late */
            late?: boolean | null;
            /** @description Returns true if the assignment is incomplete */
            incomplete?: boolean | null;
            /** @description Returns true if the assignment is exempt */
            exempt?: boolean | null;
            /** @description Comment for the assignment */
            comment?: string | null;
            assignment_type?: components["schemas"]["AssignmentType"];
        };
        /** @description A Collection */
        StudentGradedAssignmentCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["StudentGradedAssignment"][] | null;
        };
        /** @description Student immunization */
        StudentImmunization: {
            /** @description The ID or description of the immunization type */
            immunization_type: string;
            /**
             * Format: date-time
             * @description The date of the immunization. Use format ...
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             *     Excluding a date here will clear the immunization from the student's immunizations.
             */
            immunization_date?: string | null;
        };
        /** @description Student medication */
        StudentImmunizationRead: {
            /**
             * Format: int32
             * @description The ID of student immunization
             */
            id?: number;
            immunization_type?: components["schemas"]["StudentImmunizationType"];
            /** @description Returns true if immunization exists for the student */
            is_complete?: boolean | null;
            /**
             * Format: date-time
             * @description The date of immunization. Use format ...
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            immunization_date?: string | null;
        };
        /** @description Student immunization type */
        StudentImmunizationType: {
            /**
             * Format: int32
             * @description The ID of immunization type
             */
            id?: number | null;
            /** @description The description of immunization type */
            description?: string | null;
            /** @description Returns true if immunization type is required else false */
            required?: boolean | null;
        };
        /** @description Student medication */
        StudentImmunizationUpdate: {
            /**
             * Format: int32
             * @description The ID of the student.
             */
            user_id: number;
            /** @description The list of student immunizations */
            immunizations: components["schemas"]["StudentImmunization"][];
        };
        /** @description StudentInfo Model */
        StudentInfo: {
            /**
             * Format: int32
             * @description The Id of the Grade Level
             */
            grade_id?: number;
            /**
             * Format: int32
             * @description The Id of the Grade Level
             */
            grade_level_id?: number;
            /** @description The graduation year of the student */
            grad_year?: string | null;
            /** @description The grade level of the student */
            grade_level?: string | null;
            /** @description The grade level description of the student */
            grade_level_description?: string | null;
            /** @description The grade level abbreviation of the student */
            grade_level_abbreviation?: string | null;
            /** @description The grade level name of the student */
            grade_level_name?: string | null;
            /** @description The school levels the student is enrolled in */
            school_levels?: components["schemas"]["Level"][] | null;
        };
        /** @description Student medical allergy */
        StudentMedicalAllergy: {
            /**
             * Format: int32
             * @description The user ID of the student.
             */
            user_id: number;
            /** @description The ID or description of the allergy. */
            allergy: string;
            /**
             * Format: date-time
             * @description The start date for the allergy. Use ISO-8601 date format: 2022-08-31.
             */
            date_as_of: string;
            /**
             * Format: date-time
             * @description The end date for the allergy. Use ISO-8601 date format: 2022-08-31.
             */
            date_until?: string | null;
            /** @description The notes for the allergy. */
            notes?: string | null;
            /** @description The signs of an allergic reaction */
            allergy_signs?: string | null;
            /** @description The response for a minor allergic reaction */
            minor_reaction_response?: string | null;
            /** @description The response for a major allergic reaction */
            major_reaction_response?: string | null;
            /** @description An array of access role objects. */
            access_roles?: components["schemas"]["StudentAccessRole"][] | null;
            /** @description An array of student medication ID integers. */
            student_medications?: number[] | null;
        };
        /** @description Student medical allergy/condition */
        StudentMedicalAllergyCondition: {
            /**
             * Format: int32
             * @description The ID of the student
             */
            user_id: number;
            /** @description The type of record to create. Allowed values: allergy, condition */
            type: string;
            /** @description The ID or description of the allergy or condition. */
            allergy_condition_type: string;
            /**
             * Format: date-time
             * @description The date the allergy or condition began. Use format ...
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            date_as_of: string;
            /**
             * Format: date-time
             * @description The date the allergy or condition ended. Use format ...
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            date_until?: string | null;
            /** @description The signs of an allergic reaction */
            allergy_signs?: string | null;
            /** @description The response for a minor allergic reaction */
            minor_reaction_response?: string | null;
            /** @description The response for a major allergic reaction */
            major_reaction_response?: string | null;
            /** @description Array of roles */
            role_access?: components["schemas"]["MedicalSecurityRole"][] | null;
            /** @description Array of medication IDs */
            medications?: number[] | null;
        };
        /** @description Student medical condition */
        StudentMedicalCondition: {
            /**
             * Format: int32
             * @description The user ID of the student.
             */
            user_id: number;
            /** @description The ID or description of the condition. */
            condition: string;
            /**
             * Format: date-time
             * @description The start date for the condition. Use ISO-8601 date format: 2022-08-31.
             */
            date_as_of: string;
            /**
             * Format: date-time
             * @description The end date for the condition. Use ISO-8601 date format: 2022-08-31.
             */
            date_until?: string | null;
            /** @description The notes for the condition. */
            notes?: string | null;
            /** @description An array of access role objects. */
            access_roles?: components["schemas"]["StudentAccessRole"][] | null;
            /** @description An array of student medication ID integers. */
            student_medications?: number[] | null;
        };
        /** @description An object for student medication information */
        StudentMedication: {
            /**
             * Format: int32
             * @description The ID of the student’s medication
             */
            id?: number;
            medication?: components["schemas"]["IdDescriptorField"];
            /**
             * Format: date-time
             * @description The start date for the medication.
             */
            date_as_of?: string | null;
            /**
             * Format: date-time
             * @description The end date for the medication.
             */
            date_until?: string | null;
        };
        /** @description Student medication create */
        StudentMedicationCreate: {
            /**
             * Format: int32
             * @description The ID of the student
             */
            user_id: number;
            /** @description The ID or description of the medication type */
            medication_type: string;
            /**
             * Format: date-time
             * @description The date when medication began. Use format ...
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            date_as_of: string;
            /**
             * Format: date-time
             * @description The date when medication ended. Use format ...
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            date_until?: string | null;
            /** @description The ID or description of the location of the medication. */
            location?: string | null;
            /** @description The dosage of the medication to dispense */
            dosage?: string | null;
            dispense: components["schemas"]["MedicationDosageCreate"];
            /** @description The list of student condition IDs for the condition. If included, this list will replace the existing list of conditions on the medication. */
            conditions?: number[] | null;
            /** @description The list of student allergy IDs for the allergy. If included, this list will replace the existing list of allegies on the medication. */
            allergies?: number[] | null;
            /** @description Notes for medication */
            notes?: string | null;
            /** @description Array of roles */
            role_access?: components["schemas"]["MedicalSecurityRole"][] | null;
        };
        /** @description Student medication */
        StudentMedicationRead: {
            /**
             * Format: int32
             * @description The ID of student medication
             */
            id?: number;
            medication_type?: components["schemas"]["IdDescriptorField"];
            /**
             * Format: date-time
             * @description The date the allergy or condition began. Use format ...
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            date_as_of?: string | null;
            /**
             * Format: date-time
             * @description The date the allergy or condition ended. Use format ...
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            date_until?: string | null;
            location?: components["schemas"]["IdDescriptorField"];
            /** @description The dosage of medication */
            dosage?: string | null;
            dispense?: components["schemas"]["MedicationDosage"];
            /** @description The notes/comments for the medication. */
            notes?: string | null;
            /** @description The list of allergies this medication can treat. */
            allergies?: components["schemas"]["AllergyRead"][] | null;
            /** @description The list of conditions this medication can treat. */
            conditions?: components["schemas"]["ConditionRead"][] | null;
        };
        /** @description Student medication */
        StudentMedicationUpdate: {
            /**
             * Format: date-time
             * @description The date to begin the medication. Use format ...
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            date_as_of?: string | null;
            /**
             * Format: date-time
             * @description The date to end the medication. Use format ...
             *     Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> format: ```2022-01-20T16:30:00-05:00```
             */
            date_until?: string | null;
            /** @description The ID or description of the location of the medication. */
            location?: string | null;
            /** @description The dosage of the medication to dispense. */
            dosage?: string | null;
            /**
             * Format: int32
             * @description The times per day to dispense the medication
             */
            despense_times_a_day?: number;
            /** @description The weekly frequency to dispense the medication. Allowed values: everyday, asneeded, specificdays. */
            dispense_frequency?: string | null;
            dispense_days?: components["schemas"]["Days"];
            /** @description The list of student condition IDs for the condition. If included, this list will replace the existing list of conditions on the medication. */
            conditions?: number[] | null;
            /** @description The list of student allergy IDs for the allergy. If included, this list will replace the existing list of allegies on the medication. */
            allergies?: number[] | null;
        };
        /** @description Schedule Item */
        StudentSchedule: {
            /**
             * Format: int32
             * @description The Id of the section
             */
            section_id?: number | null;
            /** @description The identifier of the section */
            section_identifier?: string | null;
            /** @description The title of the course */
            course_title?: string | null;
            /** @description The code of the course */
            course_code?: string | null;
            /** @description The name of the section */
            section_name?: string | null;
            /**
             * Format: int32
             * @description The Id of the block the section is scheduled in
             */
            block_id?: number | null;
            /** @description The name of the block the section is scheduled in */
            block_name?: string | null;
            /**
             * Format: int32
             * @description The Id of the room the section takes place in
             */
            room_id?: number | null;
            /** @description The name of the room the section takes place in */
            room_name?: string | null;
            /** @description The number of the room the section takes place in */
            room_number?: string | null;
            /**
             * Format: int32
             * @description The capacity of the room the section takes place in
             */
            room_capacity?: number | null;
            /** @description The code of the room the section takes place in */
            room_code?: string | null;
            /** @description The full name of the head teacher */
            faculty_name?: string | null;
            /** @description The first name of the head teacher */
            faculty_firstname?: string | null;
            /** @description The last name of the head teacher */
            faculty_lastname?: string | null;
            /**
             * Format: date-time
             * @description The start time of the meeting
             */
            start_time?: string | null;
            /**
             * Format: date-time
             * @description The end time of the meeting
             */
            end_time?: string | null;
            /**
             * Format: date-time
             * @description The date the meeting takes place
             */
            meeting_date?: string | null;
            /**
             * Format: int32
             * @description The user Id of the head teacher
             */
            faculty_user_id?: number | null;
            /** @description Returns true if attendance is required */
            attendance_required?: boolean | null;
            offering_type?: components["schemas"]["OfferingType"];
        };
        /** @description A Collection */
        StudentScheduleCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["StudentSchedule"][] | null;
        };
        /** @description SubTest Model */
        SubTest: {
            /**
             * Format: int32
             * @description The Test Type ID
             */
            test_type_id?: number | null;
            /** @description The SubTest Type */
            sub_test_type?: string | null;
            /**
             * Format: double
             * @description The SubTest Score
             */
            score?: number | null;
            /**
             * Format: int32
             * @description The SubTest Type Id
             */
            test_subtype_id?: number | null;
            /**
             * Format: double
             * @description The SubTest Percentile
             */
            percentile?: number | null;
            /**
             * Format: double
             * @description The SubTest Scale
             */
            scale?: number | null;
            /**
             * Format: double
             * @description The SubTest Stanie
             */
            stanie?: number | null;
        };
        Table: {
            /** Format: int32 */
            id?: number;
            name?: string | null;
        };
        /** @description A Collection */
        TableCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["Table"][] | null;
        };
        TableValue: {
            /** Format: int32 */
            id?: number;
            name?: string | null;
            abbreviation?: string | null;
            active?: boolean;
        };
        /** @description An object with table value information */
        TableValueAdd: {
            /** @description The description of the table value */
            description: string;
            /** @description The abbreviation of the table value. Maximum length is 6 characters */
            abbreviation?: string | null;
        };
        /** @description A Collection */
        TableValueCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["TableValue"][] | null;
        };
        /** @description Academic Teacher Model */
        Teacher: {
            /**
             * Format: int32
             * @description The user ID for the teacher
             */
            id?: number | null;
            /** @description The head teacher indicator */
            head?: boolean | null;
            /** @description The firstname and lastname of the teacher */
            name?: string | null;
            /** @description The first name of the teacher */
            firstname?: string | null;
            /** @description The last name of the teacher */
            lastname?: string | null;
            /** @description The teachers preferred name */
            preferred_name?: string | null;
            /** @description The formatted name of the teacher.  If the teacher has a preferred name, it is used in place of the first name. */
            formatted_name?: string | null;
            /** @description The teacher's email address */
            email?: string | null;
            /** @description The teacher's cellular phone */
            cell_phone?: string | null;
        };
        /** @description Team Model */
        Team: {
            /**
             * Format: int32
             * @description The ID of the team
             */
            id?: number;
            /** @description The name of the team */
            name?: string | null;
            sport?: components["schemas"]["Sport"];
        };
        /** @description A Collection */
        TeamCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["Team"][] | null;
        };
        /** @description Term Model */
        Term: {
            /**
             * Format: int32
             * @description The duration ID for the term
             */
            id?: number | null;
            /**
             * Format: date-time
             * @description The begin date of the term. Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            begin_date?: string | null;
            /** @description The description for the term */
            description?: string | null;
            /**
             * Format: date-time
             * @description The end date of the term. Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            end_date?: string | null;
            /** @description The description of the level for the term */
            level_description?: string | null;
            /**
             * Format: int32
             * @description The school level for the term
             */
            level_id?: number | null;
            /**
             * Format: int32
             * @description The offering type for the term
             */
            offering_type?: number | null;
            /** @description The label used to identify the range of dates in a school year */
            school_year_label?: string | null;
        };
        /** @description A Collection */
        TermCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["Term"][] | null;
        };
        /** @description TestScores Model */
        TestScore: {
            /**
             * Format: int32
             * @description The Test Score Id
             */
            id?: number | null;
            /** @description The Comments on the Test */
            comment?: string | null;
            /**
             * Format: double
             * @description The Overall Score
             */
            overall_score?: number | null;
            /** @description Print on Report Card? */
            printon_report_card?: boolean | null;
            /** @description Print on Transcript? */
            printon_transcript?: boolean | null;
            /** @description List of Subtests */
            sub_tests?: components["schemas"]["SubTest"][] | null;
            /**
             * Format: date-time
             * @description The Test Date
             */
            test_date?: string | null;
            /**
             * Format: date-time
             * @description Last Modified Date
             */
            last_modified?: string | null;
            /** @description The Test Type */
            test_type?: string | null;
            /**
             * Format: int32
             * @description The Test Type Id
             */
            test_type_id?: number | null;
            user?: components["schemas"]["UserBaseRead"];
        };
        /** @description TestScores Model */
        TestScoreAdd: {
            /**
             * Format: int32
             * @description The Test Type Id
             */
            id?: number | null;
            /** @description The Comments on the Test */
            comment?: string | null;
            /**
             * Format: double
             * @description The Overall Score
             */
            overall_score?: number | null;
            /** @description Print on Report Card? */
            printon_report_card?: boolean | null;
            /** @description Print on Transcript? */
            printon_transcript?: boolean | null;
            /** @description List of Subtests */
            sub_tests?: components["schemas"]["SubTest"][] | null;
            /**
             * Format: date-time
             * @description The Test Date
             */
            test_date?: string | null;
        };
        /** @description A Collection */
        TestScoreCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["TestScore"][] | null;
        };
        TestType: {
            /**
             * Format: int32
             * @description The Test Score Id
             */
            id?: number | null;
            /** @description List of Subtests */
            sub_tests?: components["schemas"]["SubTest"][] | null;
            /** @description The Test Type */
            test_name?: string | null;
        };
        /** @description A Collection */
        TestTypeCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["TestType"][] | null;
        };
        /** @description Timezone model */
        Timezone: {
            /** @description The timezone the school is set to */
            timezone_name?: string | null;
            /** @description Gets or sets the daylight savings time flag */
            is_daylight_savings_time?: boolean | null;
            /** @description The UTC offset */
            utc_offset?: string | null;
        };
        Transportation: {
            /**
             * Format: int32
             * @description ID for the transportation
             */
            id?: number | null;
            /** @description Name of the transportation and capacity where applicable */
            name?: string | null;
        };
        /** @description A Collection */
        TransportationCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["Transportation"][] | null;
        };
        /** @description UserAdd Model */
        UserAdd: {
            /** @description The affiliation of a user */
            affiliation?: string | null;
            /** @description The birthplace of the user */
            birth_place?: string | null;
            /** @description The boarding or day status. Accepted values: boarding, day, "B" and "D" */
            boarding_or_day?: string | null;
            /** @description The cc email address of a user */
            cc_email?: string | null;
            /** @description The descriptor or ID of the citizenship. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values. */
            citizenship?: string | null;
            /** @description A custom field on the user profile (eight of ten) */
            custom_field_eight?: string | null;
            /** @description A custom field on the user profile (five of ten) */
            custom_field_five?: string | null;
            /** @description A custom field on the user profile (four of ten) */
            custom_field_four?: string | null;
            /** @description A custom field on the user profile (nine of ten) */
            custom_field_nine?: string | null;
            /** @description A custom field on the user profile (one of ten) */
            custom_field_one?: string | null;
            /** @description A custom field on the user profile (seven of ten) */
            custom_field_seven?: string | null;
            /** @description A custom field on the user profile (six of ten) */
            custom_field_six?: string | null;
            /** @description A custom field on the user profile (ten of ten) */
            custom_field_ten?: string | null;
            /** @description A custom field on the user profile (three of ten) */
            custom_field_three?: string | null;
            /** @description A custom field on the user profile (two of ten) */
            custom_field_two?: string | null;
            /** @description Set to true if the user is deceased. Allowed value: true, false. Defaults to false. */
            deceased?: boolean;
            /**
             * Format: date-time
             * @description The deceased date of the user. Use ISO-8601 date format: 2022-04-08.
             */
            deceased_date?: string | null;
            /**
             * Format: date-time
             * @description The birthday of a user
             */
            dob?: string;
            /** @description The email address of a user */
            email?: string | null;
            /** @description Set to true if email is usable. Allowed value: true, false. Defaults to true. */
            email_active?: boolean;
            /** @description The descriptor or ID of the ethnicity. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values. */
            ethnicity?: string | null;
            /** @description The first name of a user */
            first_name?: string | null;
            /** @description The gender of a user */
            gender?: string | null;
            /** @description The greeting of a user */
            greeting?: string | null;
            /** @description A list of languages the user speaks at home. Each entry is the description or ID of the language. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values. */
            home_languages?: components["schemas"]["HomeLanguageAdd"][] | null;
            /** @description The HostId of a user */
            host_id?: string | null;
            /** @description Whether the user is an international user. This will return: Yes, No, or No answer. */
            international?: string | null;
            /** @description Set to true if user is currently abroad. Allowed value: true, false. Defaults to false. */
            is_abroad?: boolean | null;
            /** @description Whether the user is Latino/Hispanic. Allowed values: Yes, No, or No answer. */
            latino_hispanic?: string | null;
            /** @description Set to true if user is a responsible signer. Allowed value: true, false. Defaults to false. */
            is_responsible_signer?: boolean;
            in_state?: components["schemas"]["UserInState"];
            /** @description The last name of a user */
            last_name?: string | null;
            /** @description The living status of a user. Valid values are Single, Married, Separated, Divorced, Widowed, Partner. */
            living_status?: string | null;
            locker?: components["schemas"]["UserLocker"];
            /** @description Set to true if user is set as lost */
            lost?: boolean;
            /** @description The maiden name of a user */
            maiden_name?: string | null;
            mailbox?: components["schemas"]["UserMailbox"];
            /** @description The middle name of a user */
            middle_name?: string | null;
            passport?: components["schemas"]["UserPassport"];
            /** @description The descriptor or ID of the language. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values. */
            primary_language?: string | null;
            /** @description The preferred name of the user */
            preferred_name?: string | null;
            /** @description The preferred last name of a user */
            preferred_lastname?: string | null;
            /** @description The prefix of a user */
            prefix?: string | null;
            /** @description The descriptor or ID of the pronouns. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values. */
            pronouns?: string | null;
            /** @description A list of races. Each entry is the description or ID of the race. Descriptions are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values. */
            races?: components["schemas"]["UserAddRace"][] | null;
            /** @description The descriptor or ID of the religion. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values. */
            religion?: string | null;
            /** @description The descriptor or ID of the school program. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values. */
            school_program?: string | null;
            /** @description The state assigned ID of the user */
            state_id?: string | null;
            /** @description The school assigned ID of the user */
            student_id?: string | null;
            /** @description The suffix of a user */
            suffix?: string | null;
            visa?: components["schemas"]["UserVisaAdd"];
        };
        /** @description RaceAdd Model */
        UserAddRace: {
            /** @description The ID or description of the race to be added to the user */
            race_type?: string | null;
        };
        /** @description UserAdminCustomField */
        UserAdminCustomField: {
            /**
             * Format: int32
             * @description User Id
             */
            id?: number | null;
            /** @description The first name of a user */
            first_name?: string | null;
            /** @description The last name of a user */
            last_name?: string | null;
            /** @description Preferred Name */
            preferred_name?: string | null;
            /** @description Custom Fields */
            custom_fields?: components["schemas"]["CustomAdminField"][] | null;
            /** @description Preferred Last Name */
            preferred_last_name?: string | null;
        };
        /** @description A Collection */
        UserAdminCustomFieldCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["UserAdminCustomField"][] | null;
        };
        /** @description Object that describes the custom field to be created */
        UserAdminCustomFieldCreate: {
            /**
             * Format: int32
             * @description The ID of the custom field to update. This value is returned from <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1CustomfieldsGet" target="_blank">Core custom fields</a>.
             */
            field_id?: number;
            /**
             * Format: int32
             * @description The ID of the data type of the custom field. This value is returned from <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1CustomfieldsGet" target="_blank">Core custom fields</a>.
             */
            data_type_id: number;
            /**
             * Format: int32
             * @description If the field format is Number, use this property for the value of the custom field. Values must be a whole number (positive or negative).<br />
             *     If the field format is Dropdown or Checkbox List, use this property for the value of the custom field. The value is the table value ID returned from <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1CustomfieldsGet" target="_blank">Core custom fields</a>.
             */
            int_value?: number | null;
            /** @description If the field format is Text input or Text paragraph, use this property for the value of the custom field. */
            text_value?: string | null;
            /**
             * Format: double
             * @description If the field format is Currency, use this property for the value of the custom field. Values must be between 0.00 and 99,999,999.99.
             */
            decimal_value?: number | null;
            /**
             * Format: date-time
             * @description If field format is Date, use this property for the value of the custom field. Values must be formatted YYYY/MM/DD.
             */
            date_value?: string | null;
            /** @description If field format is Yes/No or Checkbox, use this property for the value of the custom field. Values must be 'true" or 'false'. */
            bit_value?: boolean | null;
        };
        /** @description Object that describes the custom field to be created */
        UserAdminCustomFieldUpdate: {
            /** @description The id of that instance of the custom field for the specified user. This value is returned from <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1UsersCustomfieldsGet" target="_blank">Users custom fields by user</a>. */
            id?: string | null;
            /**
             * Format: int32
             * @description The ID of the custom field to update. This value is returned from <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1CustomfieldsGet" target="_blank">Core custom fields</a>.
             */
            field_id?: number;
            /**
             * Format: int32
             * @description The ID of the data type of the custom field. This value is returned from <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1CustomfieldsGet" target="_blank">Core custom fields</a>.
             */
            data_type_id?: number;
            /**
             * Format: int32
             * @description If the field format is Number, use this property for the value of the custom field. Values must be a whole number (positive or negative).<br />
             *     If the field format is Dropdown or Checkbox List, use this property for the value of the custom field. The value is the table value ID returned from <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1CustomfieldsGet" target="_blank">Core custom fields</a>.
             */
            int_value?: number | null;
            /** @description If the field format is Text input or Text paragraph, use this property for the value of the custom field. */
            text_value?: string | null;
            /**
             * Format: double
             * @description If the field format is Currency, use this property for the value of the custom field. Values must be between 0.00 and 99,999,999.99.
             */
            decimal_value?: number | null;
            /**
             * Format: date-time
             * @description If field format is Date, use this property for the value of the custom field. Values must be formatted YYYY/MM/DD.
             */
            date_value?: string | null;
            /** @description If field format is Yes/No or Checkbox, use this property for the value of the custom field. Values must be 'true" or 'false'. */
            bit_value?: boolean | null;
        };
        UserAreaOfStudyReferenceOutputModel: {
            /** Format: int32 */
            id?: number | null;
            /** Format: date-time */
            declared_on?: string | null;
            /** Format: int32 */
            area_of_study_id?: number | null;
            requirement_set?: components["schemas"]["UserMajorMinorConcentrationOutputModel"];
            concentrations?: components["schemas"]["UserAreaOfStudyReferenceOutputModel"];
        };
        /** @description Contains the audit information for a single field */
        UserAuditRead: {
            /** @description Field changed */
            field_name?: string | null;
            /**
             * Format: date-time
             * @description Date of the change event
             */
            change_date?: string | null;
            /** @description Value before the change */
            value_before?: string | null;
            /** @description Value after the change */
            value_after?: string | null;
            /**
             * Format: int32
             * @description Identifier of the user impacted by this change
             */
            user_id?: number | null;
        };
        /** @description A Collection */
        UserAuditReadCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["UserAuditRead"][] | null;
        };
        /** @description UserBaseRead Model */
        UserBaseRead: {
            /**
             * Format: int32
             * @description The ID associated with a user
             */
            id?: number | null;
            /** @description The email address of a user */
            email?: string | null;
            /** @description The first name of a user */
            first_name?: string | null;
            /** @description The last name of a user */
            last_name?: string | null;
            /** @description The maiden name of a user */
            maiden_name?: string | null;
            /** @description The middle name of a user */
            middle_name?: string | null;
            /** @description The nickname of a user */
            preferred_name?: string | null;
            /** @description The preferred last name of a user */
            preferred_last_name?: string | null;
            /** @description The prefix of a user */
            prefix?: string | null;
            /** @description The suffix of a user */
            suffix?: string | null;
        };
        /** @description User base read model */
        UserBaseReadModel: {
            /**
             * Format: int32
             * @description The user ID of the user
             */
            Id?: number | null;
            /** @description The first name of the user */
            FirstName?: string | null;
            /** @description The last name of the user */
            LastName?: string | null;
            /** @description The email of the user */
            Email?: string | null;
        };
        /** @description User Defined Table */
        UserDefinedTable: {
            /** Format: int32 */
            table_id?: number | null;
            table_name?: string | null;
            use_abbreviations?: boolean | null;
            in_use?: boolean | null;
            base_table?: boolean | null;
            system_table?: boolean | null;
            require_abbreviation?: boolean | null;
            modify_user?: string | null;
            /** Format: int32 */
            vendor_id?: number | null;
            values?: components["schemas"]["UserDefinedTableValue"][] | null;
        };
        /** @description User Defined Table Values */
        UserDefinedTableValue: {
            /** Format: int32 */
            table_id?: number | null;
            /** Format: int32 */
            table_value_id?: number | null;
            value_name?: string | null;
            value_abbreviation?: string | null;
            in_use?: boolean | null;
            active?: boolean | null;
            /** Format: int32 */
            sort?: number | null;
            /** Format: int32 */
            base_table_value_id?: number | null;
            base_value?: boolean | null;
        };
        UserDegreeOutputModel: {
            /**
             * Format: int32
             * @description The Id of the user for whom this data belongs
             */
            user_id?: number;
            first_name?: string | null;
            last_name?: string | null;
            preferred_name?: string | null;
            /** @description The list of degrees for the user */
            student_degrees?: components["schemas"]["DegreeOutputModel"][] | null;
        };
        /** @description A Collection */
        UserDegreeOutputModelCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["UserDegreeOutputModel"][] | null;
        };
        /** @description UserEdit Model */
        UserEdit: {
            /** @description The affiliation of a user */
            affiliation?: string | null;
            /** @description The birthplace of the user */
            birth_place?: string | null;
            /** @description The boarding or day status. Accepted values: boarding, day, "B" and "D" */
            boarding_or_day?: string | null;
            /** @description The cc email address of a user */
            cc_email?: string | null;
            /** @description The descriptor or ID of the citizenship. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values. */
            citizenship?: string | null;
            /** @description A custom field on the user profile (one of ten) */
            custom_field_one?: string | null;
            /** @description A custom field on the user profile (two of ten) */
            custom_field_two?: string | null;
            /** @description A custom field on the user profile (three of ten) */
            custom_field_three?: string | null;
            /** @description A custom field on the user profile (four of ten) */
            custom_field_four?: string | null;
            /** @description A custom field on the user profile (five of ten) */
            custom_field_five?: string | null;
            /** @description A custom field on the user profile (six of ten) */
            custom_field_six?: string | null;
            /** @description A custom field on the user profile (seven of ten) */
            custom_field_seven?: string | null;
            /** @description A custom field on the user profile (eight of ten) */
            custom_field_eight?: string | null;
            /** @description A custom field on the user profile (nine of ten) */
            custom_field_nine?: string | null;
            /** @description A custom field on the user profile (ten of ten) */
            custom_field_ten?: string | null;
            /** @description Set to true if the user is deceased. Allowed value: true, false. Defaults to false. */
            deceased?: boolean;
            /**
             * Format: date-time
             * @description The deceased date of the user. Use ISO-8601 date format: 2022-04-08.
             */
            deceased_date?: string | null;
            /**
             * Format: date-time
             * @description The birthday of a user
             */
            dob?: string;
            /** @description The email address of a user */
            email?: string | null;
            /** @description Set to true if email is usable. Allowed value: true, false. Defaults to true. */
            email_active?: boolean;
            /** @description The descriptor or ID of the ethnicity. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values. */
            ethnicity?: string | null;
            /** @description The first name of a user */
            first_name?: string | null;
            /** @description The gender of a user */
            gender?: string | null;
            /** @description The greeting of a user */
            greeting?: string | null;
            /** @description A list of languages. Each entry is the descriptor or ID of the language. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values. */
            home_languages?: components["schemas"]["HomeLanguageAdd"][] | null;
            /** @description The HostId of a user */
            host_id?: string | null;
            /**
             * Format: int32
             * @description The ID associated with a user
             */
            id?: number;
            /** @description Whether the user is an international user. This will return: Yes, No, or No answer. */
            international?: string | null;
            /** @description Set to true if user is currently abroad. Allowed value: true, false. Defaults to false. */
            is_abroad?: boolean | null;
            /** @description Whether the user is Latino/Hispanic. Allowed values: Yes, No, or No answer. */
            latino_hispanic?: string | null;
            /** @description Set to true if user is a responsible signer. Allowed value: true, false. Defaults to false. */
            is_responsible_signer?: boolean;
            in_state?: components["schemas"]["UserInState"];
            /** @description The last name of a user */
            last_name?: string | null;
            /** @description The living status of a user. Valid values are Single, Married, Separated, Divorced, Widowed, Partner. */
            living_status?: string | null;
            locker?: components["schemas"]["UserLocker"];
            /** @description Set to true to mark user as being lost */
            lost?: boolean;
            /** @description The maiden name of a user */
            maiden_name?: string | null;
            mailbox?: components["schemas"]["UserMailbox"];
            /** @description The middle name of a user */
            middle_name?: string | null;
            /** @description The nickname of a user
             *     <b>This field will be deprecated after 90 days.</b> */
            nick_name?: string | null;
            passport?: components["schemas"]["UserPassport"];
            /** @description The descriptor or ID of the language. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values. */
            primary_language?: string | null;
            /** @description The preferred name of the user */
            preferred_name?: string | null;
            /** @description The preferred last name of a user */
            preferred_lastname?: string | null;
            /** @description The prefix of a user */
            prefix?: string | null;
            /** @description The descriptor or ID of the pronouns. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values. */
            pronouns?: string | null;
            /** @description A list of races. Each entry is the descriptor or ID of the race. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values. */
            races?: components["schemas"]["UserAddRace"][] | null;
            /** @description The descriptor or ID of the religion. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values. */
            religion?: string | null;
            /** @description The descriptor or ID of the school program. Descriptors are not case sensitive, but otherwise must match the table value exactly. These values are returned by GET Types table values. */
            school_program?: string | null;
            /** @description The state assigned ID of the user */
            state_id?: string | null;
            /** @description The school assigned ID of the user */
            student_id?: string | null;
            /** @description The suffix of a user */
            suffix?: string | null;
            visa?: components["schemas"]["UserVisaAdd"];
            /** @description An array of strings representing field names.
             *     Due to an inherent check against deleting data only accessible through the UI, this unusual step is necessary. To delete or clear data from a user field (such as middle_name or living_status), you must include the field in this array. If a field is included in this array, the data for that field will be deleted and this will override any other value set for the field in the request body. Only fields that can be cleared will be processed. Any required fields, Booleans or fields with no blank option will be ignored.
             *     Allowed values: The field name as listed for the request body (e.g. "middle_name" or "living_status"). Fields within an object will include the object name and the field name separated by a period (e.g. "passport.number" or "locker.number"). */
            fields_to_delete?: string[] | null;
        };
        /** @description UserEmployment Model */
        UserEmployment: {
            user?: components["schemas"]["UserBaseRead"];
            /**
             * Format: date-time
             * @description The tenure start date
             */
            date_appointed?: string | null;
            /**
             * Format: date-time
             * @description The tenure end date
             */
            date_departed?: string | null;
            /** @description True if the user’s account will be disabled upon withdrawal. */
            disable_account?: boolean;
            /** @description An array of the user’s faculty roles */
            roles?: components["schemas"]["EmployeeRolesInfoModel"][] | null;
            /** @description An array of the user’s school levels */
            school_levels?: components["schemas"]["IdDescriptorField"][] | null;
            /** @description An object with employee department information */
            departments?: components["schemas"]["EmployeeDepartmentsInfoModel"][] | null;
            /** @description An array of the user’s grade levels */
            grade_levels?: components["schemas"]["IdDescriptorField"][] | null;
            /** @description An array of the user’s employee sports by school level */
            sports?: components["schemas"]["IdDescriptorField"][] | null;
        };
        /** @description A Collection */
        UserEmploymentCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["UserEmployment"][] | null;
        };
        /** @description UserEmploymentUpdate Model */
        UserEmploymentUpdate: {
            /**
             * Format: date-time
             * @description The tenure start date
             */
            date_appointed?: string | null;
            /**
             * Format: date-time
             * @description The tenure end date. Note: this field will be overwritten by the withdrawal date if the effective withdrawal date is a future date.
             */
            date_departed?: string | null;
            /**
             * Format: date-time
             * @description The date and time these updates will take effect. If this field is blank or if prior to the current date and time, the changes will take effect immediately.
             *     If the date is in the future, all changes will be marked Pending until the effective date passes.
             */
            employment_effective_date?: string | null;
            /**
             * Format: date-time
             * @description The date and time the employee’s withdrawal will take effect. If this field is prior to the current date and time, the withdrawal will take effect immediately.
             *     If the date is in the future, the withdrawal will be marked Pending until the effective date passes.
             */
            withdraw_effective_date?: string | null;
            /** @description Set to true to disable the account upon withdrawal */
            disable_account?: boolean | null;
            /** @description An array of faculty role IDs. If this property is included, the existing employee roles will be overwritten with the included list. This includes removing ones not included. */
            employee_roles?: number[] | null;
            /** @description An array of the school level IDs. If this property is included, the existing employee school levels will be overwritten with the included list. This includes removing ones not included. */
            school_levels?: number[] | null;
            /** @description An array of employee department objects. If this property is included, the existing employee departments will be overwritten with the included list. This includes removing ones not included. */
            employee_departments?: components["schemas"]["EmployeeDepartmentsEditModel"][] | null;
            /** @description An array of grade level IDs. If this property is included, the existing employee grade levels will be overwritten with the included list. This includes removing ones not included. */
            grade_levels?: number[] | null;
            /** @description An array of sport IDs. If this property is included, the existing employee sports will be overwritten with the included list. This includes removing ones not included. */
            employee_sports?: number[] | null;
        };
        /** @description User Enrollment */
        UserEnrollment: {
            /**
             * Format: int32
             * @description The id of the user
             */
            user_id?: number | null;
            /** @description The first name of the user */
            firstname?: string | null;
            /** @description The last name of the user */
            lastname?: string | null;
            /** @description The preferred name of the user */
            preferred_name?: string | null;
            /** @description The formatted name of the user */
            name?: string | null;
            /** @description The school year the user is enrolled in */
            school_year?: string | null;
            school_level?: components["schemas"]["Level"];
            grade_level?: components["schemas"]["GradeLevel"];
            /** @description Returns true if the user repeated this enrollment */
            repeated?: boolean | null;
            /** @description Returns true if the user graduated after completing this enrollment year */
            graduated?: boolean | null;
            /**
             * Format: date-time
             * @description The date the enrollment begins
             */
            enroll_date?: string | null;
            /**
             * Format: date-time
             * @description The date the user departed the school year, ending the enrollment
             */
            depart_date?: string | null;
            /** @description The reason the user departed the school */
            depart_reason?: string | null;
            /** @description The name of the session, if a session is attached to the enrollment */
            session?: string | null;
            /** @description The preferred last name of the user */
            preferred_last_name?: string | null;
        };
        /** @description A Collection */
        UserEnrollmentCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["UserEnrollment"][] | null;
        };
        UserEnrollmentCreate: {
            /**
             * Format: int32
             * @description ID of the individual to be enrolled
             */
            user_id?: number;
            /**
             * Format: int32
             * @description ID of the grade the individual is enrolling in
             */
            grade_level_id: number;
            /**
             * Format: int32
             * @description ID of the school level
             */
            school_level_id?: number;
            /** @description School Year individual is enrolling in.  Defaults to the current school year. */
            school_year_label?: string | null;
            /**
             * Format: date-time
             * @description Date of the enrollment
             */
            enroll_date: string;
            /**
             * Format: date-time
             * @description Date departed
             */
            depart_date?: string | null;
            /** @description Toggles current year */
            current_year?: boolean;
            /** @description Toggles has grades */
            has_grades?: boolean;
            /** @description Toggles grade repeated */
            grade_repeated?: boolean;
            /** @description Toggles graduated */
            graduated?: boolean;
            /** @description Toggles allow edit */
            allow_edit?: boolean;
            /** @description Toggles allow delete */
            allow_delete?: boolean;
            /** @description Toggles future enrollments */
            future_enrollments?: boolean;
            /**
             * Format: int32
             * @description The Id of the duration the user should be enrolled in. Optional for all Education Enrollments.
             */
            duration_id?: number;
            /**
             * Format: int32
             * @description The Id of the session the user should be enrolled in. Required for Higher Education Enrollments.
             */
            session_id?: number;
            /** @description Collection of RoleIds the individual should be associated to */
            role_ids: number[];
        };
        UserEnrollmentResponse: {
            /**
             * Format: int32
             * @description The user Id that was enrolled
             */
            id?: number;
            /** @description The enrollment message */
            message?: string | null;
        };
        /** @description UserExtended Model */
        UserExtended: {
            /**
             * Format: int32
             * @description The ID associated with a user
             */
            id?: number;
            /** @description List of the user addresses */
            addresses?: components["schemas"]["AddressExRead"][] | null;
            /** @description Returns true if the current user is abroad */
            abroad?: boolean;
            /** @description The affiliation in the user profile */
            affiliation?: string | null;
            /**
             * Format: date-time
             * @description The audit date from a user profile; Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            audit_date?: string | null;
            /**
             * Format: date-time
             * @description The birth date in the user profile; Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            birth_date?: string | null;
            /** @description The birth place in the user profile */
            birth_place?: string | null;
            /** @description The 'Boarding Or Day' status of the user. 'B' for boarding and 'D' for day, or will be a blank string if not set. */
            boarding_or_day?: string | null;
            /** @description Returns true if the users carbon copy email is active */
            cc_email_active?: boolean;
            /** @description The chat service in the user profile */
            chat_service?: string | null;
            /** @description The citizenship field in the user profile */
            citizenship?: string | null;
            /**
             * Format: date-time
             * @description The created date in the user profile
             */
            created_date?: string | null;
            /** @description A custom field on the user profile (eight of ten) */
            custom_field_eight?: string | null;
            /** @description A custom field on the user profile (five of ten) */
            custom_field_five?: string | null;
            /** @description A custom field on the user profile (four of ten) */
            custom_field_four?: string | null;
            /** @description A custom field on the user profile (nine of ten) */
            custom_field_nine?: string | null;
            /** @description A custom feild on the user profile (one of ten) */
            custom_field_one?: string | null;
            /** @description A custom field on the user profile (seven of ten) */
            custom_field_seven?: string | null;
            /** @description A custom field on the user profile (six of ten) */
            custom_field_six?: string | null;
            /** @description A custom field on the user profile (ten of ten) */
            custom_field_ten?: string | null;
            /** @description A custom field on the user profile (three of ten) */
            custom_field_three?: string | null;
            /** @description A custom field on the user profile (two of ten) */
            custom_field_two?: string | null;
            /** @description Set to true if the user is deceased. Allowed value: true, false. Defaults to false. */
            deceased?: boolean;
            /**
             * Format: date-time
             * @description The deceased date in the user profile; Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            deceased_date?: string | null;
            /**
             * Format: date-time
             * @description The depart date from a user profile; Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            depart_date?: string | null;
            /** @description Display name field generated from first name, last name, preferred name, and grad year (read only) */
            display?: string | null;
            /** @description List of the user educational institutions */
            education?: components["schemas"]["EducationRead"][] | null;
            /** @description The email address of a user */
            email?: string | null;
            /** @description The cc email address of a user */
            cc_email?: string | null;
            /** @description Returns true if the users e-mail is ok to send to */
            email_active?: boolean;
            /**
             * Format: date-time
             * @description The enroll date from a user profile. Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            enroll_date?: string | null;
            /** @description The ethnicity field from a user profile */
            ethnicity?: string | null;
            /** @description The first name of a user */
            first_name?: string | null;
            /** @description The gender of the user */
            gender?: string | null;
            /** @description The gender description of the user */
            gender_description?: string | null;
            /** @description The greeting in the user profile */
            greeting?: string | null;
            /** @description The hostId in the user profile */
            host_id?: string | null;
            /** @description List of user home languages */
            home_languages?: components["schemas"]["HomeLanguageRead"][] | null;
            /** @description The isresponsiblesigner in the user profile */
            is_responsible_signer?: boolean;
            in_state?: components["schemas"]["UserInState"];
            /** @description The value the user has selected for Is International. This will return: Yes, No, or No answer. */
            international?: string | null;
            /**
             * Format: date-time
             * @description The last modified date in the user profile
             */
            last_modified_date?: string | null;
            /** @description The last name of a user */
            last_name?: string | null;
            /**
             * Format: date-time
             * @description The last sync date of a user profile; Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            last_sync_date?: string | null;
            /** @description The value the user has selected for Is Latino Hispanic. This will return: Yes, No, or No answer. */
            latino_hispanic?: string | null;
            /** @description The last sync date of a user profile */
            legacy_user_name?: string | null;
            /** @description The living arrangement in the user profile */
            living_arrangement?: string | null;
            /** @description Returns true if lost is selected under sensitive information in a personal profile (read only) */
            lost?: boolean;
            locker?: components["schemas"]["UserLocker"];
            /** @description The maiden name of a user */
            maiden_name?: string | null;
            mailbox?: components["schemas"]["UserMailbox"];
            /** @description The middle name of a user */
            middle_name?: string | null;
            /** @description The misc bio from the user profile */
            misc_bio?: string | null;
            /** @description The nickname of a user
             *     <b>This field will be deprecated after 90 days.</b> */
            nick_name?: string | null;
            /** @description List of the users occupations */
            occupations?: components["schemas"]["OccupationRead"][] | null;
            passport?: components["schemas"]["UserPassport"];
            /** @description The personal bio from the user profile */
            personal_bio?: string | null;
            /** @description The personal website in the user profile */
            personal_website?: string | null;
            /** @description List of the user phone numbers */
            phones?: components["schemas"]["PhoneRead"][] | null;
            /** @description The prefix of a user */
            prefix?: string | null;
            /** @description The preferred name of the user */
            preferred_name?: string | null;
            /** @description The primary language for the user profile. */
            primary_language?: string | null;
            profile_photo?: components["schemas"]["UserProfilePhoto"];
            /** @description The profile url for a user profile */
            profile_url?: string | null;
            /** @description The pronouns of the user. */
            pronouns?: string | null;
            /** @description The public bio of the user. */
            public_bio?: string | null;
            /** @description List of the races object for the user profile. */
            races?: components["schemas"]["RaceRead"][] | null;
            /** @description List of the user relationships */
            relationships?: components["schemas"]["RelationshipRead"][] | null;
            /** @description The religion field from a user profile */
            religion?: string | null;
            /**
             * Format: date-time
             * @description The retire date in the user profile; Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            retire_date?: string | null;
            /** @description List of the user roles */
            roles?: components["schemas"]["Role"][] | null;
            /** @description The screen name in the user profile */
            screen_name?: string | null;
            /** @description The school program of the user */
            school_program?: string | null;
            /** @description The state id of the user */
            state_id?: string | null;
            /** @description Student ID */
            student_id?: string | null;
            student_info?: components["schemas"]["StudentInfo"];
            /** @description The suffix of a user */
            suffix?: string | null;
            /** @description The username used to access the system */
            username?: string | null;
            visa?: components["schemas"]["UserVisa"];
            /** @description The preferred last name of a user */
            preferred_last_name?: string | null;
        };
        /** @description A Collection */
        UserExtendedCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["UserExtended"][] | null;
        };
        /** @description An object for in-state resident information */
        UserInState: {
            /** @description The value the user has selected for In-State Resident. Allowed values: Yes, No, or No answer. */
            resident?: string | null;
            /** @description The county of residence of the user. */
            county?: string | null;
            /**
             * Format: date-time
             * @description The date the user has resided in the county of residence. Use ISO-8601 date format: 2022-04-21.
             */
            from_date?: string | null;
        };
        /** @description An object for locker information */
        UserLocker: {
            /** @description The locker number of the user. */
            number?: string | null;
            /** @description The locker combination of the user. */
            combo?: string | null;
        };
        /** @description An object for mailbox information */
        UserMailbox: {
            /** @description The mailbox number of the user. */
            number?: string | null;
            /** @description The mailbox combination of the user. */
            combo?: string | null;
        };
        UserMajorMinorConcentrationOutputModel: {
            /**
             * Format: int32
             * @description The Id of the user for whom this data belongs
             */
            id?: number | null;
            /** Format: int32 */
            parent_id?: number | null;
            major?: components["schemas"]["Major"];
            minor?: components["schemas"]["Minor"];
            concentration?: components["schemas"]["Concentration"];
            cip_prefix?: string | null;
            cip_suffix?: string | null;
        };
        UserMe: {
            /**
             * Format: int32
             * @description User Id
             */
            id?: number;
            /** @description Preferred Name */
            preferred_name?: string | null;
            /** @description Is Student */
            is_student?: boolean;
            /** @description Is Parent */
            is_parent?: boolean;
            /** @description Is faculty */
            is_faculty?: boolean;
            /** @description The first name of a user */
            first_name?: string | null;
            /** @description The last name of a user */
            last_name?: string | null;
            /** @description The suffix of a user */
            suffix?: string | null;
            /** @description The current users list of roles */
            roles?: components["schemas"]["Role"][] | null;
        };
        /** @description An object for passport information */
        UserPassport: {
            /** @description The passport number of the user. */
            number?: string | null;
            /**
             * Format: date-time
             * @description The passport expiry date. Use ISO-8601 date format: 2022-04-21.
             */
            expire_date?: string | null;
        };
        /** @description profile photo object */
        UserProfilePhoto: {
            /** @description The photo url of the user. */
            photo_url?: string | null;
            /** @description The thumbnail url of the user. */
            thumbnail_url?: string | null;
        };
        /** @description UserRead Model */
        UserRead: {
            /**
             * Format: int32
             * @description The ID associated with a user
             */
            id?: number;
            /** @description The affiliation of a user */
            affiliation?: string | null;
            /** @description A custom field on the user profile (eight of ten) */
            custom_field_eight?: string | null;
            /** @description A custom field on the user profile (five of ten) */
            custom_field_five?: string | null;
            /** @description A custom field on the user profile (four of ten) */
            custom_field_four?: string | null;
            /** @description A custom field on the user profile (nine of ten) */
            custom_field_nine?: string | null;
            /** @description A custom field on the user profile (one of ten) */
            custom_field_one?: string | null;
            /** @description A custom field on the user profile (seven of ten) */
            custom_field_seven?: string | null;
            /** @description A custom field on the user profile (six of ten) */
            custom_field_six?: string | null;
            /** @description A custom field on the user profile (ten of ten) */
            custom_field_ten?: string | null;
            /** @description A custom field on the user profile (three of ten) */
            custom_field_three?: string | null;
            /** @description A custom field on the user profile (two of ten) */
            custom_field_two?: string | null;
            /** @description Returns true if deceased is selected under sensitive information in a personal profile ex: {last_name} {suffix*}, {first_name} {(maidenname*}) {grad_year*} *If not populated fields will not appear (read only) */
            deceased?: boolean;
            /** @description Display name field generated from first name, last name, nickname, and grad year (read only) */
            display?: string | null;
            /** @description The email address of a user */
            email?: string | null;
            /** @description Returns true if the users e-mail is ok to send to */
            email_active?: boolean;
            /** @description The first name of a user */
            first_name?: string | null;
            /** @description The gender of a user */
            gender?: string | null;
            /** @description The gender of a user */
            gender_description?: string | null;
            /** @description The greeting of a user */
            greeting?: string | null;
            /** @description The HostId of a user */
            host_id?: string | null;
            /** @description The last name of a user */
            last_name?: string | null;
            /** @description Returns true if lost is selected under sensitive information in a personal profile (read only) */
            lost?: boolean;
            /** @description The maiden name of a user */
            maiden_name?: string | null;
            /** @description The middle name of a user */
            middle_name?: string | null;
            /** @description The nickname of a user
             *     <b>This field will be deprecated after 90 days.</b> */
            nick_name?: string | null;
            /** @description The preferred name of the user */
            preferred_name?: string | null;
            /** @description The preferred last name of the user */
            preferred_last_name?: string | null;
            /**
             * Format: date-time
             * @description Users date of birth
             */
            dob?: string | null;
            /** @description The prefix of a user */
            prefix?: string | null;
            /** @description The suffix of a user */
            suffix?: string | null;
            profile_pictures?: components["schemas"]["ProfilePictureUrls"];
            /** @description List of languages spoken at home by the user */
            home_languages?: components["schemas"]["HomeLanguageRead"][] | null;
        };
        /** @description A Collection */
        UserReadCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["UserRead"][] | null;
        };
        /** @description An object for visa information */
        UserVisa: {
            /** @description The number of the user visa. */
            number?: string | null;
            status?: components["schemas"]["IdDescriptorField"];
            type?: components["schemas"]["IdDescriptorField"];
            /**
             * Format: date-time
             * @description The issue date of the user visa.
             */
            issue_date?: string | null;
            /**
             * Format: date-time
             * @description The expire date of the user visa.
             */
            expire_date?: string | null;
        };
        /** @description An object for visa information */
        UserVisaAdd: {
            /** @description The visa number of the user. */
            number?: string | null;
            /** @description The descriptor or ID of the visa status. Descriptors are not case sensitive, but otherwise must match the table value exactly. */
            status?: string | null;
            /** @description The descriptor or ID of the visa type. Descriptors are not case sensitive, but otherwise must match the table value exactly. */
            type?: string | null;
            /**
             * Format: date-time
             * @description The visa issue date. Use ISO-8601 date format: 2022-04-21.
             */
            issue_date?: string | null;
            /**
             * Format: date-time
             * @description The visa expiry date. Use ISO-8601 date format: 2022-04-21.
             */
            expire_date?: string | null;
        };
        /** @description An object with school year information */
        Year: {
            /**
             * Format: int32
             * @description The ID of a school year
             */
            id?: number | null;
            /**
             * Format: date-time
             * @description The begin date in a school year date range. Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            begin_date?: string | null;
            /** @description Returns True if Current Year is enabled for the respective school year */
            current_year?: boolean | null;
            /**
             * Format: date-time
             * @description The end date in a school year date range. Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            end_date?: string | null;
            /** @description Gets or sets the published flag */
            published?: boolean | null;
            /** @description The label used to identify the range of dates in a school year */
            school_year_label?: string | null;
            /**
             * Format: date-time
             * @description The begin billing year date in a school year date range. Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            begin_billing_year_date?: string | null;
            /**
             * Format: date-time
             * @description The end billing year date in a school year date range. Uses <a href="https://tools.ietf.org/html/rfc3339" target="_blank">ISO-8601</a> (24H) format: 2003-04-21T10:29:43
             */
            end_billing_year_date?: string | null;
        };
        /** @description A Collection */
        YearCollection: {
            /**
             * Format: int32
             * @description The number of items in the collection
             */
            readonly count?: number;
            /** @description For paginated responses, the URI for the next page of results */
            next_link?: string | null;
            /** @description The set of items included in the response. This may be a subset of the items in the collection */
            value?: components["schemas"]["Year"][] | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    v1rolesget: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleCollection"];
                };
            };
        };
    };
    v1yearsget: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["YearCollection"];
                };
            };
        };
    };
    v1levelsget: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LevelCollection"];
                };
            };
        };
    };
    v1gradelevelsget: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GradeLevelCollection"];
                };
            };
        };
    };
    v1offeringtypesget: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OfferingTypeCollection"];
                };
            };
        };
    };
    v1termsget: {
        parameters: {
            query?: {
                /** @description The school year to get terms for. Defaults to the current school year. */
                school_year?: string;
                /** @description Format - int32. The offering type to filter terms by. */
                offering_type?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TermCollection"];
                };
            };
        };
    };
    v1usersget: {
        parameters: {
            query: {
                /** @description Comma-delimited list of role IDs to get users for. */
                roles: string;
                /** @description Filter results by first name. */
                first_name?: string;
                /** @description Filter results by last name. */
                last_name?: string;
                /** @description Filter results by e-mail. */
                email?: string;
                /** @description Filter results by maiden name. */
                maiden_name?: string;
                /** @description The beginning date in a school year (ex. 2017). */
                grad_year?: string;
                /** @description The end date in a school year (ex. 2018). Enter a grad_year and end_grad_year to find matching results in the date range. */
                end_grad_year?: string;
                /** @description Format - int32. The record number start at to return the next batch of data. */
                marker?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserReadCollection"];
                };
            };
        };
    };
    V1UsersPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The user to be created */
        requestBody?: {
            content: {
                /** @example {
                 *       "affiliation": "Test Affiliation",
                 *       "birth_place": "USA",
                 *       "boarding_or_day": "B",
                 *       "cc_email": "example@example.com",
                 *       "citizenship": "United States",
                 *       "custom_field_eight": "custom value",
                 *       "custom_field_five": "custom value",
                 *       "custom_field_four": "custom value",
                 *       "custom_field_nine": "custom value",
                 *       "custom_field_one": "custom value",
                 *       "custom_field_seven": "custom value",
                 *       "custom_field_six": "custom value",
                 *       "custom_field_ten": "custom value",
                 *       "custom_field_three": "custom value",
                 *       "custom_field_two": "custom value",
                 *       "deceased": false,
                 *       "dob": "1987-02-14T12:00:00.0000000+00:00",
                 *       "email": "example@example.com",
                 *       "email_active": true,
                 *       "ethnicity": "Latin American",
                 *       "first_name": "John",
                 *       "gender": "Male",
                 *       "greeting": "",
                 *       "home_languages": [
                 *         {
                 *           "language": "German"
                 *         },
                 *         {
                 *           "language": "5997"
                 *         }
                 *       ],
                 *       "host_id": "example-host-id",
                 *       "international": "Yes",
                 *       "is_abroad": true,
                 *       "latino_hispanic": "No",
                 *       "is_responsible_signer": true,
                 *       "in_state": {
                 *         "resident": "Yes",
                 *         "county": "Merrimack",
                 *         "from_date": "1987-02-14T12:00:00.0000000+00:00"
                 *       },
                 *       "last_name": "Smith",
                 *       "living_status": "Single",
                 *       "locker": {
                 *         "number": "123",
                 *         "combo": ""
                 *       },
                 *       "lost": false,
                 *       "maiden_name": "",
                 *       "mailbox": {
                 *         "number": "222",
                 *         "combo": ""
                 *       },
                 *       "middle_name": "Nolan",
                 *       "passport": {
                 *         "number": "HG2345T",
                 *         "expire_date": "2035-09-29T12:00:00.0000000+00:00"
                 *       },
                 *       "primary_language": "English",
                 *       "preferred_name": "Jonny",
                 *       "preferred_lastname": "Smith",
                 *       "prefix": "Mr.",
                 *       "pronouns": "(He/Him/His)",
                 *       "races": [
                 *         {
                 *           "race_type": "American Indian or Alaska Native"
                 *         },
                 *         {
                 *           "race_type": "1430"
                 *         }
                 *       ],
                 *       "religion": "Christian",
                 *       "school_program": "Ninja squad",
                 *       "state_id": "",
                 *       "student_id": "",
                 *       "suffix": "III",
                 *       "visa": {
                 *         "number": "12345678",
                 *         "status": "Current",
                 *         "type": "Student",
                 *         "issue_date": "2020-09-14T12:00:00.0000000+00:00",
                 *         "expire_date": "2025-09-28T12:00:00.0000000+00:00"
                 *       }
                 *     } */
                "application/json": components["schemas"]["UserAdd"];
            };
        };
        responses: {
            /** @description ID of the user just created. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1UsersPatch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User information to be updated */
        requestBody?: {
            content: {
                /** @example {
                 *       "affiliation": "Test Affiliation",
                 *       "birth_place": "USA",
                 *       "boarding_or_day": "B",
                 *       "cc_email": "example@example.com",
                 *       "citizenship": "United States",
                 *       "custom_field_one": "custom value",
                 *       "custom_field_two": "custom value",
                 *       "custom_field_three": "custom value",
                 *       "custom_field_four": "custom value",
                 *       "custom_field_five": "custom value",
                 *       "custom_field_six": "custom value",
                 *       "custom_field_seven": "custom value",
                 *       "custom_field_eight": "custom value",
                 *       "custom_field_nine": "custom value",
                 *       "custom_field_ten": "custom value",
                 *       "custom_field_10": "custom value",
                 *       "custom_field_3": "custom value",
                 *       "custom_field_2": "custom value",
                 *       "custom_field_1": "custom value",
                 *       "custom_field_4": "custom value",
                 *       "custom_field_5": "custom value",
                 *       "custom_field_6": "custom value",
                 *       "custom_field_7": "custom value",
                 *       "custom_field_8": "custom value",
                 *       "custom_field_9": "custom value",
                 *       "deceased": false,
                 *       "dob": "1987-02-14T12:00:00.0000000+00:00",
                 *       "email": "example@example.com",
                 *       "email_active": true,
                 *       "ethnicity": "Latin American",
                 *       "first_name": "John",
                 *       "gender": "Male",
                 *       "greeting": "",
                 *       "home_languages": [
                 *         {
                 *           "language": "German"
                 *         },
                 *         {
                 *           "language": "5997"
                 *         }
                 *       ],
                 *       "host_id": "example-host-id",
                 *       "id": 1,
                 *       "international": "Yes",
                 *       "is_abroad": true,
                 *       "latino_hispanic": "Yes",
                 *       "is_responsible_signer": true,
                 *       "in_state": {
                 *         "resident": "Yes",
                 *         "county": "Merrimack",
                 *         "from_date": "1987-02-14T12:00:00.0000000+00:00"
                 *       },
                 *       "last_name": "Smith",
                 *       "living_status": "Single",
                 *       "locker": {
                 *         "number": "123",
                 *         "combo": ""
                 *       },
                 *       "lost": false,
                 *       "maiden_name": "",
                 *       "mailbox": {
                 *         "number": "222",
                 *         "combo": ""
                 *       },
                 *       "middle_name": "Nolan",
                 *       "passport": {
                 *         "number": "HG2345T",
                 *         "expire_date": "2035-09-29T12:00:00.0000000+00:00"
                 *       },
                 *       "primary_language": "English",
                 *       "preferred_name": "Jonny",
                 *       "preferred_lastname": "Smith",
                 *       "prefix": "Mr.",
                 *       "pronouns": "(He/Him/His)",
                 *       "races": [
                 *         {
                 *           "race_type": "American Indian or Alaska Native"
                 *         },
                 *         {
                 *           "race_type": "1430"
                 *         }
                 *       ],
                 *       "religion": "Christian",
                 *       "school_program": "Ninja squad",
                 *       "state_id": "",
                 *       "student_id": "",
                 *       "suffix": "III",
                 *       "visa": {
                 *         "number": "12345678",
                 *         "status": "Current",
                 *         "type": "Student",
                 *         "issue_date": "2020-09-14T12:00:00.0000000+00:00",
                 *         "expire_date": "2025-09-28T12:00:00.0000000+00:00"
                 *       },
                 *       "fields_to_delete": [
                 *         "middle_name",
                 *         "locker.number",
                 *         "visa.number"
                 *       ]
                 *     } */
                "application/json": components["schemas"]["UserEdit"];
            };
        };
        responses: {
            /** @description ID of the user just updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1AcademicsSectionsGet: {
        parameters: {
            query: {
                /** @description Format - int32. Level number. */
                level_num: number;
                /** @description The school year to get sections for. Corresponds to ```school_year_label``` in the <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget">Year list</a>. Defaults to the current school year. */
                school_year?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AcademicsSectionCollection"];
                };
            };
        };
    };
    V1AcademicsSectionsBySection_idAssignmentsGet: {
        parameters: {
            query?: {
                /** @description Returns results that match a comma separated list of assignment type IDs. */
                types?: string;
                /** @description The status of the assignment. The status corresponds with static system options. Allowed values: "0" for In Progress, "1" for Completed, "2" for Overdue, and "-1" for To Do. */
                status?: string;
                /** @description Format - int32. The ID of the persona to get assignments. 3 = Faculty, 2 = Student. Defaults to 3. */
                persona_id?: number;
                /** @description Return assignments based on the entered string: ```expired```, ```future```, or ```all```. All is the default sort value. */
                filter?: string;
                /** @description Returns results with Descriptions or Titles that match search string. */
                search?: string;
            };
            header?: never;
            path: {
                /** @description Format - int32. The ID of the section. */
                section_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignmentCollection"];
                };
            };
        };
    };
    V1UsersByUser_idRelationshipsGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RelationshipReadCollection"];
                };
            };
        };
    };
    V1UsersByUser_idRelationshipsPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
            };
            cookie?: never;
        };
        /** @description Defines the relationship to be created. */
        requestBody?: {
            content: {
                /** @example {
                 *       "relationship_type": "Guardian_Ward",
                 *       "give_parental_access": true,
                 *       "list_as_parent": false,
                 *       "tuition_responsible_signer": true,
                 *       "left_user": 5409253,
                 *       "resides_with": true,
                 *       "do_not_contact": false,
                 *       "primary": false,
                 *       "comments": "It�s all relative."
                 *     } */
                "application/json": components["schemas"]["RelationshipCreate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    V1UsersByUser_idRelationshipsDelete: {
        parameters: {
            query: {
                /** @description Format - int32. ID of the other user in the relationship. */
                left_user: number;
                /** @description Defines the relationship between left_user and this user. */
                relationship_type: "NOT_SET" | "StepParent_StepChild" | "GrGrandParent_GrGrandChild" | "Guardian_Ward" | "AuntUncle_NieceNephew" | "Grandparent_Grandchild" | "Parent_Child" | "Custodian_Student" | "Consultant_Student" | "Caretaker_Charge" | "SpousePartner_SpousePartner" | "StepSibling_StepSibling" | "ExHusband_ExWife" | "Associate_Associate" | "HalfSibling_HalfSibling" | "Husband_Wife" | "Spouse_Spouse" | "Sibling_Sibling" | "Cousin_Cousin" | "Friend_Friend";
            };
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user for whom you are deleting the relationship. */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    V1UsersPhonetypesGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PhoneTypeCollection"];
                };
            };
        };
    };
    V1UsersExtendedGet: {
        parameters: {
            query: {
                /** @description Comma-delimited list of base role IDs to get users for. */
                base_role_ids: string;
                /** @description Format - int32. The user's ID to start at to return the next batch of data. Results will start with the next user in the result set. */
                marker?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserExtendedCollection"];
                };
            };
        };
    };
    V1AcademicsSectionsBySection_idStudentsGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the section, which can be found using <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1AcademicsSectionsGet">Section list</a>. */
                section_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StudentCollection"];
                };
            };
        };
    };
    V1UsersChangedGet: {
        parameters: {
            query: {
                /** @description Comma-delimited list of base role IDs to get users for. */
                base_role_ids: string;
                /** @description Format - date-time (as date-time in RFC3339). The date to begin looking for changes. Use <a href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO-8601</a> date format: 2003-04-21. */
                start_date: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserExtendedCollection"];
                };
            };
        };
    };
    V1UsersByUser_idPhonesGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PhoneReadCollection"];
                };
            };
        };
    };
    V1UsersByUser_idPhonesPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
            };
            cookie?: never;
        };
        /** @description The phone information to be created. */
        requestBody?: {
            content: {
                /** @example {
                 *       "number": "string",
                 *       "type_id": 0
                 *     } */
                "application/json": components["schemas"]["PhoneAdd"];
            };
        };
        responses: {
            /** @description ID of the phone just added. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1UsersByUser_idOccupationsGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OccupationReadCollection"];
                };
            };
        };
    };
    V1UsersByUser_idOccupationsPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
            };
            cookie?: never;
        };
        /** @description The occupation information to be created. */
        requestBody?: {
            content: {
                /** @example {
                 *       "business_name": "string",
                 *       "job_title": "string",
                 *       "business_url": "string",
                 *       "industry": "string",
                 *       "organization": "string",
                 *       "occupation": "string",
                 *       "matching_gift": true,
                 *       "begin_date": "string",
                 *       "end_date": "string",
                 *       "specialty": "string",
                 *       "parent_company": "string",
                 *       "job_function": "string",
                 *       "years_employed": 0,
                 *       "current": true
                 *     } */
                "application/json": components["schemas"]["OccupationCreate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1UsersByUser_idEmergencycontactsGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmergencyContactList"];
                };
            };
        };
    };
    V1AthleticsTeamsByTeam_idRosterGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID for the team to get the roster for. */
                team_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Roster"];
                };
            };
        };
    };
    V1AthleticsSportsGet: {
        parameters: {
            query?: {
                /** @description Format - int32. Season ID */
                season_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SportCollection"];
                };
            };
        };
    };
    V1AcademicsSectionsStudentsPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Defines which users (students and/or teachers) should be added to which offerings (via ```section_id``` and duration ```id```) */
        requestBody?: {
            content: {
                /** @example {
                 *       "id": 60708,
                 *       "enrollment_date": "2021-08-08T12:00:00.0000000+00:00",
                 *       "section_ids": "90123567,89012345",
                 *       "user_ids": "12345678,9012345"
                 *     } */
                "application/json": components["schemas"]["BulkEnrollment"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostResponse"];
                };
            };
        };
    };
    V1AthleticsSchedulesGet: {
        parameters: {
            query?: {
                /** @description Format - date-time (as date-time in RFC3339). Filter games/practices after this date */
                start_date?: string;
                /** @description Format - date-time (as date-time in RFC3339). Filter games/practices before this date */
                end_date?: string;
                /** @description Filter on a specific school year. Defaults to current school year. */
                school_year?: string;
                /** @description Set to ```true``` to include practices with games. Defaults to false. */
                include_practice?: boolean;
                /** @description Format - int32. Filter games/practices for a specific team. Defaults to all teams. */
                team_id?: number;
                /** @description Format - date-time (as date-time in RFC3339). Set date to limit results to games with information changed on and after that date. */
                last_modified?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScheduleItemCollection"];
                };
            };
        };
    };
    V1AthleticsTeamsGet: {
        parameters: {
            query?: {
                /** @description School year */
                school_year?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamCollection"];
                };
            };
        };
    };
    V1AttendanceGet: {
        parameters: {
            query: {
                /** @description Format - int32. The ID of the school level to retrieve attendance records. */
                level_id: number;
                /** @description Format - date-time (as date-time in RFC3339). The date to return attendance for. */
                day: string;
                /** @description Format - int32. The offering type to retrieve records for. */
                offering_type: number;
                /** @description Format - int32. Filters results to a specific excuse type. */
                excuse_type?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AttendanceGetCollection"];
                };
            };
        };
    };
    V1AttendancePost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Information about the attendance report */
        requestBody?: {
            content: {
                /** @example {
                 *       "student_user_id": 10,
                 *       "begin_date": "2021-09-30T12:00:00.0000000+00:00",
                 *       "end_date": "2021-09-30T12:00:00.0000000+00:00",
                 *       "start_time": "2024-09-18",
                 *       "end_time": "2024-09-18",
                 *       "excuse_type_id": 153,
                 *       "excuse_comment": "College Trip",
                 *       "reported_by": 11
                 *     } */
                "application/json": components["schemas"]["AttendanceCreate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    V1AcademicsTeachersByTeacher_idSectionsGet: {
        parameters: {
            query?: {
                /** @description The school year. Corresponds to ```school_year_label``` in the <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget">Year list</a>. */
                school_year?: string;
            };
            header?: never;
            path: {
                /** @description Format - int32. The ID of the teacher to get sections for. */
                teacher_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AcademicsSectionCollection"];
                };
            };
        };
    };
    V1AcademicsDepartmentsGet: {
        parameters: {
            query?: {
                /** @description Format - int32. Provide a school level ID to limit results to departments valid for the specified school level. */
                level_id?: number;
                /** @description Set to true to include non-academic departments in results. Defaults to false. */
                include_nonacademic?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DepartmentCollection"];
                };
            };
        };
    };
    V1AcademicsSectionsBySection_idCyclesGet: {
        parameters: {
            query?: {
                /** @description Format - int32. The ID of the term for which you want to return cycles. Defaults to the current term for the section provided. */
                duration_id?: number;
                /** @description Format - int32. The Group Type for the section specified. Defaults to the 'Academics' (1). */
                group_type?: number;
            };
            header?: never;
            path: {
                /** @description Format - int32. The ID of the section. */
                section_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SectionCycles"];
                };
            };
        };
    };
    V1AcademicsSchedulesSetsGet: {
        parameters: {
            query: {
                /** @description Format - int32. Level Number indicates which school you are working with. */
                level_num: number;
                /** @description The school year to get Schedule Sets for. Corresponds to ```school_year_label``` in the <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget">Year list</a>. Defaults to the current school year. */
                school_year?: string;
                /** @description Format - int32. The Group Type to filter the collection of Schedule Sets. Defaults to the 'Academics' (1). */
                group_type?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScheduleSetCollection"];
                };
            };
        };
    };
    V1AcademicsSchedulesSetsBySchedule_set_idGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. ID of the Schedule Set you seek. */
                schedule_set_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScheduleSetDetails"];
                };
            };
        };
    };
    V1UsersByUser_idGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. ID of the user to be returned. */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
        };
    };
    V1UsersByUser_idAddressesGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddressReadCollection"];
                };
            };
        };
    };
    V1UsersByUser_idAddressesPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
            };
            cookie?: never;
        };
        /** @description Address information to be updated. */
        requestBody?: {
            content: {
                /** @example {
                 *       "user_id": 0,
                 *       "type_id": 0,
                 *       "salutations": {
                 *         "informal": "string",
                 *         "formal": "string",
                 *         "household": "string"
                 *       },
                 *       "country": "string",
                 *       "line_one": "string",
                 *       "line_two": "string",
                 *       "line_three": "string",
                 *       "city": "string",
                 *       "state": "string",
                 *       "postal_code": "string",
                 *       "province": "string",
                 *       "region": "string",
                 *       "mailing_address": true,
                 *       "primary": true
                 *     } */
                "application/json": components["schemas"]["AddressAdd"];
            };
        };
        responses: {
            /** @description ID of the address just added. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1UsersAddresstypesGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddressTypeCollection"];
                };
            };
        };
    };
    V1UsersByUser_idAddressesByAddress_idPatch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
                /** @description Format - int32. The ID of the address to be updated. */
                address_id: number;
            };
            cookie?: never;
        };
        /** @description Address information to be updated. */
        requestBody?: {
            content: {
                /** @example {
                 *       "id": 0,
                 *       "city": "string",
                 *       "country": "string",
                 *       "line_one": "string",
                 *       "line_two": "string",
                 *       "line_three": "string",
                 *       "mailing_address": true,
                 *       "postal_code": "string",
                 *       "primary": true,
                 *       "province": "string",
                 *       "region": "string",
                 *       "state": "string",
                 *       "type_id": 0,
                 *       "user_id": 0,
                 *       "links": [
                 *         {
                 *           "type_id": 0,
                 *           "primary": true,
                 *           "shared": true,
                 *           "shared_relationship": "string",
                 *           "shared_user": "string",
                 *           "type": "string",
                 *           "user_id": 0
                 *         }
                 *       ],
                 *       "salutations": {
                 *         "informal": "string",
                 *         "formal": "string",
                 *         "household": "string"
                 *       },
                 *       "fields_to_delete": [
                 *         "string"
                 *       ]
                 *     } */
                "application/json": components["schemas"]["AddressPatch"];
            };
        };
        responses: {
            /** @description ID of the address just updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1UsersByUser_idEducationGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EducationReadCollection"];
                };
            };
        };
    };
    V1UsersByUser_idEducationPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
            };
            cookie?: never;
        };
        /** @description The education model. */
        requestBody?: {
            content: {
                /** @example {
                 *       "school": "Brookfield Academy",
                 *       "degree": "High School Diploma",
                 *       "major": "Mathematics",
                 *       "field": "Encryption",
                 *       "grad_year": 2024,
                 *       "sort_order": 1
                 *     } */
                "application/json": components["schemas"]["EducationAdd"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1AcademicsSpecialdaysGet: {
        parameters: {
            query?: {
                /** @description Format - int32. Identifier for a specific school level. */
                level_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpecialDayCollection"];
                };
            };
        };
    };
    V1AcademicsCoursesGet: {
        parameters: {
            query?: {
                /** @description Format - int32. Identifier for a specific department. */
                department_id?: number;
                /** @description Format - int32. Identifier for a specific school level. */
                level_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseCollection"];
                };
            };
        };
    };
    V1TypesAttendancetypesGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AttendanceTypes"];
                };
            };
        };
    };
    V1TypesExcusedurationtypesGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExcuseDurationTypes"];
                };
            };
        };
    };
    V1TypesExcusedtypesGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExcusedTypesCollection"];
                };
            };
        };
    };
    V1AcademicsSchedulesMasterGet: {
        parameters: {
            query: {
                /** @description Format - int32. Level Number indicates which school you are working with. */
                level_num: number;
                /** @description Format - date-time (as date-time in RFC3339). Start of the date range (inclusive).  The earliest possible start_date is 1/1/1900, any date entered before that date will be overwritten with 1/1/1900. */
                start_date: string;
                /** @description Format - date-time (as date-time in RFC3339). End of the date range (inclusive). If the end_date is earlier than the start_date the end_date wil be overwritten with the start_date plus 7 days. */
                end_date: string;
                /** @description Format - int32. Filters the results by a specific group type. Defaults to "All" offering types. */
                offering_type?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MasterScheduleDayCollection"];
                };
            };
        };
    };
    V1AthleticsSportslevelsGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SportsLevelCollection"];
                };
            };
        };
    };
    V1AdmissionsChecklistsGet: {
        parameters: {
            query?: {
                /** @description Applies a case-insensitive search against check lists "name". */
                search_text?: string;
                /** @description flag to return only inactive checklists (default is both). */
                inactive?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdmissionsCheckListCollection"];
                };
            };
        };
    };
    V1UsersAuditGet: {
        parameters: {
            query: {
                /** @description Role to return audit information for. */
                role_id: string;
                /** @description Format - date-time (as date-time in RFC3339). The date to begin looking for changes. Must be greater than 01/01/1990. */
                start_date?: string;
                /** @description Format - date-time (as date-time in RFC3339). The date to end looking for changes.  Must be within 1 year of start_date. Null returns start_date + 7 days. */
                end_date?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserAuditReadCollection"];
                };
            };
        };
    };
    V1VenuesBuildingsGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BuildingReadCollection"];
                };
            };
        };
    };
    V1AdmissionsCandidatesGet: {
        parameters: {
            query?: {
                /** @description The school year for which to return results.  Corresponds to ```school_year_label``` in the <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget">Year list</a>.  Default is current year. */
                school_year?: string;
                /** @description One or more comma delimited status Id(s) to filter results on.  Corresponds to ```id``` in the <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1AdmissionsStatusGet">Status list</a>.  Default is no status Id filter. */
                status_ids?: string;
                /** @description Format - date-time (as date-time in RFC3339). The date last modified to filter results to on or after. Use <a href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO-8601</a> date format: 2003-04-21. Default is no modified date filter */
                modified_date?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CandidateReadCollection"];
                };
            };
        };
    };
    V1AdmissionsCandidatesPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "user_id": 0,
                 *       "entering_year": "string",
                 *       "entering_grade_id": 0,
                 *       "checklist_id": 0
                 *     } */
                "application/json": components["schemas"]["CandidateCreate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1UsersEnrollPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "user_id": 123456,
                 *       "grade_level_id": 2345,
                 *       "school_level_id": 0,
                 *       "school_year_label": "2021 - 2022",
                 *       "enroll_date": "2020-09-01T04:00:00.0000000+00:00",
                 *       "current_year": true,
                 *       "has_grades": true,
                 *       "grade_repeated": false,
                 *       "graduated": false,
                 *       "allow_edit": true,
                 *       "allow_delete": true,
                 *       "future_enrollments": true,
                 *       "duration_id": 1655555,
                 *       "session_id": 0,
                 *       "role_ids": [
                 *         5555
                 *       ]
                 *     } */
                "application/json": components["schemas"]["UserEnrollmentCreate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserEnrollmentResponse"];
                };
            };
        };
    };
    V1AthleticsVenuesGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AthleticVenueCollection"];
                };
            };
        };
    };
    V1AthleticsTransportationtypesGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransportationCollection"];
                };
            };
        };
    };
    V1AthleticsLocationsGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LocationCollection"];
                };
            };
        };
    };
    V1AthleticsLocationsPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The location to be created */
        requestBody?: {
            content: {
                /** @example {
                 *       "opponent_id": 864549,
                 *       "name": "South City Main Field",
                 *       "directions": "Go straight, take left at light",
                 *       "travel_time": 15,
                 *       "address_line1": "123a Main Street",
                 *       "address_line2": "",
                 *       "address_line3": "",
                 *       "city": "Springfield",
                 *       "state": "Texas",
                 *       "state_short": "TX",
                 *       "country": "USA",
                 *       "zip": "12345-0954",
                 *       "province": "",
                 *       "map_url": "http://www.somemap.com/"
                 *     } */
                "application/json": components["schemas"]["LocationCreateModel"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1AthleticsOpponentsGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpponentFlyweightCollection"];
                };
            };
        };
    };
    V1AthleticsOpponentsPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The opponent to be created */
        requestBody?: {
            content: {
                /** @example {
                 *       "name": "South City Jets",
                 *       "phone1": "(123) 456-9568",
                 *       "ad_first_name": "Pat",
                 *       "ad_last_name": "Malone",
                 *       "ad_email": "AthleticDirector@southcity.edu",
                 *       "fax": "(987) 654-4321",
                 *       "phone2": "",
                 *       "asst_ad_first_name": "Chris",
                 *       "asst_ad_last_name": "Humphrey",
                 *       "asst_ad_email": "AsstAthleticDirector@southcity.edu",
                 *       "address_id": 195095,
                 *       "address_line1": "123 Main Street",
                 *       "address_line2": "",
                 *       "address_line3": "",
                 *       "city": "Springfield",
                 *       "state_short": "",
                 *       "country": "Canada",
                 *       "province": "",
                 *       "zip": "12345-0954",
                 *       "conference_id": 45958
                 *     } */
                "application/json": components["schemas"]["OpponentUpdateModel"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1AthleticsTeamsByTeam_idSchedulePost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. ID of the team for the game to be created */
                team_id: number;
            };
            cookie?: never;
        };
        /** @description Information about the game to be created */
        requestBody?: {
            content: {
                /** @example {
                 *       "schedule_type": 0,
                 *       "title": "Game Title",
                 *       "game_date": "2021-10-05T01:30:00.0000000+00:00",
                 *       "game_date_end": "2021-10-05T03:30:00.0000000+00:00",
                 *       "home_away_type": 1,
                 *       "location_id": 5489,
                 *       "dismissal_time": "2024-09-18",
                 *       "departure_time": "2024-09-18",
                 *       "departure_note": "We are departing at lunch",
                 *       "pickup_time": "2024-09-18",
                 *       "pickup_note": "We will return at end of school",
                 *       "league_ind": true,
                 *       "scrimmage_ind": false,
                 *       "tournament_ind": false,
                 *       "invitational_ind": true,
                 *       "playoff_ind": false,
                 *       "additional_notes": "Please read this.",
                 *       "send_notifications": true,
                 *       "skip_validation": false,
                 *       "transportation": [
                 *         {
                 *           "transportation_id": 54095,
                 *           "full_day": false,
                 *           "begin_use": "2021-10-05T12:00:00.0000000+00:00",
                 *           "end_use": "2021-10-05T04:15:00.0000000+00:00"
                 *         }
                 *       ],
                 *       "opponents": [
                 *         {
                 *           "opponent_id": 94508
                 *         }
                 *       ]
                 *     } */
                "application/json": components["schemas"]["GameCreate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1AthleticsTeamsByTeam_idSchedulePatch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. ID of the team for the game to be updated */
                team_id: number;
            };
            cookie?: never;
        };
        /** @description Information for the game to be updated */
        requestBody?: {
            content: {
                /** @example {
                 *       "game_id": 84509,
                 *       "schedule_type": 0,
                 *       "title": "Game Title",
                 *       "game_date": "2021-10-05T01:30:00.0000000+00:00",
                 *       "game_date_end": "2021-10-05T03:30:00.0000000+00:00",
                 *       "home_away_type": 1,
                 *       "location_id": 5489,
                 *       "dismissal_time": "2024-09-18",
                 *       "departure_time": "2024-09-18",
                 *       "departure_note": "We are departing at lunch",
                 *       "pickup_time": "2024-09-18",
                 *       "pickup_note": "We will return at end of school",
                 *       "league_ind": true,
                 *       "scrimmage_ind": false,
                 *       "tournament_ind": false,
                 *       "invitational_ind": true,
                 *       "playoff_ind": false,
                 *       "additional_notes": "Please read this.",
                 *       "send_notifications": true,
                 *       "skip_validation": false,
                 *       "transportation": [
                 *         {
                 *           "transportation_id": 54095,
                 *           "full_day": false,
                 *           "begin_use": "2021-10-05T12:00:00.0000000+00:00",
                 *           "end_use": "2021-10-05T04:15:00.0000000+00:00"
                 *         }
                 *       ],
                 *       "opponents": [
                 *         {
                 *           "opponent_id": 94508
                 *         }
                 *       ]
                 *     } */
                "application/json": components["schemas"]["GameUpdate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    V1AcademicsEnrollmentsByUser_idGet: {
        parameters: {
            query?: {
                /** @description The school year to filter the collection of sections by. Corresponds to ```school_year_label``` in the <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget">Year list</a>. Defaults to the current school year. */
                school_year?: string;
            };
            header?: never;
            path: {
                /** @description Format - int32. User identifier. */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnrollmentCollection"];
                };
            };
        };
    };
    V1AdmissionsCheckliststatusGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdmissionsChecklistStatusCollection"];
                };
            };
        };
    };
    V1UsersByUser_idEmploymentGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FacultyEmploymentRead"];
                };
            };
        };
    };
    V1UsersByUser_idEmploymentPatch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "date_appointed": "2022-08-31T12:00:00.0000000+00:00",
                 *       "date_departed": "2022-08-31T12:00:00.0000000+00:00",
                 *       "employment_effective_date": "2022-08-31T04:30:00.0000000+00:00",
                 *       "withdraw_effective_date": "2022-08-31T04:30:00.0000000+00:00",
                 *       "disable_account": false,
                 *       "employee_roles": [
                 *         1,
                 *         2,
                 *         3,
                 *         4
                 *       ],
                 *       "school_levels": [
                 *         1,
                 *         2,
                 *         3,
                 *         4
                 *       ],
                 *       "employee_departments": [
                 *         {
                 *           "department_id": 1,
                 *           "is_chair": true
                 *         }
                 *       ],
                 *       "grade_levels": [
                 *         1,
                 *         2,
                 *         3,
                 *         4
                 *       ],
                 *       "employee_sports": [
                 *         1,
                 *         2,
                 *         3,
                 *         4
                 *       ]
                 *     } */
                "application/json": components["schemas"]["UserEmploymentUpdate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1UsersExtendedByUser_idGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserExtended"];
                };
            };
        };
    };
    V1AthleticsTeamsByTeam_idSchedulePracticePost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. ID of the team for the practice to be created */
                team_id: number;
            };
            cookie?: never;
        };
        /** @description Information about the practice to be created */
        requestBody?: {
            content: {
                /** @example {
                 *       "send_notification": true,
                 *       "title": "JV Softball extra practice",
                 *       "practice_start_date": "2021-10-04T04:30:00.0000000+00:00",
                 *       "practice_end_date": "2021-10-04T06:00:00.0000000+00:00",
                 *       "location_id": 2454,
                 *       "transportation_id": 5689,
                 *       "dismissal_time": "2021-10-04T04:00:00.0000000+00:00",
                 *       "departure_time": "2021-10-04T04:20:00.0000000+00:00",
                 *       "pickup_time": "2021-10-04T06:10:00.0000000+00:00",
                 *       "practice_note": "some note about this practice",
                 *       "skip_validation": false
                 *     } */
                "application/json": components["schemas"]["PracticeCreate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1AthleticsTeamsByTeam_idSchedulePracticePatch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the team for the practice to be updated */
                team_id: number;
            };
            cookie?: never;
        };
        /** @description Information about the practice to be updated */
        requestBody?: {
            content: {
                /** @example {
                 *       "id": 45623,
                 *       "send_notification": true,
                 *       "title": "JV Softball extra practice",
                 *       "practice_start_date": "2021-10-04T04:30:00.0000000+00:00",
                 *       "practice_end_date": "2021-10-04T06:00:00.0000000+00:00",
                 *       "location_id": 2454,
                 *       "transportation_id": 5689,
                 *       "dismissal_time": "2021-10-04T04:00:00.0000000+00:00",
                 *       "departure_time": "2021-10-04T04:20:00.0000000+00:00",
                 *       "pickup_time": "2021-10-04T06:10:00.0000000+00:00",
                 *       "practice_note": "some note about this practice",
                 *       "skip_validation": false
                 *     } */
                "application/json": components["schemas"]["PracticeUpdate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    V1AthleticsTeamsByTeam_idSchedulePracticeByPractice_idDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. ID of the team for the practice to be deleted */
                team_id: number;
                /** @description Format - int32. ID of the practice to be deleted */
                practice_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    V1AthleticsTeamsByTeam_idScheduleByGame_idDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. ID of the team for the game to be deleted */
                team_id: number;
                /** @description Format - int32. ID of the game to be deleted */
                game_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    V1ListsAdvancedByList_idGet: {
        parameters: {
            query?: {
                /** @description Format - int32. The number of the page to return. Defaults to <b>1</b>. */
                page?: number;
                /** @description Format - int32. Number of rows to return per page. Default is 1000. Maximum allowed is 1000. */
                page_size?: number;
            };
            header?: never;
            path: {
                /** @description Format - int32. The ID of the list. To learn how to find the list ID, see <a href="https://kb.blackbaud.com/articles/Article/108336" target="_blank">KB article 108336</a>. */
                list_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResult"];
                };
            };
        };
    };
    V1UsersGendertypesGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenderTypeCollection"];
                };
            };
        };
    };
    V1ListsGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListReadCollection"];
                };
            };
        };
    };
    V1AdvisoriesSectionsGet: {
        parameters: {
            query: {
                /** @description Format - int32. Level number */
                level_num: number;
                /** @description The school year to get advisory sections for. <br></br>Defaults to the current school year. */
                school_year?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdvisoriesSectionCollection"];
                };
            };
        };
    };
    V1UsersBbidstatusGet: {
        parameters: {
            query: {
                /** @description Comma-delimited list of base role IDs to get users for. */
                base_role_ids: string;
                /** @description Format - int32. The user's ID to start at to return the next batch of data. Results will start with the next user in the result set. */
                marker?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SchoolBbidStatusCollection"];
                };
            };
        };
    };
    V1ActivitiesSectionsGet: {
        parameters: {
            query: {
                /** @description Format - int32. Level number */
                level_num: number;
                /** @description The school year to get activity sections for. <br />Defaults to the current school year. */
                school_year?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActivitiesSectionCollection"];
                };
            };
        };
    };
    V1TimezoneGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Timezone"];
                };
            };
        };
    };
    V1TestscoresGet: {
        parameters: {
            query: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
                /** @description Format - int32. The number of records per page (Default record size is 100). */
                size?: number;
                /** @description Format - int32. The page of results to start from (Default start page is 1 and records per page is 100). */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TestScoreCollection"];
                };
            };
        };
    };
    V1AthleticsHighlightsByHighlight_idGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. ID of the highlight to be returned. */
                highlight_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Highlight"];
                };
            };
        };
    };
    V1EventsCategoriesGet: {
        parameters: {
            query?: {
                /** @description Format - int32. The page of results to start from. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventCategoryCollection"];
                };
            };
        };
    };
    V1EventsCategoriesPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "description": "Test Category",
                 *       "calendar_url": "http://www.example.com/calendar/test_calendar.ics",
                 *       "include_brief_description": true,
                 *       "include_long_description": false,
                 *       "public": true,
                 *       "roles": [
                 *         12345
                 *       ]
                 *     } */
                "application/json": components["schemas"]["EventCategory"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventCategoryCreateResponseExample"];
                };
            };
        };
    };
    V1UsersEmergencycontactsChangedGet: {
        parameters: {
            query?: {
                /** @description Format - date-time (as date-time in RFC3339). The date to begin looking for changes. Use <a href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO-8601</a> date format: 2022-04-16. */
                start_date?: string;
                /** @description Format - int32. The user's ID to start at to return the next batch of data. Results will start with the next user in the result set. */
                marker?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmergencyContactChangeCollection"];
                };
            };
        };
    };
    V1SessionsGet: {
        parameters: {
            query?: {
                /** @description Format - int32. Filter for a specific ```level_num``` (level number) */
                level_num?: number;
                /** @description Filter for a specific ```school_year``` (required format YYYY - YYYY (11 chars)) */
                school_year?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SchoolSessionCollection"];
                };
            };
        };
    };
    V1DormsAllGet: {
        parameters: {
            query: {
                /** @description Format - int32. Identifier for the school level. */
                level_number: number;
                /** @description Identifier for the school year (Defaults to current school year). */
                school_year?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DormCollection"];
                };
            };
        };
    };
    V1AthleticsResultPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "schedule_id": 12345,
                 *       "schedule_type": 0,
                 *       "send_notification": false,
                 *       "opponents": [
                 *         {
                 *           "opponent_id": 7654,
                 *           "score": "5",
                 *           "win_loss": "Win",
                 *           "score_versus": "2"
                 *         }
                 *       ]
                 *     } */
                "application/json": components["schemas"]["ResultCreate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    V1TestscoresTesttypesGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TestTypeCollection"];
                };
            };
        };
    };
    V1TestscoresByUser_idPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "id": 0,
                 *       "comment": "string",
                 *       "overall_score": 0,
                 *       "printon_report_card": true,
                 *       "printon_transcript": true,
                 *       "sub_tests": [
                 *         {
                 *           "test_type_id": 0,
                 *           "sub_test_type": "string",
                 *           "score": 0,
                 *           "test_subtype_id": 0,
                 *           "percentile": 0,
                 *           "scale": 0,
                 *           "stanie": 0
                 *         }
                 *       ],
                 *       "test_date": "string"
                 *     } */
                "application/json": components["schemas"]["TestScoreAdd"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1UsersByUser_idEmergencycontactsUserPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "automated_email": 0,
                 *       "call_dialer": 1,
                 *       "email": "example@example.com",
                 *       "phone_number": "555-555-5555"
                 *     } */
                "application/json": components["schemas"]["EmergencyContactUserCreate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    V1UsersByUser_idEmergencycontactsNonuserPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "automated_email": 0,
                 *       "email": "example@example.com",
                 *       "call_dialer": 1,
                 *       "firstname": "John",
                 *       "lastname": "Smith",
                 *       "phone_number": "555-555-5555",
                 *       "phone_type": "Home",
                 *       "relationship": "Friend"
                 *     } */
                "application/json": components["schemas"]["EmergencyContactNonUserCreate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    V1SchedulesMeetingsGet: {
        parameters: {
            query: {
                /** @description Format - date-time (as date-time in RFC3339). Use <a href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO-8601</a> date format: 2022-04-01. */
                start_date: string;
                /** @description Format - date-time (as date-time in RFC3339). Use <a href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO-8601</a> date format: 2022-04-08. */
                end_date?: string;
                /** @description Comma delimited list of integer values above. Defaults to 1. */
                offering_types?: string;
                /** @description Comma delimited list of integer values for the section identifiers to return. By default the route returns all sections. */
                section_ids?: string;
                /** @description Format - date-time (as date-time in RFC3339). Filters meetings to sections that were modified on or after the date provided. <br /> Use <a href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO-8601</a> date format: 2022-04-01. */
                last_modified?: string;
                /** @description Set to true to calculate the ```start_time``` and ```end_time``` or meetings based on the current day instead of the meeting day. Defaults to false. */
                show_time_for_current_date?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeetingCollection"];
                };
            };
        };
    };
    V1SchedulesByStudent_idMeetingsGet: {
        parameters: {
            query: {
                /** @description Format - date-time (as date-time in RFC3339). */
                start_date: string;
                /** @description Format - date-time (as date-time in RFC3339). */
                end_date?: string;
            };
            header?: never;
            path: {
                /** @description Format - int32. */
                student_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StudentScheduleCollection"];
                };
            };
        };
    };
    V1UsersByParent_idStudentsGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. */
                parent_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChildOfParentCollection"];
                };
            };
        };
    };
    V1AcademicsStudentByStudent_idSectionsGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the student to view sections and grades for. */
                student_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AcademicsSectionStudentCollection"];
                };
            };
        };
    };
    V1EventsCalendarGet: {
        parameters: {
            query?: {
                /** @description Format - date-time (as date-time in RFC3339). */
                start_date?: string;
                /** @description Format - date-time (as date-time in RFC3339). */
                end_date?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CalendarItemCollection"];
                };
            };
        };
    };
    V1AcademicsByStudent_idAssignmentsGet: {
        parameters: {
            query: {
                /** @description Format - date-time (as date-time in RFC3339). */
                start_date: string;
                /** @description Format - date-time (as date-time in RFC3339). */
                end_date?: string;
                section_ids?: string;
            };
            header?: never;
            path: {
                /** @description Format - int32. */
                student_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StudentAssignmentCollection"];
                };
            };
        };
    };
    V1AcademicsByStudent_idBySection_idGradedassignmentsGet: {
        parameters: {
            query: {
                /** @description Format - int32. The ID of the marking period to return grades for. */
                marking_period_id: number;
            };
            header?: never;
            path: {
                /** @description Format - int32. The ID of the student to view graded assignments for. */
                student_id: number;
                /** @description Format - int32. The ID of the lead section for the student. */
                section_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StudentGradedAssignmentCollection"];
                };
            };
        };
    };
    V1UsersMeGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserMe"];
                };
            };
        };
    };
    V1CustomfieldsGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminCustomFieldsCollection"];
                };
            };
        };
    };
    V1UsersCustomfieldsGet: {
        parameters: {
            query: {
                /** @description A comma-delimited list of base role IDs to get users for. Example: ```base_role_ids=14,16``` for Students and Parents. */
                base_role_ids: string;
                /** @description Format - int32. The user's ```id``` to start at to return the next batch of data. Results will start with the next user in the result set. */
                marker?: number;
                /** @description A comma-delimited list of field IDs to filter the result set down to. Only matching custom fields will be returned from that result set for all users in that set even if they don't have any data for the given ```field_ids```. */
                field_ids?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserAdminCustomFieldCollection"];
                };
            };
        };
    };
    V1ContentNewsCategoriesGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NewsCategoryCollection"];
                };
            };
        };
    };
    V1ContentNewsItemsGet: {
        parameters: {
            query?: {
                categories?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NewsItemCollection"];
                };
            };
        };
    };
    V1AcademicsEnrollmentsChangesGet: {
        parameters: {
            query: {
                /** @description Format - date-time (as date-time in RFC3339). The DateTime of changes to academics enrollments to begin with */
                start_date: string;
                /** @description Format - date-time (as date-time in RFC3339). The DateTime of changes to academics enrollments to end with. */
                end_date?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnrollmentChangesCollection"];
                };
            };
        };
    };
    V1DirectoriesGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DirectoryModelCollection"];
                };
            };
        };
    };
    V1DirectoriesByDirectory_idGet: {
        parameters: {
            query?: {
                search?: string;
                search_all?: boolean;
            };
            header?: never;
            path: {
                /** @description Format - int32. */
                directory_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DirectoryResultCollection"];
                };
            };
        };
    };
    V1ContentEventsCategoriesGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventsCategoryCollection"];
                };
            };
        };
    };
    V1DegreesStudentdegreesByStudent_idGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. user Id */
                student_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDegreeOutputModelCollection"];
                };
            };
        };
    };
    V1AdmissionsStatusGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdmissionsStatusesCollection"];
                };
            };
        };
    };
    V1UsersEnrollmentsGet: {
        parameters: {
            query: {
                /** @description The school year label to get enrollments for. The school year should be formatted like ```2022-2023``` */
                school_year: string;
                /** @description Format - int32. The school level ID to return enrollments for. Optional. */
                school_level_id?: number;
                /** @description Format - int32. The grade level ID to return enrollments for. Optional. */
                grade_level_id?: number;
                /** @description Format - int32. The number of records to return.  Defaults to 1000. Maximum is 5000. */
                limit?: number;
                /** @description Format - int32. The record to start the next collection on. Defaults to 0. */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserEnrollmentCollection"];
                };
            };
        };
    };
    V1UsersByUser_idCustomfieldsGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The id of the user to get custom fields for. */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserAdminCustomField"];
                };
            };
        };
    };
    V1UsersByUser_idCustomfieldsPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user to create a custom field for */
                user_id: number;
            };
            cookie?: never;
        };
        /** @description Object that describes the custom field that will be created. */
        requestBody?: {
            content: {
                /** @example {
                 *       "field_id": 393,
                 *       "data_type_id": 7,
                 *       "text_value": "This is the value the field will have."
                 *     } */
                "application/json": components["schemas"]["UserAdminCustomFieldCreate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    V1UsersByUser_idCustomfieldsPatch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user to update an existing custom field for. */
                user_id: number;
            };
            cookie?: never;
        };
        /** @description Object that describes the custom field that should be updated. */
        requestBody?: {
            content: {
                /** @example {
                 *       "id": "string",
                 *       "field_id": 0,
                 *       "data_type_id": 0,
                 *       "int_value": 0,
                 *       "text_value": "string",
                 *       "decimal_value": 0,
                 *       "date_value": "string",
                 *       "bit_value": true
                 *     } */
                "application/json": components["schemas"]["UserAdminCustomFieldUpdate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    V1ContentResourcesGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceCollection"];
                };
            };
        };
    };
    V1TypesTablesGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableCollection"];
                };
            };
        };
    };
    V1TypesTablevaluesGet: {
        parameters: {
            query?: {
                /** @description Format - int32. The ID of the table type. The tableId is returned by <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1TypesTablesGet">Types table types</a> or from the settings area for the table within Blackbaud Education Management. */
                tableId?: number;
                /** @description The name of the table type. The name is returned by <a href="https://developer.sky.blackbaud.com/docs/services/school/operations/V1TypesTablesGet">Types table types</a> or from the settings area for the table within Blackbaud Education Management. */
                tableName?: string;
                /** @description If set to true, returns inactive items for the table. Defaults to false. */
                includeInactive?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TableValueCollection"];
                };
            };
        };
    };
    V1TypesTablevaluesPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "table": "Allergy",
                 *       "table_values": [
                 *         {
                 *           "description": "Peanut butter"
                 *         }
                 *       ]
                 *     } */
                "application/json": components["schemas"]["AddTableValuesRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddTableValuesResponse"];
                };
            };
        };
    };
    V1MedicalSecurityrolesGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SecurityRoleCollection"];
                };
            };
        };
    };
    V1MedicalAllergiesconditionsPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The medical allergy/condition to be created for student */
        requestBody?: {
            content: {
                /** @example {
                 *       "user_id": 1,
                 *       "type": "allergy or condition",
                 *       "allergy_condition_type": "12",
                 *       "date_as_of": "2023-01-01T12:00:00.0000000+00:00",
                 *       "date_until": "2023-02-01T12:00:00.0000000+00:00",
                 *       "allergy_signs": "allergy signs",
                 *       "minor_reaction_response": "minor reaction response",
                 *       "major_reaction_response": "major reaction response",
                 *       "role_access": [
                 *         {
                 *           "role_id": 1,
                 *           "has_access": true
                 *         },
                 *         {
                 *           "role_id": 2,
                 *           "has_access": false
                 *         }
                 *       ],
                 *       "medications": [
                 *         1,
                 *         2,
                 *         3
                 *       ]
                 *     } */
                "application/json": components["schemas"]["StudentMedicalAllergyCondition"];
            };
        };
        responses: {
            /** @description ID of the student medical allergy/condition just created. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1MedicalUsersByUser_idAllergiesconditionsGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. ID of the student */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AllergiesAndConditionsView"][];
                };
            };
        };
    };
    V1MedicalUsersByUser_idMedicationsGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. ID of the student */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StudentMedicationRead"][];
                };
            };
        };
    };
    V1MedicalMedicationsPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The medication to be created for student */
        requestBody?: {
            content: {
                /** @example {
                 *       "user_id": 123,
                 *       "medication_type": "Insulin",
                 *       "date_as_of": "2023-01-01T12:00:00.0000000+00:00",
                 *       "date_until": "2023-02-01T12:00:00.0000000+00:00",
                 *       "location": "At home",
                 *       "dosage": "1",
                 *       "dispense": {
                 *         "times_a_day": 2,
                 *         "frequency": "specific days",
                 *         "days": {
                 *           "sunday": false,
                 *           "monday": false,
                 *           "tuesday": false,
                 *           "wednesday": true,
                 *           "thursday": false,
                 *           "friday": false,
                 *           "saturday": false
                 *         }
                 *       },
                 *       "conditions": [
                 *         1,
                 *         2
                 *       ],
                 *       "allergies": [
                 *         1,
                 *         2
                 *       ],
                 *       "notes": "Comments",
                 *       "role_access": [
                 *         {
                 *           "role_id": 1,
                 *           "has_access": true
                 *         },
                 *         {
                 *           "role_id": 2,
                 *           "has_access": false
                 *         }
                 *       ]
                 *     } */
                "application/json": components["schemas"]["StudentMedicationCreate"];
            };
        };
        responses: {
            /** @description ID of the student medication just created. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1MedicalUsersByUser_idImmunizationsGet: {
        parameters: {
            query?: {
                /** @description Show all required immunizations or just those completed or missing. Allowed values: all, completed, missing. */
                include?: string;
            };
            header?: never;
            path: {
                /** @description Format - int32. The ID of the student */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StudentImmunizationRead"][];
                };
            };
        };
    };
    V1MedicalImmunizationsPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The immunizations to update */
        requestBody?: {
            content: {
                /** @example {
                 *       "user_id": 123,
                 *       "immunizations": [
                 *         {
                 *           "immunization_type": "dtap"
                 *         },
                 *         {
                 *           "immunization_type": "12",
                 *           "immunization_date": "2022-01-01T01:00:00.0000000+00:00"
                 *         }
                 *       ]
                 *     } */
                "application/json": components["schemas"]["StudentImmunizationUpdate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    V1UsersByUser_idAddressesSharePost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user the existing address should be shared. */
                user_id: number;
            };
            cookie?: never;
        };
        /** @description The details about the address that should be shared with the user. */
        requestBody?: {
            content: {
                /** @example {
                 *       "id": 0,
                 *       "address_type_id": 0
                 *     } */
                "application/json": components["schemas"]["AddressShare"];
            };
        };
        responses: {
            /** @description ID of the address just shared. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1UsersByUser_idPhonesSharePost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user the existing address should be shared. */
                user_id: number;
            };
            cookie?: never;
        };
        /** @description The details about the phone number that should be shared with the user. */
        requestBody?: {
            content: {
                /** @example {
                 *       "id": 0,
                 *       "phone_type_id": 0
                 *     } */
                "application/json": components["schemas"]["PhoneShare"];
            };
        };
        responses: {
            /** @description ID of the address just shared. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1MedicalUsersByUser_idAthleticrequirementsGet: {
        parameters: {
            query?: {
                /** @description The description of the school year */
                schoolYear?: string;
                /** @description The description of the season */
                season?: string;
                /** @description Show all athletic requirements or only those completed or missing. School year and season are required if not set to completed. Allowed values: all, completed, missing */
                include?: string;
            };
            header?: never;
            path: {
                /** @description Format - int32. The ID of the student */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StudentAthleticRequirementRead"][];
                };
            };
        };
    };
    V1MedicalAllergiesByAllergy_idDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the student's allergy. */
                allergy_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Record not found. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    V1MedicalAllergiesByAllergy_idPatch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the student's allergy. */
                allergy_id: number;
            };
            cookie?: never;
        };
        /** @description The allergy changes */
        requestBody?: {
            content: {
                /** @example {
                 *       "date_as_of": "2023-01-01T12:00:00.0000000+00:00",
                 *       "date_until": "2023-02-01T12:00:00.0000000+00:00",
                 *       "notes": "notes",
                 *       "allergy_signs": "allergy signs",
                 *       "minor_reaction_response": "minor reaction response",
                 *       "major_reaction_response": "major reaction response",
                 *       "role_access": [
                 *         {
                 *           "role_id": 1,
                 *           "has_access": true
                 *         },
                 *         {
                 *           "role_id": 2,
                 *           "has_access": false
                 *         }
                 *       ],
                 *       "medications": [
                 *         1,
                 *         2,
                 *         3
                 *       ]
                 *     } */
                "application/json": components["schemas"]["StudentAllergyUpdate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1MedicalConditionsByCondition_idDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the student's condition. */
                condition_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Record not found. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    V1MedicalConditionsByCondition_idPatch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the student's condition. */
                condition_id: number;
            };
            cookie?: never;
        };
        /** @description The condition changes */
        requestBody?: {
            content: {
                /** @example {
                 *       "date_as_of": "2023-01-01T12:00:00.0000000+00:00",
                 *       "date_until": "2023-02-01T12:00:00.0000000+00:00",
                 *       "notes": "notes",
                 *       "role_access": [
                 *         {
                 *           "role_id": 1,
                 *           "has_access": true
                 *         },
                 *         {
                 *           "role_id": 2,
                 *           "has_access": false
                 *         }
                 *       ],
                 *       "medications": [
                 *         1,
                 *         2,
                 *         3
                 *       ]
                 *     } */
                "application/json": components["schemas"]["StudentConditionUpdate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1MedicalMedicationsByMedication_idDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the student's medication. */
                medication_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Record not found. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    V1MedicalMedicationsByMedication_idPatch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. >The student medication ID */
                medication_id: number;
            };
            cookie?: never;
        };
        /** @description The medication changes to update */
        requestBody?: {
            content: {
                /** @example {
                 *       "date_as_of": "2023-01-01T12:00:00.0000000+00:00",
                 *       "date_until": "2023-02-01T12:00:00.0000000+00:00",
                 *       "location": "Admin Office",
                 *       "dosage": "1",
                 *       "despense_times_a_day": 2,
                 *       "dispense_frequency": "specificdays",
                 *       "dispense_days": {
                 *         "sunday": false,
                 *         "monday": false,
                 *         "tuesday": false,
                 *         "wednesday": true,
                 *         "thursday": false,
                 *         "friday": false,
                 *         "saturday": false
                 *       },
                 *       "conditions": [
                 *         1,
                 *         2
                 *       ],
                 *       "allergies": [
                 *         1,
                 *         2,
                 *         3
                 *       ]
                 *     } */
                "application/json": components["schemas"]["StudentMedicationUpdate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1MedicalAllergiesPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The medical allergy to be created for student */
        requestBody?: {
            content: {
                /** @example {
                 *       "user_id": 1,
                 *       "allergy": "Peanut butter",
                 *       "date_as_of": "2023-08-31T12:00:00.0000000+00:00",
                 *       "date_until": "2024-02-01T12:00:00.0000000+00:00",
                 *       "notes": "Life threatening",
                 *       "allergy_signs": "Rash and wheezing",
                 *       "minor_reaction_response": "Give Benadryl",
                 *       "major_reaction_response": "Use epi pen",
                 *       "access_roles": [
                 *         {
                 *           "id": 1,
                 *           "has_access": true
                 *         },
                 *         {
                 *           "id": 2,
                 *           "has_access": false
                 *         }
                 *       ],
                 *       "student_medications": [
                 *         1,
                 *         2,
                 *         3
                 *       ]
                 *     } */
                "application/json": components["schemas"]["StudentMedicalAllergy"];
            };
        };
        responses: {
            /** @description ID of the student medical allergy just created. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1MedicalConditionsPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The medical condition to be created for student */
        requestBody?: {
            content: {
                /** @example {
                 *       "user_id": 1,
                 *       "condition": "Asthma",
                 *       "date_as_of": "2023-08-31T12:00:00.0000000+00:00",
                 *       "date_until": "2024-02-01T12:00:00.0000000+00:00",
                 *       "notes": "Can cause panic attack",
                 *       "access_roles": [
                 *         {
                 *           "id": 1,
                 *           "has_access": true
                 *         },
                 *         {
                 *           "id": 2,
                 *           "has_access": false
                 *         }
                 *       ],
                 *       "student_medications": [
                 *         1,
                 *         2,
                 *         3
                 *       ]
                 *     } */
                "application/json": components["schemas"]["StudentMedicalCondition"];
            };
        };
        responses: {
            /** @description ID of the student medical condition just created. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1MedicalUsersByUser_idAllergiesGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. ID of the student */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StudentAllergiesView"][];
                };
            };
        };
    };
    V1MedicalUsersByUser_idConditionsGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. ID of the student */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StudentConditionView"][];
                };
            };
        };
    };
    V1UsersByUser_idCustomfieldsListPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user to create a custom field for */
                user_id: number;
            };
            cookie?: never;
        };
        /** @description Object that describes the list of custom fields that will be created for the user. */
        requestBody?: {
            content: {
                /** @example [
                 *       {
                 *         "field_id": 393,
                 *         "data_type_id": 7,
                 *         "text_value": "Text value 1"
                 *       },
                 *       {
                 *         "field_id": 394,
                 *         "data_type_id": 7,
                 *         "text_value": "Text value 2"
                 *       }
                 *     ] */
                "application/json": components["schemas"]["UserAdminCustomFieldCreate"][];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    V1UsersByUser_idCustomfieldsListPatch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user to update an existing custom field for. */
                user_id: number;
            };
            cookie?: never;
        };
        /** @description Object that describes the custom field that should be updated. */
        requestBody?: {
            content: {
                /** @example [
                 *       {
                 *         "id": "string",
                 *         "field_id": 0,
                 *         "data_type_id": 0,
                 *         "int_value": 0,
                 *         "text_value": "string",
                 *         "decimal_value": 0,
                 *         "date_value": "string",
                 *         "bit_value": true
                 *       }
                 *     ] */
                "application/json": components["schemas"]["UserAdminCustomFieldUpdate"][];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    V1UsersByUser_idOccupationsByOccupation_idDelete: {
        parameters: {
            query?: {
                /** @description Current Employment Status */
                current?: boolean;
            };
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
                /** @description Format - int32. The ID of the occupation. */
                occupation_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1UsersByUser_idOccupationsByOccupation_idPatch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
                /** @description Format - int32. The ID of the occupation. */
                occupation_id: number;
            };
            cookie?: never;
        };
        /** @description The occupation information to be updated. */
        requestBody?: {
            content: {
                /** @example {
                 *       "business_name": "Business name",
                 *       "job_title": "Associate",
                 *       "business_url": "www.businessurl.com",
                 *       "industry": "Industry",
                 *       "organization": "Organization",
                 *       "occupation": "Developer",
                 *       "matching_gift": "Yes",
                 *       "begin_date": "2023-01-01",
                 *       "end_date": "2024-02-02",
                 *       "specialty": "Specialty",
                 *       "parent_company": "Parent company",
                 *       "job_function": "Job functions",
                 *       "years_employed": "9",
                 *       "currently_employed": true
                 *     } */
                "application/json": components["schemas"]["OccupationUpdate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1UsersByUser_idEducationByEducation_idDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. */
                user_id: number;
                /** @description Format - int32. */
                education_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    V1UsersByUser_idEducationByEducation_idPatch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
                /** @description Format - int32. The ID of the education. */
                education_id: number;
            };
            cookie?: never;
        };
        /** @description The education model. */
        requestBody?: {
            content: {
                /** @example {
                 *       "school": "Brookfield Academy",
                 *       "degree": "High School Diploma",
                 *       "major": "Mathematics",
                 *       "field": "Encryption",
                 *       "grad_year": "2024",
                 *       "sort_order": "1"
                 *     } */
                "application/json": components["schemas"]["EducationUpdate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1UsersByUser_idAddressesByAddress_idByAddress_type_idDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user */
                user_id: number;
                /** @description Format - int32. The ID of the user's address to delete. */
                address_id: number;
                /** @description Format - int32. The ID of the user's address type to delete. */
                address_type_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returned when the operation succeeds. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    V1UsersByUser_idPhonesByPhone_idByPhone_type_idDelete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
                /** @description Format - int32. The ID of the user's phone to delete. */
                phone_id: number;
                /** @description Format - int32. The ID of the phone type. */
                phone_type_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    V1UsersByUser_idPhonesByPhone_idPatch: {
        parameters: {
            query?: {
                /** @description Set to true if phone number is shared */
                split_phone_if_shared?: boolean;
            };
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
                /** @description Format - int32. The phone id to be updated. */
                phone_id: number;
            };
            cookie?: never;
        };
        /** @description The phone information to be updated. */
        requestBody?: {
            content: {
                /** @example {
                 *       "number": "string",
                 *       "type_id": 0
                 *     } */
                "application/json": components["schemas"]["PhoneUpdate"];
            };
        };
        responses: {
            /** @description ID of the phone just updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1MedicalAthleticclearancePost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The athletics requirements to update */
        requestBody?: {
            content: {
                /** @example {
                 *       "user_id": 123,
                 *       "school_year": "2023 - 2024",
                 *       "season": "156057",
                 *       "athletics_requirement": [
                 *         {
                 *           "athletic_type": "Swim Test",
                 *           "athletic_date": "2022-01-01T01:00:00.0000000+00:00"
                 *         },
                 *         {
                 *           "athletic_type": "Can Actively Play"
                 *         }
                 *       ]
                 *     } */
                "application/json": components["schemas"]["StudentAthleticRequirementUpdate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    V1UsersEmploymentGet: {
        parameters: {
            query: {
                /** @description Comma-delimited list of base role IDs to get users for. */
                base_role_ids: string;
                /** @description Format - int32. The user's ID to start at to return the next batch of data. Results will start with the next user in the result set. */
                marker?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserEmploymentCollection"];
                };
            };
        };
    };
    V1UsersByUser_idRelationshipsByLeft_user_idPatch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the user. */
                user_id: number;
                /** @description Format - int32. The user ID of the relationship to the user */
                left_user_id: number;
            };
            cookie?: never;
        };
        /** @description Defines the relationship to be updated. */
        requestBody?: {
            content: {
                /** @example {
                 *       "give_parental_access": true,
                 *       "list_as_parent": true,
                 *       "tuition_responsible_signer": true,
                 *       "resides_with": true,
                 *       "do_not_contact": false,
                 *       "primary": false,
                 *       "comments": "It�s all relative."
                 *     } */
                "application/json": components["schemas"]["RelationshipUpdate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    V1CommunitygroupsRostersGet: {
        parameters: {
            query?: {
                /** @description The ID or label of the school year. Defaults to the current school year. */
                school_year?: string;
                /** @description Format - int32. Limits rosters returned to school level specified. */
                school_level?: number;
                /** @description Limits rosters returned to sections specified.Provide comma-delimited list of section_id values. */
                section_ids?: string;
                /** @description Format - date-time (as date-time in RFC3339). Limits rosters returned to sections that were modified on or after the date provided. Use ISO-8601 date-time format: 2024-09-01T00:00:00-5:00. */
                last_modified?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A List of Community Group rosters */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SectionRosterModel"][];
                };
            };
        };
    };
    V1TestscoresAllGet: {
        parameters: {
            query?: {
                /** @description Format - int32. The number of records per page (Default record size is 100). */
                size?: number;
                /** @description Format - int32. The page of results to start from (Default start page is 1). */
                page?: number;
                /** @description Provide the ID or name of a test type to limit results to that test type. */
                test_type?: string;
                /** @description Format - date-time (as date-time in RFC3339). Limits results to tests with a test date on or after the specified date. Use ISO 8601 date format. */
                start_date?: string;
                /** @description Format - date-time (as date-time in RFC3339). Limits results to tests with a test date on or before the specified date. Use ISO 8601 date format. */
                end_date?: string;
                /** @description Format - date-time (as date-time in RFC3339). Limits results to tests created or modified after the specified date. */
                last_modified?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TestScoreCollection"];
                };
            };
        };
    };
    V1AcademicsRostersGet: {
        parameters: {
            query?: {
                /** @description The ID or label of the school year. <br />Defaults to the current school year. */
                school_year?: string;
                /** @description Format - int32. Limits rosters returned to school level specified. */
                school_level?: number;
                /** @description Limits rosters returned to sections specified. <br />Provide comma-delimited list of section_id values. */
                section_ids?: string;
                /** @description Format - date-time (as date-time in RFC3339). Limits rosters returned to sections that were modified on or after the date provided. <br /> Use ISO-8601 date-time format: 2024-09-01T00:00:00-5:00. */
                last_modified?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A List of Academic rosters */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SectionRosterModel"][];
                };
            };
        };
    };
    V1AcademicsSectionsBySection_idCustomfieldsListPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The Id of the section to create a custom field for */
                section_id: number;
            };
            cookie?: never;
        };
        /** @description Object that describes the list of custom fields that will be created for the section. */
        requestBody?: {
            content: {
                /** @example [
                 *       {
                 *         "field_id": 1,
                 *         "data_type_id": 1,
                 *         "int_value": 1
                 *       },
                 *       {
                 *         "field_id": 2,
                 *         "data_type_id": 2,
                 *         "text_value": "texting"
                 *       },
                 *       {
                 *         "field_id": 3,
                 *         "data_type_id": 3,
                 *         "decimal_value": 3.14
                 *       },
                 *       {
                 *         "field_id": 4,
                 *         "data_type_id": 4,
                 *         "bit_value": true
                 *       }
                 *     ] */
                "application/json": components["schemas"]["SectionAdminCustomFieldCreate"][];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1AcademicsSectionsBySection_idCustomfieldsListPatch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The Id of the section to update a custom field for */
                section_id: number;
            };
            cookie?: never;
        };
        /** @description Object that describes the list of custom fields that will be updated for the section. */
        requestBody?: {
            content: {
                /** @example [
                 *       {
                 *         "id": 1,
                 *         "field_id": 1,
                 *         "data_type_id": 1,
                 *         "int_value": 1
                 *       },
                 *       {
                 *         "id": 1,
                 *         "field_id": 2,
                 *         "data_type_id": 2,
                 *         "text_value": "texting"
                 *       },
                 *       {
                 *         "id": 3,
                 *         "field_id": 3,
                 *         "data_type_id": 3,
                 *         "decimal_value": 3.14
                 *       },
                 *       {
                 *         "id": 4,
                 *         "field_id": 4,
                 *         "data_type_id": 4,
                 *         "bit_value": true
                 *       }
                 *     ] */
                "application/json": components["schemas"]["SectionAdminCustomFieldUpdate"][];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1ActivitiesRostersGet: {
        parameters: {
            query?: {
                /** @description The ID or label of the school year. Defaults to the current school year. */
                school_year?: string;
                /** @description Format - int32. Limits rosters returned to school level specified. */
                school_level?: number;
                /** @description Limits rosters returned to sections specified.Provide comma-delimited list of section_id values. */
                section_ids?: string;
                /** @description Format - date-time (as date-time in RFC3339). Limits rosters returned to sections that were modified on or after the date provided. Use ISO-8601 date-time format: 2024-09-01T00:00:00-5:00. */
                last_modified?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A List of Activities rosters */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SectionRosterModel"][];
                };
            };
        };
    };
    V1AdvisoriesRostersGet: {
        parameters: {
            query?: {
                /** @description The ID or label of the school year. Defaults to the current school year. */
                school_year?: string;
                /** @description Format - int32. Limits rosters returned to school level specified. */
                school_level?: number;
                /** @description Limits rosters returned to sections specified.Provide comma-delimited list of section_id values. */
                section_ids?: string;
                /** @description Format - date-time (as date-time in RFC3339). Limits rosters returned to sections that were modified on or after the date provided. Use ISO-8601 date-time format: 2024-09-01T00:00:00-5:00. */
                last_modified?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A List of Advisories rosters */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SectionRosterModel"][];
                };
            };
        };
    };
    V1AthleticsRostersGet: {
        parameters: {
            query?: {
                /** @description The ID or label of the school year. Defaults to the current school year. */
                school_year?: string;
                /** @description Format - int32. Limits rosters returned to school level specified. */
                school_level?: number;
                /** @description Limits rosters returned to sections specified.Provide comma-delimited list of section_id values. */
                section_ids?: string;
                /** @description Format - date-time (as date-time in RFC3339). Limits rosters returned to sections that were modified on or after the date provided. Use ISO-8601 date-time format: 2024-09-01T00:00:00-5:00. */
                last_modified?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A List of Athletic rosters */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AthleticSectionRoster"][];
                };
            };
        };
    };
    V1AcademicsCoursesByCourse_idCustomfieldsListPost: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the course. */
                course_id: number;
            };
            cookie?: never;
        };
        /** @description Object that describes the list of custom fields that will be created for the course. */
        requestBody?: {
            content: {
                /** @example [
                 *       {
                 *         "field_id": 1,
                 *         "data_type_id": 1,
                 *         "int_value": 1
                 *       },
                 *       {
                 *         "field_id": 2,
                 *         "data_type_id": 2,
                 *         "text_value": "texting"
                 *       },
                 *       {
                 *         "field_id": 3,
                 *         "data_type_id": 3,
                 *         "decimal_value": 3.14
                 *       },
                 *       {
                 *         "field_id": 4,
                 *         "data_type_id": 4,
                 *         "bit_value": true
                 *       }
                 *     ] */
                "application/json": components["schemas"]["OfferingAdminCustomFieldCreate"][];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1AcademicsCoursesByCourse_idCustomfieldsListPatch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Format - int32. The ID of the course. */
                course_id: number;
            };
            cookie?: never;
        };
        /** @description Object that describes the list of custom fields that will be updated for the course. */
        requestBody?: {
            content: {
                /** @example [
                 *       {
                 *         "id": 1,
                 *         "field_id": 1,
                 *         "data_type_id": 1,
                 *         "int_value": 1
                 *       },
                 *       {
                 *         "id": 1,
                 *         "field_id": 2,
                 *         "data_type_id": 2,
                 *         "text_value": "texting"
                 *       },
                 *       {
                 *         "id": 3,
                 *         "field_id": 3,
                 *         "data_type_id": 3,
                 *         "decimal_value": 3.14
                 *       },
                 *       {
                 *         "id": 4,
                 *         "field_id": 4,
                 *         "data_type_id": 4,
                 *         "bit_value": true
                 *       }
                 *     ] */
                "application/json": components["schemas"]["OfferingAdminCustomFieldUpdate"][];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    V1DormsRostersGet: {
        parameters: {
            query?: {
                /** @description The ID or label of the school year. Defaults to the current school year. */
                school_year?: string;
                /** @description Format - int32. Limits rosters returned to school level specified. */
                school_level?: number;
                /** @description Limits rosters returned to sections specified.Provide comma-delimited list of section_id values. */
                section_ids?: string;
                /** @description Format - date-time (as date-time in RFC3339). Limits rosters returned to sections that were modified on or after the date provided. Use ISO-8601 date-time format: 2024-09-01T00:00:00-5:00. */
                last_modified?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A List of Advisories rosters */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SectionRosterModel"][];
                };
            };
        };
    };
}
