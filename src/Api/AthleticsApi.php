<?php
/**
 * AthleticsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SKY\School\ApiException;
use SKY\School\Configuration;
use SKY\School\HeaderSelector;
use SKY\School\ObjectSerializer;

/**
 * AthleticsApi Class Doc Comment
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AthleticsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'v1AthleticsHighlightsByHighlightIdGet' => [
            'application/json',
        ],
        'v1AthleticsLocationsGet' => [
            'application/json',
        ],
        'v1AthleticsLocationsPost' => [
            'application/json',
        ],
        'v1AthleticsOpponentsGet' => [
            'application/json',
        ],
        'v1AthleticsOpponentsPost' => [
            'application/json',
        ],
        'v1AthleticsResultPost' => [
            'application/json',
        ],
        'v1AthleticsSchedulesGet' => [
            'application/json',
        ],
        'v1AthleticsSportsGet' => [
            'application/json',
        ],
        'v1AthleticsSportslevelsGet' => [
            'application/json',
        ],
        'v1AthleticsTeamsByTeamIdRosterGet' => [
            'application/json',
        ],
        'v1AthleticsTeamsByTeamIdScheduleByGameIdDelete' => [
            'application/json',
        ],
        'v1AthleticsTeamsByTeamIdSchedulePatch' => [
            'application/json',
        ],
        'v1AthleticsTeamsByTeamIdSchedulePost' => [
            'application/json',
        ],
        'v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDelete' => [
            'application/json',
        ],
        'v1AthleticsTeamsByTeamIdSchedulePracticePatch' => [
            'application/json',
        ],
        'v1AthleticsTeamsByTeamIdSchedulePracticePost' => [
            'application/json',
        ],
        'v1AthleticsTeamsGet' => [
            'application/json',
        ],
        'v1AthleticsTransportationtypesGet' => [
            'application/json',
        ],
        'v1AthleticsVenuesGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1AthleticsHighlightsByHighlightIdGet
     *
     * Athletics highlights by ID
     *
     * @param  int $highlight_id Format - int32. ID of the highlight to be returned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsHighlightsByHighlightIdGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\Highlight
     */
    public function v1AthleticsHighlightsByHighlightIdGet($highlight_id, string $contentType = self::contentTypes['v1AthleticsHighlightsByHighlightIdGet'][0])
    {
        [$response] = $this->v1AthleticsHighlightsByHighlightIdGetWithHttpInfo($highlight_id, $contentType);
        return $response;
    }

    /**
     * Operation v1AthleticsHighlightsByHighlightIdGetWithHttpInfo
     *
     * Athletics highlights by ID
     *
     * @param  int $highlight_id Format - int32. ID of the highlight to be returned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsHighlightsByHighlightIdGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\Highlight, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AthleticsHighlightsByHighlightIdGetWithHttpInfo($highlight_id, string $contentType = self::contentTypes['v1AthleticsHighlightsByHighlightIdGet'][0])
    {
        $request = $this->v1AthleticsHighlightsByHighlightIdGetRequest($highlight_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\Highlight' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\Highlight' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\Highlight', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\Highlight';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\Highlight',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AthleticsHighlightsByHighlightIdGetAsync
     *
     * Athletics highlights by ID
     *
     * @param  int $highlight_id Format - int32. ID of the highlight to be returned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsHighlightsByHighlightIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsHighlightsByHighlightIdGetAsync($highlight_id, string $contentType = self::contentTypes['v1AthleticsHighlightsByHighlightIdGet'][0])
    {
        return $this->v1AthleticsHighlightsByHighlightIdGetAsyncWithHttpInfo($highlight_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AthleticsHighlightsByHighlightIdGetAsyncWithHttpInfo
     *
     * Athletics highlights by ID
     *
     * @param  int $highlight_id Format - int32. ID of the highlight to be returned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsHighlightsByHighlightIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsHighlightsByHighlightIdGetAsyncWithHttpInfo($highlight_id, string $contentType = self::contentTypes['v1AthleticsHighlightsByHighlightIdGet'][0])
    {
        $returnType = '\SKY\School\Model\Highlight';
        $request = $this->v1AthleticsHighlightsByHighlightIdGetRequest($highlight_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AthleticsHighlightsByHighlightIdGet'
     *
     * @param  int $highlight_id Format - int32. ID of the highlight to be returned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsHighlightsByHighlightIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AthleticsHighlightsByHighlightIdGetRequest($highlight_id, string $contentType = self::contentTypes['v1AthleticsHighlightsByHighlightIdGet'][0])
    {

        // verify the required parameter 'highlight_id' is set
        if ($highlight_id === null || (is_array($highlight_id) && count($highlight_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $highlight_id when calling v1AthleticsHighlightsByHighlightIdGet'
            );
        }


        $resourcePath = '/v1/athletics/highlights/{highlight_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($highlight_id !== null) {
            $resourcePath = str_replace(
                '{' . 'highlight_id' . '}',
                ObjectSerializer::toPathValue($highlight_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AthleticsLocationsGet
     *
     * Athletics locations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsLocationsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\LocationCollection
     */
    public function v1AthleticsLocationsGet(string $contentType = self::contentTypes['v1AthleticsLocationsGet'][0])
    {
        [$response] = $this->v1AthleticsLocationsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation v1AthleticsLocationsGetWithHttpInfo
     *
     * Athletics locations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsLocationsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\LocationCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AthleticsLocationsGetWithHttpInfo(string $contentType = self::contentTypes['v1AthleticsLocationsGet'][0])
    {
        $request = $this->v1AthleticsLocationsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\LocationCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\LocationCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\LocationCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\LocationCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\LocationCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AthleticsLocationsGetAsync
     *
     * Athletics locations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsLocationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsLocationsGetAsync(string $contentType = self::contentTypes['v1AthleticsLocationsGet'][0])
    {
        return $this->v1AthleticsLocationsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AthleticsLocationsGetAsyncWithHttpInfo
     *
     * Athletics locations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsLocationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsLocationsGetAsyncWithHttpInfo(string $contentType = self::contentTypes['v1AthleticsLocationsGet'][0])
    {
        $returnType = '\SKY\School\Model\LocationCollection';
        $request = $this->v1AthleticsLocationsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AthleticsLocationsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsLocationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AthleticsLocationsGetRequest(string $contentType = self::contentTypes['v1AthleticsLocationsGet'][0])
    {


        $resourcePath = '/v1/athletics/locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AthleticsLocationsPost
     *
     * Athletics location create
     *
     * @param  \SKY\School\Model\LocationCreateModel $location_create_model The location to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsLocationsPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1AthleticsLocationsPost($location_create_model = null, string $contentType = self::contentTypes['v1AthleticsLocationsPost'][0])
    {
        [$response] = $this->v1AthleticsLocationsPostWithHttpInfo($location_create_model, $contentType);
        return $response;
    }

    /**
     * Operation v1AthleticsLocationsPostWithHttpInfo
     *
     * Athletics location create
     *
     * @param  \SKY\School\Model\LocationCreateModel $location_create_model The location to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsLocationsPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AthleticsLocationsPostWithHttpInfo($location_create_model = null, string $contentType = self::contentTypes['v1AthleticsLocationsPost'][0])
    {
        $request = $this->v1AthleticsLocationsPostRequest($location_create_model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AthleticsLocationsPostAsync
     *
     * Athletics location create
     *
     * @param  \SKY\School\Model\LocationCreateModel $location_create_model The location to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsLocationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsLocationsPostAsync($location_create_model = null, string $contentType = self::contentTypes['v1AthleticsLocationsPost'][0])
    {
        return $this->v1AthleticsLocationsPostAsyncWithHttpInfo($location_create_model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AthleticsLocationsPostAsyncWithHttpInfo
     *
     * Athletics location create
     *
     * @param  \SKY\School\Model\LocationCreateModel $location_create_model The location to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsLocationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsLocationsPostAsyncWithHttpInfo($location_create_model = null, string $contentType = self::contentTypes['v1AthleticsLocationsPost'][0])
    {
        $returnType = 'int';
        $request = $this->v1AthleticsLocationsPostRequest($location_create_model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AthleticsLocationsPost'
     *
     * @param  \SKY\School\Model\LocationCreateModel $location_create_model The location to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsLocationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AthleticsLocationsPostRequest($location_create_model = null, string $contentType = self::contentTypes['v1AthleticsLocationsPost'][0])
    {



        $resourcePath = '/v1/athletics/locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($location_create_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($location_create_model));
            } else {
                $httpBody = $location_create_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AthleticsOpponentsGet
     *
     * Athletics opponents
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsOpponentsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\OpponentFlyweightCollection
     */
    public function v1AthleticsOpponentsGet(string $contentType = self::contentTypes['v1AthleticsOpponentsGet'][0])
    {
        [$response] = $this->v1AthleticsOpponentsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation v1AthleticsOpponentsGetWithHttpInfo
     *
     * Athletics opponents
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsOpponentsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\OpponentFlyweightCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AthleticsOpponentsGetWithHttpInfo(string $contentType = self::contentTypes['v1AthleticsOpponentsGet'][0])
    {
        $request = $this->v1AthleticsOpponentsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\OpponentFlyweightCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\OpponentFlyweightCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\OpponentFlyweightCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\OpponentFlyweightCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\OpponentFlyweightCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AthleticsOpponentsGetAsync
     *
     * Athletics opponents
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsOpponentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsOpponentsGetAsync(string $contentType = self::contentTypes['v1AthleticsOpponentsGet'][0])
    {
        return $this->v1AthleticsOpponentsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AthleticsOpponentsGetAsyncWithHttpInfo
     *
     * Athletics opponents
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsOpponentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsOpponentsGetAsyncWithHttpInfo(string $contentType = self::contentTypes['v1AthleticsOpponentsGet'][0])
    {
        $returnType = '\SKY\School\Model\OpponentFlyweightCollection';
        $request = $this->v1AthleticsOpponentsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AthleticsOpponentsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsOpponentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AthleticsOpponentsGetRequest(string $contentType = self::contentTypes['v1AthleticsOpponentsGet'][0])
    {


        $resourcePath = '/v1/athletics/opponents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AthleticsOpponentsPost
     *
     * Athletics opponent create
     *
     * @param  \SKY\School\Model\OpponentUpdateModel $opponent_update_model The opponent to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsOpponentsPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1AthleticsOpponentsPost($opponent_update_model = null, string $contentType = self::contentTypes['v1AthleticsOpponentsPost'][0])
    {
        [$response] = $this->v1AthleticsOpponentsPostWithHttpInfo($opponent_update_model, $contentType);
        return $response;
    }

    /**
     * Operation v1AthleticsOpponentsPostWithHttpInfo
     *
     * Athletics opponent create
     *
     * @param  \SKY\School\Model\OpponentUpdateModel $opponent_update_model The opponent to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsOpponentsPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AthleticsOpponentsPostWithHttpInfo($opponent_update_model = null, string $contentType = self::contentTypes['v1AthleticsOpponentsPost'][0])
    {
        $request = $this->v1AthleticsOpponentsPostRequest($opponent_update_model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AthleticsOpponentsPostAsync
     *
     * Athletics opponent create
     *
     * @param  \SKY\School\Model\OpponentUpdateModel $opponent_update_model The opponent to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsOpponentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsOpponentsPostAsync($opponent_update_model = null, string $contentType = self::contentTypes['v1AthleticsOpponentsPost'][0])
    {
        return $this->v1AthleticsOpponentsPostAsyncWithHttpInfo($opponent_update_model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AthleticsOpponentsPostAsyncWithHttpInfo
     *
     * Athletics opponent create
     *
     * @param  \SKY\School\Model\OpponentUpdateModel $opponent_update_model The opponent to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsOpponentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsOpponentsPostAsyncWithHttpInfo($opponent_update_model = null, string $contentType = self::contentTypes['v1AthleticsOpponentsPost'][0])
    {
        $returnType = 'int';
        $request = $this->v1AthleticsOpponentsPostRequest($opponent_update_model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AthleticsOpponentsPost'
     *
     * @param  \SKY\School\Model\OpponentUpdateModel $opponent_update_model The opponent to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsOpponentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AthleticsOpponentsPostRequest($opponent_update_model = null, string $contentType = self::contentTypes['v1AthleticsOpponentsPost'][0])
    {



        $resourcePath = '/v1/athletics/opponents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($opponent_update_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($opponent_update_model));
            } else {
                $httpBody = $opponent_update_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AthleticsResultPost
     *
     * Athletics game result
     *
     * @param  \SKY\School\Model\ResultCreate $result_create  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsResultPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1AthleticsResultPost($result_create = null, string $contentType = self::contentTypes['v1AthleticsResultPost'][0])
    {
        $this->v1AthleticsResultPostWithHttpInfo($result_create, $contentType);
    }

    /**
     * Operation v1AthleticsResultPostWithHttpInfo
     *
     * Athletics game result
     *
     * @param  \SKY\School\Model\ResultCreate $result_create  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsResultPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AthleticsResultPostWithHttpInfo($result_create = null, string $contentType = self::contentTypes['v1AthleticsResultPost'][0])
    {
        $request = $this->v1AthleticsResultPostRequest($result_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1AthleticsResultPostAsync
     *
     * Athletics game result
     *
     * @param  \SKY\School\Model\ResultCreate $result_create  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsResultPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsResultPostAsync($result_create = null, string $contentType = self::contentTypes['v1AthleticsResultPost'][0])
    {
        return $this->v1AthleticsResultPostAsyncWithHttpInfo($result_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AthleticsResultPostAsyncWithHttpInfo
     *
     * Athletics game result
     *
     * @param  \SKY\School\Model\ResultCreate $result_create  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsResultPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsResultPostAsyncWithHttpInfo($result_create = null, string $contentType = self::contentTypes['v1AthleticsResultPost'][0])
    {
        $returnType = '';
        $request = $this->v1AthleticsResultPostRequest($result_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AthleticsResultPost'
     *
     * @param  \SKY\School\Model\ResultCreate $result_create  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsResultPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AthleticsResultPostRequest($result_create = null, string $contentType = self::contentTypes['v1AthleticsResultPost'][0])
    {



        $resourcePath = '/v1/athletics/result';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($result_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($result_create));
            } else {
                $httpBody = $result_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AthleticsSchedulesGet
     *
     * Athletics schedules
     *
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). Filter games/practices after this date (optional)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). Filter games/practices before this date (optional)
     * @param  string $school_year Filter on a specific school year. Defaults to current school year. (optional)
     * @param  bool $include_practice Set to &#x60;&#x60;&#x60;true&#x60;&#x60;&#x60; to include practices with games. Defaults to false. (optional, default to false)
     * @param  int $team_id Format - int32. Filter games/practices for a specific team. Defaults to all teams. (optional, default to 0)
     * @param  \DateTime $last_modified Format - date-time (as date-time in RFC3339). Set date to limit results to games with information changed on and after that date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsSchedulesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\ScheduleItemCollection
     */
    public function v1AthleticsSchedulesGet($start_date = null, $end_date = null, $school_year = null, $include_practice = false, $team_id = 0, $last_modified = null, string $contentType = self::contentTypes['v1AthleticsSchedulesGet'][0])
    {
        [$response] = $this->v1AthleticsSchedulesGetWithHttpInfo($start_date, $end_date, $school_year, $include_practice, $team_id, $last_modified, $contentType);
        return $response;
    }

    /**
     * Operation v1AthleticsSchedulesGetWithHttpInfo
     *
     * Athletics schedules
     *
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). Filter games/practices after this date (optional)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). Filter games/practices before this date (optional)
     * @param  string $school_year Filter on a specific school year. Defaults to current school year. (optional)
     * @param  bool $include_practice Set to &#x60;&#x60;&#x60;true&#x60;&#x60;&#x60; to include practices with games. Defaults to false. (optional, default to false)
     * @param  int $team_id Format - int32. Filter games/practices for a specific team. Defaults to all teams. (optional, default to 0)
     * @param  \DateTime $last_modified Format - date-time (as date-time in RFC3339). Set date to limit results to games with information changed on and after that date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsSchedulesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\ScheduleItemCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AthleticsSchedulesGetWithHttpInfo($start_date = null, $end_date = null, $school_year = null, $include_practice = false, $team_id = 0, $last_modified = null, string $contentType = self::contentTypes['v1AthleticsSchedulesGet'][0])
    {
        $request = $this->v1AthleticsSchedulesGetRequest($start_date, $end_date, $school_year, $include_practice, $team_id, $last_modified, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\ScheduleItemCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\ScheduleItemCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\ScheduleItemCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\ScheduleItemCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\ScheduleItemCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AthleticsSchedulesGetAsync
     *
     * Athletics schedules
     *
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). Filter games/practices after this date (optional)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). Filter games/practices before this date (optional)
     * @param  string $school_year Filter on a specific school year. Defaults to current school year. (optional)
     * @param  bool $include_practice Set to &#x60;&#x60;&#x60;true&#x60;&#x60;&#x60; to include practices with games. Defaults to false. (optional, default to false)
     * @param  int $team_id Format - int32. Filter games/practices for a specific team. Defaults to all teams. (optional, default to 0)
     * @param  \DateTime $last_modified Format - date-time (as date-time in RFC3339). Set date to limit results to games with information changed on and after that date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsSchedulesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsSchedulesGetAsync($start_date = null, $end_date = null, $school_year = null, $include_practice = false, $team_id = 0, $last_modified = null, string $contentType = self::contentTypes['v1AthleticsSchedulesGet'][0])
    {
        return $this->v1AthleticsSchedulesGetAsyncWithHttpInfo($start_date, $end_date, $school_year, $include_practice, $team_id, $last_modified, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AthleticsSchedulesGetAsyncWithHttpInfo
     *
     * Athletics schedules
     *
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). Filter games/practices after this date (optional)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). Filter games/practices before this date (optional)
     * @param  string $school_year Filter on a specific school year. Defaults to current school year. (optional)
     * @param  bool $include_practice Set to &#x60;&#x60;&#x60;true&#x60;&#x60;&#x60; to include practices with games. Defaults to false. (optional, default to false)
     * @param  int $team_id Format - int32. Filter games/practices for a specific team. Defaults to all teams. (optional, default to 0)
     * @param  \DateTime $last_modified Format - date-time (as date-time in RFC3339). Set date to limit results to games with information changed on and after that date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsSchedulesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsSchedulesGetAsyncWithHttpInfo($start_date = null, $end_date = null, $school_year = null, $include_practice = false, $team_id = 0, $last_modified = null, string $contentType = self::contentTypes['v1AthleticsSchedulesGet'][0])
    {
        $returnType = '\SKY\School\Model\ScheduleItemCollection';
        $request = $this->v1AthleticsSchedulesGetRequest($start_date, $end_date, $school_year, $include_practice, $team_id, $last_modified, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AthleticsSchedulesGet'
     *
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). Filter games/practices after this date (optional)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). Filter games/practices before this date (optional)
     * @param  string $school_year Filter on a specific school year. Defaults to current school year. (optional)
     * @param  bool $include_practice Set to &#x60;&#x60;&#x60;true&#x60;&#x60;&#x60; to include practices with games. Defaults to false. (optional, default to false)
     * @param  int $team_id Format - int32. Filter games/practices for a specific team. Defaults to all teams. (optional, default to 0)
     * @param  \DateTime $last_modified Format - date-time (as date-time in RFC3339). Set date to limit results to games with information changed on and after that date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsSchedulesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AthleticsSchedulesGetRequest($start_date = null, $end_date = null, $school_year = null, $include_practice = false, $team_id = 0, $last_modified = null, string $contentType = self::contentTypes['v1AthleticsSchedulesGet'][0])
    {








        $resourcePath = '/v1/athletics/schedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'start_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'end_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $school_year,
            'school_year', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_practice,
            'include_practice', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $team_id,
            'team_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_modified,
            'last_modified', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AthleticsSportsGet
     *
     * Athletics sports
     *
     * @param  int $season_id Format - int32. Season ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsSportsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\SportCollection
     */
    public function v1AthleticsSportsGet($season_id = null, string $contentType = self::contentTypes['v1AthleticsSportsGet'][0])
    {
        [$response] = $this->v1AthleticsSportsGetWithHttpInfo($season_id, $contentType);
        return $response;
    }

    /**
     * Operation v1AthleticsSportsGetWithHttpInfo
     *
     * Athletics sports
     *
     * @param  int $season_id Format - int32. Season ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsSportsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\SportCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AthleticsSportsGetWithHttpInfo($season_id = null, string $contentType = self::contentTypes['v1AthleticsSportsGet'][0])
    {
        $request = $this->v1AthleticsSportsGetRequest($season_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\SportCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\SportCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\SportCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\SportCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\SportCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AthleticsSportsGetAsync
     *
     * Athletics sports
     *
     * @param  int $season_id Format - int32. Season ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsSportsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsSportsGetAsync($season_id = null, string $contentType = self::contentTypes['v1AthleticsSportsGet'][0])
    {
        return $this->v1AthleticsSportsGetAsyncWithHttpInfo($season_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AthleticsSportsGetAsyncWithHttpInfo
     *
     * Athletics sports
     *
     * @param  int $season_id Format - int32. Season ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsSportsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsSportsGetAsyncWithHttpInfo($season_id = null, string $contentType = self::contentTypes['v1AthleticsSportsGet'][0])
    {
        $returnType = '\SKY\School\Model\SportCollection';
        $request = $this->v1AthleticsSportsGetRequest($season_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AthleticsSportsGet'
     *
     * @param  int $season_id Format - int32. Season ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsSportsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AthleticsSportsGetRequest($season_id = null, string $contentType = self::contentTypes['v1AthleticsSportsGet'][0])
    {



        $resourcePath = '/v1/athletics/sports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $season_id,
            'season_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AthleticsSportslevelsGet
     *
     * Athletics sports levels
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsSportslevelsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\SportsLevelCollection
     */
    public function v1AthleticsSportslevelsGet(string $contentType = self::contentTypes['v1AthleticsSportslevelsGet'][0])
    {
        [$response] = $this->v1AthleticsSportslevelsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation v1AthleticsSportslevelsGetWithHttpInfo
     *
     * Athletics sports levels
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsSportslevelsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\SportsLevelCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AthleticsSportslevelsGetWithHttpInfo(string $contentType = self::contentTypes['v1AthleticsSportslevelsGet'][0])
    {
        $request = $this->v1AthleticsSportslevelsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\SportsLevelCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\SportsLevelCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\SportsLevelCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\SportsLevelCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\SportsLevelCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AthleticsSportslevelsGetAsync
     *
     * Athletics sports levels
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsSportslevelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsSportslevelsGetAsync(string $contentType = self::contentTypes['v1AthleticsSportslevelsGet'][0])
    {
        return $this->v1AthleticsSportslevelsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AthleticsSportslevelsGetAsyncWithHttpInfo
     *
     * Athletics sports levels
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsSportslevelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsSportslevelsGetAsyncWithHttpInfo(string $contentType = self::contentTypes['v1AthleticsSportslevelsGet'][0])
    {
        $returnType = '\SKY\School\Model\SportsLevelCollection';
        $request = $this->v1AthleticsSportslevelsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AthleticsSportslevelsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsSportslevelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AthleticsSportslevelsGetRequest(string $contentType = self::contentTypes['v1AthleticsSportslevelsGet'][0])
    {


        $resourcePath = '/v1/athletics/sportslevels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdRosterGet
     *
     * Athletics team roster
     *
     * @param  int $team_id Format - int32. The ID for the team to get the roster for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdRosterGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\Roster
     */
    public function v1AthleticsTeamsByTeamIdRosterGet($team_id, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdRosterGet'][0])
    {
        [$response] = $this->v1AthleticsTeamsByTeamIdRosterGetWithHttpInfo($team_id, $contentType);
        return $response;
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdRosterGetWithHttpInfo
     *
     * Athletics team roster
     *
     * @param  int $team_id Format - int32. The ID for the team to get the roster for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdRosterGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\Roster, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AthleticsTeamsByTeamIdRosterGetWithHttpInfo($team_id, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdRosterGet'][0])
    {
        $request = $this->v1AthleticsTeamsByTeamIdRosterGetRequest($team_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\Roster' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\Roster' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\Roster', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\Roster';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\Roster',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdRosterGetAsync
     *
     * Athletics team roster
     *
     * @param  int $team_id Format - int32. The ID for the team to get the roster for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdRosterGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsTeamsByTeamIdRosterGetAsync($team_id, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdRosterGet'][0])
    {
        return $this->v1AthleticsTeamsByTeamIdRosterGetAsyncWithHttpInfo($team_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdRosterGetAsyncWithHttpInfo
     *
     * Athletics team roster
     *
     * @param  int $team_id Format - int32. The ID for the team to get the roster for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdRosterGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsTeamsByTeamIdRosterGetAsyncWithHttpInfo($team_id, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdRosterGet'][0])
    {
        $returnType = '\SKY\School\Model\Roster';
        $request = $this->v1AthleticsTeamsByTeamIdRosterGetRequest($team_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AthleticsTeamsByTeamIdRosterGet'
     *
     * @param  int $team_id Format - int32. The ID for the team to get the roster for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdRosterGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AthleticsTeamsByTeamIdRosterGetRequest($team_id, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdRosterGet'][0])
    {

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling v1AthleticsTeamsByTeamIdRosterGet'
            );
        }


        $resourcePath = '/v1/athletics/teams/{team_id}/roster';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($team_id !== null) {
            $resourcePath = str_replace(
                '{' . 'team_id' . '}',
                ObjectSerializer::toPathValue($team_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdScheduleByGameIdDelete
     *
     * Athletics game delete
     *
     * @param  int $team_id Format - int32. ID of the team for the game to be deleted (required)
     * @param  int $game_id Format - int32. ID of the game to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdScheduleByGameIdDelete'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1AthleticsTeamsByTeamIdScheduleByGameIdDelete($team_id, $game_id, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdScheduleByGameIdDelete'][0])
    {
        $this->v1AthleticsTeamsByTeamIdScheduleByGameIdDeleteWithHttpInfo($team_id, $game_id, $contentType);
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdScheduleByGameIdDeleteWithHttpInfo
     *
     * Athletics game delete
     *
     * @param  int $team_id Format - int32. ID of the team for the game to be deleted (required)
     * @param  int $game_id Format - int32. ID of the game to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdScheduleByGameIdDelete'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AthleticsTeamsByTeamIdScheduleByGameIdDeleteWithHttpInfo($team_id, $game_id, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdScheduleByGameIdDelete'][0])
    {
        $request = $this->v1AthleticsTeamsByTeamIdScheduleByGameIdDeleteRequest($team_id, $game_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdScheduleByGameIdDeleteAsync
     *
     * Athletics game delete
     *
     * @param  int $team_id Format - int32. ID of the team for the game to be deleted (required)
     * @param  int $game_id Format - int32. ID of the game to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdScheduleByGameIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsTeamsByTeamIdScheduleByGameIdDeleteAsync($team_id, $game_id, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdScheduleByGameIdDelete'][0])
    {
        return $this->v1AthleticsTeamsByTeamIdScheduleByGameIdDeleteAsyncWithHttpInfo($team_id, $game_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdScheduleByGameIdDeleteAsyncWithHttpInfo
     *
     * Athletics game delete
     *
     * @param  int $team_id Format - int32. ID of the team for the game to be deleted (required)
     * @param  int $game_id Format - int32. ID of the game to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdScheduleByGameIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsTeamsByTeamIdScheduleByGameIdDeleteAsyncWithHttpInfo($team_id, $game_id, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdScheduleByGameIdDelete'][0])
    {
        $returnType = '';
        $request = $this->v1AthleticsTeamsByTeamIdScheduleByGameIdDeleteRequest($team_id, $game_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AthleticsTeamsByTeamIdScheduleByGameIdDelete'
     *
     * @param  int $team_id Format - int32. ID of the team for the game to be deleted (required)
     * @param  int $game_id Format - int32. ID of the game to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdScheduleByGameIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AthleticsTeamsByTeamIdScheduleByGameIdDeleteRequest($team_id, $game_id, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdScheduleByGameIdDelete'][0])
    {

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling v1AthleticsTeamsByTeamIdScheduleByGameIdDelete'
            );
        }

        // verify the required parameter 'game_id' is set
        if ($game_id === null || (is_array($game_id) && count($game_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game_id when calling v1AthleticsTeamsByTeamIdScheduleByGameIdDelete'
            );
        }


        $resourcePath = '/v1/athletics/teams/{team_id}/schedule/{game_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($team_id !== null) {
            $resourcePath = str_replace(
                '{' . 'team_id' . '}',
                ObjectSerializer::toPathValue($team_id),
                $resourcePath
            );
        }
        // path params
        if ($game_id !== null) {
            $resourcePath = str_replace(
                '{' . 'game_id' . '}',
                ObjectSerializer::toPathValue($game_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdSchedulePatch
     *
     * Athletics game update
     *
     * @param  int $team_id Format - int32. ID of the team for the game to be updated (required)
     * @param  \SKY\School\Model\GameUpdate $game_update Information for the game to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1AthleticsTeamsByTeamIdSchedulePatch($team_id, $game_update = null, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePatch'][0])
    {
        $this->v1AthleticsTeamsByTeamIdSchedulePatchWithHttpInfo($team_id, $game_update, $contentType);
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdSchedulePatchWithHttpInfo
     *
     * Athletics game update
     *
     * @param  int $team_id Format - int32. ID of the team for the game to be updated (required)
     * @param  \SKY\School\Model\GameUpdate $game_update Information for the game to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AthleticsTeamsByTeamIdSchedulePatchWithHttpInfo($team_id, $game_update = null, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePatch'][0])
    {
        $request = $this->v1AthleticsTeamsByTeamIdSchedulePatchRequest($team_id, $game_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdSchedulePatchAsync
     *
     * Athletics game update
     *
     * @param  int $team_id Format - int32. ID of the team for the game to be updated (required)
     * @param  \SKY\School\Model\GameUpdate $game_update Information for the game to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsTeamsByTeamIdSchedulePatchAsync($team_id, $game_update = null, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePatch'][0])
    {
        return $this->v1AthleticsTeamsByTeamIdSchedulePatchAsyncWithHttpInfo($team_id, $game_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdSchedulePatchAsyncWithHttpInfo
     *
     * Athletics game update
     *
     * @param  int $team_id Format - int32. ID of the team for the game to be updated (required)
     * @param  \SKY\School\Model\GameUpdate $game_update Information for the game to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsTeamsByTeamIdSchedulePatchAsyncWithHttpInfo($team_id, $game_update = null, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePatch'][0])
    {
        $returnType = '';
        $request = $this->v1AthleticsTeamsByTeamIdSchedulePatchRequest($team_id, $game_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AthleticsTeamsByTeamIdSchedulePatch'
     *
     * @param  int $team_id Format - int32. ID of the team for the game to be updated (required)
     * @param  \SKY\School\Model\GameUpdate $game_update Information for the game to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AthleticsTeamsByTeamIdSchedulePatchRequest($team_id, $game_update = null, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePatch'][0])
    {

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling v1AthleticsTeamsByTeamIdSchedulePatch'
            );
        }



        $resourcePath = '/v1/athletics/teams/{team_id}/schedule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($team_id !== null) {
            $resourcePath = str_replace(
                '{' . 'team_id' . '}',
                ObjectSerializer::toPathValue($team_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($game_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($game_update));
            } else {
                $httpBody = $game_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdSchedulePost
     *
     * Athletics game create
     *
     * @param  int $team_id Format - int32. ID of the team for the game to be created (required)
     * @param  \SKY\School\Model\GameCreate $game_create Information about the game to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1AthleticsTeamsByTeamIdSchedulePost($team_id, $game_create = null, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePost'][0])
    {
        [$response] = $this->v1AthleticsTeamsByTeamIdSchedulePostWithHttpInfo($team_id, $game_create, $contentType);
        return $response;
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdSchedulePostWithHttpInfo
     *
     * Athletics game create
     *
     * @param  int $team_id Format - int32. ID of the team for the game to be created (required)
     * @param  \SKY\School\Model\GameCreate $game_create Information about the game to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AthleticsTeamsByTeamIdSchedulePostWithHttpInfo($team_id, $game_create = null, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePost'][0])
    {
        $request = $this->v1AthleticsTeamsByTeamIdSchedulePostRequest($team_id, $game_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdSchedulePostAsync
     *
     * Athletics game create
     *
     * @param  int $team_id Format - int32. ID of the team for the game to be created (required)
     * @param  \SKY\School\Model\GameCreate $game_create Information about the game to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsTeamsByTeamIdSchedulePostAsync($team_id, $game_create = null, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePost'][0])
    {
        return $this->v1AthleticsTeamsByTeamIdSchedulePostAsyncWithHttpInfo($team_id, $game_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdSchedulePostAsyncWithHttpInfo
     *
     * Athletics game create
     *
     * @param  int $team_id Format - int32. ID of the team for the game to be created (required)
     * @param  \SKY\School\Model\GameCreate $game_create Information about the game to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsTeamsByTeamIdSchedulePostAsyncWithHttpInfo($team_id, $game_create = null, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePost'][0])
    {
        $returnType = 'int';
        $request = $this->v1AthleticsTeamsByTeamIdSchedulePostRequest($team_id, $game_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AthleticsTeamsByTeamIdSchedulePost'
     *
     * @param  int $team_id Format - int32. ID of the team for the game to be created (required)
     * @param  \SKY\School\Model\GameCreate $game_create Information about the game to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AthleticsTeamsByTeamIdSchedulePostRequest($team_id, $game_create = null, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePost'][0])
    {

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling v1AthleticsTeamsByTeamIdSchedulePost'
            );
        }



        $resourcePath = '/v1/athletics/teams/{team_id}/schedule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($team_id !== null) {
            $resourcePath = str_replace(
                '{' . 'team_id' . '}',
                ObjectSerializer::toPathValue($team_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($game_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($game_create));
            } else {
                $httpBody = $game_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDelete
     *
     * Athletics practice delete
     *
     * @param  int $team_id Format - int32. ID of the team for the practice to be deleted (required)
     * @param  int $practice_id Format - int32. ID of the practice to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDelete'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDelete($team_id, $practice_id, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDelete'][0])
    {
        $this->v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDeleteWithHttpInfo($team_id, $practice_id, $contentType);
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDeleteWithHttpInfo
     *
     * Athletics practice delete
     *
     * @param  int $team_id Format - int32. ID of the team for the practice to be deleted (required)
     * @param  int $practice_id Format - int32. ID of the practice to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDelete'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDeleteWithHttpInfo($team_id, $practice_id, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDelete'][0])
    {
        $request = $this->v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDeleteRequest($team_id, $practice_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDeleteAsync
     *
     * Athletics practice delete
     *
     * @param  int $team_id Format - int32. ID of the team for the practice to be deleted (required)
     * @param  int $practice_id Format - int32. ID of the practice to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDeleteAsync($team_id, $practice_id, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDelete'][0])
    {
        return $this->v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDeleteAsyncWithHttpInfo($team_id, $practice_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDeleteAsyncWithHttpInfo
     *
     * Athletics practice delete
     *
     * @param  int $team_id Format - int32. ID of the team for the practice to be deleted (required)
     * @param  int $practice_id Format - int32. ID of the practice to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDeleteAsyncWithHttpInfo($team_id, $practice_id, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDelete'][0])
    {
        $returnType = '';
        $request = $this->v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDeleteRequest($team_id, $practice_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDelete'
     *
     * @param  int $team_id Format - int32. ID of the team for the practice to be deleted (required)
     * @param  int $practice_id Format - int32. ID of the practice to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDeleteRequest($team_id, $practice_id, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDelete'][0])
    {

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDelete'
            );
        }

        // verify the required parameter 'practice_id' is set
        if ($practice_id === null || (is_array($practice_id) && count($practice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $practice_id when calling v1AthleticsTeamsByTeamIdSchedulePracticeByPracticeIdDelete'
            );
        }


        $resourcePath = '/v1/athletics/teams/{team_id}/schedule/practice/{practice_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($team_id !== null) {
            $resourcePath = str_replace(
                '{' . 'team_id' . '}',
                ObjectSerializer::toPathValue($team_id),
                $resourcePath
            );
        }
        // path params
        if ($practice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'practice_id' . '}',
                ObjectSerializer::toPathValue($practice_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdSchedulePracticePatch
     *
     * Athletics practice update
     *
     * @param  int $team_id Format - int32. The ID of the team for the practice to be updated (required)
     * @param  \SKY\School\Model\PracticeUpdate $practice_update Information about the practice to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticePatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1AthleticsTeamsByTeamIdSchedulePracticePatch($team_id, $practice_update = null, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticePatch'][0])
    {
        $this->v1AthleticsTeamsByTeamIdSchedulePracticePatchWithHttpInfo($team_id, $practice_update, $contentType);
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdSchedulePracticePatchWithHttpInfo
     *
     * Athletics practice update
     *
     * @param  int $team_id Format - int32. The ID of the team for the practice to be updated (required)
     * @param  \SKY\School\Model\PracticeUpdate $practice_update Information about the practice to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticePatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AthleticsTeamsByTeamIdSchedulePracticePatchWithHttpInfo($team_id, $practice_update = null, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticePatch'][0])
    {
        $request = $this->v1AthleticsTeamsByTeamIdSchedulePracticePatchRequest($team_id, $practice_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdSchedulePracticePatchAsync
     *
     * Athletics practice update
     *
     * @param  int $team_id Format - int32. The ID of the team for the practice to be updated (required)
     * @param  \SKY\School\Model\PracticeUpdate $practice_update Information about the practice to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticePatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsTeamsByTeamIdSchedulePracticePatchAsync($team_id, $practice_update = null, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticePatch'][0])
    {
        return $this->v1AthleticsTeamsByTeamIdSchedulePracticePatchAsyncWithHttpInfo($team_id, $practice_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdSchedulePracticePatchAsyncWithHttpInfo
     *
     * Athletics practice update
     *
     * @param  int $team_id Format - int32. The ID of the team for the practice to be updated (required)
     * @param  \SKY\School\Model\PracticeUpdate $practice_update Information about the practice to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticePatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsTeamsByTeamIdSchedulePracticePatchAsyncWithHttpInfo($team_id, $practice_update = null, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticePatch'][0])
    {
        $returnType = '';
        $request = $this->v1AthleticsTeamsByTeamIdSchedulePracticePatchRequest($team_id, $practice_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AthleticsTeamsByTeamIdSchedulePracticePatch'
     *
     * @param  int $team_id Format - int32. The ID of the team for the practice to be updated (required)
     * @param  \SKY\School\Model\PracticeUpdate $practice_update Information about the practice to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticePatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AthleticsTeamsByTeamIdSchedulePracticePatchRequest($team_id, $practice_update = null, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticePatch'][0])
    {

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling v1AthleticsTeamsByTeamIdSchedulePracticePatch'
            );
        }



        $resourcePath = '/v1/athletics/teams/{team_id}/schedule/practice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($team_id !== null) {
            $resourcePath = str_replace(
                '{' . 'team_id' . '}',
                ObjectSerializer::toPathValue($team_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($practice_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($practice_update));
            } else {
                $httpBody = $practice_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdSchedulePracticePost
     *
     * Athletics practice create
     *
     * @param  int $team_id Format - int32. ID of the team for the practice to be created (required)
     * @param  \SKY\School\Model\PracticeCreate $practice_create Information about the practice to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticePost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1AthleticsTeamsByTeamIdSchedulePracticePost($team_id, $practice_create = null, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticePost'][0])
    {
        [$response] = $this->v1AthleticsTeamsByTeamIdSchedulePracticePostWithHttpInfo($team_id, $practice_create, $contentType);
        return $response;
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdSchedulePracticePostWithHttpInfo
     *
     * Athletics practice create
     *
     * @param  int $team_id Format - int32. ID of the team for the practice to be created (required)
     * @param  \SKY\School\Model\PracticeCreate $practice_create Information about the practice to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticePost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AthleticsTeamsByTeamIdSchedulePracticePostWithHttpInfo($team_id, $practice_create = null, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticePost'][0])
    {
        $request = $this->v1AthleticsTeamsByTeamIdSchedulePracticePostRequest($team_id, $practice_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdSchedulePracticePostAsync
     *
     * Athletics practice create
     *
     * @param  int $team_id Format - int32. ID of the team for the practice to be created (required)
     * @param  \SKY\School\Model\PracticeCreate $practice_create Information about the practice to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsTeamsByTeamIdSchedulePracticePostAsync($team_id, $practice_create = null, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticePost'][0])
    {
        return $this->v1AthleticsTeamsByTeamIdSchedulePracticePostAsyncWithHttpInfo($team_id, $practice_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AthleticsTeamsByTeamIdSchedulePracticePostAsyncWithHttpInfo
     *
     * Athletics practice create
     *
     * @param  int $team_id Format - int32. ID of the team for the practice to be created (required)
     * @param  \SKY\School\Model\PracticeCreate $practice_create Information about the practice to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsTeamsByTeamIdSchedulePracticePostAsyncWithHttpInfo($team_id, $practice_create = null, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticePost'][0])
    {
        $returnType = 'int';
        $request = $this->v1AthleticsTeamsByTeamIdSchedulePracticePostRequest($team_id, $practice_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AthleticsTeamsByTeamIdSchedulePracticePost'
     *
     * @param  int $team_id Format - int32. ID of the team for the practice to be created (required)
     * @param  \SKY\School\Model\PracticeCreate $practice_create Information about the practice to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AthleticsTeamsByTeamIdSchedulePracticePostRequest($team_id, $practice_create = null, string $contentType = self::contentTypes['v1AthleticsTeamsByTeamIdSchedulePracticePost'][0])
    {

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling v1AthleticsTeamsByTeamIdSchedulePracticePost'
            );
        }



        $resourcePath = '/v1/athletics/teams/{team_id}/schedule/practice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($team_id !== null) {
            $resourcePath = str_replace(
                '{' . 'team_id' . '}',
                ObjectSerializer::toPathValue($team_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($practice_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($practice_create));
            } else {
                $httpBody = $practice_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AthleticsTeamsGet
     *
     * Athletics teams
     *
     * @param  string $school_year School year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\TeamCollection
     */
    public function v1AthleticsTeamsGet($school_year = null, string $contentType = self::contentTypes['v1AthleticsTeamsGet'][0])
    {
        [$response] = $this->v1AthleticsTeamsGetWithHttpInfo($school_year, $contentType);
        return $response;
    }

    /**
     * Operation v1AthleticsTeamsGetWithHttpInfo
     *
     * Athletics teams
     *
     * @param  string $school_year School year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\TeamCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AthleticsTeamsGetWithHttpInfo($school_year = null, string $contentType = self::contentTypes['v1AthleticsTeamsGet'][0])
    {
        $request = $this->v1AthleticsTeamsGetRequest($school_year, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\TeamCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\TeamCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\TeamCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\TeamCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\TeamCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AthleticsTeamsGetAsync
     *
     * Athletics teams
     *
     * @param  string $school_year School year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsTeamsGetAsync($school_year = null, string $contentType = self::contentTypes['v1AthleticsTeamsGet'][0])
    {
        return $this->v1AthleticsTeamsGetAsyncWithHttpInfo($school_year, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AthleticsTeamsGetAsyncWithHttpInfo
     *
     * Athletics teams
     *
     * @param  string $school_year School year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsTeamsGetAsyncWithHttpInfo($school_year = null, string $contentType = self::contentTypes['v1AthleticsTeamsGet'][0])
    {
        $returnType = '\SKY\School\Model\TeamCollection';
        $request = $this->v1AthleticsTeamsGetRequest($school_year, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AthleticsTeamsGet'
     *
     * @param  string $school_year School year (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTeamsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AthleticsTeamsGetRequest($school_year = null, string $contentType = self::contentTypes['v1AthleticsTeamsGet'][0])
    {



        $resourcePath = '/v1/athletics/teams';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $school_year,
            'school_year', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AthleticsTransportationtypesGet
     *
     * Athletics transportation types
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTransportationtypesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\TransportationCollection
     */
    public function v1AthleticsTransportationtypesGet(string $contentType = self::contentTypes['v1AthleticsTransportationtypesGet'][0])
    {
        [$response] = $this->v1AthleticsTransportationtypesGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation v1AthleticsTransportationtypesGetWithHttpInfo
     *
     * Athletics transportation types
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTransportationtypesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\TransportationCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AthleticsTransportationtypesGetWithHttpInfo(string $contentType = self::contentTypes['v1AthleticsTransportationtypesGet'][0])
    {
        $request = $this->v1AthleticsTransportationtypesGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\TransportationCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\TransportationCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\TransportationCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\TransportationCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\TransportationCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AthleticsTransportationtypesGetAsync
     *
     * Athletics transportation types
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTransportationtypesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsTransportationtypesGetAsync(string $contentType = self::contentTypes['v1AthleticsTransportationtypesGet'][0])
    {
        return $this->v1AthleticsTransportationtypesGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AthleticsTransportationtypesGetAsyncWithHttpInfo
     *
     * Athletics transportation types
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTransportationtypesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsTransportationtypesGetAsyncWithHttpInfo(string $contentType = self::contentTypes['v1AthleticsTransportationtypesGet'][0])
    {
        $returnType = '\SKY\School\Model\TransportationCollection';
        $request = $this->v1AthleticsTransportationtypesGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AthleticsTransportationtypesGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsTransportationtypesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AthleticsTransportationtypesGetRequest(string $contentType = self::contentTypes['v1AthleticsTransportationtypesGet'][0])
    {


        $resourcePath = '/v1/athletics/transportationtypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AthleticsVenuesGet
     *
     * Athletics venues
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsVenuesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\AthleticVenueCollection
     */
    public function v1AthleticsVenuesGet(string $contentType = self::contentTypes['v1AthleticsVenuesGet'][0])
    {
        [$response] = $this->v1AthleticsVenuesGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation v1AthleticsVenuesGetWithHttpInfo
     *
     * Athletics venues
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsVenuesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\AthleticVenueCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AthleticsVenuesGetWithHttpInfo(string $contentType = self::contentTypes['v1AthleticsVenuesGet'][0])
    {
        $request = $this->v1AthleticsVenuesGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\AthleticVenueCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\AthleticVenueCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\AthleticVenueCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\AthleticVenueCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\AthleticVenueCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AthleticsVenuesGetAsync
     *
     * Athletics venues
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsVenuesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsVenuesGetAsync(string $contentType = self::contentTypes['v1AthleticsVenuesGet'][0])
    {
        return $this->v1AthleticsVenuesGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AthleticsVenuesGetAsyncWithHttpInfo
     *
     * Athletics venues
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsVenuesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AthleticsVenuesGetAsyncWithHttpInfo(string $contentType = self::contentTypes['v1AthleticsVenuesGet'][0])
    {
        $returnType = '\SKY\School\Model\AthleticVenueCollection';
        $request = $this->v1AthleticsVenuesGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AthleticsVenuesGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AthleticsVenuesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AthleticsVenuesGetRequest(string $contentType = self::contentTypes['v1AthleticsVenuesGet'][0])
    {


        $resourcePath = '/v1/athletics/venues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
