<?php
/**
 * AcademicsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SKY\School\ApiException;
use SKY\School\Configuration;
use SKY\School\HeaderSelector;
use SKY\School\ObjectSerializer;

/**
 * AcademicsApi Class Doc Comment
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AcademicsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'v1AcademicsByStudentIdAssignmentsGet' => [
            'application/json',
        ],
        'v1AcademicsByStudentIdBySectionIdGradedassignmentsGet' => [
            'application/json',
        ],
        'v1AcademicsCoursesGet' => [
            'application/json',
        ],
        'v1AcademicsDepartmentsGet' => [
            'application/json',
        ],
        'v1AcademicsEnrollmentsByUserIdGet' => [
            'application/json',
        ],
        'v1AcademicsEnrollmentsChangesGet' => [
            'application/json',
        ],
        'v1AcademicsSchedulesMasterGet' => [
            'application/json',
        ],
        'v1AcademicsSchedulesSetsByScheduleSetIdGet' => [
            'application/json',
        ],
        'v1AcademicsSchedulesSetsGet' => [
            'application/json',
        ],
        'v1AcademicsSectionsBySectionIdAssignmentsGet' => [
            'application/json',
        ],
        'v1AcademicsSectionsBySectionIdCyclesGet' => [
            'application/json',
        ],
        'v1AcademicsSectionsBySectionIdStudentsGet' => [
            'application/json',
        ],
        'v1AcademicsSectionsGet' => [
            'application/json',
        ],
        'v1AcademicsSectionsStudentsPost' => [
            'application/json',
        ],
        'v1AcademicsSpecialdaysGet' => [
            'application/json',
        ],
        'v1AcademicsStudentByStudentIdSectionsGet' => [
            'application/json',
        ],
        'v1AcademicsTeachersByTeacherIdSectionsGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1AcademicsByStudentIdAssignmentsGet
     *
     * Academics assignments for student
     *
     * @param  int $student_id Format - int32. (required)
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). (required)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). (optional)
     * @param  string $section_ids  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsByStudentIdAssignmentsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\StudentAssignmentCollection
     */
    public function v1AcademicsByStudentIdAssignmentsGet($student_id, $start_date, $end_date = null, $section_ids = null, string $contentType = self::contentTypes['v1AcademicsByStudentIdAssignmentsGet'][0])
    {
        [$response] = $this->v1AcademicsByStudentIdAssignmentsGetWithHttpInfo($student_id, $start_date, $end_date, $section_ids, $contentType);
        return $response;
    }

    /**
     * Operation v1AcademicsByStudentIdAssignmentsGetWithHttpInfo
     *
     * Academics assignments for student
     *
     * @param  int $student_id Format - int32. (required)
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). (required)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). (optional)
     * @param  string $section_ids  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsByStudentIdAssignmentsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\StudentAssignmentCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AcademicsByStudentIdAssignmentsGetWithHttpInfo($student_id, $start_date, $end_date = null, $section_ids = null, string $contentType = self::contentTypes['v1AcademicsByStudentIdAssignmentsGet'][0])
    {
        $request = $this->v1AcademicsByStudentIdAssignmentsGetRequest($student_id, $start_date, $end_date, $section_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\StudentAssignmentCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\StudentAssignmentCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\StudentAssignmentCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\StudentAssignmentCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\StudentAssignmentCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AcademicsByStudentIdAssignmentsGetAsync
     *
     * Academics assignments for student
     *
     * @param  int $student_id Format - int32. (required)
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). (required)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). (optional)
     * @param  string $section_ids  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsByStudentIdAssignmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsByStudentIdAssignmentsGetAsync($student_id, $start_date, $end_date = null, $section_ids = null, string $contentType = self::contentTypes['v1AcademicsByStudentIdAssignmentsGet'][0])
    {
        return $this->v1AcademicsByStudentIdAssignmentsGetAsyncWithHttpInfo($student_id, $start_date, $end_date, $section_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AcademicsByStudentIdAssignmentsGetAsyncWithHttpInfo
     *
     * Academics assignments for student
     *
     * @param  int $student_id Format - int32. (required)
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). (required)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). (optional)
     * @param  string $section_ids  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsByStudentIdAssignmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsByStudentIdAssignmentsGetAsyncWithHttpInfo($student_id, $start_date, $end_date = null, $section_ids = null, string $contentType = self::contentTypes['v1AcademicsByStudentIdAssignmentsGet'][0])
    {
        $returnType = '\SKY\School\Model\StudentAssignmentCollection';
        $request = $this->v1AcademicsByStudentIdAssignmentsGetRequest($student_id, $start_date, $end_date, $section_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AcademicsByStudentIdAssignmentsGet'
     *
     * @param  int $student_id Format - int32. (required)
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). (required)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). (optional)
     * @param  string $section_ids  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsByStudentIdAssignmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AcademicsByStudentIdAssignmentsGetRequest($student_id, $start_date, $end_date = null, $section_ids = null, string $contentType = self::contentTypes['v1AcademicsByStudentIdAssignmentsGet'][0])
    {

        // verify the required parameter 'student_id' is set
        if ($student_id === null || (is_array($student_id) && count($student_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $student_id when calling v1AcademicsByStudentIdAssignmentsGet'
            );
        }

        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling v1AcademicsByStudentIdAssignmentsGet'
            );
        }




        $resourcePath = '/v1/academics/{student_id}/assignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'start_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'end_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $section_ids,
            'section_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($student_id !== null) {
            $resourcePath = str_replace(
                '{' . 'student_id' . '}',
                ObjectSerializer::toPathValue($student_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AcademicsByStudentIdBySectionIdGradedassignmentsGet
     *
     * Academics graded assignments for student
     *
     * @param  int $student_id Format - int32. The ID of the student to view graded assignments for. (required)
     * @param  int $section_id Format - int32. The ID of the lead section for the student. (required)
     * @param  int $marking_period_id Format - int32. The ID of the marking period to return grades for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsByStudentIdBySectionIdGradedassignmentsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\StudentGradedAssignmentCollection
     */
    public function v1AcademicsByStudentIdBySectionIdGradedassignmentsGet($student_id, $section_id, $marking_period_id, string $contentType = self::contentTypes['v1AcademicsByStudentIdBySectionIdGradedassignmentsGet'][0])
    {
        [$response] = $this->v1AcademicsByStudentIdBySectionIdGradedassignmentsGetWithHttpInfo($student_id, $section_id, $marking_period_id, $contentType);
        return $response;
    }

    /**
     * Operation v1AcademicsByStudentIdBySectionIdGradedassignmentsGetWithHttpInfo
     *
     * Academics graded assignments for student
     *
     * @param  int $student_id Format - int32. The ID of the student to view graded assignments for. (required)
     * @param  int $section_id Format - int32. The ID of the lead section for the student. (required)
     * @param  int $marking_period_id Format - int32. The ID of the marking period to return grades for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsByStudentIdBySectionIdGradedassignmentsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\StudentGradedAssignmentCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AcademicsByStudentIdBySectionIdGradedassignmentsGetWithHttpInfo($student_id, $section_id, $marking_period_id, string $contentType = self::contentTypes['v1AcademicsByStudentIdBySectionIdGradedassignmentsGet'][0])
    {
        $request = $this->v1AcademicsByStudentIdBySectionIdGradedassignmentsGetRequest($student_id, $section_id, $marking_period_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\StudentGradedAssignmentCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\StudentGradedAssignmentCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\StudentGradedAssignmentCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\StudentGradedAssignmentCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\StudentGradedAssignmentCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AcademicsByStudentIdBySectionIdGradedassignmentsGetAsync
     *
     * Academics graded assignments for student
     *
     * @param  int $student_id Format - int32. The ID of the student to view graded assignments for. (required)
     * @param  int $section_id Format - int32. The ID of the lead section for the student. (required)
     * @param  int $marking_period_id Format - int32. The ID of the marking period to return grades for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsByStudentIdBySectionIdGradedassignmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsByStudentIdBySectionIdGradedassignmentsGetAsync($student_id, $section_id, $marking_period_id, string $contentType = self::contentTypes['v1AcademicsByStudentIdBySectionIdGradedassignmentsGet'][0])
    {
        return $this->v1AcademicsByStudentIdBySectionIdGradedassignmentsGetAsyncWithHttpInfo($student_id, $section_id, $marking_period_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AcademicsByStudentIdBySectionIdGradedassignmentsGetAsyncWithHttpInfo
     *
     * Academics graded assignments for student
     *
     * @param  int $student_id Format - int32. The ID of the student to view graded assignments for. (required)
     * @param  int $section_id Format - int32. The ID of the lead section for the student. (required)
     * @param  int $marking_period_id Format - int32. The ID of the marking period to return grades for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsByStudentIdBySectionIdGradedassignmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsByStudentIdBySectionIdGradedassignmentsGetAsyncWithHttpInfo($student_id, $section_id, $marking_period_id, string $contentType = self::contentTypes['v1AcademicsByStudentIdBySectionIdGradedassignmentsGet'][0])
    {
        $returnType = '\SKY\School\Model\StudentGradedAssignmentCollection';
        $request = $this->v1AcademicsByStudentIdBySectionIdGradedassignmentsGetRequest($student_id, $section_id, $marking_period_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AcademicsByStudentIdBySectionIdGradedassignmentsGet'
     *
     * @param  int $student_id Format - int32. The ID of the student to view graded assignments for. (required)
     * @param  int $section_id Format - int32. The ID of the lead section for the student. (required)
     * @param  int $marking_period_id Format - int32. The ID of the marking period to return grades for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsByStudentIdBySectionIdGradedassignmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AcademicsByStudentIdBySectionIdGradedassignmentsGetRequest($student_id, $section_id, $marking_period_id, string $contentType = self::contentTypes['v1AcademicsByStudentIdBySectionIdGradedassignmentsGet'][0])
    {

        // verify the required parameter 'student_id' is set
        if ($student_id === null || (is_array($student_id) && count($student_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $student_id when calling v1AcademicsByStudentIdBySectionIdGradedassignmentsGet'
            );
        }

        // verify the required parameter 'section_id' is set
        if ($section_id === null || (is_array($section_id) && count($section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $section_id when calling v1AcademicsByStudentIdBySectionIdGradedassignmentsGet'
            );
        }

        // verify the required parameter 'marking_period_id' is set
        if ($marking_period_id === null || (is_array($marking_period_id) && count($marking_period_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marking_period_id when calling v1AcademicsByStudentIdBySectionIdGradedassignmentsGet'
            );
        }


        $resourcePath = '/v1/academics/{student_id}/{section_id}/gradedassignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marking_period_id,
            'marking_period_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($student_id !== null) {
            $resourcePath = str_replace(
                '{' . 'student_id' . '}',
                ObjectSerializer::toPathValue($student_id),
                $resourcePath
            );
        }
        // path params
        if ($section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'section_id' . '}',
                ObjectSerializer::toPathValue($section_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AcademicsCoursesGet
     *
     * Academics courses
     *
     * @param  int $department_id Format - int32. Identifier for a specific department. (optional)
     * @param  int $level_id Format - int32. Identifier for a specific school level. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsCoursesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\CourseCollection
     */
    public function v1AcademicsCoursesGet($department_id = null, $level_id = null, string $contentType = self::contentTypes['v1AcademicsCoursesGet'][0])
    {
        [$response] = $this->v1AcademicsCoursesGetWithHttpInfo($department_id, $level_id, $contentType);
        return $response;
    }

    /**
     * Operation v1AcademicsCoursesGetWithHttpInfo
     *
     * Academics courses
     *
     * @param  int $department_id Format - int32. Identifier for a specific department. (optional)
     * @param  int $level_id Format - int32. Identifier for a specific school level. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsCoursesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\CourseCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AcademicsCoursesGetWithHttpInfo($department_id = null, $level_id = null, string $contentType = self::contentTypes['v1AcademicsCoursesGet'][0])
    {
        $request = $this->v1AcademicsCoursesGetRequest($department_id, $level_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\CourseCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\CourseCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\CourseCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\CourseCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\CourseCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AcademicsCoursesGetAsync
     *
     * Academics courses
     *
     * @param  int $department_id Format - int32. Identifier for a specific department. (optional)
     * @param  int $level_id Format - int32. Identifier for a specific school level. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsCoursesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsCoursesGetAsync($department_id = null, $level_id = null, string $contentType = self::contentTypes['v1AcademicsCoursesGet'][0])
    {
        return $this->v1AcademicsCoursesGetAsyncWithHttpInfo($department_id, $level_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AcademicsCoursesGetAsyncWithHttpInfo
     *
     * Academics courses
     *
     * @param  int $department_id Format - int32. Identifier for a specific department. (optional)
     * @param  int $level_id Format - int32. Identifier for a specific school level. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsCoursesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsCoursesGetAsyncWithHttpInfo($department_id = null, $level_id = null, string $contentType = self::contentTypes['v1AcademicsCoursesGet'][0])
    {
        $returnType = '\SKY\School\Model\CourseCollection';
        $request = $this->v1AcademicsCoursesGetRequest($department_id, $level_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AcademicsCoursesGet'
     *
     * @param  int $department_id Format - int32. Identifier for a specific department. (optional)
     * @param  int $level_id Format - int32. Identifier for a specific school level. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsCoursesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AcademicsCoursesGetRequest($department_id = null, $level_id = null, string $contentType = self::contentTypes['v1AcademicsCoursesGet'][0])
    {




        $resourcePath = '/v1/academics/courses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $department_id,
            'department_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $level_id,
            'level_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AcademicsDepartmentsGet
     *
     * Academics departments
     *
     * @param  int $level_id Format - int32. Level number. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsDepartmentsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\DepartmentCollection
     */
    public function v1AcademicsDepartmentsGet($level_id = null, string $contentType = self::contentTypes['v1AcademicsDepartmentsGet'][0])
    {
        [$response] = $this->v1AcademicsDepartmentsGetWithHttpInfo($level_id, $contentType);
        return $response;
    }

    /**
     * Operation v1AcademicsDepartmentsGetWithHttpInfo
     *
     * Academics departments
     *
     * @param  int $level_id Format - int32. Level number. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsDepartmentsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\DepartmentCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AcademicsDepartmentsGetWithHttpInfo($level_id = null, string $contentType = self::contentTypes['v1AcademicsDepartmentsGet'][0])
    {
        $request = $this->v1AcademicsDepartmentsGetRequest($level_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\DepartmentCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\DepartmentCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\DepartmentCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\DepartmentCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\DepartmentCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AcademicsDepartmentsGetAsync
     *
     * Academics departments
     *
     * @param  int $level_id Format - int32. Level number. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsDepartmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsDepartmentsGetAsync($level_id = null, string $contentType = self::contentTypes['v1AcademicsDepartmentsGet'][0])
    {
        return $this->v1AcademicsDepartmentsGetAsyncWithHttpInfo($level_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AcademicsDepartmentsGetAsyncWithHttpInfo
     *
     * Academics departments
     *
     * @param  int $level_id Format - int32. Level number. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsDepartmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsDepartmentsGetAsyncWithHttpInfo($level_id = null, string $contentType = self::contentTypes['v1AcademicsDepartmentsGet'][0])
    {
        $returnType = '\SKY\School\Model\DepartmentCollection';
        $request = $this->v1AcademicsDepartmentsGetRequest($level_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AcademicsDepartmentsGet'
     *
     * @param  int $level_id Format - int32. Level number. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsDepartmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AcademicsDepartmentsGetRequest($level_id = null, string $contentType = self::contentTypes['v1AcademicsDepartmentsGet'][0])
    {



        $resourcePath = '/v1/academics/departments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $level_id,
            'level_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AcademicsEnrollmentsByUserIdGet
     *
     * Academics student enrollment list
     *
     * @param  int $user_id Format - int32. User identifier. (required)
     * @param  string $school_year The school year to filter the collection of sections by. Corresponds to &#x60;&#x60;&#x60;school_year_label&#x60;&#x60;&#x60; in the &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget\&quot;&gt;Year list&lt;/a&gt;. Defaults to the current school year. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsEnrollmentsByUserIdGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\EnrollmentCollection
     */
    public function v1AcademicsEnrollmentsByUserIdGet($user_id, $school_year = null, string $contentType = self::contentTypes['v1AcademicsEnrollmentsByUserIdGet'][0])
    {
        [$response] = $this->v1AcademicsEnrollmentsByUserIdGetWithHttpInfo($user_id, $school_year, $contentType);
        return $response;
    }

    /**
     * Operation v1AcademicsEnrollmentsByUserIdGetWithHttpInfo
     *
     * Academics student enrollment list
     *
     * @param  int $user_id Format - int32. User identifier. (required)
     * @param  string $school_year The school year to filter the collection of sections by. Corresponds to &#x60;&#x60;&#x60;school_year_label&#x60;&#x60;&#x60; in the &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget\&quot;&gt;Year list&lt;/a&gt;. Defaults to the current school year. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsEnrollmentsByUserIdGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\EnrollmentCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AcademicsEnrollmentsByUserIdGetWithHttpInfo($user_id, $school_year = null, string $contentType = self::contentTypes['v1AcademicsEnrollmentsByUserIdGet'][0])
    {
        $request = $this->v1AcademicsEnrollmentsByUserIdGetRequest($user_id, $school_year, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\EnrollmentCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\EnrollmentCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\EnrollmentCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\EnrollmentCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\EnrollmentCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AcademicsEnrollmentsByUserIdGetAsync
     *
     * Academics student enrollment list
     *
     * @param  int $user_id Format - int32. User identifier. (required)
     * @param  string $school_year The school year to filter the collection of sections by. Corresponds to &#x60;&#x60;&#x60;school_year_label&#x60;&#x60;&#x60; in the &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget\&quot;&gt;Year list&lt;/a&gt;. Defaults to the current school year. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsEnrollmentsByUserIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsEnrollmentsByUserIdGetAsync($user_id, $school_year = null, string $contentType = self::contentTypes['v1AcademicsEnrollmentsByUserIdGet'][0])
    {
        return $this->v1AcademicsEnrollmentsByUserIdGetAsyncWithHttpInfo($user_id, $school_year, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AcademicsEnrollmentsByUserIdGetAsyncWithHttpInfo
     *
     * Academics student enrollment list
     *
     * @param  int $user_id Format - int32. User identifier. (required)
     * @param  string $school_year The school year to filter the collection of sections by. Corresponds to &#x60;&#x60;&#x60;school_year_label&#x60;&#x60;&#x60; in the &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget\&quot;&gt;Year list&lt;/a&gt;. Defaults to the current school year. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsEnrollmentsByUserIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsEnrollmentsByUserIdGetAsyncWithHttpInfo($user_id, $school_year = null, string $contentType = self::contentTypes['v1AcademicsEnrollmentsByUserIdGet'][0])
    {
        $returnType = '\SKY\School\Model\EnrollmentCollection';
        $request = $this->v1AcademicsEnrollmentsByUserIdGetRequest($user_id, $school_year, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AcademicsEnrollmentsByUserIdGet'
     *
     * @param  int $user_id Format - int32. User identifier. (required)
     * @param  string $school_year The school year to filter the collection of sections by. Corresponds to &#x60;&#x60;&#x60;school_year_label&#x60;&#x60;&#x60; in the &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget\&quot;&gt;Year list&lt;/a&gt;. Defaults to the current school year. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsEnrollmentsByUserIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AcademicsEnrollmentsByUserIdGetRequest($user_id, $school_year = null, string $contentType = self::contentTypes['v1AcademicsEnrollmentsByUserIdGet'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1AcademicsEnrollmentsByUserIdGet'
            );
        }



        $resourcePath = '/v1/academics/enrollments/{user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $school_year,
            'school_year', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AcademicsEnrollmentsChangesGet
     *
     * Academics Student Enrollments Changes
     *
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). The DateTime of changes to academics enrollments to begin with (required)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). The DateTime of changes to academics enrollments to end with. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsEnrollmentsChangesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\EnrollmentChangesCollection
     */
    public function v1AcademicsEnrollmentsChangesGet($start_date, $end_date = null, string $contentType = self::contentTypes['v1AcademicsEnrollmentsChangesGet'][0])
    {
        [$response] = $this->v1AcademicsEnrollmentsChangesGetWithHttpInfo($start_date, $end_date, $contentType);
        return $response;
    }

    /**
     * Operation v1AcademicsEnrollmentsChangesGetWithHttpInfo
     *
     * Academics Student Enrollments Changes
     *
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). The DateTime of changes to academics enrollments to begin with (required)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). The DateTime of changes to academics enrollments to end with. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsEnrollmentsChangesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\EnrollmentChangesCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AcademicsEnrollmentsChangesGetWithHttpInfo($start_date, $end_date = null, string $contentType = self::contentTypes['v1AcademicsEnrollmentsChangesGet'][0])
    {
        $request = $this->v1AcademicsEnrollmentsChangesGetRequest($start_date, $end_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\EnrollmentChangesCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\EnrollmentChangesCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\EnrollmentChangesCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\EnrollmentChangesCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\EnrollmentChangesCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AcademicsEnrollmentsChangesGetAsync
     *
     * Academics Student Enrollments Changes
     *
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). The DateTime of changes to academics enrollments to begin with (required)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). The DateTime of changes to academics enrollments to end with. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsEnrollmentsChangesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsEnrollmentsChangesGetAsync($start_date, $end_date = null, string $contentType = self::contentTypes['v1AcademicsEnrollmentsChangesGet'][0])
    {
        return $this->v1AcademicsEnrollmentsChangesGetAsyncWithHttpInfo($start_date, $end_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AcademicsEnrollmentsChangesGetAsyncWithHttpInfo
     *
     * Academics Student Enrollments Changes
     *
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). The DateTime of changes to academics enrollments to begin with (required)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). The DateTime of changes to academics enrollments to end with. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsEnrollmentsChangesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsEnrollmentsChangesGetAsyncWithHttpInfo($start_date, $end_date = null, string $contentType = self::contentTypes['v1AcademicsEnrollmentsChangesGet'][0])
    {
        $returnType = '\SKY\School\Model\EnrollmentChangesCollection';
        $request = $this->v1AcademicsEnrollmentsChangesGetRequest($start_date, $end_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AcademicsEnrollmentsChangesGet'
     *
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). The DateTime of changes to academics enrollments to begin with (required)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). The DateTime of changes to academics enrollments to end with. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsEnrollmentsChangesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AcademicsEnrollmentsChangesGetRequest($start_date, $end_date = null, string $contentType = self::contentTypes['v1AcademicsEnrollmentsChangesGet'][0])
    {

        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling v1AcademicsEnrollmentsChangesGet'
            );
        }



        $resourcePath = '/v1/academics/enrollments/changes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'start_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'end_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AcademicsSchedulesMasterGet
     *
     * Academics master schedule
     *
     * @param  int $level_num Format - int32. Level Number indicates which school you are working with. (required)
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). Start of the date range (inclusive).  The earliest possible start_date is 1/1/1900, any date entered before that date will be overwritten with 1/1/1900. (required)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). End of the date range (inclusive). If the end_date is earlier than the start_date the end_date wil be overwritten with the start_date plus 7 days. (required)
     * @param  int $offering_type Format - int32. Filters the results by a specific group type. Defaults to \&quot;All\&quot; offering types. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSchedulesMasterGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\MasterScheduleDayCollection
     */
    public function v1AcademicsSchedulesMasterGet($level_num, $start_date, $end_date, $offering_type = null, string $contentType = self::contentTypes['v1AcademicsSchedulesMasterGet'][0])
    {
        [$response] = $this->v1AcademicsSchedulesMasterGetWithHttpInfo($level_num, $start_date, $end_date, $offering_type, $contentType);
        return $response;
    }

    /**
     * Operation v1AcademicsSchedulesMasterGetWithHttpInfo
     *
     * Academics master schedule
     *
     * @param  int $level_num Format - int32. Level Number indicates which school you are working with. (required)
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). Start of the date range (inclusive).  The earliest possible start_date is 1/1/1900, any date entered before that date will be overwritten with 1/1/1900. (required)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). End of the date range (inclusive). If the end_date is earlier than the start_date the end_date wil be overwritten with the start_date plus 7 days. (required)
     * @param  int $offering_type Format - int32. Filters the results by a specific group type. Defaults to \&quot;All\&quot; offering types. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSchedulesMasterGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\MasterScheduleDayCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AcademicsSchedulesMasterGetWithHttpInfo($level_num, $start_date, $end_date, $offering_type = null, string $contentType = self::contentTypes['v1AcademicsSchedulesMasterGet'][0])
    {
        $request = $this->v1AcademicsSchedulesMasterGetRequest($level_num, $start_date, $end_date, $offering_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\MasterScheduleDayCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\MasterScheduleDayCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\MasterScheduleDayCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\MasterScheduleDayCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\MasterScheduleDayCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AcademicsSchedulesMasterGetAsync
     *
     * Academics master schedule
     *
     * @param  int $level_num Format - int32. Level Number indicates which school you are working with. (required)
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). Start of the date range (inclusive).  The earliest possible start_date is 1/1/1900, any date entered before that date will be overwritten with 1/1/1900. (required)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). End of the date range (inclusive). If the end_date is earlier than the start_date the end_date wil be overwritten with the start_date plus 7 days. (required)
     * @param  int $offering_type Format - int32. Filters the results by a specific group type. Defaults to \&quot;All\&quot; offering types. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSchedulesMasterGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsSchedulesMasterGetAsync($level_num, $start_date, $end_date, $offering_type = null, string $contentType = self::contentTypes['v1AcademicsSchedulesMasterGet'][0])
    {
        return $this->v1AcademicsSchedulesMasterGetAsyncWithHttpInfo($level_num, $start_date, $end_date, $offering_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AcademicsSchedulesMasterGetAsyncWithHttpInfo
     *
     * Academics master schedule
     *
     * @param  int $level_num Format - int32. Level Number indicates which school you are working with. (required)
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). Start of the date range (inclusive).  The earliest possible start_date is 1/1/1900, any date entered before that date will be overwritten with 1/1/1900. (required)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). End of the date range (inclusive). If the end_date is earlier than the start_date the end_date wil be overwritten with the start_date plus 7 days. (required)
     * @param  int $offering_type Format - int32. Filters the results by a specific group type. Defaults to \&quot;All\&quot; offering types. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSchedulesMasterGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsSchedulesMasterGetAsyncWithHttpInfo($level_num, $start_date, $end_date, $offering_type = null, string $contentType = self::contentTypes['v1AcademicsSchedulesMasterGet'][0])
    {
        $returnType = '\SKY\School\Model\MasterScheduleDayCollection';
        $request = $this->v1AcademicsSchedulesMasterGetRequest($level_num, $start_date, $end_date, $offering_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AcademicsSchedulesMasterGet'
     *
     * @param  int $level_num Format - int32. Level Number indicates which school you are working with. (required)
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). Start of the date range (inclusive).  The earliest possible start_date is 1/1/1900, any date entered before that date will be overwritten with 1/1/1900. (required)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). End of the date range (inclusive). If the end_date is earlier than the start_date the end_date wil be overwritten with the start_date plus 7 days. (required)
     * @param  int $offering_type Format - int32. Filters the results by a specific group type. Defaults to \&quot;All\&quot; offering types. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSchedulesMasterGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AcademicsSchedulesMasterGetRequest($level_num, $start_date, $end_date, $offering_type = null, string $contentType = self::contentTypes['v1AcademicsSchedulesMasterGet'][0])
    {

        // verify the required parameter 'level_num' is set
        if ($level_num === null || (is_array($level_num) && count($level_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $level_num when calling v1AcademicsSchedulesMasterGet'
            );
        }

        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling v1AcademicsSchedulesMasterGet'
            );
        }

        // verify the required parameter 'end_date' is set
        if ($end_date === null || (is_array($end_date) && count($end_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_date when calling v1AcademicsSchedulesMasterGet'
            );
        }



        $resourcePath = '/v1/academics/schedules/master';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $level_num,
            'level_num', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'start_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'end_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offering_type,
            'offering_type', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AcademicsSchedulesSetsByScheduleSetIdGet
     *
     * Academics schedule set
     *
     * @param  int $schedule_set_id Format - int32. ID of the Schedule Set you seek. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSchedulesSetsByScheduleSetIdGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\ScheduleSetDetails
     */
    public function v1AcademicsSchedulesSetsByScheduleSetIdGet($schedule_set_id, string $contentType = self::contentTypes['v1AcademicsSchedulesSetsByScheduleSetIdGet'][0])
    {
        [$response] = $this->v1AcademicsSchedulesSetsByScheduleSetIdGetWithHttpInfo($schedule_set_id, $contentType);
        return $response;
    }

    /**
     * Operation v1AcademicsSchedulesSetsByScheduleSetIdGetWithHttpInfo
     *
     * Academics schedule set
     *
     * @param  int $schedule_set_id Format - int32. ID of the Schedule Set you seek. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSchedulesSetsByScheduleSetIdGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\ScheduleSetDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AcademicsSchedulesSetsByScheduleSetIdGetWithHttpInfo($schedule_set_id, string $contentType = self::contentTypes['v1AcademicsSchedulesSetsByScheduleSetIdGet'][0])
    {
        $request = $this->v1AcademicsSchedulesSetsByScheduleSetIdGetRequest($schedule_set_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\ScheduleSetDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\ScheduleSetDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\ScheduleSetDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\ScheduleSetDetails';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\ScheduleSetDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AcademicsSchedulesSetsByScheduleSetIdGetAsync
     *
     * Academics schedule set
     *
     * @param  int $schedule_set_id Format - int32. ID of the Schedule Set you seek. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSchedulesSetsByScheduleSetIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsSchedulesSetsByScheduleSetIdGetAsync($schedule_set_id, string $contentType = self::contentTypes['v1AcademicsSchedulesSetsByScheduleSetIdGet'][0])
    {
        return $this->v1AcademicsSchedulesSetsByScheduleSetIdGetAsyncWithHttpInfo($schedule_set_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AcademicsSchedulesSetsByScheduleSetIdGetAsyncWithHttpInfo
     *
     * Academics schedule set
     *
     * @param  int $schedule_set_id Format - int32. ID of the Schedule Set you seek. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSchedulesSetsByScheduleSetIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsSchedulesSetsByScheduleSetIdGetAsyncWithHttpInfo($schedule_set_id, string $contentType = self::contentTypes['v1AcademicsSchedulesSetsByScheduleSetIdGet'][0])
    {
        $returnType = '\SKY\School\Model\ScheduleSetDetails';
        $request = $this->v1AcademicsSchedulesSetsByScheduleSetIdGetRequest($schedule_set_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AcademicsSchedulesSetsByScheduleSetIdGet'
     *
     * @param  int $schedule_set_id Format - int32. ID of the Schedule Set you seek. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSchedulesSetsByScheduleSetIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AcademicsSchedulesSetsByScheduleSetIdGetRequest($schedule_set_id, string $contentType = self::contentTypes['v1AcademicsSchedulesSetsByScheduleSetIdGet'][0])
    {

        // verify the required parameter 'schedule_set_id' is set
        if ($schedule_set_id === null || (is_array($schedule_set_id) && count($schedule_set_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schedule_set_id when calling v1AcademicsSchedulesSetsByScheduleSetIdGet'
            );
        }


        $resourcePath = '/v1/academics/schedules/sets/{schedule_set_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($schedule_set_id !== null) {
            $resourcePath = str_replace(
                '{' . 'schedule_set_id' . '}',
                ObjectSerializer::toPathValue($schedule_set_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AcademicsSchedulesSetsGet
     *
     * Academics schedule sets by level
     *
     * @param  int $level_num Format - int32. Level Number indicates which school you are working with. (required)
     * @param  string $school_year The school year to get Schedule Sets for. Corresponds to &#x60;&#x60;&#x60;school_year_label&#x60;&#x60;&#x60; in the &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget\&quot;&gt;Year list&lt;/a&gt;. Defaults to the current school year. (optional)
     * @param  int $group_type Format - int32. The Group Type to filter the collection of Schedule Sets. Defaults to the &#39;Academics&#39; (1). (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSchedulesSetsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\ScheduleSetCollection
     */
    public function v1AcademicsSchedulesSetsGet($level_num, $school_year = null, $group_type = 1, string $contentType = self::contentTypes['v1AcademicsSchedulesSetsGet'][0])
    {
        [$response] = $this->v1AcademicsSchedulesSetsGetWithHttpInfo($level_num, $school_year, $group_type, $contentType);
        return $response;
    }

    /**
     * Operation v1AcademicsSchedulesSetsGetWithHttpInfo
     *
     * Academics schedule sets by level
     *
     * @param  int $level_num Format - int32. Level Number indicates which school you are working with. (required)
     * @param  string $school_year The school year to get Schedule Sets for. Corresponds to &#x60;&#x60;&#x60;school_year_label&#x60;&#x60;&#x60; in the &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget\&quot;&gt;Year list&lt;/a&gt;. Defaults to the current school year. (optional)
     * @param  int $group_type Format - int32. The Group Type to filter the collection of Schedule Sets. Defaults to the &#39;Academics&#39; (1). (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSchedulesSetsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\ScheduleSetCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AcademicsSchedulesSetsGetWithHttpInfo($level_num, $school_year = null, $group_type = 1, string $contentType = self::contentTypes['v1AcademicsSchedulesSetsGet'][0])
    {
        $request = $this->v1AcademicsSchedulesSetsGetRequest($level_num, $school_year, $group_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\ScheduleSetCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\ScheduleSetCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\ScheduleSetCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\ScheduleSetCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\ScheduleSetCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AcademicsSchedulesSetsGetAsync
     *
     * Academics schedule sets by level
     *
     * @param  int $level_num Format - int32. Level Number indicates which school you are working with. (required)
     * @param  string $school_year The school year to get Schedule Sets for. Corresponds to &#x60;&#x60;&#x60;school_year_label&#x60;&#x60;&#x60; in the &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget\&quot;&gt;Year list&lt;/a&gt;. Defaults to the current school year. (optional)
     * @param  int $group_type Format - int32. The Group Type to filter the collection of Schedule Sets. Defaults to the &#39;Academics&#39; (1). (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSchedulesSetsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsSchedulesSetsGetAsync($level_num, $school_year = null, $group_type = 1, string $contentType = self::contentTypes['v1AcademicsSchedulesSetsGet'][0])
    {
        return $this->v1AcademicsSchedulesSetsGetAsyncWithHttpInfo($level_num, $school_year, $group_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AcademicsSchedulesSetsGetAsyncWithHttpInfo
     *
     * Academics schedule sets by level
     *
     * @param  int $level_num Format - int32. Level Number indicates which school you are working with. (required)
     * @param  string $school_year The school year to get Schedule Sets for. Corresponds to &#x60;&#x60;&#x60;school_year_label&#x60;&#x60;&#x60; in the &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget\&quot;&gt;Year list&lt;/a&gt;. Defaults to the current school year. (optional)
     * @param  int $group_type Format - int32. The Group Type to filter the collection of Schedule Sets. Defaults to the &#39;Academics&#39; (1). (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSchedulesSetsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsSchedulesSetsGetAsyncWithHttpInfo($level_num, $school_year = null, $group_type = 1, string $contentType = self::contentTypes['v1AcademicsSchedulesSetsGet'][0])
    {
        $returnType = '\SKY\School\Model\ScheduleSetCollection';
        $request = $this->v1AcademicsSchedulesSetsGetRequest($level_num, $school_year, $group_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AcademicsSchedulesSetsGet'
     *
     * @param  int $level_num Format - int32. Level Number indicates which school you are working with. (required)
     * @param  string $school_year The school year to get Schedule Sets for. Corresponds to &#x60;&#x60;&#x60;school_year_label&#x60;&#x60;&#x60; in the &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget\&quot;&gt;Year list&lt;/a&gt;. Defaults to the current school year. (optional)
     * @param  int $group_type Format - int32. The Group Type to filter the collection of Schedule Sets. Defaults to the &#39;Academics&#39; (1). (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSchedulesSetsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AcademicsSchedulesSetsGetRequest($level_num, $school_year = null, $group_type = 1, string $contentType = self::contentTypes['v1AcademicsSchedulesSetsGet'][0])
    {

        // verify the required parameter 'level_num' is set
        if ($level_num === null || (is_array($level_num) && count($level_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $level_num when calling v1AcademicsSchedulesSetsGet'
            );
        }




        $resourcePath = '/v1/academics/schedules/sets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $level_num,
            'level_num', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $school_year,
            'school_year', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $group_type,
            'group_type', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AcademicsSectionsBySectionIdAssignmentsGet
     *
     * Academics assignments by section
     *
     * @param  int $section_id Format - int32. The ID of the section. (required)
     * @param  string $types Returns results that match a comma separated list of assignment type IDs. (optional)
     * @param  string $status The status of the assignment. The status corresponds with static system options. Allowed values: \&quot;0\&quot; for In Progress, \&quot;1\&quot; for Completed, \&quot;2\&quot; for Overdue, and \&quot;-1\&quot; for To Do. (optional)
     * @param  int $persona_id Format - int32. The ID of the persona to get assignments. 3 &#x3D; Faculty, 2 &#x3D; Student. Defaults to 3. (optional)
     * @param  string $filter Return assignments based on the entered string: &#x60;&#x60;&#x60;expired&#x60;&#x60;&#x60;, &#x60;&#x60;&#x60;future&#x60;&#x60;&#x60;, or &#x60;&#x60;&#x60;all&#x60;&#x60;&#x60;. All is the default sort value. (optional)
     * @param  string $search Returns results with Descriptions or Titles that match search string. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsBySectionIdAssignmentsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\AssignmentCollection
     */
    public function v1AcademicsSectionsBySectionIdAssignmentsGet($section_id, $types = null, $status = null, $persona_id = null, $filter = null, $search = null, string $contentType = self::contentTypes['v1AcademicsSectionsBySectionIdAssignmentsGet'][0])
    {
        [$response] = $this->v1AcademicsSectionsBySectionIdAssignmentsGetWithHttpInfo($section_id, $types, $status, $persona_id, $filter, $search, $contentType);
        return $response;
    }

    /**
     * Operation v1AcademicsSectionsBySectionIdAssignmentsGetWithHttpInfo
     *
     * Academics assignments by section
     *
     * @param  int $section_id Format - int32. The ID of the section. (required)
     * @param  string $types Returns results that match a comma separated list of assignment type IDs. (optional)
     * @param  string $status The status of the assignment. The status corresponds with static system options. Allowed values: \&quot;0\&quot; for In Progress, \&quot;1\&quot; for Completed, \&quot;2\&quot; for Overdue, and \&quot;-1\&quot; for To Do. (optional)
     * @param  int $persona_id Format - int32. The ID of the persona to get assignments. 3 &#x3D; Faculty, 2 &#x3D; Student. Defaults to 3. (optional)
     * @param  string $filter Return assignments based on the entered string: &#x60;&#x60;&#x60;expired&#x60;&#x60;&#x60;, &#x60;&#x60;&#x60;future&#x60;&#x60;&#x60;, or &#x60;&#x60;&#x60;all&#x60;&#x60;&#x60;. All is the default sort value. (optional)
     * @param  string $search Returns results with Descriptions or Titles that match search string. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsBySectionIdAssignmentsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\AssignmentCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AcademicsSectionsBySectionIdAssignmentsGetWithHttpInfo($section_id, $types = null, $status = null, $persona_id = null, $filter = null, $search = null, string $contentType = self::contentTypes['v1AcademicsSectionsBySectionIdAssignmentsGet'][0])
    {
        $request = $this->v1AcademicsSectionsBySectionIdAssignmentsGetRequest($section_id, $types, $status, $persona_id, $filter, $search, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\AssignmentCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\AssignmentCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\AssignmentCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\AssignmentCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\AssignmentCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AcademicsSectionsBySectionIdAssignmentsGetAsync
     *
     * Academics assignments by section
     *
     * @param  int $section_id Format - int32. The ID of the section. (required)
     * @param  string $types Returns results that match a comma separated list of assignment type IDs. (optional)
     * @param  string $status The status of the assignment. The status corresponds with static system options. Allowed values: \&quot;0\&quot; for In Progress, \&quot;1\&quot; for Completed, \&quot;2\&quot; for Overdue, and \&quot;-1\&quot; for To Do. (optional)
     * @param  int $persona_id Format - int32. The ID of the persona to get assignments. 3 &#x3D; Faculty, 2 &#x3D; Student. Defaults to 3. (optional)
     * @param  string $filter Return assignments based on the entered string: &#x60;&#x60;&#x60;expired&#x60;&#x60;&#x60;, &#x60;&#x60;&#x60;future&#x60;&#x60;&#x60;, or &#x60;&#x60;&#x60;all&#x60;&#x60;&#x60;. All is the default sort value. (optional)
     * @param  string $search Returns results with Descriptions or Titles that match search string. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsBySectionIdAssignmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsSectionsBySectionIdAssignmentsGetAsync($section_id, $types = null, $status = null, $persona_id = null, $filter = null, $search = null, string $contentType = self::contentTypes['v1AcademicsSectionsBySectionIdAssignmentsGet'][0])
    {
        return $this->v1AcademicsSectionsBySectionIdAssignmentsGetAsyncWithHttpInfo($section_id, $types, $status, $persona_id, $filter, $search, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AcademicsSectionsBySectionIdAssignmentsGetAsyncWithHttpInfo
     *
     * Academics assignments by section
     *
     * @param  int $section_id Format - int32. The ID of the section. (required)
     * @param  string $types Returns results that match a comma separated list of assignment type IDs. (optional)
     * @param  string $status The status of the assignment. The status corresponds with static system options. Allowed values: \&quot;0\&quot; for In Progress, \&quot;1\&quot; for Completed, \&quot;2\&quot; for Overdue, and \&quot;-1\&quot; for To Do. (optional)
     * @param  int $persona_id Format - int32. The ID of the persona to get assignments. 3 &#x3D; Faculty, 2 &#x3D; Student. Defaults to 3. (optional)
     * @param  string $filter Return assignments based on the entered string: &#x60;&#x60;&#x60;expired&#x60;&#x60;&#x60;, &#x60;&#x60;&#x60;future&#x60;&#x60;&#x60;, or &#x60;&#x60;&#x60;all&#x60;&#x60;&#x60;. All is the default sort value. (optional)
     * @param  string $search Returns results with Descriptions or Titles that match search string. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsBySectionIdAssignmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsSectionsBySectionIdAssignmentsGetAsyncWithHttpInfo($section_id, $types = null, $status = null, $persona_id = null, $filter = null, $search = null, string $contentType = self::contentTypes['v1AcademicsSectionsBySectionIdAssignmentsGet'][0])
    {
        $returnType = '\SKY\School\Model\AssignmentCollection';
        $request = $this->v1AcademicsSectionsBySectionIdAssignmentsGetRequest($section_id, $types, $status, $persona_id, $filter, $search, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AcademicsSectionsBySectionIdAssignmentsGet'
     *
     * @param  int $section_id Format - int32. The ID of the section. (required)
     * @param  string $types Returns results that match a comma separated list of assignment type IDs. (optional)
     * @param  string $status The status of the assignment. The status corresponds with static system options. Allowed values: \&quot;0\&quot; for In Progress, \&quot;1\&quot; for Completed, \&quot;2\&quot; for Overdue, and \&quot;-1\&quot; for To Do. (optional)
     * @param  int $persona_id Format - int32. The ID of the persona to get assignments. 3 &#x3D; Faculty, 2 &#x3D; Student. Defaults to 3. (optional)
     * @param  string $filter Return assignments based on the entered string: &#x60;&#x60;&#x60;expired&#x60;&#x60;&#x60;, &#x60;&#x60;&#x60;future&#x60;&#x60;&#x60;, or &#x60;&#x60;&#x60;all&#x60;&#x60;&#x60;. All is the default sort value. (optional)
     * @param  string $search Returns results with Descriptions or Titles that match search string. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsBySectionIdAssignmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AcademicsSectionsBySectionIdAssignmentsGetRequest($section_id, $types = null, $status = null, $persona_id = null, $filter = null, $search = null, string $contentType = self::contentTypes['v1AcademicsSectionsBySectionIdAssignmentsGet'][0])
    {

        // verify the required parameter 'section_id' is set
        if ($section_id === null || (is_array($section_id) && count($section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $section_id when calling v1AcademicsSectionsBySectionIdAssignmentsGet'
            );
        }







        $resourcePath = '/v1/academics/sections/{section_id}/assignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $types,
            'types', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $persona_id,
            'persona_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'section_id' . '}',
                ObjectSerializer::toPathValue($section_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AcademicsSectionsBySectionIdCyclesGet
     *
     * Academics cycles by section
     *
     * @param  int $section_id Format - int32. The ID of the section. (required)
     * @param  int $duration_id Format - int32. The ID of the term for which you want to return cycles. Defaults to the current term for the section provided. (optional)
     * @param  int $group_type Format - int32. The Group Type for the section specified. Defaults to the &#39;Academics&#39; (1). (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsBySectionIdCyclesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\SectionCycles
     */
    public function v1AcademicsSectionsBySectionIdCyclesGet($section_id, $duration_id = null, $group_type = 1, string $contentType = self::contentTypes['v1AcademicsSectionsBySectionIdCyclesGet'][0])
    {
        [$response] = $this->v1AcademicsSectionsBySectionIdCyclesGetWithHttpInfo($section_id, $duration_id, $group_type, $contentType);
        return $response;
    }

    /**
     * Operation v1AcademicsSectionsBySectionIdCyclesGetWithHttpInfo
     *
     * Academics cycles by section
     *
     * @param  int $section_id Format - int32. The ID of the section. (required)
     * @param  int $duration_id Format - int32. The ID of the term for which you want to return cycles. Defaults to the current term for the section provided. (optional)
     * @param  int $group_type Format - int32. The Group Type for the section specified. Defaults to the &#39;Academics&#39; (1). (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsBySectionIdCyclesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\SectionCycles, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AcademicsSectionsBySectionIdCyclesGetWithHttpInfo($section_id, $duration_id = null, $group_type = 1, string $contentType = self::contentTypes['v1AcademicsSectionsBySectionIdCyclesGet'][0])
    {
        $request = $this->v1AcademicsSectionsBySectionIdCyclesGetRequest($section_id, $duration_id, $group_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\SectionCycles' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\SectionCycles' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\SectionCycles', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\SectionCycles';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\SectionCycles',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AcademicsSectionsBySectionIdCyclesGetAsync
     *
     * Academics cycles by section
     *
     * @param  int $section_id Format - int32. The ID of the section. (required)
     * @param  int $duration_id Format - int32. The ID of the term for which you want to return cycles. Defaults to the current term for the section provided. (optional)
     * @param  int $group_type Format - int32. The Group Type for the section specified. Defaults to the &#39;Academics&#39; (1). (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsBySectionIdCyclesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsSectionsBySectionIdCyclesGetAsync($section_id, $duration_id = null, $group_type = 1, string $contentType = self::contentTypes['v1AcademicsSectionsBySectionIdCyclesGet'][0])
    {
        return $this->v1AcademicsSectionsBySectionIdCyclesGetAsyncWithHttpInfo($section_id, $duration_id, $group_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AcademicsSectionsBySectionIdCyclesGetAsyncWithHttpInfo
     *
     * Academics cycles by section
     *
     * @param  int $section_id Format - int32. The ID of the section. (required)
     * @param  int $duration_id Format - int32. The ID of the term for which you want to return cycles. Defaults to the current term for the section provided. (optional)
     * @param  int $group_type Format - int32. The Group Type for the section specified. Defaults to the &#39;Academics&#39; (1). (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsBySectionIdCyclesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsSectionsBySectionIdCyclesGetAsyncWithHttpInfo($section_id, $duration_id = null, $group_type = 1, string $contentType = self::contentTypes['v1AcademicsSectionsBySectionIdCyclesGet'][0])
    {
        $returnType = '\SKY\School\Model\SectionCycles';
        $request = $this->v1AcademicsSectionsBySectionIdCyclesGetRequest($section_id, $duration_id, $group_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AcademicsSectionsBySectionIdCyclesGet'
     *
     * @param  int $section_id Format - int32. The ID of the section. (required)
     * @param  int $duration_id Format - int32. The ID of the term for which you want to return cycles. Defaults to the current term for the section provided. (optional)
     * @param  int $group_type Format - int32. The Group Type for the section specified. Defaults to the &#39;Academics&#39; (1). (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsBySectionIdCyclesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AcademicsSectionsBySectionIdCyclesGetRequest($section_id, $duration_id = null, $group_type = 1, string $contentType = self::contentTypes['v1AcademicsSectionsBySectionIdCyclesGet'][0])
    {

        // verify the required parameter 'section_id' is set
        if ($section_id === null || (is_array($section_id) && count($section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $section_id when calling v1AcademicsSectionsBySectionIdCyclesGet'
            );
        }




        $resourcePath = '/v1/academics/sections/{section_id}/cycles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $duration_id,
            'duration_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $group_type,
            'group_type', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'section_id' . '}',
                ObjectSerializer::toPathValue($section_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AcademicsSectionsBySectionIdStudentsGet
     *
     * Academics students by section
     *
     * @param  int $section_id Format - int32. The ID of the section, which can be found using &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/V1AcademicsSectionsGet\&quot;&gt;Section list&lt;/a&gt;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsBySectionIdStudentsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\StudentCollection
     */
    public function v1AcademicsSectionsBySectionIdStudentsGet($section_id, string $contentType = self::contentTypes['v1AcademicsSectionsBySectionIdStudentsGet'][0])
    {
        [$response] = $this->v1AcademicsSectionsBySectionIdStudentsGetWithHttpInfo($section_id, $contentType);
        return $response;
    }

    /**
     * Operation v1AcademicsSectionsBySectionIdStudentsGetWithHttpInfo
     *
     * Academics students by section
     *
     * @param  int $section_id Format - int32. The ID of the section, which can be found using &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/V1AcademicsSectionsGet\&quot;&gt;Section list&lt;/a&gt;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsBySectionIdStudentsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\StudentCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AcademicsSectionsBySectionIdStudentsGetWithHttpInfo($section_id, string $contentType = self::contentTypes['v1AcademicsSectionsBySectionIdStudentsGet'][0])
    {
        $request = $this->v1AcademicsSectionsBySectionIdStudentsGetRequest($section_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\StudentCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\StudentCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\StudentCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\StudentCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\StudentCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AcademicsSectionsBySectionIdStudentsGetAsync
     *
     * Academics students by section
     *
     * @param  int $section_id Format - int32. The ID of the section, which can be found using &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/V1AcademicsSectionsGet\&quot;&gt;Section list&lt;/a&gt;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsBySectionIdStudentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsSectionsBySectionIdStudentsGetAsync($section_id, string $contentType = self::contentTypes['v1AcademicsSectionsBySectionIdStudentsGet'][0])
    {
        return $this->v1AcademicsSectionsBySectionIdStudentsGetAsyncWithHttpInfo($section_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AcademicsSectionsBySectionIdStudentsGetAsyncWithHttpInfo
     *
     * Academics students by section
     *
     * @param  int $section_id Format - int32. The ID of the section, which can be found using &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/V1AcademicsSectionsGet\&quot;&gt;Section list&lt;/a&gt;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsBySectionIdStudentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsSectionsBySectionIdStudentsGetAsyncWithHttpInfo($section_id, string $contentType = self::contentTypes['v1AcademicsSectionsBySectionIdStudentsGet'][0])
    {
        $returnType = '\SKY\School\Model\StudentCollection';
        $request = $this->v1AcademicsSectionsBySectionIdStudentsGetRequest($section_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AcademicsSectionsBySectionIdStudentsGet'
     *
     * @param  int $section_id Format - int32. The ID of the section, which can be found using &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/V1AcademicsSectionsGet\&quot;&gt;Section list&lt;/a&gt;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsBySectionIdStudentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AcademicsSectionsBySectionIdStudentsGetRequest($section_id, string $contentType = self::contentTypes['v1AcademicsSectionsBySectionIdStudentsGet'][0])
    {

        // verify the required parameter 'section_id' is set
        if ($section_id === null || (is_array($section_id) && count($section_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $section_id when calling v1AcademicsSectionsBySectionIdStudentsGet'
            );
        }


        $resourcePath = '/v1/academics/sections/{section_id}/students';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($section_id !== null) {
            $resourcePath = str_replace(
                '{' . 'section_id' . '}',
                ObjectSerializer::toPathValue($section_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AcademicsSectionsGet
     *
     * Academics sections by school level
     *
     * @param  int $level_num Format - int32. Level number. (required)
     * @param  string $school_year The school year to get sections for. Corresponds to &#x60;&#x60;&#x60;school_year_label&#x60;&#x60;&#x60; in the &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget\&quot;&gt;Year list&lt;/a&gt;. Defaults to the current school year. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\AcademicsSectionCollection
     */
    public function v1AcademicsSectionsGet($level_num, $school_year = null, string $contentType = self::contentTypes['v1AcademicsSectionsGet'][0])
    {
        [$response] = $this->v1AcademicsSectionsGetWithHttpInfo($level_num, $school_year, $contentType);
        return $response;
    }

    /**
     * Operation v1AcademicsSectionsGetWithHttpInfo
     *
     * Academics sections by school level
     *
     * @param  int $level_num Format - int32. Level number. (required)
     * @param  string $school_year The school year to get sections for. Corresponds to &#x60;&#x60;&#x60;school_year_label&#x60;&#x60;&#x60; in the &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget\&quot;&gt;Year list&lt;/a&gt;. Defaults to the current school year. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\AcademicsSectionCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AcademicsSectionsGetWithHttpInfo($level_num, $school_year = null, string $contentType = self::contentTypes['v1AcademicsSectionsGet'][0])
    {
        $request = $this->v1AcademicsSectionsGetRequest($level_num, $school_year, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\AcademicsSectionCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\AcademicsSectionCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\AcademicsSectionCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\AcademicsSectionCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\AcademicsSectionCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AcademicsSectionsGetAsync
     *
     * Academics sections by school level
     *
     * @param  int $level_num Format - int32. Level number. (required)
     * @param  string $school_year The school year to get sections for. Corresponds to &#x60;&#x60;&#x60;school_year_label&#x60;&#x60;&#x60; in the &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget\&quot;&gt;Year list&lt;/a&gt;. Defaults to the current school year. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsSectionsGetAsync($level_num, $school_year = null, string $contentType = self::contentTypes['v1AcademicsSectionsGet'][0])
    {
        return $this->v1AcademicsSectionsGetAsyncWithHttpInfo($level_num, $school_year, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AcademicsSectionsGetAsyncWithHttpInfo
     *
     * Academics sections by school level
     *
     * @param  int $level_num Format - int32. Level number. (required)
     * @param  string $school_year The school year to get sections for. Corresponds to &#x60;&#x60;&#x60;school_year_label&#x60;&#x60;&#x60; in the &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget\&quot;&gt;Year list&lt;/a&gt;. Defaults to the current school year. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsSectionsGetAsyncWithHttpInfo($level_num, $school_year = null, string $contentType = self::contentTypes['v1AcademicsSectionsGet'][0])
    {
        $returnType = '\SKY\School\Model\AcademicsSectionCollection';
        $request = $this->v1AcademicsSectionsGetRequest($level_num, $school_year, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AcademicsSectionsGet'
     *
     * @param  int $level_num Format - int32. Level number. (required)
     * @param  string $school_year The school year to get sections for. Corresponds to &#x60;&#x60;&#x60;school_year_label&#x60;&#x60;&#x60; in the &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget\&quot;&gt;Year list&lt;/a&gt;. Defaults to the current school year. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AcademicsSectionsGetRequest($level_num, $school_year = null, string $contentType = self::contentTypes['v1AcademicsSectionsGet'][0])
    {

        // verify the required parameter 'level_num' is set
        if ($level_num === null || (is_array($level_num) && count($level_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $level_num when calling v1AcademicsSectionsGet'
            );
        }



        $resourcePath = '/v1/academics/sections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $level_num,
            'level_num', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $school_year,
            'school_year', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AcademicsSectionsStudentsPost
     *
     * Academics enroll students into sections
     *
     * @param  \SKY\School\Model\BulkEnrollment $bulk_enrollment Defines which users (students and/or teachers) should be added to which offerings (via &#x60;&#x60;&#x60;section_id&#x60;&#x60;&#x60; and duration &#x60;&#x60;&#x60;id&#x60;&#x60;&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsStudentsPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\PostResponse
     */
    public function v1AcademicsSectionsStudentsPost($bulk_enrollment = null, string $contentType = self::contentTypes['v1AcademicsSectionsStudentsPost'][0])
    {
        [$response] = $this->v1AcademicsSectionsStudentsPostWithHttpInfo($bulk_enrollment, $contentType);
        return $response;
    }

    /**
     * Operation v1AcademicsSectionsStudentsPostWithHttpInfo
     *
     * Academics enroll students into sections
     *
     * @param  \SKY\School\Model\BulkEnrollment $bulk_enrollment Defines which users (students and/or teachers) should be added to which offerings (via &#x60;&#x60;&#x60;section_id&#x60;&#x60;&#x60; and duration &#x60;&#x60;&#x60;id&#x60;&#x60;&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsStudentsPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\PostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AcademicsSectionsStudentsPostWithHttpInfo($bulk_enrollment = null, string $contentType = self::contentTypes['v1AcademicsSectionsStudentsPost'][0])
    {
        $request = $this->v1AcademicsSectionsStudentsPostRequest($bulk_enrollment, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\PostResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\PostResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\PostResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\PostResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\PostResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AcademicsSectionsStudentsPostAsync
     *
     * Academics enroll students into sections
     *
     * @param  \SKY\School\Model\BulkEnrollment $bulk_enrollment Defines which users (students and/or teachers) should be added to which offerings (via &#x60;&#x60;&#x60;section_id&#x60;&#x60;&#x60; and duration &#x60;&#x60;&#x60;id&#x60;&#x60;&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsStudentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsSectionsStudentsPostAsync($bulk_enrollment = null, string $contentType = self::contentTypes['v1AcademicsSectionsStudentsPost'][0])
    {
        return $this->v1AcademicsSectionsStudentsPostAsyncWithHttpInfo($bulk_enrollment, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AcademicsSectionsStudentsPostAsyncWithHttpInfo
     *
     * Academics enroll students into sections
     *
     * @param  \SKY\School\Model\BulkEnrollment $bulk_enrollment Defines which users (students and/or teachers) should be added to which offerings (via &#x60;&#x60;&#x60;section_id&#x60;&#x60;&#x60; and duration &#x60;&#x60;&#x60;id&#x60;&#x60;&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsStudentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsSectionsStudentsPostAsyncWithHttpInfo($bulk_enrollment = null, string $contentType = self::contentTypes['v1AcademicsSectionsStudentsPost'][0])
    {
        $returnType = '\SKY\School\Model\PostResponse';
        $request = $this->v1AcademicsSectionsStudentsPostRequest($bulk_enrollment, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AcademicsSectionsStudentsPost'
     *
     * @param  \SKY\School\Model\BulkEnrollment $bulk_enrollment Defines which users (students and/or teachers) should be added to which offerings (via &#x60;&#x60;&#x60;section_id&#x60;&#x60;&#x60; and duration &#x60;&#x60;&#x60;id&#x60;&#x60;&#x60;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSectionsStudentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AcademicsSectionsStudentsPostRequest($bulk_enrollment = null, string $contentType = self::contentTypes['v1AcademicsSectionsStudentsPost'][0])
    {



        $resourcePath = '/v1/academics/sections/students';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bulk_enrollment)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bulk_enrollment));
            } else {
                $httpBody = $bulk_enrollment;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AcademicsSpecialdaysGet
     *
     * Academics special days
     *
     * @param  int $level_id Format - int32. Identifier for a specific school level. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSpecialdaysGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\SpecialDayCollection
     */
    public function v1AcademicsSpecialdaysGet($level_id = null, string $contentType = self::contentTypes['v1AcademicsSpecialdaysGet'][0])
    {
        [$response] = $this->v1AcademicsSpecialdaysGetWithHttpInfo($level_id, $contentType);
        return $response;
    }

    /**
     * Operation v1AcademicsSpecialdaysGetWithHttpInfo
     *
     * Academics special days
     *
     * @param  int $level_id Format - int32. Identifier for a specific school level. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSpecialdaysGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\SpecialDayCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AcademicsSpecialdaysGetWithHttpInfo($level_id = null, string $contentType = self::contentTypes['v1AcademicsSpecialdaysGet'][0])
    {
        $request = $this->v1AcademicsSpecialdaysGetRequest($level_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\SpecialDayCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\SpecialDayCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\SpecialDayCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\SpecialDayCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\SpecialDayCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AcademicsSpecialdaysGetAsync
     *
     * Academics special days
     *
     * @param  int $level_id Format - int32. Identifier for a specific school level. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSpecialdaysGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsSpecialdaysGetAsync($level_id = null, string $contentType = self::contentTypes['v1AcademicsSpecialdaysGet'][0])
    {
        return $this->v1AcademicsSpecialdaysGetAsyncWithHttpInfo($level_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AcademicsSpecialdaysGetAsyncWithHttpInfo
     *
     * Academics special days
     *
     * @param  int $level_id Format - int32. Identifier for a specific school level. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSpecialdaysGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsSpecialdaysGetAsyncWithHttpInfo($level_id = null, string $contentType = self::contentTypes['v1AcademicsSpecialdaysGet'][0])
    {
        $returnType = '\SKY\School\Model\SpecialDayCollection';
        $request = $this->v1AcademicsSpecialdaysGetRequest($level_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AcademicsSpecialdaysGet'
     *
     * @param  int $level_id Format - int32. Identifier for a specific school level. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsSpecialdaysGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AcademicsSpecialdaysGetRequest($level_id = null, string $contentType = self::contentTypes['v1AcademicsSpecialdaysGet'][0])
    {



        $resourcePath = '/v1/academics/specialdays';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $level_id,
            'level_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AcademicsStudentByStudentIdSectionsGet
     *
     * Academics sections for student
     *
     * @param  int $student_id Format - int32. The ID of the student to view sections and grades for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsStudentByStudentIdSectionsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\AcademicsSectionStudentCollection
     */
    public function v1AcademicsStudentByStudentIdSectionsGet($student_id, string $contentType = self::contentTypes['v1AcademicsStudentByStudentIdSectionsGet'][0])
    {
        [$response] = $this->v1AcademicsStudentByStudentIdSectionsGetWithHttpInfo($student_id, $contentType);
        return $response;
    }

    /**
     * Operation v1AcademicsStudentByStudentIdSectionsGetWithHttpInfo
     *
     * Academics sections for student
     *
     * @param  int $student_id Format - int32. The ID of the student to view sections and grades for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsStudentByStudentIdSectionsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\AcademicsSectionStudentCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AcademicsStudentByStudentIdSectionsGetWithHttpInfo($student_id, string $contentType = self::contentTypes['v1AcademicsStudentByStudentIdSectionsGet'][0])
    {
        $request = $this->v1AcademicsStudentByStudentIdSectionsGetRequest($student_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\AcademicsSectionStudentCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\AcademicsSectionStudentCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\AcademicsSectionStudentCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\AcademicsSectionStudentCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\AcademicsSectionStudentCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AcademicsStudentByStudentIdSectionsGetAsync
     *
     * Academics sections for student
     *
     * @param  int $student_id Format - int32. The ID of the student to view sections and grades for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsStudentByStudentIdSectionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsStudentByStudentIdSectionsGetAsync($student_id, string $contentType = self::contentTypes['v1AcademicsStudentByStudentIdSectionsGet'][0])
    {
        return $this->v1AcademicsStudentByStudentIdSectionsGetAsyncWithHttpInfo($student_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AcademicsStudentByStudentIdSectionsGetAsyncWithHttpInfo
     *
     * Academics sections for student
     *
     * @param  int $student_id Format - int32. The ID of the student to view sections and grades for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsStudentByStudentIdSectionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsStudentByStudentIdSectionsGetAsyncWithHttpInfo($student_id, string $contentType = self::contentTypes['v1AcademicsStudentByStudentIdSectionsGet'][0])
    {
        $returnType = '\SKY\School\Model\AcademicsSectionStudentCollection';
        $request = $this->v1AcademicsStudentByStudentIdSectionsGetRequest($student_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AcademicsStudentByStudentIdSectionsGet'
     *
     * @param  int $student_id Format - int32. The ID of the student to view sections and grades for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsStudentByStudentIdSectionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AcademicsStudentByStudentIdSectionsGetRequest($student_id, string $contentType = self::contentTypes['v1AcademicsStudentByStudentIdSectionsGet'][0])
    {

        // verify the required parameter 'student_id' is set
        if ($student_id === null || (is_array($student_id) && count($student_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $student_id when calling v1AcademicsStudentByStudentIdSectionsGet'
            );
        }


        $resourcePath = '/v1/academics/student/{student_id}/sections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($student_id !== null) {
            $resourcePath = str_replace(
                '{' . 'student_id' . '}',
                ObjectSerializer::toPathValue($student_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1AcademicsTeachersByTeacherIdSectionsGet
     *
     * Academics sections by teacher
     *
     * @param  int $teacher_id Format - int32. The ID of the teacher to get sections for. (required)
     * @param  string $school_year The school year. Corresponds to &#x60;&#x60;&#x60;school_year_label&#x60;&#x60;&#x60; in the &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget\&quot;&gt;Year list&lt;/a&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsTeachersByTeacherIdSectionsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\AcademicsSectionCollection
     */
    public function v1AcademicsTeachersByTeacherIdSectionsGet($teacher_id, $school_year = null, string $contentType = self::contentTypes['v1AcademicsTeachersByTeacherIdSectionsGet'][0])
    {
        [$response] = $this->v1AcademicsTeachersByTeacherIdSectionsGetWithHttpInfo($teacher_id, $school_year, $contentType);
        return $response;
    }

    /**
     * Operation v1AcademicsTeachersByTeacherIdSectionsGetWithHttpInfo
     *
     * Academics sections by teacher
     *
     * @param  int $teacher_id Format - int32. The ID of the teacher to get sections for. (required)
     * @param  string $school_year The school year. Corresponds to &#x60;&#x60;&#x60;school_year_label&#x60;&#x60;&#x60; in the &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget\&quot;&gt;Year list&lt;/a&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsTeachersByTeacherIdSectionsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\AcademicsSectionCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1AcademicsTeachersByTeacherIdSectionsGetWithHttpInfo($teacher_id, $school_year = null, string $contentType = self::contentTypes['v1AcademicsTeachersByTeacherIdSectionsGet'][0])
    {
        $request = $this->v1AcademicsTeachersByTeacherIdSectionsGetRequest($teacher_id, $school_year, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\AcademicsSectionCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\AcademicsSectionCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\AcademicsSectionCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\AcademicsSectionCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\AcademicsSectionCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1AcademicsTeachersByTeacherIdSectionsGetAsync
     *
     * Academics sections by teacher
     *
     * @param  int $teacher_id Format - int32. The ID of the teacher to get sections for. (required)
     * @param  string $school_year The school year. Corresponds to &#x60;&#x60;&#x60;school_year_label&#x60;&#x60;&#x60; in the &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget\&quot;&gt;Year list&lt;/a&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsTeachersByTeacherIdSectionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsTeachersByTeacherIdSectionsGetAsync($teacher_id, $school_year = null, string $contentType = self::contentTypes['v1AcademicsTeachersByTeacherIdSectionsGet'][0])
    {
        return $this->v1AcademicsTeachersByTeacherIdSectionsGetAsyncWithHttpInfo($teacher_id, $school_year, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1AcademicsTeachersByTeacherIdSectionsGetAsyncWithHttpInfo
     *
     * Academics sections by teacher
     *
     * @param  int $teacher_id Format - int32. The ID of the teacher to get sections for. (required)
     * @param  string $school_year The school year. Corresponds to &#x60;&#x60;&#x60;school_year_label&#x60;&#x60;&#x60; in the &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget\&quot;&gt;Year list&lt;/a&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsTeachersByTeacherIdSectionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1AcademicsTeachersByTeacherIdSectionsGetAsyncWithHttpInfo($teacher_id, $school_year = null, string $contentType = self::contentTypes['v1AcademicsTeachersByTeacherIdSectionsGet'][0])
    {
        $returnType = '\SKY\School\Model\AcademicsSectionCollection';
        $request = $this->v1AcademicsTeachersByTeacherIdSectionsGetRequest($teacher_id, $school_year, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1AcademicsTeachersByTeacherIdSectionsGet'
     *
     * @param  int $teacher_id Format - int32. The ID of the teacher to get sections for. (required)
     * @param  string $school_year The school year. Corresponds to &#x60;&#x60;&#x60;school_year_label&#x60;&#x60;&#x60; in the &lt;a href&#x3D;\&quot;https://developer.sky.blackbaud.com/docs/services/school/operations/v1yearsget\&quot;&gt;Year list&lt;/a&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1AcademicsTeachersByTeacherIdSectionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1AcademicsTeachersByTeacherIdSectionsGetRequest($teacher_id, $school_year = null, string $contentType = self::contentTypes['v1AcademicsTeachersByTeacherIdSectionsGet'][0])
    {

        // verify the required parameter 'teacher_id' is set
        if ($teacher_id === null || (is_array($teacher_id) && count($teacher_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $teacher_id when calling v1AcademicsTeachersByTeacherIdSectionsGet'
            );
        }



        $resourcePath = '/v1/academics/teachers/{teacher_id}/sections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $school_year,
            'school_year', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($teacher_id !== null) {
            $resourcePath = str_replace(
                '{' . 'teacher_id' . '}',
                ObjectSerializer::toPathValue($teacher_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
