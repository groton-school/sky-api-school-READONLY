<?php
/**
 * UserApi
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SKY\School\ApiException;
use SKY\School\Configuration;
use SKY\School\HeaderSelector;
use SKY\School\ObjectSerializer;

/**
 * UserApi Class Doc Comment
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'v1UsersAddresstypesGet' => [
            'application/json',
        ],
        'v1UsersAuditGet' => [
            'application/json',
        ],
        'v1UsersBbidstatusGet' => [
            'application/json',
        ],
        'v1UsersByParentIdStudentsGet' => [
            'application/json',
        ],
        'v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDelete' => [
            'application/json',
        ],
        'v1UsersByUserIdAddressesByAddressIdPatch' => [
            'application/json',
        ],
        'v1UsersByUserIdAddressesGet' => [
            'application/json',
        ],
        'v1UsersByUserIdAddressesPost' => [
            'application/json',
        ],
        'v1UsersByUserIdAddressesSharePost' => [
            'application/json',
        ],
        'v1UsersByUserIdCustomfieldsGet' => [
            'application/json',
        ],
        'v1UsersByUserIdCustomfieldsListPatch' => [
            'application/json',
        ],
        'v1UsersByUserIdCustomfieldsListPost' => [
            'application/json',
        ],
        'v1UsersByUserIdCustomfieldsPatch' => [
            'application/json',
        ],
        'v1UsersByUserIdCustomfieldsPost' => [
            'application/json',
        ],
        'v1UsersByUserIdEducationByEducationIdDelete' => [
            'application/json',
        ],
        'v1UsersByUserIdEducationByEducationIdPatch' => [
            'application/json',
        ],
        'v1UsersByUserIdEducationGet' => [
            'application/json',
        ],
        'v1UsersByUserIdEducationPost' => [
            'application/json',
        ],
        'v1UsersByUserIdEmergencycontactsGet' => [
            'application/json',
        ],
        'v1UsersByUserIdEmergencycontactsNonuserPost' => [
            'application/json',
        ],
        'v1UsersByUserIdEmergencycontactsUserPost' => [
            'application/json',
        ],
        'v1UsersByUserIdEmploymentGet' => [
            'application/json',
        ],
        'v1UsersByUserIdGet' => [
            'application/json',
        ],
        'v1UsersByUserIdOccupationsByOccupationIdDelete' => [
            'application/json',
        ],
        'v1UsersByUserIdOccupationsByOccupationIdPatch' => [
            'application/json',
        ],
        'v1UsersByUserIdOccupationsGet' => [
            'application/json',
        ],
        'v1UsersByUserIdOccupationsPost' => [
            'application/json',
        ],
        'v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDelete' => [
            'application/json',
        ],
        'v1UsersByUserIdPhonesByPhoneIdPatch' => [
            'application/json',
        ],
        'v1UsersByUserIdPhonesGet' => [
            'application/json',
        ],
        'v1UsersByUserIdPhonesPost' => [
            'application/json',
        ],
        'v1UsersByUserIdPhonesSharePost' => [
            'application/json',
        ],
        'v1UsersByUserIdRelationshipsDelete' => [
            'application/json',
        ],
        'v1UsersByUserIdRelationshipsGet' => [
            'application/json',
        ],
        'v1UsersByUserIdRelationshipsPost' => [
            'application/json',
        ],
        'v1UsersChangedGet' => [
            'application/json',
        ],
        'v1UsersCustomfieldsGet' => [
            'application/json',
        ],
        'v1UsersEmergencycontactsChangedGet' => [
            'application/json',
        ],
        'v1UsersEnrollPost' => [
            'application/json',
        ],
        'v1UsersEnrollmentsGet' => [
            'application/json',
        ],
        'v1UsersExtendedByUserIdGet' => [
            'application/json',
        ],
        'v1UsersExtendedGet' => [
            'application/json',
        ],
        'v1UsersGendertypesGet' => [
            'application/json',
        ],
        'v1UsersMeGet' => [
            'application/json',
        ],
        'v1UsersPatch' => [
            'application/json',
        ],
        'v1UsersPhonetypesGet' => [
            'application/json',
        ],
        'v1UsersPost' => [
            'application/json',
        ],
        'v1usersget' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1UsersAddresstypesGet
     *
     * Users address types
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersAddresstypesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\AddressTypeCollection
     */
    public function v1UsersAddresstypesGet(string $contentType = self::contentTypes['v1UsersAddresstypesGet'][0])
    {
        [$response] = $this->v1UsersAddresstypesGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation v1UsersAddresstypesGetWithHttpInfo
     *
     * Users address types
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersAddresstypesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\AddressTypeCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersAddresstypesGetWithHttpInfo(string $contentType = self::contentTypes['v1UsersAddresstypesGet'][0])
    {
        $request = $this->v1UsersAddresstypesGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\AddressTypeCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\AddressTypeCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\AddressTypeCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\AddressTypeCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\AddressTypeCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersAddresstypesGetAsync
     *
     * Users address types
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersAddresstypesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersAddresstypesGetAsync(string $contentType = self::contentTypes['v1UsersAddresstypesGet'][0])
    {
        return $this->v1UsersAddresstypesGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersAddresstypesGetAsyncWithHttpInfo
     *
     * Users address types
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersAddresstypesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersAddresstypesGetAsyncWithHttpInfo(string $contentType = self::contentTypes['v1UsersAddresstypesGet'][0])
    {
        $returnType = '\SKY\School\Model\AddressTypeCollection';
        $request = $this->v1UsersAddresstypesGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersAddresstypesGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersAddresstypesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersAddresstypesGetRequest(string $contentType = self::contentTypes['v1UsersAddresstypesGet'][0])
    {


        $resourcePath = '/v1/users/addresstypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersAuditGet
     *
     * Users audit by role ID
     *
     * @param  string $role_id Role to return audit information for. (required)
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). The date to begin looking for changes. Must be greater than 01/01/1990. (optional)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). The date to end looking for changes.  Must be within 1 year of start_date. Null returns start_date + 7 days. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersAuditGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\UserAuditReadCollection
     */
    public function v1UsersAuditGet($role_id, $start_date = null, $end_date = null, string $contentType = self::contentTypes['v1UsersAuditGet'][0])
    {
        [$response] = $this->v1UsersAuditGetWithHttpInfo($role_id, $start_date, $end_date, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersAuditGetWithHttpInfo
     *
     * Users audit by role ID
     *
     * @param  string $role_id Role to return audit information for. (required)
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). The date to begin looking for changes. Must be greater than 01/01/1990. (optional)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). The date to end looking for changes.  Must be within 1 year of start_date. Null returns start_date + 7 days. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersAuditGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\UserAuditReadCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersAuditGetWithHttpInfo($role_id, $start_date = null, $end_date = null, string $contentType = self::contentTypes['v1UsersAuditGet'][0])
    {
        $request = $this->v1UsersAuditGetRequest($role_id, $start_date, $end_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\UserAuditReadCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\UserAuditReadCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\UserAuditReadCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\UserAuditReadCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\UserAuditReadCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersAuditGetAsync
     *
     * Users audit by role ID
     *
     * @param  string $role_id Role to return audit information for. (required)
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). The date to begin looking for changes. Must be greater than 01/01/1990. (optional)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). The date to end looking for changes.  Must be within 1 year of start_date. Null returns start_date + 7 days. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersAuditGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersAuditGetAsync($role_id, $start_date = null, $end_date = null, string $contentType = self::contentTypes['v1UsersAuditGet'][0])
    {
        return $this->v1UsersAuditGetAsyncWithHttpInfo($role_id, $start_date, $end_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersAuditGetAsyncWithHttpInfo
     *
     * Users audit by role ID
     *
     * @param  string $role_id Role to return audit information for. (required)
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). The date to begin looking for changes. Must be greater than 01/01/1990. (optional)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). The date to end looking for changes.  Must be within 1 year of start_date. Null returns start_date + 7 days. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersAuditGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersAuditGetAsyncWithHttpInfo($role_id, $start_date = null, $end_date = null, string $contentType = self::contentTypes['v1UsersAuditGet'][0])
    {
        $returnType = '\SKY\School\Model\UserAuditReadCollection';
        $request = $this->v1UsersAuditGetRequest($role_id, $start_date, $end_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersAuditGet'
     *
     * @param  string $role_id Role to return audit information for. (required)
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). The date to begin looking for changes. Must be greater than 01/01/1990. (optional)
     * @param  \DateTime $end_date Format - date-time (as date-time in RFC3339). The date to end looking for changes.  Must be within 1 year of start_date. Null returns start_date + 7 days. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersAuditGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersAuditGetRequest($role_id, $start_date = null, $end_date = null, string $contentType = self::contentTypes['v1UsersAuditGet'][0])
    {

        // verify the required parameter 'role_id' is set
        if ($role_id === null || (is_array($role_id) && count($role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_id when calling v1UsersAuditGet'
            );
        }




        $resourcePath = '/v1/users/audit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $role_id,
            'role_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'start_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'end_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersBbidstatusGet
     *
     * Users BBID status by role(s).
     *
     * @param  string $base_role_ids Comma delimited list of base role IDs to get users for. (required)
     * @param  int $marker Format - int32. The user&#39;s ID to start at to return the next batch of data. Results will start with the next user in the result set. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersBbidstatusGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\SchoolBbidStatusCollection
     */
    public function v1UsersBbidstatusGet($base_role_ids, $marker = null, string $contentType = self::contentTypes['v1UsersBbidstatusGet'][0])
    {
        [$response] = $this->v1UsersBbidstatusGetWithHttpInfo($base_role_ids, $marker, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersBbidstatusGetWithHttpInfo
     *
     * Users BBID status by role(s).
     *
     * @param  string $base_role_ids Comma delimited list of base role IDs to get users for. (required)
     * @param  int $marker Format - int32. The user&#39;s ID to start at to return the next batch of data. Results will start with the next user in the result set. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersBbidstatusGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\SchoolBbidStatusCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersBbidstatusGetWithHttpInfo($base_role_ids, $marker = null, string $contentType = self::contentTypes['v1UsersBbidstatusGet'][0])
    {
        $request = $this->v1UsersBbidstatusGetRequest($base_role_ids, $marker, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\SchoolBbidStatusCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\SchoolBbidStatusCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\SchoolBbidStatusCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\SchoolBbidStatusCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\SchoolBbidStatusCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersBbidstatusGetAsync
     *
     * Users BBID status by role(s).
     *
     * @param  string $base_role_ids Comma delimited list of base role IDs to get users for. (required)
     * @param  int $marker Format - int32. The user&#39;s ID to start at to return the next batch of data. Results will start with the next user in the result set. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersBbidstatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersBbidstatusGetAsync($base_role_ids, $marker = null, string $contentType = self::contentTypes['v1UsersBbidstatusGet'][0])
    {
        return $this->v1UsersBbidstatusGetAsyncWithHttpInfo($base_role_ids, $marker, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersBbidstatusGetAsyncWithHttpInfo
     *
     * Users BBID status by role(s).
     *
     * @param  string $base_role_ids Comma delimited list of base role IDs to get users for. (required)
     * @param  int $marker Format - int32. The user&#39;s ID to start at to return the next batch of data. Results will start with the next user in the result set. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersBbidstatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersBbidstatusGetAsyncWithHttpInfo($base_role_ids, $marker = null, string $contentType = self::contentTypes['v1UsersBbidstatusGet'][0])
    {
        $returnType = '\SKY\School\Model\SchoolBbidStatusCollection';
        $request = $this->v1UsersBbidstatusGetRequest($base_role_ids, $marker, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersBbidstatusGet'
     *
     * @param  string $base_role_ids Comma delimited list of base role IDs to get users for. (required)
     * @param  int $marker Format - int32. The user&#39;s ID to start at to return the next batch of data. Results will start with the next user in the result set. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersBbidstatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersBbidstatusGetRequest($base_role_ids, $marker = null, string $contentType = self::contentTypes['v1UsersBbidstatusGet'][0])
    {

        // verify the required parameter 'base_role_ids' is set
        if ($base_role_ids === null || (is_array($base_role_ids) && count($base_role_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_role_ids when calling v1UsersBbidstatusGet'
            );
        }



        $resourcePath = '/v1/users/bbidstatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $base_role_ids,
            'base_role_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marker,
            'marker', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByParentIdStudentsGet
     *
     * Users Children of Parent
     *
     * @param  int $parent_id Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByParentIdStudentsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\ChildOfParentCollection
     */
    public function v1UsersByParentIdStudentsGet($parent_id, string $contentType = self::contentTypes['v1UsersByParentIdStudentsGet'][0])
    {
        [$response] = $this->v1UsersByParentIdStudentsGetWithHttpInfo($parent_id, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByParentIdStudentsGetWithHttpInfo
     *
     * Users Children of Parent
     *
     * @param  int $parent_id Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByParentIdStudentsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\ChildOfParentCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByParentIdStudentsGetWithHttpInfo($parent_id, string $contentType = self::contentTypes['v1UsersByParentIdStudentsGet'][0])
    {
        $request = $this->v1UsersByParentIdStudentsGetRequest($parent_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\ChildOfParentCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\ChildOfParentCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\ChildOfParentCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\ChildOfParentCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\ChildOfParentCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByParentIdStudentsGetAsync
     *
     * Users Children of Parent
     *
     * @param  int $parent_id Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByParentIdStudentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByParentIdStudentsGetAsync($parent_id, string $contentType = self::contentTypes['v1UsersByParentIdStudentsGet'][0])
    {
        return $this->v1UsersByParentIdStudentsGetAsyncWithHttpInfo($parent_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByParentIdStudentsGetAsyncWithHttpInfo
     *
     * Users Children of Parent
     *
     * @param  int $parent_id Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByParentIdStudentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByParentIdStudentsGetAsyncWithHttpInfo($parent_id, string $contentType = self::contentTypes['v1UsersByParentIdStudentsGet'][0])
    {
        $returnType = '\SKY\School\Model\ChildOfParentCollection';
        $request = $this->v1UsersByParentIdStudentsGetRequest($parent_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByParentIdStudentsGet'
     *
     * @param  int $parent_id Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByParentIdStudentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByParentIdStudentsGetRequest($parent_id, string $contentType = self::contentTypes['v1UsersByParentIdStudentsGet'][0])
    {

        // verify the required parameter 'parent_id' is set
        if ($parent_id === null || (is_array($parent_id) && count($parent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parent_id when calling v1UsersByParentIdStudentsGet'
            );
        }


        $resourcePath = '/v1/users/{parent_id}/students';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($parent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'parent_id' . '}',
                ObjectSerializer::toPathValue($parent_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDelete
     *
     * Users address delete (BETA)
     *
     * @param  int $user_id Format - int32. The ID of the user (required)
     * @param  int $address_id Format - int32. The ID of the user&#39;s address to delete. (required)
     * @param  int $address_type_id Format - int32. The ID of the user&#39;s address type to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDelete'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDelete($user_id, $address_id, $address_type_id, string $contentType = self::contentTypes['v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDelete'][0])
    {
        $this->v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDeleteWithHttpInfo($user_id, $address_id, $address_type_id, $contentType);
    }

    /**
     * Operation v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDeleteWithHttpInfo
     *
     * Users address delete (BETA)
     *
     * @param  int $user_id Format - int32. The ID of the user (required)
     * @param  int $address_id Format - int32. The ID of the user&#39;s address to delete. (required)
     * @param  int $address_type_id Format - int32. The ID of the user&#39;s address type to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDelete'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDeleteWithHttpInfo($user_id, $address_id, $address_type_id, string $contentType = self::contentTypes['v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDelete'][0])
    {
        $request = $this->v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDeleteRequest($user_id, $address_id, $address_type_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDeleteAsync
     *
     * Users address delete (BETA)
     *
     * @param  int $user_id Format - int32. The ID of the user (required)
     * @param  int $address_id Format - int32. The ID of the user&#39;s address to delete. (required)
     * @param  int $address_type_id Format - int32. The ID of the user&#39;s address type to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDeleteAsync($user_id, $address_id, $address_type_id, string $contentType = self::contentTypes['v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDelete'][0])
    {
        return $this->v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDeleteAsyncWithHttpInfo($user_id, $address_id, $address_type_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDeleteAsyncWithHttpInfo
     *
     * Users address delete (BETA)
     *
     * @param  int $user_id Format - int32. The ID of the user (required)
     * @param  int $address_id Format - int32. The ID of the user&#39;s address to delete. (required)
     * @param  int $address_type_id Format - int32. The ID of the user&#39;s address type to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDeleteAsyncWithHttpInfo($user_id, $address_id, $address_type_id, string $contentType = self::contentTypes['v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDelete'][0])
    {
        $returnType = '';
        $request = $this->v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDeleteRequest($user_id, $address_id, $address_type_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDelete'
     *
     * @param  int $user_id Format - int32. The ID of the user (required)
     * @param  int $address_id Format - int32. The ID of the user&#39;s address to delete. (required)
     * @param  int $address_type_id Format - int32. The ID of the user&#39;s address type to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDeleteRequest($user_id, $address_id, $address_type_id, string $contentType = self::contentTypes['v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDelete'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDelete'
            );
        }

        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDelete'
            );
        }

        // verify the required parameter 'address_type_id' is set
        if ($address_type_id === null || (is_array($address_type_id) && count($address_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_type_id when calling v1UsersByUserIdAddressesByAddressIdByAddressTypeIdDelete'
            );
        }


        $resourcePath = '/v1/users/{user_id}/addresses/{address_id}/{address_type_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'address_id' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }
        // path params
        if ($address_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'address_type_id' . '}',
                ObjectSerializer::toPathValue($address_type_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdAddressesByAddressIdPatch
     *
     * Users address update
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $address_id Format - int32. The ID of the address to be updated. (required)
     * @param  \SKY\School\Model\AddressEdit $address_edit Address information to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesByAddressIdPatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1UsersByUserIdAddressesByAddressIdPatch($user_id, $address_id, $address_edit = null, string $contentType = self::contentTypes['v1UsersByUserIdAddressesByAddressIdPatch'][0])
    {
        [$response] = $this->v1UsersByUserIdAddressesByAddressIdPatchWithHttpInfo($user_id, $address_id, $address_edit, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdAddressesByAddressIdPatchWithHttpInfo
     *
     * Users address update
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $address_id Format - int32. The ID of the address to be updated. (required)
     * @param  \SKY\School\Model\AddressEdit $address_edit Address information to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesByAddressIdPatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdAddressesByAddressIdPatchWithHttpInfo($user_id, $address_id, $address_edit = null, string $contentType = self::contentTypes['v1UsersByUserIdAddressesByAddressIdPatch'][0])
    {
        $request = $this->v1UsersByUserIdAddressesByAddressIdPatchRequest($user_id, $address_id, $address_edit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdAddressesByAddressIdPatchAsync
     *
     * Users address update
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $address_id Format - int32. The ID of the address to be updated. (required)
     * @param  \SKY\School\Model\AddressEdit $address_edit Address information to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesByAddressIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdAddressesByAddressIdPatchAsync($user_id, $address_id, $address_edit = null, string $contentType = self::contentTypes['v1UsersByUserIdAddressesByAddressIdPatch'][0])
    {
        return $this->v1UsersByUserIdAddressesByAddressIdPatchAsyncWithHttpInfo($user_id, $address_id, $address_edit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdAddressesByAddressIdPatchAsyncWithHttpInfo
     *
     * Users address update
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $address_id Format - int32. The ID of the address to be updated. (required)
     * @param  \SKY\School\Model\AddressEdit $address_edit Address information to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesByAddressIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdAddressesByAddressIdPatchAsyncWithHttpInfo($user_id, $address_id, $address_edit = null, string $contentType = self::contentTypes['v1UsersByUserIdAddressesByAddressIdPatch'][0])
    {
        $returnType = 'int';
        $request = $this->v1UsersByUserIdAddressesByAddressIdPatchRequest($user_id, $address_id, $address_edit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdAddressesByAddressIdPatch'
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $address_id Format - int32. The ID of the address to be updated. (required)
     * @param  \SKY\School\Model\AddressEdit $address_edit Address information to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesByAddressIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdAddressesByAddressIdPatchRequest($user_id, $address_id, $address_edit = null, string $contentType = self::contentTypes['v1UsersByUserIdAddressesByAddressIdPatch'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdAddressesByAddressIdPatch'
            );
        }

        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling v1UsersByUserIdAddressesByAddressIdPatch'
            );
        }



        $resourcePath = '/v1/users/{user_id}/addresses/{address_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'address_id' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($address_edit)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($address_edit));
            } else {
                $httpBody = $address_edit;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdAddressesGet
     *
     * Users addresses by user ID
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\AddressReadCollection
     */
    public function v1UsersByUserIdAddressesGet($user_id, string $contentType = self::contentTypes['v1UsersByUserIdAddressesGet'][0])
    {
        [$response] = $this->v1UsersByUserIdAddressesGetWithHttpInfo($user_id, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdAddressesGetWithHttpInfo
     *
     * Users addresses by user ID
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\AddressReadCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdAddressesGetWithHttpInfo($user_id, string $contentType = self::contentTypes['v1UsersByUserIdAddressesGet'][0])
    {
        $request = $this->v1UsersByUserIdAddressesGetRequest($user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\AddressReadCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\AddressReadCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\AddressReadCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\AddressReadCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\AddressReadCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdAddressesGetAsync
     *
     * Users addresses by user ID
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdAddressesGetAsync($user_id, string $contentType = self::contentTypes['v1UsersByUserIdAddressesGet'][0])
    {
        return $this->v1UsersByUserIdAddressesGetAsyncWithHttpInfo($user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdAddressesGetAsyncWithHttpInfo
     *
     * Users addresses by user ID
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdAddressesGetAsyncWithHttpInfo($user_id, string $contentType = self::contentTypes['v1UsersByUserIdAddressesGet'][0])
    {
        $returnType = '\SKY\School\Model\AddressReadCollection';
        $request = $this->v1UsersByUserIdAddressesGetRequest($user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdAddressesGet'
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdAddressesGetRequest($user_id, string $contentType = self::contentTypes['v1UsersByUserIdAddressesGet'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdAddressesGet'
            );
        }


        $resourcePath = '/v1/users/{user_id}/addresses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdAddressesPost
     *
     * Users address create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\AddressAdd $address_add Address information to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1UsersByUserIdAddressesPost($user_id, $address_add = null, string $contentType = self::contentTypes['v1UsersByUserIdAddressesPost'][0])
    {
        [$response] = $this->v1UsersByUserIdAddressesPostWithHttpInfo($user_id, $address_add, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdAddressesPostWithHttpInfo
     *
     * Users address create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\AddressAdd $address_add Address information to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdAddressesPostWithHttpInfo($user_id, $address_add = null, string $contentType = self::contentTypes['v1UsersByUserIdAddressesPost'][0])
    {
        $request = $this->v1UsersByUserIdAddressesPostRequest($user_id, $address_add, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdAddressesPostAsync
     *
     * Users address create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\AddressAdd $address_add Address information to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdAddressesPostAsync($user_id, $address_add = null, string $contentType = self::contentTypes['v1UsersByUserIdAddressesPost'][0])
    {
        return $this->v1UsersByUserIdAddressesPostAsyncWithHttpInfo($user_id, $address_add, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdAddressesPostAsyncWithHttpInfo
     *
     * Users address create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\AddressAdd $address_add Address information to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdAddressesPostAsyncWithHttpInfo($user_id, $address_add = null, string $contentType = self::contentTypes['v1UsersByUserIdAddressesPost'][0])
    {
        $returnType = 'int';
        $request = $this->v1UsersByUserIdAddressesPostRequest($user_id, $address_add, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdAddressesPost'
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\AddressAdd $address_add Address information to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdAddressesPostRequest($user_id, $address_add = null, string $contentType = self::contentTypes['v1UsersByUserIdAddressesPost'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdAddressesPost'
            );
        }



        $resourcePath = '/v1/users/{user_id}/addresses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($address_add)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($address_add));
            } else {
                $httpBody = $address_add;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdAddressesSharePost
     *
     * Users address create - shared (BETA)
     *
     * @param  int $user_id Format - int32. The Id of the user the existing address should be shared. (required)
     * @param  \SKY\School\Model\AddressShare $address_share The details about the address that should be shared with the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesSharePost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1UsersByUserIdAddressesSharePost($user_id, $address_share = null, string $contentType = self::contentTypes['v1UsersByUserIdAddressesSharePost'][0])
    {
        [$response] = $this->v1UsersByUserIdAddressesSharePostWithHttpInfo($user_id, $address_share, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdAddressesSharePostWithHttpInfo
     *
     * Users address create - shared (BETA)
     *
     * @param  int $user_id Format - int32. The Id of the user the existing address should be shared. (required)
     * @param  \SKY\School\Model\AddressShare $address_share The details about the address that should be shared with the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesSharePost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdAddressesSharePostWithHttpInfo($user_id, $address_share = null, string $contentType = self::contentTypes['v1UsersByUserIdAddressesSharePost'][0])
    {
        $request = $this->v1UsersByUserIdAddressesSharePostRequest($user_id, $address_share, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdAddressesSharePostAsync
     *
     * Users address create - shared (BETA)
     *
     * @param  int $user_id Format - int32. The Id of the user the existing address should be shared. (required)
     * @param  \SKY\School\Model\AddressShare $address_share The details about the address that should be shared with the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesSharePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdAddressesSharePostAsync($user_id, $address_share = null, string $contentType = self::contentTypes['v1UsersByUserIdAddressesSharePost'][0])
    {
        return $this->v1UsersByUserIdAddressesSharePostAsyncWithHttpInfo($user_id, $address_share, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdAddressesSharePostAsyncWithHttpInfo
     *
     * Users address create - shared (BETA)
     *
     * @param  int $user_id Format - int32. The Id of the user the existing address should be shared. (required)
     * @param  \SKY\School\Model\AddressShare $address_share The details about the address that should be shared with the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesSharePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdAddressesSharePostAsyncWithHttpInfo($user_id, $address_share = null, string $contentType = self::contentTypes['v1UsersByUserIdAddressesSharePost'][0])
    {
        $returnType = 'int';
        $request = $this->v1UsersByUserIdAddressesSharePostRequest($user_id, $address_share, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdAddressesSharePost'
     *
     * @param  int $user_id Format - int32. The Id of the user the existing address should be shared. (required)
     * @param  \SKY\School\Model\AddressShare $address_share The details about the address that should be shared with the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdAddressesSharePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdAddressesSharePostRequest($user_id, $address_share = null, string $contentType = self::contentTypes['v1UsersByUserIdAddressesSharePost'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdAddressesSharePost'
            );
        }



        $resourcePath = '/v1/users/{user_id}/addresses/share';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($address_share)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($address_share));
            } else {
                $httpBody = $address_share;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdCustomfieldsGet
     *
     * Users custom fields single
     *
     * @param  int $user_id Format - int32. The id of the user to get custom fields for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\UserAdminCustomField
     */
    public function v1UsersByUserIdCustomfieldsGet($user_id, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsGet'][0])
    {
        [$response] = $this->v1UsersByUserIdCustomfieldsGetWithHttpInfo($user_id, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdCustomfieldsGetWithHttpInfo
     *
     * Users custom fields single
     *
     * @param  int $user_id Format - int32. The id of the user to get custom fields for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\UserAdminCustomField, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdCustomfieldsGetWithHttpInfo($user_id, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsGet'][0])
    {
        $request = $this->v1UsersByUserIdCustomfieldsGetRequest($user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\UserAdminCustomField' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\UserAdminCustomField' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\UserAdminCustomField', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\UserAdminCustomField';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\UserAdminCustomField',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdCustomfieldsGetAsync
     *
     * Users custom fields single
     *
     * @param  int $user_id Format - int32. The id of the user to get custom fields for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdCustomfieldsGetAsync($user_id, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsGet'][0])
    {
        return $this->v1UsersByUserIdCustomfieldsGetAsyncWithHttpInfo($user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdCustomfieldsGetAsyncWithHttpInfo
     *
     * Users custom fields single
     *
     * @param  int $user_id Format - int32. The id of the user to get custom fields for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdCustomfieldsGetAsyncWithHttpInfo($user_id, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsGet'][0])
    {
        $returnType = '\SKY\School\Model\UserAdminCustomField';
        $request = $this->v1UsersByUserIdCustomfieldsGetRequest($user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdCustomfieldsGet'
     *
     * @param  int $user_id Format - int32. The id of the user to get custom fields for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdCustomfieldsGetRequest($user_id, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsGet'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdCustomfieldsGet'
            );
        }


        $resourcePath = '/v1/users/{user_id}/customfields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdCustomfieldsListPatch
     *
     * Users custom fields list update
     *
     * @param  int $user_id Format - int32. The Id of the user to update an existing custom field for. (required)
     * @param  \SKY\School\Model\UserAdminCustomFieldUpdate[] $user_admin_custom_field_update Object that describes the custom field that should be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsListPatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function v1UsersByUserIdCustomfieldsListPatch($user_id, $user_admin_custom_field_update = null, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsListPatch'][0])
    {
        [$response] = $this->v1UsersByUserIdCustomfieldsListPatchWithHttpInfo($user_id, $user_admin_custom_field_update, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdCustomfieldsListPatchWithHttpInfo
     *
     * Users custom fields list update
     *
     * @param  int $user_id Format - int32. The Id of the user to update an existing custom field for. (required)
     * @param  \SKY\School\Model\UserAdminCustomFieldUpdate[] $user_admin_custom_field_update Object that describes the custom field that should be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsListPatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdCustomfieldsListPatchWithHttpInfo($user_id, $user_admin_custom_field_update = null, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsListPatch'][0])
    {
        $request = $this->v1UsersByUserIdCustomfieldsListPatchRequest($user_id, $user_admin_custom_field_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdCustomfieldsListPatchAsync
     *
     * Users custom fields list update
     *
     * @param  int $user_id Format - int32. The Id of the user to update an existing custom field for. (required)
     * @param  \SKY\School\Model\UserAdminCustomFieldUpdate[] $user_admin_custom_field_update Object that describes the custom field that should be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsListPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdCustomfieldsListPatchAsync($user_id, $user_admin_custom_field_update = null, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsListPatch'][0])
    {
        return $this->v1UsersByUserIdCustomfieldsListPatchAsyncWithHttpInfo($user_id, $user_admin_custom_field_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdCustomfieldsListPatchAsyncWithHttpInfo
     *
     * Users custom fields list update
     *
     * @param  int $user_id Format - int32. The Id of the user to update an existing custom field for. (required)
     * @param  \SKY\School\Model\UserAdminCustomFieldUpdate[] $user_admin_custom_field_update Object that describes the custom field that should be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsListPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdCustomfieldsListPatchAsyncWithHttpInfo($user_id, $user_admin_custom_field_update = null, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsListPatch'][0])
    {
        $returnType = 'bool';
        $request = $this->v1UsersByUserIdCustomfieldsListPatchRequest($user_id, $user_admin_custom_field_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdCustomfieldsListPatch'
     *
     * @param  int $user_id Format - int32. The Id of the user to update an existing custom field for. (required)
     * @param  \SKY\School\Model\UserAdminCustomFieldUpdate[] $user_admin_custom_field_update Object that describes the custom field that should be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsListPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdCustomfieldsListPatchRequest($user_id, $user_admin_custom_field_update = null, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsListPatch'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdCustomfieldsListPatch'
            );
        }



        $resourcePath = '/v1/users/{user_id}/customfields/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($user_admin_custom_field_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($user_admin_custom_field_update));
            } else {
                $httpBody = $user_admin_custom_field_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdCustomfieldsListPost
     *
     * Users custom fields list create (BETA)
     *
     * @param  int $user_id Format - int32. The Id of the user to create a custom field for (required)
     * @param  \SKY\School\Model\UserAdminCustomFieldCreate[] $user_admin_custom_field_create Object that describes the list of custom fields that will be created for the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsListPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function v1UsersByUserIdCustomfieldsListPost($user_id, $user_admin_custom_field_create = null, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsListPost'][0])
    {
        [$response] = $this->v1UsersByUserIdCustomfieldsListPostWithHttpInfo($user_id, $user_admin_custom_field_create, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdCustomfieldsListPostWithHttpInfo
     *
     * Users custom fields list create (BETA)
     *
     * @param  int $user_id Format - int32. The Id of the user to create a custom field for (required)
     * @param  \SKY\School\Model\UserAdminCustomFieldCreate[] $user_admin_custom_field_create Object that describes the list of custom fields that will be created for the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsListPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdCustomfieldsListPostWithHttpInfo($user_id, $user_admin_custom_field_create = null, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsListPost'][0])
    {
        $request = $this->v1UsersByUserIdCustomfieldsListPostRequest($user_id, $user_admin_custom_field_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdCustomfieldsListPostAsync
     *
     * Users custom fields list create (BETA)
     *
     * @param  int $user_id Format - int32. The Id of the user to create a custom field for (required)
     * @param  \SKY\School\Model\UserAdminCustomFieldCreate[] $user_admin_custom_field_create Object that describes the list of custom fields that will be created for the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdCustomfieldsListPostAsync($user_id, $user_admin_custom_field_create = null, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsListPost'][0])
    {
        return $this->v1UsersByUserIdCustomfieldsListPostAsyncWithHttpInfo($user_id, $user_admin_custom_field_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdCustomfieldsListPostAsyncWithHttpInfo
     *
     * Users custom fields list create (BETA)
     *
     * @param  int $user_id Format - int32. The Id of the user to create a custom field for (required)
     * @param  \SKY\School\Model\UserAdminCustomFieldCreate[] $user_admin_custom_field_create Object that describes the list of custom fields that will be created for the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdCustomfieldsListPostAsyncWithHttpInfo($user_id, $user_admin_custom_field_create = null, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsListPost'][0])
    {
        $returnType = 'bool';
        $request = $this->v1UsersByUserIdCustomfieldsListPostRequest($user_id, $user_admin_custom_field_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdCustomfieldsListPost'
     *
     * @param  int $user_id Format - int32. The Id of the user to create a custom field for (required)
     * @param  \SKY\School\Model\UserAdminCustomFieldCreate[] $user_admin_custom_field_create Object that describes the list of custom fields that will be created for the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdCustomfieldsListPostRequest($user_id, $user_admin_custom_field_create = null, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsListPost'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdCustomfieldsListPost'
            );
        }



        $resourcePath = '/v1/users/{user_id}/customfields/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($user_admin_custom_field_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($user_admin_custom_field_create));
            } else {
                $httpBody = $user_admin_custom_field_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdCustomfieldsPatch
     *
     * Users custom fields update
     *
     * @param  int $user_id Format - int32. The Id of the user to update an existing custom field for. (required)
     * @param  \SKY\School\Model\UserAdminCustomFieldUpdate $user_admin_custom_field_update Object that describes the custom field that should be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsPatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function v1UsersByUserIdCustomfieldsPatch($user_id, $user_admin_custom_field_update = null, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsPatch'][0])
    {
        [$response] = $this->v1UsersByUserIdCustomfieldsPatchWithHttpInfo($user_id, $user_admin_custom_field_update, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdCustomfieldsPatchWithHttpInfo
     *
     * Users custom fields update
     *
     * @param  int $user_id Format - int32. The Id of the user to update an existing custom field for. (required)
     * @param  \SKY\School\Model\UserAdminCustomFieldUpdate $user_admin_custom_field_update Object that describes the custom field that should be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsPatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdCustomfieldsPatchWithHttpInfo($user_id, $user_admin_custom_field_update = null, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsPatch'][0])
    {
        $request = $this->v1UsersByUserIdCustomfieldsPatchRequest($user_id, $user_admin_custom_field_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdCustomfieldsPatchAsync
     *
     * Users custom fields update
     *
     * @param  int $user_id Format - int32. The Id of the user to update an existing custom field for. (required)
     * @param  \SKY\School\Model\UserAdminCustomFieldUpdate $user_admin_custom_field_update Object that describes the custom field that should be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdCustomfieldsPatchAsync($user_id, $user_admin_custom_field_update = null, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsPatch'][0])
    {
        return $this->v1UsersByUserIdCustomfieldsPatchAsyncWithHttpInfo($user_id, $user_admin_custom_field_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdCustomfieldsPatchAsyncWithHttpInfo
     *
     * Users custom fields update
     *
     * @param  int $user_id Format - int32. The Id of the user to update an existing custom field for. (required)
     * @param  \SKY\School\Model\UserAdminCustomFieldUpdate $user_admin_custom_field_update Object that describes the custom field that should be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdCustomfieldsPatchAsyncWithHttpInfo($user_id, $user_admin_custom_field_update = null, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsPatch'][0])
    {
        $returnType = 'bool';
        $request = $this->v1UsersByUserIdCustomfieldsPatchRequest($user_id, $user_admin_custom_field_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdCustomfieldsPatch'
     *
     * @param  int $user_id Format - int32. The Id of the user to update an existing custom field for. (required)
     * @param  \SKY\School\Model\UserAdminCustomFieldUpdate $user_admin_custom_field_update Object that describes the custom field that should be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdCustomfieldsPatchRequest($user_id, $user_admin_custom_field_update = null, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsPatch'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdCustomfieldsPatch'
            );
        }



        $resourcePath = '/v1/users/{user_id}/customfields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($user_admin_custom_field_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($user_admin_custom_field_update));
            } else {
                $httpBody = $user_admin_custom_field_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdCustomfieldsPost
     *
     * Users custom fields create
     *
     * @param  int $user_id Format - int32. The Id of the user to create a custom field for (required)
     * @param  \SKY\School\Model\UserAdminCustomFieldCreate $user_admin_custom_field_create Object that describes the custom field that will be created. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function v1UsersByUserIdCustomfieldsPost($user_id, $user_admin_custom_field_create = null, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsPost'][0])
    {
        [$response] = $this->v1UsersByUserIdCustomfieldsPostWithHttpInfo($user_id, $user_admin_custom_field_create, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdCustomfieldsPostWithHttpInfo
     *
     * Users custom fields create
     *
     * @param  int $user_id Format - int32. The Id of the user to create a custom field for (required)
     * @param  \SKY\School\Model\UserAdminCustomFieldCreate $user_admin_custom_field_create Object that describes the custom field that will be created. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdCustomfieldsPostWithHttpInfo($user_id, $user_admin_custom_field_create = null, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsPost'][0])
    {
        $request = $this->v1UsersByUserIdCustomfieldsPostRequest($user_id, $user_admin_custom_field_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdCustomfieldsPostAsync
     *
     * Users custom fields create
     *
     * @param  int $user_id Format - int32. The Id of the user to create a custom field for (required)
     * @param  \SKY\School\Model\UserAdminCustomFieldCreate $user_admin_custom_field_create Object that describes the custom field that will be created. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdCustomfieldsPostAsync($user_id, $user_admin_custom_field_create = null, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsPost'][0])
    {
        return $this->v1UsersByUserIdCustomfieldsPostAsyncWithHttpInfo($user_id, $user_admin_custom_field_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdCustomfieldsPostAsyncWithHttpInfo
     *
     * Users custom fields create
     *
     * @param  int $user_id Format - int32. The Id of the user to create a custom field for (required)
     * @param  \SKY\School\Model\UserAdminCustomFieldCreate $user_admin_custom_field_create Object that describes the custom field that will be created. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdCustomfieldsPostAsyncWithHttpInfo($user_id, $user_admin_custom_field_create = null, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsPost'][0])
    {
        $returnType = 'bool';
        $request = $this->v1UsersByUserIdCustomfieldsPostRequest($user_id, $user_admin_custom_field_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdCustomfieldsPost'
     *
     * @param  int $user_id Format - int32. The Id of the user to create a custom field for (required)
     * @param  \SKY\School\Model\UserAdminCustomFieldCreate $user_admin_custom_field_create Object that describes the custom field that will be created. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdCustomfieldsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdCustomfieldsPostRequest($user_id, $user_admin_custom_field_create = null, string $contentType = self::contentTypes['v1UsersByUserIdCustomfieldsPost'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdCustomfieldsPost'
            );
        }



        $resourcePath = '/v1/users/{user_id}/customfields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($user_admin_custom_field_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($user_admin_custom_field_create));
            } else {
                $httpBody = $user_admin_custom_field_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdEducationByEducationIdDelete
     *
     * User education delete (BETA)
     *
     * @param  int $user_id Format - int32. (required)
     * @param  int $education_id Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEducationByEducationIdDelete'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1UsersByUserIdEducationByEducationIdDelete($user_id, $education_id, string $contentType = self::contentTypes['v1UsersByUserIdEducationByEducationIdDelete'][0])
    {
        $this->v1UsersByUserIdEducationByEducationIdDeleteWithHttpInfo($user_id, $education_id, $contentType);
    }

    /**
     * Operation v1UsersByUserIdEducationByEducationIdDeleteWithHttpInfo
     *
     * User education delete (BETA)
     *
     * @param  int $user_id Format - int32. (required)
     * @param  int $education_id Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEducationByEducationIdDelete'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdEducationByEducationIdDeleteWithHttpInfo($user_id, $education_id, string $contentType = self::contentTypes['v1UsersByUserIdEducationByEducationIdDelete'][0])
    {
        $request = $this->v1UsersByUserIdEducationByEducationIdDeleteRequest($user_id, $education_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdEducationByEducationIdDeleteAsync
     *
     * User education delete (BETA)
     *
     * @param  int $user_id Format - int32. (required)
     * @param  int $education_id Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEducationByEducationIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdEducationByEducationIdDeleteAsync($user_id, $education_id, string $contentType = self::contentTypes['v1UsersByUserIdEducationByEducationIdDelete'][0])
    {
        return $this->v1UsersByUserIdEducationByEducationIdDeleteAsyncWithHttpInfo($user_id, $education_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdEducationByEducationIdDeleteAsyncWithHttpInfo
     *
     * User education delete (BETA)
     *
     * @param  int $user_id Format - int32. (required)
     * @param  int $education_id Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEducationByEducationIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdEducationByEducationIdDeleteAsyncWithHttpInfo($user_id, $education_id, string $contentType = self::contentTypes['v1UsersByUserIdEducationByEducationIdDelete'][0])
    {
        $returnType = '';
        $request = $this->v1UsersByUserIdEducationByEducationIdDeleteRequest($user_id, $education_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdEducationByEducationIdDelete'
     *
     * @param  int $user_id Format - int32. (required)
     * @param  int $education_id Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEducationByEducationIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdEducationByEducationIdDeleteRequest($user_id, $education_id, string $contentType = self::contentTypes['v1UsersByUserIdEducationByEducationIdDelete'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdEducationByEducationIdDelete'
            );
        }

        // verify the required parameter 'education_id' is set
        if ($education_id === null || (is_array($education_id) && count($education_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $education_id when calling v1UsersByUserIdEducationByEducationIdDelete'
            );
        }


        $resourcePath = '/v1/users/{user_id}/education/{education_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($education_id !== null) {
            $resourcePath = str_replace(
                '{' . 'education_id' . '}',
                ObjectSerializer::toPathValue($education_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdEducationByEducationIdPatch
     *
     * Users education update (BETA)
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $education_id Format - int32. The ID of the education. (required)
     * @param  \SKY\School\Model\EducationUpdate $education_update The education model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEducationByEducationIdPatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1UsersByUserIdEducationByEducationIdPatch($user_id, $education_id, $education_update = null, string $contentType = self::contentTypes['v1UsersByUserIdEducationByEducationIdPatch'][0])
    {
        [$response] = $this->v1UsersByUserIdEducationByEducationIdPatchWithHttpInfo($user_id, $education_id, $education_update, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdEducationByEducationIdPatchWithHttpInfo
     *
     * Users education update (BETA)
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $education_id Format - int32. The ID of the education. (required)
     * @param  \SKY\School\Model\EducationUpdate $education_update The education model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEducationByEducationIdPatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdEducationByEducationIdPatchWithHttpInfo($user_id, $education_id, $education_update = null, string $contentType = self::contentTypes['v1UsersByUserIdEducationByEducationIdPatch'][0])
    {
        $request = $this->v1UsersByUserIdEducationByEducationIdPatchRequest($user_id, $education_id, $education_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdEducationByEducationIdPatchAsync
     *
     * Users education update (BETA)
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $education_id Format - int32. The ID of the education. (required)
     * @param  \SKY\School\Model\EducationUpdate $education_update The education model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEducationByEducationIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdEducationByEducationIdPatchAsync($user_id, $education_id, $education_update = null, string $contentType = self::contentTypes['v1UsersByUserIdEducationByEducationIdPatch'][0])
    {
        return $this->v1UsersByUserIdEducationByEducationIdPatchAsyncWithHttpInfo($user_id, $education_id, $education_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdEducationByEducationIdPatchAsyncWithHttpInfo
     *
     * Users education update (BETA)
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $education_id Format - int32. The ID of the education. (required)
     * @param  \SKY\School\Model\EducationUpdate $education_update The education model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEducationByEducationIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdEducationByEducationIdPatchAsyncWithHttpInfo($user_id, $education_id, $education_update = null, string $contentType = self::contentTypes['v1UsersByUserIdEducationByEducationIdPatch'][0])
    {
        $returnType = 'int';
        $request = $this->v1UsersByUserIdEducationByEducationIdPatchRequest($user_id, $education_id, $education_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdEducationByEducationIdPatch'
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $education_id Format - int32. The ID of the education. (required)
     * @param  \SKY\School\Model\EducationUpdate $education_update The education model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEducationByEducationIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdEducationByEducationIdPatchRequest($user_id, $education_id, $education_update = null, string $contentType = self::contentTypes['v1UsersByUserIdEducationByEducationIdPatch'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdEducationByEducationIdPatch'
            );
        }

        // verify the required parameter 'education_id' is set
        if ($education_id === null || (is_array($education_id) && count($education_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $education_id when calling v1UsersByUserIdEducationByEducationIdPatch'
            );
        }



        $resourcePath = '/v1/users/{user_id}/education/{education_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($education_id !== null) {
            $resourcePath = str_replace(
                '{' . 'education_id' . '}',
                ObjectSerializer::toPathValue($education_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($education_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($education_update));
            } else {
                $httpBody = $education_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdEducationGet
     *
     * Users education by user
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEducationGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\EducationReadCollection
     */
    public function v1UsersByUserIdEducationGet($user_id, string $contentType = self::contentTypes['v1UsersByUserIdEducationGet'][0])
    {
        [$response] = $this->v1UsersByUserIdEducationGetWithHttpInfo($user_id, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdEducationGetWithHttpInfo
     *
     * Users education by user
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEducationGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\EducationReadCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdEducationGetWithHttpInfo($user_id, string $contentType = self::contentTypes['v1UsersByUserIdEducationGet'][0])
    {
        $request = $this->v1UsersByUserIdEducationGetRequest($user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\EducationReadCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\EducationReadCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\EducationReadCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\EducationReadCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\EducationReadCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdEducationGetAsync
     *
     * Users education by user
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEducationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdEducationGetAsync($user_id, string $contentType = self::contentTypes['v1UsersByUserIdEducationGet'][0])
    {
        return $this->v1UsersByUserIdEducationGetAsyncWithHttpInfo($user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdEducationGetAsyncWithHttpInfo
     *
     * Users education by user
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEducationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdEducationGetAsyncWithHttpInfo($user_id, string $contentType = self::contentTypes['v1UsersByUserIdEducationGet'][0])
    {
        $returnType = '\SKY\School\Model\EducationReadCollection';
        $request = $this->v1UsersByUserIdEducationGetRequest($user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdEducationGet'
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEducationGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdEducationGetRequest($user_id, string $contentType = self::contentTypes['v1UsersByUserIdEducationGet'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdEducationGet'
            );
        }


        $resourcePath = '/v1/users/{user_id}/education';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdEducationPost
     *
     * Users education create (BETA)
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\EducationAdd $education_add The education model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEducationPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1UsersByUserIdEducationPost($user_id, $education_add = null, string $contentType = self::contentTypes['v1UsersByUserIdEducationPost'][0])
    {
        [$response] = $this->v1UsersByUserIdEducationPostWithHttpInfo($user_id, $education_add, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdEducationPostWithHttpInfo
     *
     * Users education create (BETA)
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\EducationAdd $education_add The education model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEducationPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdEducationPostWithHttpInfo($user_id, $education_add = null, string $contentType = self::contentTypes['v1UsersByUserIdEducationPost'][0])
    {
        $request = $this->v1UsersByUserIdEducationPostRequest($user_id, $education_add, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdEducationPostAsync
     *
     * Users education create (BETA)
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\EducationAdd $education_add The education model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEducationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdEducationPostAsync($user_id, $education_add = null, string $contentType = self::contentTypes['v1UsersByUserIdEducationPost'][0])
    {
        return $this->v1UsersByUserIdEducationPostAsyncWithHttpInfo($user_id, $education_add, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdEducationPostAsyncWithHttpInfo
     *
     * Users education create (BETA)
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\EducationAdd $education_add The education model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEducationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdEducationPostAsyncWithHttpInfo($user_id, $education_add = null, string $contentType = self::contentTypes['v1UsersByUserIdEducationPost'][0])
    {
        $returnType = 'int';
        $request = $this->v1UsersByUserIdEducationPostRequest($user_id, $education_add, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdEducationPost'
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\EducationAdd $education_add The education model. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEducationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdEducationPostRequest($user_id, $education_add = null, string $contentType = self::contentTypes['v1UsersByUserIdEducationPost'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdEducationPost'
            );
        }



        $resourcePath = '/v1/users/{user_id}/education';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($education_add)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($education_add));
            } else {
                $httpBody = $education_add;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdEmergencycontactsGet
     *
     * Users emergency contacts by user ID
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEmergencycontactsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\EmergencyContactList
     */
    public function v1UsersByUserIdEmergencycontactsGet($user_id, string $contentType = self::contentTypes['v1UsersByUserIdEmergencycontactsGet'][0])
    {
        [$response] = $this->v1UsersByUserIdEmergencycontactsGetWithHttpInfo($user_id, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdEmergencycontactsGetWithHttpInfo
     *
     * Users emergency contacts by user ID
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEmergencycontactsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\EmergencyContactList, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdEmergencycontactsGetWithHttpInfo($user_id, string $contentType = self::contentTypes['v1UsersByUserIdEmergencycontactsGet'][0])
    {
        $request = $this->v1UsersByUserIdEmergencycontactsGetRequest($user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\EmergencyContactList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\EmergencyContactList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\EmergencyContactList', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\EmergencyContactList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\EmergencyContactList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdEmergencycontactsGetAsync
     *
     * Users emergency contacts by user ID
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEmergencycontactsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdEmergencycontactsGetAsync($user_id, string $contentType = self::contentTypes['v1UsersByUserIdEmergencycontactsGet'][0])
    {
        return $this->v1UsersByUserIdEmergencycontactsGetAsyncWithHttpInfo($user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdEmergencycontactsGetAsyncWithHttpInfo
     *
     * Users emergency contacts by user ID
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEmergencycontactsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdEmergencycontactsGetAsyncWithHttpInfo($user_id, string $contentType = self::contentTypes['v1UsersByUserIdEmergencycontactsGet'][0])
    {
        $returnType = '\SKY\School\Model\EmergencyContactList';
        $request = $this->v1UsersByUserIdEmergencycontactsGetRequest($user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdEmergencycontactsGet'
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEmergencycontactsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdEmergencycontactsGetRequest($user_id, string $contentType = self::contentTypes['v1UsersByUserIdEmergencycontactsGet'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdEmergencycontactsGet'
            );
        }


        $resourcePath = '/v1/users/{user_id}/emergencycontacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdEmergencycontactsNonuserPost
     *
     * Users emergency contact non-user create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\EmergencyContactNonUserCreate $emergency_contact_non_user_create  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEmergencycontactsNonuserPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1UsersByUserIdEmergencycontactsNonuserPost($user_id, $emergency_contact_non_user_create = null, string $contentType = self::contentTypes['v1UsersByUserIdEmergencycontactsNonuserPost'][0])
    {
        $this->v1UsersByUserIdEmergencycontactsNonuserPostWithHttpInfo($user_id, $emergency_contact_non_user_create, $contentType);
    }

    /**
     * Operation v1UsersByUserIdEmergencycontactsNonuserPostWithHttpInfo
     *
     * Users emergency contact non-user create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\EmergencyContactNonUserCreate $emergency_contact_non_user_create  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEmergencycontactsNonuserPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdEmergencycontactsNonuserPostWithHttpInfo($user_id, $emergency_contact_non_user_create = null, string $contentType = self::contentTypes['v1UsersByUserIdEmergencycontactsNonuserPost'][0])
    {
        $request = $this->v1UsersByUserIdEmergencycontactsNonuserPostRequest($user_id, $emergency_contact_non_user_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdEmergencycontactsNonuserPostAsync
     *
     * Users emergency contact non-user create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\EmergencyContactNonUserCreate $emergency_contact_non_user_create  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEmergencycontactsNonuserPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdEmergencycontactsNonuserPostAsync($user_id, $emergency_contact_non_user_create = null, string $contentType = self::contentTypes['v1UsersByUserIdEmergencycontactsNonuserPost'][0])
    {
        return $this->v1UsersByUserIdEmergencycontactsNonuserPostAsyncWithHttpInfo($user_id, $emergency_contact_non_user_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdEmergencycontactsNonuserPostAsyncWithHttpInfo
     *
     * Users emergency contact non-user create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\EmergencyContactNonUserCreate $emergency_contact_non_user_create  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEmergencycontactsNonuserPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdEmergencycontactsNonuserPostAsyncWithHttpInfo($user_id, $emergency_contact_non_user_create = null, string $contentType = self::contentTypes['v1UsersByUserIdEmergencycontactsNonuserPost'][0])
    {
        $returnType = '';
        $request = $this->v1UsersByUserIdEmergencycontactsNonuserPostRequest($user_id, $emergency_contact_non_user_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdEmergencycontactsNonuserPost'
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\EmergencyContactNonUserCreate $emergency_contact_non_user_create  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEmergencycontactsNonuserPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdEmergencycontactsNonuserPostRequest($user_id, $emergency_contact_non_user_create = null, string $contentType = self::contentTypes['v1UsersByUserIdEmergencycontactsNonuserPost'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdEmergencycontactsNonuserPost'
            );
        }



        $resourcePath = '/v1/users/{user_id}/emergencycontacts/nonuser';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($emergency_contact_non_user_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($emergency_contact_non_user_create));
            } else {
                $httpBody = $emergency_contact_non_user_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdEmergencycontactsUserPost
     *
     * Users emergency contact user create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\EmergencyContactUserCreate $emergency_contact_user_create  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEmergencycontactsUserPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1UsersByUserIdEmergencycontactsUserPost($user_id, $emergency_contact_user_create = null, string $contentType = self::contentTypes['v1UsersByUserIdEmergencycontactsUserPost'][0])
    {
        $this->v1UsersByUserIdEmergencycontactsUserPostWithHttpInfo($user_id, $emergency_contact_user_create, $contentType);
    }

    /**
     * Operation v1UsersByUserIdEmergencycontactsUserPostWithHttpInfo
     *
     * Users emergency contact user create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\EmergencyContactUserCreate $emergency_contact_user_create  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEmergencycontactsUserPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdEmergencycontactsUserPostWithHttpInfo($user_id, $emergency_contact_user_create = null, string $contentType = self::contentTypes['v1UsersByUserIdEmergencycontactsUserPost'][0])
    {
        $request = $this->v1UsersByUserIdEmergencycontactsUserPostRequest($user_id, $emergency_contact_user_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdEmergencycontactsUserPostAsync
     *
     * Users emergency contact user create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\EmergencyContactUserCreate $emergency_contact_user_create  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEmergencycontactsUserPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdEmergencycontactsUserPostAsync($user_id, $emergency_contact_user_create = null, string $contentType = self::contentTypes['v1UsersByUserIdEmergencycontactsUserPost'][0])
    {
        return $this->v1UsersByUserIdEmergencycontactsUserPostAsyncWithHttpInfo($user_id, $emergency_contact_user_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdEmergencycontactsUserPostAsyncWithHttpInfo
     *
     * Users emergency contact user create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\EmergencyContactUserCreate $emergency_contact_user_create  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEmergencycontactsUserPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdEmergencycontactsUserPostAsyncWithHttpInfo($user_id, $emergency_contact_user_create = null, string $contentType = self::contentTypes['v1UsersByUserIdEmergencycontactsUserPost'][0])
    {
        $returnType = '';
        $request = $this->v1UsersByUserIdEmergencycontactsUserPostRequest($user_id, $emergency_contact_user_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdEmergencycontactsUserPost'
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\EmergencyContactUserCreate $emergency_contact_user_create  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEmergencycontactsUserPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdEmergencycontactsUserPostRequest($user_id, $emergency_contact_user_create = null, string $contentType = self::contentTypes['v1UsersByUserIdEmergencycontactsUserPost'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdEmergencycontactsUserPost'
            );
        }



        $resourcePath = '/v1/users/{user_id}/emergencycontacts/user';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($emergency_contact_user_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($emergency_contact_user_create));
            } else {
                $httpBody = $emergency_contact_user_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdEmploymentGet
     *
     * Users employment by user ID
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEmploymentGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\FacultyEmploymentRead
     */
    public function v1UsersByUserIdEmploymentGet($user_id, string $contentType = self::contentTypes['v1UsersByUserIdEmploymentGet'][0])
    {
        [$response] = $this->v1UsersByUserIdEmploymentGetWithHttpInfo($user_id, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdEmploymentGetWithHttpInfo
     *
     * Users employment by user ID
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEmploymentGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\FacultyEmploymentRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdEmploymentGetWithHttpInfo($user_id, string $contentType = self::contentTypes['v1UsersByUserIdEmploymentGet'][0])
    {
        $request = $this->v1UsersByUserIdEmploymentGetRequest($user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\FacultyEmploymentRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\FacultyEmploymentRead' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\FacultyEmploymentRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\FacultyEmploymentRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\FacultyEmploymentRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdEmploymentGetAsync
     *
     * Users employment by user ID
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEmploymentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdEmploymentGetAsync($user_id, string $contentType = self::contentTypes['v1UsersByUserIdEmploymentGet'][0])
    {
        return $this->v1UsersByUserIdEmploymentGetAsyncWithHttpInfo($user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdEmploymentGetAsyncWithHttpInfo
     *
     * Users employment by user ID
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEmploymentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdEmploymentGetAsyncWithHttpInfo($user_id, string $contentType = self::contentTypes['v1UsersByUserIdEmploymentGet'][0])
    {
        $returnType = '\SKY\School\Model\FacultyEmploymentRead';
        $request = $this->v1UsersByUserIdEmploymentGetRequest($user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdEmploymentGet'
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdEmploymentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdEmploymentGetRequest($user_id, string $contentType = self::contentTypes['v1UsersByUserIdEmploymentGet'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdEmploymentGet'
            );
        }


        $resourcePath = '/v1/users/{user_id}/employment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdGet
     *
     * User by ID
     *
     * @param  int $user_id Format - int32. ID of the user to be returned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\UserRead
     */
    public function v1UsersByUserIdGet($user_id, string $contentType = self::contentTypes['v1UsersByUserIdGet'][0])
    {
        [$response] = $this->v1UsersByUserIdGetWithHttpInfo($user_id, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdGetWithHttpInfo
     *
     * User by ID
     *
     * @param  int $user_id Format - int32. ID of the user to be returned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\UserRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdGetWithHttpInfo($user_id, string $contentType = self::contentTypes['v1UsersByUserIdGet'][0])
    {
        $request = $this->v1UsersByUserIdGetRequest($user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\UserRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\UserRead' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\UserRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\UserRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\UserRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdGetAsync
     *
     * User by ID
     *
     * @param  int $user_id Format - int32. ID of the user to be returned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdGetAsync($user_id, string $contentType = self::contentTypes['v1UsersByUserIdGet'][0])
    {
        return $this->v1UsersByUserIdGetAsyncWithHttpInfo($user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdGetAsyncWithHttpInfo
     *
     * User by ID
     *
     * @param  int $user_id Format - int32. ID of the user to be returned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdGetAsyncWithHttpInfo($user_id, string $contentType = self::contentTypes['v1UsersByUserIdGet'][0])
    {
        $returnType = '\SKY\School\Model\UserRead';
        $request = $this->v1UsersByUserIdGetRequest($user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdGet'
     *
     * @param  int $user_id Format - int32. ID of the user to be returned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdGetRequest($user_id, string $contentType = self::contentTypes['v1UsersByUserIdGet'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdGet'
            );
        }


        $resourcePath = '/v1/users/{user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdOccupationsByOccupationIdDelete
     *
     * Users occupation delete (BETA)
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $occupation_id Format - int32. The ID of the occupation. (required)
     * @param  bool $current Current Employment Status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdOccupationsByOccupationIdDelete'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1UsersByUserIdOccupationsByOccupationIdDelete($user_id, $occupation_id, $current = null, string $contentType = self::contentTypes['v1UsersByUserIdOccupationsByOccupationIdDelete'][0])
    {
        [$response] = $this->v1UsersByUserIdOccupationsByOccupationIdDeleteWithHttpInfo($user_id, $occupation_id, $current, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdOccupationsByOccupationIdDeleteWithHttpInfo
     *
     * Users occupation delete (BETA)
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $occupation_id Format - int32. The ID of the occupation. (required)
     * @param  bool $current Current Employment Status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdOccupationsByOccupationIdDelete'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdOccupationsByOccupationIdDeleteWithHttpInfo($user_id, $occupation_id, $current = null, string $contentType = self::contentTypes['v1UsersByUserIdOccupationsByOccupationIdDelete'][0])
    {
        $request = $this->v1UsersByUserIdOccupationsByOccupationIdDeleteRequest($user_id, $occupation_id, $current, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdOccupationsByOccupationIdDeleteAsync
     *
     * Users occupation delete (BETA)
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $occupation_id Format - int32. The ID of the occupation. (required)
     * @param  bool $current Current Employment Status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdOccupationsByOccupationIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdOccupationsByOccupationIdDeleteAsync($user_id, $occupation_id, $current = null, string $contentType = self::contentTypes['v1UsersByUserIdOccupationsByOccupationIdDelete'][0])
    {
        return $this->v1UsersByUserIdOccupationsByOccupationIdDeleteAsyncWithHttpInfo($user_id, $occupation_id, $current, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdOccupationsByOccupationIdDeleteAsyncWithHttpInfo
     *
     * Users occupation delete (BETA)
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $occupation_id Format - int32. The ID of the occupation. (required)
     * @param  bool $current Current Employment Status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdOccupationsByOccupationIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdOccupationsByOccupationIdDeleteAsyncWithHttpInfo($user_id, $occupation_id, $current = null, string $contentType = self::contentTypes['v1UsersByUserIdOccupationsByOccupationIdDelete'][0])
    {
        $returnType = 'int';
        $request = $this->v1UsersByUserIdOccupationsByOccupationIdDeleteRequest($user_id, $occupation_id, $current, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdOccupationsByOccupationIdDelete'
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $occupation_id Format - int32. The ID of the occupation. (required)
     * @param  bool $current Current Employment Status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdOccupationsByOccupationIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdOccupationsByOccupationIdDeleteRequest($user_id, $occupation_id, $current = null, string $contentType = self::contentTypes['v1UsersByUserIdOccupationsByOccupationIdDelete'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdOccupationsByOccupationIdDelete'
            );
        }

        // verify the required parameter 'occupation_id' is set
        if ($occupation_id === null || (is_array($occupation_id) && count($occupation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $occupation_id when calling v1UsersByUserIdOccupationsByOccupationIdDelete'
            );
        }



        $resourcePath = '/v1/users/{user_id}/occupations/{occupation_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $current,
            'current', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($occupation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'occupation_id' . '}',
                ObjectSerializer::toPathValue($occupation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdOccupationsByOccupationIdPatch
     *
     * Users occupation update
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $occupation_id Format - int32. The ID of the occupation. (required)
     * @param  \SKY\School\Model\OccupationUpdate $occupation_update The occupation information to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdOccupationsByOccupationIdPatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1UsersByUserIdOccupationsByOccupationIdPatch($user_id, $occupation_id, $occupation_update = null, string $contentType = self::contentTypes['v1UsersByUserIdOccupationsByOccupationIdPatch'][0])
    {
        [$response] = $this->v1UsersByUserIdOccupationsByOccupationIdPatchWithHttpInfo($user_id, $occupation_id, $occupation_update, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdOccupationsByOccupationIdPatchWithHttpInfo
     *
     * Users occupation update
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $occupation_id Format - int32. The ID of the occupation. (required)
     * @param  \SKY\School\Model\OccupationUpdate $occupation_update The occupation information to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdOccupationsByOccupationIdPatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdOccupationsByOccupationIdPatchWithHttpInfo($user_id, $occupation_id, $occupation_update = null, string $contentType = self::contentTypes['v1UsersByUserIdOccupationsByOccupationIdPatch'][0])
    {
        $request = $this->v1UsersByUserIdOccupationsByOccupationIdPatchRequest($user_id, $occupation_id, $occupation_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdOccupationsByOccupationIdPatchAsync
     *
     * Users occupation update
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $occupation_id Format - int32. The ID of the occupation. (required)
     * @param  \SKY\School\Model\OccupationUpdate $occupation_update The occupation information to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdOccupationsByOccupationIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdOccupationsByOccupationIdPatchAsync($user_id, $occupation_id, $occupation_update = null, string $contentType = self::contentTypes['v1UsersByUserIdOccupationsByOccupationIdPatch'][0])
    {
        return $this->v1UsersByUserIdOccupationsByOccupationIdPatchAsyncWithHttpInfo($user_id, $occupation_id, $occupation_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdOccupationsByOccupationIdPatchAsyncWithHttpInfo
     *
     * Users occupation update
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $occupation_id Format - int32. The ID of the occupation. (required)
     * @param  \SKY\School\Model\OccupationUpdate $occupation_update The occupation information to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdOccupationsByOccupationIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdOccupationsByOccupationIdPatchAsyncWithHttpInfo($user_id, $occupation_id, $occupation_update = null, string $contentType = self::contentTypes['v1UsersByUserIdOccupationsByOccupationIdPatch'][0])
    {
        $returnType = 'int';
        $request = $this->v1UsersByUserIdOccupationsByOccupationIdPatchRequest($user_id, $occupation_id, $occupation_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdOccupationsByOccupationIdPatch'
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $occupation_id Format - int32. The ID of the occupation. (required)
     * @param  \SKY\School\Model\OccupationUpdate $occupation_update The occupation information to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdOccupationsByOccupationIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdOccupationsByOccupationIdPatchRequest($user_id, $occupation_id, $occupation_update = null, string $contentType = self::contentTypes['v1UsersByUserIdOccupationsByOccupationIdPatch'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdOccupationsByOccupationIdPatch'
            );
        }

        // verify the required parameter 'occupation_id' is set
        if ($occupation_id === null || (is_array($occupation_id) && count($occupation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $occupation_id when calling v1UsersByUserIdOccupationsByOccupationIdPatch'
            );
        }



        $resourcePath = '/v1/users/{user_id}/occupations/{occupation_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($occupation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'occupation_id' . '}',
                ObjectSerializer::toPathValue($occupation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($occupation_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($occupation_update));
            } else {
                $httpBody = $occupation_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdOccupationsGet
     *
     * Users occupations by user ID
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdOccupationsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\OccupationReadCollection
     */
    public function v1UsersByUserIdOccupationsGet($user_id, string $contentType = self::contentTypes['v1UsersByUserIdOccupationsGet'][0])
    {
        [$response] = $this->v1UsersByUserIdOccupationsGetWithHttpInfo($user_id, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdOccupationsGetWithHttpInfo
     *
     * Users occupations by user ID
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdOccupationsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\OccupationReadCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdOccupationsGetWithHttpInfo($user_id, string $contentType = self::contentTypes['v1UsersByUserIdOccupationsGet'][0])
    {
        $request = $this->v1UsersByUserIdOccupationsGetRequest($user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\OccupationReadCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\OccupationReadCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\OccupationReadCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\OccupationReadCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\OccupationReadCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdOccupationsGetAsync
     *
     * Users occupations by user ID
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdOccupationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdOccupationsGetAsync($user_id, string $contentType = self::contentTypes['v1UsersByUserIdOccupationsGet'][0])
    {
        return $this->v1UsersByUserIdOccupationsGetAsyncWithHttpInfo($user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdOccupationsGetAsyncWithHttpInfo
     *
     * Users occupations by user ID
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdOccupationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdOccupationsGetAsyncWithHttpInfo($user_id, string $contentType = self::contentTypes['v1UsersByUserIdOccupationsGet'][0])
    {
        $returnType = '\SKY\School\Model\OccupationReadCollection';
        $request = $this->v1UsersByUserIdOccupationsGetRequest($user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdOccupationsGet'
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdOccupationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdOccupationsGetRequest($user_id, string $contentType = self::contentTypes['v1UsersByUserIdOccupationsGet'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdOccupationsGet'
            );
        }


        $resourcePath = '/v1/users/{user_id}/occupations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdOccupationsPost
     *
     * Users occupation create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\OccupationCreate $occupation_create The occupation information to be created. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdOccupationsPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1UsersByUserIdOccupationsPost($user_id, $occupation_create = null, string $contentType = self::contentTypes['v1UsersByUserIdOccupationsPost'][0])
    {
        [$response] = $this->v1UsersByUserIdOccupationsPostWithHttpInfo($user_id, $occupation_create, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdOccupationsPostWithHttpInfo
     *
     * Users occupation create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\OccupationCreate $occupation_create The occupation information to be created. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdOccupationsPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdOccupationsPostWithHttpInfo($user_id, $occupation_create = null, string $contentType = self::contentTypes['v1UsersByUserIdOccupationsPost'][0])
    {
        $request = $this->v1UsersByUserIdOccupationsPostRequest($user_id, $occupation_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdOccupationsPostAsync
     *
     * Users occupation create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\OccupationCreate $occupation_create The occupation information to be created. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdOccupationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdOccupationsPostAsync($user_id, $occupation_create = null, string $contentType = self::contentTypes['v1UsersByUserIdOccupationsPost'][0])
    {
        return $this->v1UsersByUserIdOccupationsPostAsyncWithHttpInfo($user_id, $occupation_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdOccupationsPostAsyncWithHttpInfo
     *
     * Users occupation create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\OccupationCreate $occupation_create The occupation information to be created. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdOccupationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdOccupationsPostAsyncWithHttpInfo($user_id, $occupation_create = null, string $contentType = self::contentTypes['v1UsersByUserIdOccupationsPost'][0])
    {
        $returnType = 'int';
        $request = $this->v1UsersByUserIdOccupationsPostRequest($user_id, $occupation_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdOccupationsPost'
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\OccupationCreate $occupation_create The occupation information to be created. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdOccupationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdOccupationsPostRequest($user_id, $occupation_create = null, string $contentType = self::contentTypes['v1UsersByUserIdOccupationsPost'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdOccupationsPost'
            );
        }



        $resourcePath = '/v1/users/{user_id}/occupations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($occupation_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($occupation_create));
            } else {
                $httpBody = $occupation_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDelete
     *
     * Users phone delete (BETA)
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $phone_id Format - int32. The ID of the user&#39;s phone to delete. (required)
     * @param  int $phone_type_id Format - int32. The ID of the phone type. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDelete'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDelete($user_id, $phone_id, $phone_type_id, string $contentType = self::contentTypes['v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDelete'][0])
    {
        $this->v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDeleteWithHttpInfo($user_id, $phone_id, $phone_type_id, $contentType);
    }

    /**
     * Operation v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDeleteWithHttpInfo
     *
     * Users phone delete (BETA)
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $phone_id Format - int32. The ID of the user&#39;s phone to delete. (required)
     * @param  int $phone_type_id Format - int32. The ID of the phone type. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDelete'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDeleteWithHttpInfo($user_id, $phone_id, $phone_type_id, string $contentType = self::contentTypes['v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDelete'][0])
    {
        $request = $this->v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDeleteRequest($user_id, $phone_id, $phone_type_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDeleteAsync
     *
     * Users phone delete (BETA)
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $phone_id Format - int32. The ID of the user&#39;s phone to delete. (required)
     * @param  int $phone_type_id Format - int32. The ID of the phone type. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDeleteAsync($user_id, $phone_id, $phone_type_id, string $contentType = self::contentTypes['v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDelete'][0])
    {
        return $this->v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDeleteAsyncWithHttpInfo($user_id, $phone_id, $phone_type_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDeleteAsyncWithHttpInfo
     *
     * Users phone delete (BETA)
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $phone_id Format - int32. The ID of the user&#39;s phone to delete. (required)
     * @param  int $phone_type_id Format - int32. The ID of the phone type. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDeleteAsyncWithHttpInfo($user_id, $phone_id, $phone_type_id, string $contentType = self::contentTypes['v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDelete'][0])
    {
        $returnType = '';
        $request = $this->v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDeleteRequest($user_id, $phone_id, $phone_type_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDelete'
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $phone_id Format - int32. The ID of the user&#39;s phone to delete. (required)
     * @param  int $phone_type_id Format - int32. The ID of the phone type. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDeleteRequest($user_id, $phone_id, $phone_type_id, string $contentType = self::contentTypes['v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDelete'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDelete'
            );
        }

        // verify the required parameter 'phone_id' is set
        if ($phone_id === null || (is_array($phone_id) && count($phone_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_id when calling v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDelete'
            );
        }

        // verify the required parameter 'phone_type_id' is set
        if ($phone_type_id === null || (is_array($phone_type_id) && count($phone_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_type_id when calling v1UsersByUserIdPhonesByPhoneIdByPhoneTypeIdDelete'
            );
        }


        $resourcePath = '/v1/users/{user_id}/phones/{phone_id}/{phone_type_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($phone_id !== null) {
            $resourcePath = str_replace(
                '{' . 'phone_id' . '}',
                ObjectSerializer::toPathValue($phone_id),
                $resourcePath
            );
        }
        // path params
        if ($phone_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'phone_type_id' . '}',
                ObjectSerializer::toPathValue($phone_type_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdPhonesByPhoneIdPatch
     *
     * Users phone update
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $phone_id Format - int32. The phone id to be updated. (required)
     * @param  bool $split_phone_if_shared Set to true if phone number is shared (optional, default to false)
     * @param  \SKY\School\Model\PhoneUpdate $phone_update The phone information to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesByPhoneIdPatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1UsersByUserIdPhonesByPhoneIdPatch($user_id, $phone_id, $split_phone_if_shared = false, $phone_update = null, string $contentType = self::contentTypes['v1UsersByUserIdPhonesByPhoneIdPatch'][0])
    {
        [$response] = $this->v1UsersByUserIdPhonesByPhoneIdPatchWithHttpInfo($user_id, $phone_id, $split_phone_if_shared, $phone_update, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdPhonesByPhoneIdPatchWithHttpInfo
     *
     * Users phone update
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $phone_id Format - int32. The phone id to be updated. (required)
     * @param  bool $split_phone_if_shared Set to true if phone number is shared (optional, default to false)
     * @param  \SKY\School\Model\PhoneUpdate $phone_update The phone information to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesByPhoneIdPatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdPhonesByPhoneIdPatchWithHttpInfo($user_id, $phone_id, $split_phone_if_shared = false, $phone_update = null, string $contentType = self::contentTypes['v1UsersByUserIdPhonesByPhoneIdPatch'][0])
    {
        $request = $this->v1UsersByUserIdPhonesByPhoneIdPatchRequest($user_id, $phone_id, $split_phone_if_shared, $phone_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdPhonesByPhoneIdPatchAsync
     *
     * Users phone update
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $phone_id Format - int32. The phone id to be updated. (required)
     * @param  bool $split_phone_if_shared Set to true if phone number is shared (optional, default to false)
     * @param  \SKY\School\Model\PhoneUpdate $phone_update The phone information to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesByPhoneIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdPhonesByPhoneIdPatchAsync($user_id, $phone_id, $split_phone_if_shared = false, $phone_update = null, string $contentType = self::contentTypes['v1UsersByUserIdPhonesByPhoneIdPatch'][0])
    {
        return $this->v1UsersByUserIdPhonesByPhoneIdPatchAsyncWithHttpInfo($user_id, $phone_id, $split_phone_if_shared, $phone_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdPhonesByPhoneIdPatchAsyncWithHttpInfo
     *
     * Users phone update
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $phone_id Format - int32. The phone id to be updated. (required)
     * @param  bool $split_phone_if_shared Set to true if phone number is shared (optional, default to false)
     * @param  \SKY\School\Model\PhoneUpdate $phone_update The phone information to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesByPhoneIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdPhonesByPhoneIdPatchAsyncWithHttpInfo($user_id, $phone_id, $split_phone_if_shared = false, $phone_update = null, string $contentType = self::contentTypes['v1UsersByUserIdPhonesByPhoneIdPatch'][0])
    {
        $returnType = 'int';
        $request = $this->v1UsersByUserIdPhonesByPhoneIdPatchRequest($user_id, $phone_id, $split_phone_if_shared, $phone_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdPhonesByPhoneIdPatch'
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  int $phone_id Format - int32. The phone id to be updated. (required)
     * @param  bool $split_phone_if_shared Set to true if phone number is shared (optional, default to false)
     * @param  \SKY\School\Model\PhoneUpdate $phone_update The phone information to be updated. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesByPhoneIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdPhonesByPhoneIdPatchRequest($user_id, $phone_id, $split_phone_if_shared = false, $phone_update = null, string $contentType = self::contentTypes['v1UsersByUserIdPhonesByPhoneIdPatch'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdPhonesByPhoneIdPatch'
            );
        }

        // verify the required parameter 'phone_id' is set
        if ($phone_id === null || (is_array($phone_id) && count($phone_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_id when calling v1UsersByUserIdPhonesByPhoneIdPatch'
            );
        }




        $resourcePath = '/v1/users/{user_id}/phones/{phone_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $split_phone_if_shared,
            'split_phone_if_shared', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($phone_id !== null) {
            $resourcePath = str_replace(
                '{' . 'phone_id' . '}',
                ObjectSerializer::toPathValue($phone_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($phone_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($phone_update));
            } else {
                $httpBody = $phone_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdPhonesGet
     *
     * Users phones by user
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\PhoneReadCollection
     */
    public function v1UsersByUserIdPhonesGet($user_id, string $contentType = self::contentTypes['v1UsersByUserIdPhonesGet'][0])
    {
        [$response] = $this->v1UsersByUserIdPhonesGetWithHttpInfo($user_id, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdPhonesGetWithHttpInfo
     *
     * Users phones by user
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\PhoneReadCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdPhonesGetWithHttpInfo($user_id, string $contentType = self::contentTypes['v1UsersByUserIdPhonesGet'][0])
    {
        $request = $this->v1UsersByUserIdPhonesGetRequest($user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\PhoneReadCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\PhoneReadCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\PhoneReadCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\PhoneReadCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\PhoneReadCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdPhonesGetAsync
     *
     * Users phones by user
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdPhonesGetAsync($user_id, string $contentType = self::contentTypes['v1UsersByUserIdPhonesGet'][0])
    {
        return $this->v1UsersByUserIdPhonesGetAsyncWithHttpInfo($user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdPhonesGetAsyncWithHttpInfo
     *
     * Users phones by user
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdPhonesGetAsyncWithHttpInfo($user_id, string $contentType = self::contentTypes['v1UsersByUserIdPhonesGet'][0])
    {
        $returnType = '\SKY\School\Model\PhoneReadCollection';
        $request = $this->v1UsersByUserIdPhonesGetRequest($user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdPhonesGet'
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdPhonesGetRequest($user_id, string $contentType = self::contentTypes['v1UsersByUserIdPhonesGet'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdPhonesGet'
            );
        }


        $resourcePath = '/v1/users/{user_id}/phones';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdPhonesPost
     *
     * Users phone create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\PhoneAdd $phone_add The phone information to be created. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1UsersByUserIdPhonesPost($user_id, $phone_add = null, string $contentType = self::contentTypes['v1UsersByUserIdPhonesPost'][0])
    {
        [$response] = $this->v1UsersByUserIdPhonesPostWithHttpInfo($user_id, $phone_add, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdPhonesPostWithHttpInfo
     *
     * Users phone create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\PhoneAdd $phone_add The phone information to be created. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdPhonesPostWithHttpInfo($user_id, $phone_add = null, string $contentType = self::contentTypes['v1UsersByUserIdPhonesPost'][0])
    {
        $request = $this->v1UsersByUserIdPhonesPostRequest($user_id, $phone_add, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdPhonesPostAsync
     *
     * Users phone create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\PhoneAdd $phone_add The phone information to be created. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdPhonesPostAsync($user_id, $phone_add = null, string $contentType = self::contentTypes['v1UsersByUserIdPhonesPost'][0])
    {
        return $this->v1UsersByUserIdPhonesPostAsyncWithHttpInfo($user_id, $phone_add, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdPhonesPostAsyncWithHttpInfo
     *
     * Users phone create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\PhoneAdd $phone_add The phone information to be created. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdPhonesPostAsyncWithHttpInfo($user_id, $phone_add = null, string $contentType = self::contentTypes['v1UsersByUserIdPhonesPost'][0])
    {
        $returnType = 'int';
        $request = $this->v1UsersByUserIdPhonesPostRequest($user_id, $phone_add, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdPhonesPost'
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\PhoneAdd $phone_add The phone information to be created. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdPhonesPostRequest($user_id, $phone_add = null, string $contentType = self::contentTypes['v1UsersByUserIdPhonesPost'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdPhonesPost'
            );
        }



        $resourcePath = '/v1/users/{user_id}/phones';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($phone_add)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($phone_add));
            } else {
                $httpBody = $phone_add;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdPhonesSharePost
     *
     * Users phone create - shared (BETA)
     *
     * @param  int $user_id Format - int32. The Id of the user the existing address should be shared. (required)
     * @param  \SKY\School\Model\PhoneShare $phone_share The details about the phone number that should be shared with the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesSharePost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1UsersByUserIdPhonesSharePost($user_id, $phone_share = null, string $contentType = self::contentTypes['v1UsersByUserIdPhonesSharePost'][0])
    {
        [$response] = $this->v1UsersByUserIdPhonesSharePostWithHttpInfo($user_id, $phone_share, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdPhonesSharePostWithHttpInfo
     *
     * Users phone create - shared (BETA)
     *
     * @param  int $user_id Format - int32. The Id of the user the existing address should be shared. (required)
     * @param  \SKY\School\Model\PhoneShare $phone_share The details about the phone number that should be shared with the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesSharePost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdPhonesSharePostWithHttpInfo($user_id, $phone_share = null, string $contentType = self::contentTypes['v1UsersByUserIdPhonesSharePost'][0])
    {
        $request = $this->v1UsersByUserIdPhonesSharePostRequest($user_id, $phone_share, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdPhonesSharePostAsync
     *
     * Users phone create - shared (BETA)
     *
     * @param  int $user_id Format - int32. The Id of the user the existing address should be shared. (required)
     * @param  \SKY\School\Model\PhoneShare $phone_share The details about the phone number that should be shared with the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesSharePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdPhonesSharePostAsync($user_id, $phone_share = null, string $contentType = self::contentTypes['v1UsersByUserIdPhonesSharePost'][0])
    {
        return $this->v1UsersByUserIdPhonesSharePostAsyncWithHttpInfo($user_id, $phone_share, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdPhonesSharePostAsyncWithHttpInfo
     *
     * Users phone create - shared (BETA)
     *
     * @param  int $user_id Format - int32. The Id of the user the existing address should be shared. (required)
     * @param  \SKY\School\Model\PhoneShare $phone_share The details about the phone number that should be shared with the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesSharePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdPhonesSharePostAsyncWithHttpInfo($user_id, $phone_share = null, string $contentType = self::contentTypes['v1UsersByUserIdPhonesSharePost'][0])
    {
        $returnType = 'int';
        $request = $this->v1UsersByUserIdPhonesSharePostRequest($user_id, $phone_share, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdPhonesSharePost'
     *
     * @param  int $user_id Format - int32. The Id of the user the existing address should be shared. (required)
     * @param  \SKY\School\Model\PhoneShare $phone_share The details about the phone number that should be shared with the user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdPhonesSharePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdPhonesSharePostRequest($user_id, $phone_share = null, string $contentType = self::contentTypes['v1UsersByUserIdPhonesSharePost'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdPhonesSharePost'
            );
        }



        $resourcePath = '/v1/users/{user_id}/phones/share';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($phone_share)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($phone_share));
            } else {
                $httpBody = $phone_share;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdRelationshipsDelete
     *
     * Users relationship delete
     *
     * @param  int $user_id Format - int32. The ID of the user for whom you are deleting the relationship. (required)
     * @param  int $left_user Format - int32. ID of the other user in the relationship. (required)
     * @param  string $relationship_type Defines the relationship between left_user and this user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdRelationshipsDelete'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1UsersByUserIdRelationshipsDelete($user_id, $left_user, $relationship_type, string $contentType = self::contentTypes['v1UsersByUserIdRelationshipsDelete'][0])
    {
        $this->v1UsersByUserIdRelationshipsDeleteWithHttpInfo($user_id, $left_user, $relationship_type, $contentType);
    }

    /**
     * Operation v1UsersByUserIdRelationshipsDeleteWithHttpInfo
     *
     * Users relationship delete
     *
     * @param  int $user_id Format - int32. The ID of the user for whom you are deleting the relationship. (required)
     * @param  int $left_user Format - int32. ID of the other user in the relationship. (required)
     * @param  string $relationship_type Defines the relationship between left_user and this user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdRelationshipsDelete'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdRelationshipsDeleteWithHttpInfo($user_id, $left_user, $relationship_type, string $contentType = self::contentTypes['v1UsersByUserIdRelationshipsDelete'][0])
    {
        $request = $this->v1UsersByUserIdRelationshipsDeleteRequest($user_id, $left_user, $relationship_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdRelationshipsDeleteAsync
     *
     * Users relationship delete
     *
     * @param  int $user_id Format - int32. The ID of the user for whom you are deleting the relationship. (required)
     * @param  int $left_user Format - int32. ID of the other user in the relationship. (required)
     * @param  string $relationship_type Defines the relationship between left_user and this user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdRelationshipsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdRelationshipsDeleteAsync($user_id, $left_user, $relationship_type, string $contentType = self::contentTypes['v1UsersByUserIdRelationshipsDelete'][0])
    {
        return $this->v1UsersByUserIdRelationshipsDeleteAsyncWithHttpInfo($user_id, $left_user, $relationship_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdRelationshipsDeleteAsyncWithHttpInfo
     *
     * Users relationship delete
     *
     * @param  int $user_id Format - int32. The ID of the user for whom you are deleting the relationship. (required)
     * @param  int $left_user Format - int32. ID of the other user in the relationship. (required)
     * @param  string $relationship_type Defines the relationship between left_user and this user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdRelationshipsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdRelationshipsDeleteAsyncWithHttpInfo($user_id, $left_user, $relationship_type, string $contentType = self::contentTypes['v1UsersByUserIdRelationshipsDelete'][0])
    {
        $returnType = '';
        $request = $this->v1UsersByUserIdRelationshipsDeleteRequest($user_id, $left_user, $relationship_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdRelationshipsDelete'
     *
     * @param  int $user_id Format - int32. The ID of the user for whom you are deleting the relationship. (required)
     * @param  int $left_user Format - int32. ID of the other user in the relationship. (required)
     * @param  string $relationship_type Defines the relationship between left_user and this user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdRelationshipsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdRelationshipsDeleteRequest($user_id, $left_user, $relationship_type, string $contentType = self::contentTypes['v1UsersByUserIdRelationshipsDelete'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdRelationshipsDelete'
            );
        }

        // verify the required parameter 'left_user' is set
        if ($left_user === null || (is_array($left_user) && count($left_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $left_user when calling v1UsersByUserIdRelationshipsDelete'
            );
        }

        // verify the required parameter 'relationship_type' is set
        if ($relationship_type === null || (is_array($relationship_type) && count($relationship_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $relationship_type when calling v1UsersByUserIdRelationshipsDelete'
            );
        }


        $resourcePath = '/v1/users/{user_id}/relationships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $left_user,
            'left_user', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $relationship_type,
            'relationship_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdRelationshipsGet
     *
     * Users relationships by user
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdRelationshipsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\RelationshipReadCollection
     */
    public function v1UsersByUserIdRelationshipsGet($user_id, string $contentType = self::contentTypes['v1UsersByUserIdRelationshipsGet'][0])
    {
        [$response] = $this->v1UsersByUserIdRelationshipsGetWithHttpInfo($user_id, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersByUserIdRelationshipsGetWithHttpInfo
     *
     * Users relationships by user
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdRelationshipsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\RelationshipReadCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdRelationshipsGetWithHttpInfo($user_id, string $contentType = self::contentTypes['v1UsersByUserIdRelationshipsGet'][0])
    {
        $request = $this->v1UsersByUserIdRelationshipsGetRequest($user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\RelationshipReadCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\RelationshipReadCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\RelationshipReadCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\RelationshipReadCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\RelationshipReadCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdRelationshipsGetAsync
     *
     * Users relationships by user
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdRelationshipsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdRelationshipsGetAsync($user_id, string $contentType = self::contentTypes['v1UsersByUserIdRelationshipsGet'][0])
    {
        return $this->v1UsersByUserIdRelationshipsGetAsyncWithHttpInfo($user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdRelationshipsGetAsyncWithHttpInfo
     *
     * Users relationships by user
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdRelationshipsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdRelationshipsGetAsyncWithHttpInfo($user_id, string $contentType = self::contentTypes['v1UsersByUserIdRelationshipsGet'][0])
    {
        $returnType = '\SKY\School\Model\RelationshipReadCollection';
        $request = $this->v1UsersByUserIdRelationshipsGetRequest($user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdRelationshipsGet'
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdRelationshipsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdRelationshipsGetRequest($user_id, string $contentType = self::contentTypes['v1UsersByUserIdRelationshipsGet'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdRelationshipsGet'
            );
        }


        $resourcePath = '/v1/users/{user_id}/relationships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersByUserIdRelationshipsPost
     *
     * Users relationship create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\RelationshipCreate $relationship_create Defines the relationship to be created. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdRelationshipsPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1UsersByUserIdRelationshipsPost($user_id, $relationship_create = null, string $contentType = self::contentTypes['v1UsersByUserIdRelationshipsPost'][0])
    {
        $this->v1UsersByUserIdRelationshipsPostWithHttpInfo($user_id, $relationship_create, $contentType);
    }

    /**
     * Operation v1UsersByUserIdRelationshipsPostWithHttpInfo
     *
     * Users relationship create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\RelationshipCreate $relationship_create Defines the relationship to be created. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdRelationshipsPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersByUserIdRelationshipsPostWithHttpInfo($user_id, $relationship_create = null, string $contentType = self::contentTypes['v1UsersByUserIdRelationshipsPost'][0])
    {
        $request = $this->v1UsersByUserIdRelationshipsPostRequest($user_id, $relationship_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersByUserIdRelationshipsPostAsync
     *
     * Users relationship create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\RelationshipCreate $relationship_create Defines the relationship to be created. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdRelationshipsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdRelationshipsPostAsync($user_id, $relationship_create = null, string $contentType = self::contentTypes['v1UsersByUserIdRelationshipsPost'][0])
    {
        return $this->v1UsersByUserIdRelationshipsPostAsyncWithHttpInfo($user_id, $relationship_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersByUserIdRelationshipsPostAsyncWithHttpInfo
     *
     * Users relationship create
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\RelationshipCreate $relationship_create Defines the relationship to be created. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdRelationshipsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersByUserIdRelationshipsPostAsyncWithHttpInfo($user_id, $relationship_create = null, string $contentType = self::contentTypes['v1UsersByUserIdRelationshipsPost'][0])
    {
        $returnType = '';
        $request = $this->v1UsersByUserIdRelationshipsPostRequest($user_id, $relationship_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersByUserIdRelationshipsPost'
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  \SKY\School\Model\RelationshipCreate $relationship_create Defines the relationship to be created. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersByUserIdRelationshipsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersByUserIdRelationshipsPostRequest($user_id, $relationship_create = null, string $contentType = self::contentTypes['v1UsersByUserIdRelationshipsPost'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersByUserIdRelationshipsPost'
            );
        }



        $resourcePath = '/v1/users/{user_id}/relationships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($relationship_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($relationship_create));
            } else {
                $httpBody = $relationship_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersChangedGet
     *
     * Users changed by base role(s)
     *
     * @param  string $base_role_ids Comma delimited list of base role IDs to get users for. (required)
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). The date to begin looking for changes. Use &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO-8601&lt;/a&gt; date format: 2003-04-21. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersChangedGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\UserExtendedCollection
     */
    public function v1UsersChangedGet($base_role_ids, $start_date, string $contentType = self::contentTypes['v1UsersChangedGet'][0])
    {
        [$response] = $this->v1UsersChangedGetWithHttpInfo($base_role_ids, $start_date, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersChangedGetWithHttpInfo
     *
     * Users changed by base role(s)
     *
     * @param  string $base_role_ids Comma delimited list of base role IDs to get users for. (required)
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). The date to begin looking for changes. Use &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO-8601&lt;/a&gt; date format: 2003-04-21. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersChangedGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\UserExtendedCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersChangedGetWithHttpInfo($base_role_ids, $start_date, string $contentType = self::contentTypes['v1UsersChangedGet'][0])
    {
        $request = $this->v1UsersChangedGetRequest($base_role_ids, $start_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\UserExtendedCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\UserExtendedCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\UserExtendedCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\UserExtendedCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\UserExtendedCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersChangedGetAsync
     *
     * Users changed by base role(s)
     *
     * @param  string $base_role_ids Comma delimited list of base role IDs to get users for. (required)
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). The date to begin looking for changes. Use &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO-8601&lt;/a&gt; date format: 2003-04-21. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersChangedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersChangedGetAsync($base_role_ids, $start_date, string $contentType = self::contentTypes['v1UsersChangedGet'][0])
    {
        return $this->v1UsersChangedGetAsyncWithHttpInfo($base_role_ids, $start_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersChangedGetAsyncWithHttpInfo
     *
     * Users changed by base role(s)
     *
     * @param  string $base_role_ids Comma delimited list of base role IDs to get users for. (required)
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). The date to begin looking for changes. Use &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO-8601&lt;/a&gt; date format: 2003-04-21. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersChangedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersChangedGetAsyncWithHttpInfo($base_role_ids, $start_date, string $contentType = self::contentTypes['v1UsersChangedGet'][0])
    {
        $returnType = '\SKY\School\Model\UserExtendedCollection';
        $request = $this->v1UsersChangedGetRequest($base_role_ids, $start_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersChangedGet'
     *
     * @param  string $base_role_ids Comma delimited list of base role IDs to get users for. (required)
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). The date to begin looking for changes. Use &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO-8601&lt;/a&gt; date format: 2003-04-21. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersChangedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersChangedGetRequest($base_role_ids, $start_date, string $contentType = self::contentTypes['v1UsersChangedGet'][0])
    {

        // verify the required parameter 'base_role_ids' is set
        if ($base_role_ids === null || (is_array($base_role_ids) && count($base_role_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_role_ids when calling v1UsersChangedGet'
            );
        }

        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling v1UsersChangedGet'
            );
        }


        $resourcePath = '/v1/users/changed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $base_role_ids,
            'base_role_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'start_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersCustomfieldsGet
     *
     * Users custom fields list by base role(s)
     *
     * @param  string $base_role_ids A comma delimited list of base role IDs to get users for. Example: &#x60;&#x60;&#x60;base_role_ids&#x3D;14,16&#x60;&#x60;&#x60; for Students and Parents. (required)
     * @param  int $marker Format - int32. The user&#39;s &#x60;&#x60;&#x60;id&#x60;&#x60;&#x60; to start at to return the next batch of data. Results will start with the next user in the result set. (optional)
     * @param  string $field_ids A comma delimited list of field IDs to filter the result set down to. Only matching custom fields will be returned from that result set for all users in that set even if they don&#39;t have any data for the given &#x60;&#x60;&#x60;field_ids&#x60;&#x60;&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersCustomfieldsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\UserAdminCustomFieldCollection
     */
    public function v1UsersCustomfieldsGet($base_role_ids, $marker = null, $field_ids = null, string $contentType = self::contentTypes['v1UsersCustomfieldsGet'][0])
    {
        [$response] = $this->v1UsersCustomfieldsGetWithHttpInfo($base_role_ids, $marker, $field_ids, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersCustomfieldsGetWithHttpInfo
     *
     * Users custom fields list by base role(s)
     *
     * @param  string $base_role_ids A comma delimited list of base role IDs to get users for. Example: &#x60;&#x60;&#x60;base_role_ids&#x3D;14,16&#x60;&#x60;&#x60; for Students and Parents. (required)
     * @param  int $marker Format - int32. The user&#39;s &#x60;&#x60;&#x60;id&#x60;&#x60;&#x60; to start at to return the next batch of data. Results will start with the next user in the result set. (optional)
     * @param  string $field_ids A comma delimited list of field IDs to filter the result set down to. Only matching custom fields will be returned from that result set for all users in that set even if they don&#39;t have any data for the given &#x60;&#x60;&#x60;field_ids&#x60;&#x60;&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersCustomfieldsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\UserAdminCustomFieldCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersCustomfieldsGetWithHttpInfo($base_role_ids, $marker = null, $field_ids = null, string $contentType = self::contentTypes['v1UsersCustomfieldsGet'][0])
    {
        $request = $this->v1UsersCustomfieldsGetRequest($base_role_ids, $marker, $field_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\UserAdminCustomFieldCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\UserAdminCustomFieldCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\UserAdminCustomFieldCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\UserAdminCustomFieldCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\UserAdminCustomFieldCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersCustomfieldsGetAsync
     *
     * Users custom fields list by base role(s)
     *
     * @param  string $base_role_ids A comma delimited list of base role IDs to get users for. Example: &#x60;&#x60;&#x60;base_role_ids&#x3D;14,16&#x60;&#x60;&#x60; for Students and Parents. (required)
     * @param  int $marker Format - int32. The user&#39;s &#x60;&#x60;&#x60;id&#x60;&#x60;&#x60; to start at to return the next batch of data. Results will start with the next user in the result set. (optional)
     * @param  string $field_ids A comma delimited list of field IDs to filter the result set down to. Only matching custom fields will be returned from that result set for all users in that set even if they don&#39;t have any data for the given &#x60;&#x60;&#x60;field_ids&#x60;&#x60;&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersCustomfieldsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersCustomfieldsGetAsync($base_role_ids, $marker = null, $field_ids = null, string $contentType = self::contentTypes['v1UsersCustomfieldsGet'][0])
    {
        return $this->v1UsersCustomfieldsGetAsyncWithHttpInfo($base_role_ids, $marker, $field_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersCustomfieldsGetAsyncWithHttpInfo
     *
     * Users custom fields list by base role(s)
     *
     * @param  string $base_role_ids A comma delimited list of base role IDs to get users for. Example: &#x60;&#x60;&#x60;base_role_ids&#x3D;14,16&#x60;&#x60;&#x60; for Students and Parents. (required)
     * @param  int $marker Format - int32. The user&#39;s &#x60;&#x60;&#x60;id&#x60;&#x60;&#x60; to start at to return the next batch of data. Results will start with the next user in the result set. (optional)
     * @param  string $field_ids A comma delimited list of field IDs to filter the result set down to. Only matching custom fields will be returned from that result set for all users in that set even if they don&#39;t have any data for the given &#x60;&#x60;&#x60;field_ids&#x60;&#x60;&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersCustomfieldsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersCustomfieldsGetAsyncWithHttpInfo($base_role_ids, $marker = null, $field_ids = null, string $contentType = self::contentTypes['v1UsersCustomfieldsGet'][0])
    {
        $returnType = '\SKY\School\Model\UserAdminCustomFieldCollection';
        $request = $this->v1UsersCustomfieldsGetRequest($base_role_ids, $marker, $field_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersCustomfieldsGet'
     *
     * @param  string $base_role_ids A comma delimited list of base role IDs to get users for. Example: &#x60;&#x60;&#x60;base_role_ids&#x3D;14,16&#x60;&#x60;&#x60; for Students and Parents. (required)
     * @param  int $marker Format - int32. The user&#39;s &#x60;&#x60;&#x60;id&#x60;&#x60;&#x60; to start at to return the next batch of data. Results will start with the next user in the result set. (optional)
     * @param  string $field_ids A comma delimited list of field IDs to filter the result set down to. Only matching custom fields will be returned from that result set for all users in that set even if they don&#39;t have any data for the given &#x60;&#x60;&#x60;field_ids&#x60;&#x60;&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersCustomfieldsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersCustomfieldsGetRequest($base_role_ids, $marker = null, $field_ids = null, string $contentType = self::contentTypes['v1UsersCustomfieldsGet'][0])
    {

        // verify the required parameter 'base_role_ids' is set
        if ($base_role_ids === null || (is_array($base_role_ids) && count($base_role_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_role_ids when calling v1UsersCustomfieldsGet'
            );
        }




        $resourcePath = '/v1/users/customfields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $base_role_ids,
            'base_role_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marker,
            'marker', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $field_ids,
            'field_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersEmergencycontactsChangedGet
     *
     * Users emergency contact changes
     *
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). The date to begin looking for changes. Use &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO-8601&lt;/a&gt; date format: 2022-04-16. (optional)
     * @param  int $marker Format - int32. The user&#39;s ID to start at to return the next batch of data. Results will start with the next user in the result set. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersEmergencycontactsChangedGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\EmergencyContactChangeCollection
     */
    public function v1UsersEmergencycontactsChangedGet($start_date = null, $marker = 0, string $contentType = self::contentTypes['v1UsersEmergencycontactsChangedGet'][0])
    {
        [$response] = $this->v1UsersEmergencycontactsChangedGetWithHttpInfo($start_date, $marker, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersEmergencycontactsChangedGetWithHttpInfo
     *
     * Users emergency contact changes
     *
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). The date to begin looking for changes. Use &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO-8601&lt;/a&gt; date format: 2022-04-16. (optional)
     * @param  int $marker Format - int32. The user&#39;s ID to start at to return the next batch of data. Results will start with the next user in the result set. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersEmergencycontactsChangedGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\EmergencyContactChangeCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersEmergencycontactsChangedGetWithHttpInfo($start_date = null, $marker = 0, string $contentType = self::contentTypes['v1UsersEmergencycontactsChangedGet'][0])
    {
        $request = $this->v1UsersEmergencycontactsChangedGetRequest($start_date, $marker, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\EmergencyContactChangeCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\EmergencyContactChangeCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\EmergencyContactChangeCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\EmergencyContactChangeCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\EmergencyContactChangeCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersEmergencycontactsChangedGetAsync
     *
     * Users emergency contact changes
     *
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). The date to begin looking for changes. Use &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO-8601&lt;/a&gt; date format: 2022-04-16. (optional)
     * @param  int $marker Format - int32. The user&#39;s ID to start at to return the next batch of data. Results will start with the next user in the result set. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersEmergencycontactsChangedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersEmergencycontactsChangedGetAsync($start_date = null, $marker = 0, string $contentType = self::contentTypes['v1UsersEmergencycontactsChangedGet'][0])
    {
        return $this->v1UsersEmergencycontactsChangedGetAsyncWithHttpInfo($start_date, $marker, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersEmergencycontactsChangedGetAsyncWithHttpInfo
     *
     * Users emergency contact changes
     *
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). The date to begin looking for changes. Use &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO-8601&lt;/a&gt; date format: 2022-04-16. (optional)
     * @param  int $marker Format - int32. The user&#39;s ID to start at to return the next batch of data. Results will start with the next user in the result set. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersEmergencycontactsChangedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersEmergencycontactsChangedGetAsyncWithHttpInfo($start_date = null, $marker = 0, string $contentType = self::contentTypes['v1UsersEmergencycontactsChangedGet'][0])
    {
        $returnType = '\SKY\School\Model\EmergencyContactChangeCollection';
        $request = $this->v1UsersEmergencycontactsChangedGetRequest($start_date, $marker, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersEmergencycontactsChangedGet'
     *
     * @param  \DateTime $start_date Format - date-time (as date-time in RFC3339). The date to begin looking for changes. Use &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO-8601&lt;/a&gt; date format: 2022-04-16. (optional)
     * @param  int $marker Format - int32. The user&#39;s ID to start at to return the next batch of data. Results will start with the next user in the result set. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersEmergencycontactsChangedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersEmergencycontactsChangedGetRequest($start_date = null, $marker = 0, string $contentType = self::contentTypes['v1UsersEmergencycontactsChangedGet'][0])
    {




        $resourcePath = '/v1/users/emergencycontacts/changed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'start_date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marker,
            'marker', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersEnrollPost
     *
     * Users enrollment create
     *
     * @param  \SKY\School\Model\UserEnrollmentCreate $user_enrollment_create  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersEnrollPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\UserEnrollmentResponse
     */
    public function v1UsersEnrollPost($user_enrollment_create = null, string $contentType = self::contentTypes['v1UsersEnrollPost'][0])
    {
        [$response] = $this->v1UsersEnrollPostWithHttpInfo($user_enrollment_create, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersEnrollPostWithHttpInfo
     *
     * Users enrollment create
     *
     * @param  \SKY\School\Model\UserEnrollmentCreate $user_enrollment_create  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersEnrollPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\UserEnrollmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersEnrollPostWithHttpInfo($user_enrollment_create = null, string $contentType = self::contentTypes['v1UsersEnrollPost'][0])
    {
        $request = $this->v1UsersEnrollPostRequest($user_enrollment_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\UserEnrollmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\UserEnrollmentResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\UserEnrollmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\UserEnrollmentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\UserEnrollmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersEnrollPostAsync
     *
     * Users enrollment create
     *
     * @param  \SKY\School\Model\UserEnrollmentCreate $user_enrollment_create  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersEnrollPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersEnrollPostAsync($user_enrollment_create = null, string $contentType = self::contentTypes['v1UsersEnrollPost'][0])
    {
        return $this->v1UsersEnrollPostAsyncWithHttpInfo($user_enrollment_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersEnrollPostAsyncWithHttpInfo
     *
     * Users enrollment create
     *
     * @param  \SKY\School\Model\UserEnrollmentCreate $user_enrollment_create  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersEnrollPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersEnrollPostAsyncWithHttpInfo($user_enrollment_create = null, string $contentType = self::contentTypes['v1UsersEnrollPost'][0])
    {
        $returnType = '\SKY\School\Model\UserEnrollmentResponse';
        $request = $this->v1UsersEnrollPostRequest($user_enrollment_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersEnrollPost'
     *
     * @param  \SKY\School\Model\UserEnrollmentCreate $user_enrollment_create  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersEnrollPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersEnrollPostRequest($user_enrollment_create = null, string $contentType = self::contentTypes['v1UsersEnrollPost'][0])
    {



        $resourcePath = '/v1/users/enroll';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($user_enrollment_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($user_enrollment_create));
            } else {
                $httpBody = $user_enrollment_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersEnrollmentsGet
     *
     * Users enrollments by year
     *
     * @param  string $school_year The school year label to get enrollments for. The school year should be formatted like &#x60;&#x60;&#x60;2022-2023&#x60;&#x60;&#x60; (required)
     * @param  int $school_level_id Format - int32. The school level Id to return enrollments for. Optional. (optional)
     * @param  int $grade_level_id Format - int32. The grade level Id to return enrollments for. Optional. (optional)
     * @param  int $limit Format - int32. The number of records to return.  Defaults to 1000. Maximum is 5000. (optional, default to 1000)
     * @param  int $offset Format - int32. The record to start the next collection on. Defaults to 0. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersEnrollmentsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\UserEnrollmentCollection
     */
    public function v1UsersEnrollmentsGet($school_year, $school_level_id = null, $grade_level_id = null, $limit = 1000, $offset = 0, string $contentType = self::contentTypes['v1UsersEnrollmentsGet'][0])
    {
        [$response] = $this->v1UsersEnrollmentsGetWithHttpInfo($school_year, $school_level_id, $grade_level_id, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersEnrollmentsGetWithHttpInfo
     *
     * Users enrollments by year
     *
     * @param  string $school_year The school year label to get enrollments for. The school year should be formatted like &#x60;&#x60;&#x60;2022-2023&#x60;&#x60;&#x60; (required)
     * @param  int $school_level_id Format - int32. The school level Id to return enrollments for. Optional. (optional)
     * @param  int $grade_level_id Format - int32. The grade level Id to return enrollments for. Optional. (optional)
     * @param  int $limit Format - int32. The number of records to return.  Defaults to 1000. Maximum is 5000. (optional, default to 1000)
     * @param  int $offset Format - int32. The record to start the next collection on. Defaults to 0. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersEnrollmentsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\UserEnrollmentCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersEnrollmentsGetWithHttpInfo($school_year, $school_level_id = null, $grade_level_id = null, $limit = 1000, $offset = 0, string $contentType = self::contentTypes['v1UsersEnrollmentsGet'][0])
    {
        $request = $this->v1UsersEnrollmentsGetRequest($school_year, $school_level_id, $grade_level_id, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\UserEnrollmentCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\UserEnrollmentCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\UserEnrollmentCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\UserEnrollmentCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\UserEnrollmentCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersEnrollmentsGetAsync
     *
     * Users enrollments by year
     *
     * @param  string $school_year The school year label to get enrollments for. The school year should be formatted like &#x60;&#x60;&#x60;2022-2023&#x60;&#x60;&#x60; (required)
     * @param  int $school_level_id Format - int32. The school level Id to return enrollments for. Optional. (optional)
     * @param  int $grade_level_id Format - int32. The grade level Id to return enrollments for. Optional. (optional)
     * @param  int $limit Format - int32. The number of records to return.  Defaults to 1000. Maximum is 5000. (optional, default to 1000)
     * @param  int $offset Format - int32. The record to start the next collection on. Defaults to 0. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersEnrollmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersEnrollmentsGetAsync($school_year, $school_level_id = null, $grade_level_id = null, $limit = 1000, $offset = 0, string $contentType = self::contentTypes['v1UsersEnrollmentsGet'][0])
    {
        return $this->v1UsersEnrollmentsGetAsyncWithHttpInfo($school_year, $school_level_id, $grade_level_id, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersEnrollmentsGetAsyncWithHttpInfo
     *
     * Users enrollments by year
     *
     * @param  string $school_year The school year label to get enrollments for. The school year should be formatted like &#x60;&#x60;&#x60;2022-2023&#x60;&#x60;&#x60; (required)
     * @param  int $school_level_id Format - int32. The school level Id to return enrollments for. Optional. (optional)
     * @param  int $grade_level_id Format - int32. The grade level Id to return enrollments for. Optional. (optional)
     * @param  int $limit Format - int32. The number of records to return.  Defaults to 1000. Maximum is 5000. (optional, default to 1000)
     * @param  int $offset Format - int32. The record to start the next collection on. Defaults to 0. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersEnrollmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersEnrollmentsGetAsyncWithHttpInfo($school_year, $school_level_id = null, $grade_level_id = null, $limit = 1000, $offset = 0, string $contentType = self::contentTypes['v1UsersEnrollmentsGet'][0])
    {
        $returnType = '\SKY\School\Model\UserEnrollmentCollection';
        $request = $this->v1UsersEnrollmentsGetRequest($school_year, $school_level_id, $grade_level_id, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersEnrollmentsGet'
     *
     * @param  string $school_year The school year label to get enrollments for. The school year should be formatted like &#x60;&#x60;&#x60;2022-2023&#x60;&#x60;&#x60; (required)
     * @param  int $school_level_id Format - int32. The school level Id to return enrollments for. Optional. (optional)
     * @param  int $grade_level_id Format - int32. The grade level Id to return enrollments for. Optional. (optional)
     * @param  int $limit Format - int32. The number of records to return.  Defaults to 1000. Maximum is 5000. (optional, default to 1000)
     * @param  int $offset Format - int32. The record to start the next collection on. Defaults to 0. (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersEnrollmentsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersEnrollmentsGetRequest($school_year, $school_level_id = null, $grade_level_id = null, $limit = 1000, $offset = 0, string $contentType = self::contentTypes['v1UsersEnrollmentsGet'][0])
    {

        // verify the required parameter 'school_year' is set
        if ($school_year === null || (is_array($school_year) && count($school_year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $school_year when calling v1UsersEnrollmentsGet'
            );
        }






        $resourcePath = '/v1/users/enrollments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $school_year,
            'school_year', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $school_level_id,
            'school_level_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $grade_level_id,
            'grade_level_id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersExtendedByUserIdGet
     *
     * Users extended by user
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersExtendedByUserIdGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\UserExtended
     */
    public function v1UsersExtendedByUserIdGet($user_id, string $contentType = self::contentTypes['v1UsersExtendedByUserIdGet'][0])
    {
        [$response] = $this->v1UsersExtendedByUserIdGetWithHttpInfo($user_id, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersExtendedByUserIdGetWithHttpInfo
     *
     * Users extended by user
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersExtendedByUserIdGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\UserExtended, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersExtendedByUserIdGetWithHttpInfo($user_id, string $contentType = self::contentTypes['v1UsersExtendedByUserIdGet'][0])
    {
        $request = $this->v1UsersExtendedByUserIdGetRequest($user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\UserExtended' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\UserExtended' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\UserExtended', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\UserExtended';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\UserExtended',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersExtendedByUserIdGetAsync
     *
     * Users extended by user
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersExtendedByUserIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersExtendedByUserIdGetAsync($user_id, string $contentType = self::contentTypes['v1UsersExtendedByUserIdGet'][0])
    {
        return $this->v1UsersExtendedByUserIdGetAsyncWithHttpInfo($user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersExtendedByUserIdGetAsyncWithHttpInfo
     *
     * Users extended by user
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersExtendedByUserIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersExtendedByUserIdGetAsyncWithHttpInfo($user_id, string $contentType = self::contentTypes['v1UsersExtendedByUserIdGet'][0])
    {
        $returnType = '\SKY\School\Model\UserExtended';
        $request = $this->v1UsersExtendedByUserIdGetRequest($user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersExtendedByUserIdGet'
     *
     * @param  int $user_id Format - int32. The ID of the user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersExtendedByUserIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersExtendedByUserIdGetRequest($user_id, string $contentType = self::contentTypes['v1UsersExtendedByUserIdGet'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling v1UsersExtendedByUserIdGet'
            );
        }


        $resourcePath = '/v1/users/extended/{user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersExtendedGet
     *
     * Users extended by role(s)
     *
     * @param  string $base_role_ids Comma delimited list of base role IDs to get users for. (required)
     * @param  int $marker Format - int32. The user&#39;s ID to start at to return the next batch of data. Results will start with the next user in the result set. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersExtendedGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\UserExtendedCollection
     */
    public function v1UsersExtendedGet($base_role_ids, $marker = null, string $contentType = self::contentTypes['v1UsersExtendedGet'][0])
    {
        [$response] = $this->v1UsersExtendedGetWithHttpInfo($base_role_ids, $marker, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersExtendedGetWithHttpInfo
     *
     * Users extended by role(s)
     *
     * @param  string $base_role_ids Comma delimited list of base role IDs to get users for. (required)
     * @param  int $marker Format - int32. The user&#39;s ID to start at to return the next batch of data. Results will start with the next user in the result set. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersExtendedGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\UserExtendedCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersExtendedGetWithHttpInfo($base_role_ids, $marker = null, string $contentType = self::contentTypes['v1UsersExtendedGet'][0])
    {
        $request = $this->v1UsersExtendedGetRequest($base_role_ids, $marker, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\UserExtendedCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\UserExtendedCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\UserExtendedCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\UserExtendedCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\UserExtendedCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersExtendedGetAsync
     *
     * Users extended by role(s)
     *
     * @param  string $base_role_ids Comma delimited list of base role IDs to get users for. (required)
     * @param  int $marker Format - int32. The user&#39;s ID to start at to return the next batch of data. Results will start with the next user in the result set. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersExtendedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersExtendedGetAsync($base_role_ids, $marker = null, string $contentType = self::contentTypes['v1UsersExtendedGet'][0])
    {
        return $this->v1UsersExtendedGetAsyncWithHttpInfo($base_role_ids, $marker, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersExtendedGetAsyncWithHttpInfo
     *
     * Users extended by role(s)
     *
     * @param  string $base_role_ids Comma delimited list of base role IDs to get users for. (required)
     * @param  int $marker Format - int32. The user&#39;s ID to start at to return the next batch of data. Results will start with the next user in the result set. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersExtendedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersExtendedGetAsyncWithHttpInfo($base_role_ids, $marker = null, string $contentType = self::contentTypes['v1UsersExtendedGet'][0])
    {
        $returnType = '\SKY\School\Model\UserExtendedCollection';
        $request = $this->v1UsersExtendedGetRequest($base_role_ids, $marker, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersExtendedGet'
     *
     * @param  string $base_role_ids Comma delimited list of base role IDs to get users for. (required)
     * @param  int $marker Format - int32. The user&#39;s ID to start at to return the next batch of data. Results will start with the next user in the result set. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersExtendedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersExtendedGetRequest($base_role_ids, $marker = null, string $contentType = self::contentTypes['v1UsersExtendedGet'][0])
    {

        // verify the required parameter 'base_role_ids' is set
        if ($base_role_ids === null || (is_array($base_role_ids) && count($base_role_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_role_ids when calling v1UsersExtendedGet'
            );
        }



        $resourcePath = '/v1/users/extended';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $base_role_ids,
            'base_role_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marker,
            'marker', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersGendertypesGet
     *
     * Users gender types
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersGendertypesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\GenderTypeCollection
     */
    public function v1UsersGendertypesGet(string $contentType = self::contentTypes['v1UsersGendertypesGet'][0])
    {
        [$response] = $this->v1UsersGendertypesGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation v1UsersGendertypesGetWithHttpInfo
     *
     * Users gender types
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersGendertypesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\GenderTypeCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersGendertypesGetWithHttpInfo(string $contentType = self::contentTypes['v1UsersGendertypesGet'][0])
    {
        $request = $this->v1UsersGendertypesGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\GenderTypeCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\GenderTypeCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\GenderTypeCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\GenderTypeCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\GenderTypeCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersGendertypesGetAsync
     *
     * Users gender types
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersGendertypesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersGendertypesGetAsync(string $contentType = self::contentTypes['v1UsersGendertypesGet'][0])
    {
        return $this->v1UsersGendertypesGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersGendertypesGetAsyncWithHttpInfo
     *
     * Users gender types
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersGendertypesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersGendertypesGetAsyncWithHttpInfo(string $contentType = self::contentTypes['v1UsersGendertypesGet'][0])
    {
        $returnType = '\SKY\School\Model\GenderTypeCollection';
        $request = $this->v1UsersGendertypesGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersGendertypesGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersGendertypesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersGendertypesGetRequest(string $contentType = self::contentTypes['v1UsersGendertypesGet'][0])
    {


        $resourcePath = '/v1/users/gendertypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersMeGet
     *
     * Users Get Me
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersMeGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\UserMe
     */
    public function v1UsersMeGet(string $contentType = self::contentTypes['v1UsersMeGet'][0])
    {
        [$response] = $this->v1UsersMeGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation v1UsersMeGetWithHttpInfo
     *
     * Users Get Me
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersMeGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\UserMe, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersMeGetWithHttpInfo(string $contentType = self::contentTypes['v1UsersMeGet'][0])
    {
        $request = $this->v1UsersMeGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\UserMe' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\UserMe' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\UserMe', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\UserMe';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\UserMe',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersMeGetAsync
     *
     * Users Get Me
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersMeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersMeGetAsync(string $contentType = self::contentTypes['v1UsersMeGet'][0])
    {
        return $this->v1UsersMeGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersMeGetAsyncWithHttpInfo
     *
     * Users Get Me
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersMeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersMeGetAsyncWithHttpInfo(string $contentType = self::contentTypes['v1UsersMeGet'][0])
    {
        $returnType = '\SKY\School\Model\UserMe';
        $request = $this->v1UsersMeGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersMeGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersMeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersMeGetRequest(string $contentType = self::contentTypes['v1UsersMeGet'][0])
    {


        $resourcePath = '/v1/users/me';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersPatch
     *
     * User update
     *
     * @param  \SKY\School\Model\UserEdit $user_edit User information to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersPatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1UsersPatch($user_edit = null, string $contentType = self::contentTypes['v1UsersPatch'][0])
    {
        [$response] = $this->v1UsersPatchWithHttpInfo($user_edit, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersPatchWithHttpInfo
     *
     * User update
     *
     * @param  \SKY\School\Model\UserEdit $user_edit User information to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersPatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersPatchWithHttpInfo($user_edit = null, string $contentType = self::contentTypes['v1UsersPatch'][0])
    {
        $request = $this->v1UsersPatchRequest($user_edit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersPatchAsync
     *
     * User update
     *
     * @param  \SKY\School\Model\UserEdit $user_edit User information to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersPatchAsync($user_edit = null, string $contentType = self::contentTypes['v1UsersPatch'][0])
    {
        return $this->v1UsersPatchAsyncWithHttpInfo($user_edit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersPatchAsyncWithHttpInfo
     *
     * User update
     *
     * @param  \SKY\School\Model\UserEdit $user_edit User information to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersPatchAsyncWithHttpInfo($user_edit = null, string $contentType = self::contentTypes['v1UsersPatch'][0])
    {
        $returnType = 'int';
        $request = $this->v1UsersPatchRequest($user_edit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersPatch'
     *
     * @param  \SKY\School\Model\UserEdit $user_edit User information to be updated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersPatchRequest($user_edit = null, string $contentType = self::contentTypes['v1UsersPatch'][0])
    {



        $resourcePath = '/v1/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($user_edit)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($user_edit));
            } else {
                $httpBody = $user_edit;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersPhonetypesGet
     *
     * Users phone types
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersPhonetypesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\PhoneTypeCollection
     */
    public function v1UsersPhonetypesGet(string $contentType = self::contentTypes['v1UsersPhonetypesGet'][0])
    {
        [$response] = $this->v1UsersPhonetypesGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation v1UsersPhonetypesGetWithHttpInfo
     *
     * Users phone types
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersPhonetypesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\PhoneTypeCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersPhonetypesGetWithHttpInfo(string $contentType = self::contentTypes['v1UsersPhonetypesGet'][0])
    {
        $request = $this->v1UsersPhonetypesGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\PhoneTypeCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\PhoneTypeCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\PhoneTypeCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\PhoneTypeCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\PhoneTypeCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersPhonetypesGetAsync
     *
     * Users phone types
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersPhonetypesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersPhonetypesGetAsync(string $contentType = self::contentTypes['v1UsersPhonetypesGet'][0])
    {
        return $this->v1UsersPhonetypesGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersPhonetypesGetAsyncWithHttpInfo
     *
     * Users phone types
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersPhonetypesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersPhonetypesGetAsyncWithHttpInfo(string $contentType = self::contentTypes['v1UsersPhonetypesGet'][0])
    {
        $returnType = '\SKY\School\Model\PhoneTypeCollection';
        $request = $this->v1UsersPhonetypesGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersPhonetypesGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersPhonetypesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersPhonetypesGetRequest(string $contentType = self::contentTypes['v1UsersPhonetypesGet'][0])
    {


        $resourcePath = '/v1/users/phonetypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1UsersPost
     *
     * User create
     *
     * @param  \SKY\School\Model\UserAdd $user_add The user to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1UsersPost($user_add = null, string $contentType = self::contentTypes['v1UsersPost'][0])
    {
        [$response] = $this->v1UsersPostWithHttpInfo($user_add, $contentType);
        return $response;
    }

    /**
     * Operation v1UsersPostWithHttpInfo
     *
     * User create
     *
     * @param  \SKY\School\Model\UserAdd $user_add The user to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1UsersPostWithHttpInfo($user_add = null, string $contentType = self::contentTypes['v1UsersPost'][0])
    {
        $request = $this->v1UsersPostRequest($user_add, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1UsersPostAsync
     *
     * User create
     *
     * @param  \SKY\School\Model\UserAdd $user_add The user to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersPostAsync($user_add = null, string $contentType = self::contentTypes['v1UsersPost'][0])
    {
        return $this->v1UsersPostAsyncWithHttpInfo($user_add, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1UsersPostAsyncWithHttpInfo
     *
     * User create
     *
     * @param  \SKY\School\Model\UserAdd $user_add The user to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1UsersPostAsyncWithHttpInfo($user_add = null, string $contentType = self::contentTypes['v1UsersPost'][0])
    {
        $returnType = 'int';
        $request = $this->v1UsersPostRequest($user_add, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1UsersPost'
     *
     * @param  \SKY\School\Model\UserAdd $user_add The user to be created (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1UsersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1UsersPostRequest($user_add = null, string $contentType = self::contentTypes['v1UsersPost'][0])
    {



        $resourcePath = '/v1/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($user_add)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($user_add));
            } else {
                $httpBody = $user_add;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1usersget
     *
     * Users by role(s)
     *
     * @param  string $roles Comma delimited list of role IDs to get users for. (required)
     * @param  string $first_name Filter results by first name. (optional)
     * @param  string $last_name Filter results by last name. (optional)
     * @param  string $email Filter results by e-mail. (optional)
     * @param  string $maiden_name Filter results by maiden name. (optional)
     * @param  string $grad_year The beginning date in a school year (ex. 2017). (optional)
     * @param  string $end_grad_year The end date in a school year (ex. 2018). Enter a grad_year and end_grad_year to find matching results in the date range. (optional)
     * @param  int $marker Format - int32. The record number start at to return the next batch of data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1usersget'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\UserReadCollection
     */
    public function v1usersget($roles, $first_name = null, $last_name = null, $email = null, $maiden_name = null, $grad_year = null, $end_grad_year = null, $marker = null, string $contentType = self::contentTypes['v1usersget'][0])
    {
        [$response] = $this->v1usersgetWithHttpInfo($roles, $first_name, $last_name, $email, $maiden_name, $grad_year, $end_grad_year, $marker, $contentType);
        return $response;
    }

    /**
     * Operation v1usersgetWithHttpInfo
     *
     * Users by role(s)
     *
     * @param  string $roles Comma delimited list of role IDs to get users for. (required)
     * @param  string $first_name Filter results by first name. (optional)
     * @param  string $last_name Filter results by last name. (optional)
     * @param  string $email Filter results by e-mail. (optional)
     * @param  string $maiden_name Filter results by maiden name. (optional)
     * @param  string $grad_year The beginning date in a school year (ex. 2017). (optional)
     * @param  string $end_grad_year The end date in a school year (ex. 2018). Enter a grad_year and end_grad_year to find matching results in the date range. (optional)
     * @param  int $marker Format - int32. The record number start at to return the next batch of data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1usersget'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\UserReadCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1usersgetWithHttpInfo($roles, $first_name = null, $last_name = null, $email = null, $maiden_name = null, $grad_year = null, $end_grad_year = null, $marker = null, string $contentType = self::contentTypes['v1usersget'][0])
    {
        $request = $this->v1usersgetRequest($roles, $first_name, $last_name, $email, $maiden_name, $grad_year, $end_grad_year, $marker, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\UserReadCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\UserReadCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\UserReadCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\UserReadCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\UserReadCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1usersgetAsync
     *
     * Users by role(s)
     *
     * @param  string $roles Comma delimited list of role IDs to get users for. (required)
     * @param  string $first_name Filter results by first name. (optional)
     * @param  string $last_name Filter results by last name. (optional)
     * @param  string $email Filter results by e-mail. (optional)
     * @param  string $maiden_name Filter results by maiden name. (optional)
     * @param  string $grad_year The beginning date in a school year (ex. 2017). (optional)
     * @param  string $end_grad_year The end date in a school year (ex. 2018). Enter a grad_year and end_grad_year to find matching results in the date range. (optional)
     * @param  int $marker Format - int32. The record number start at to return the next batch of data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1usersget'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1usersgetAsync($roles, $first_name = null, $last_name = null, $email = null, $maiden_name = null, $grad_year = null, $end_grad_year = null, $marker = null, string $contentType = self::contentTypes['v1usersget'][0])
    {
        return $this->v1usersgetAsyncWithHttpInfo($roles, $first_name, $last_name, $email, $maiden_name, $grad_year, $end_grad_year, $marker, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1usersgetAsyncWithHttpInfo
     *
     * Users by role(s)
     *
     * @param  string $roles Comma delimited list of role IDs to get users for. (required)
     * @param  string $first_name Filter results by first name. (optional)
     * @param  string $last_name Filter results by last name. (optional)
     * @param  string $email Filter results by e-mail. (optional)
     * @param  string $maiden_name Filter results by maiden name. (optional)
     * @param  string $grad_year The beginning date in a school year (ex. 2017). (optional)
     * @param  string $end_grad_year The end date in a school year (ex. 2018). Enter a grad_year and end_grad_year to find matching results in the date range. (optional)
     * @param  int $marker Format - int32. The record number start at to return the next batch of data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1usersget'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1usersgetAsyncWithHttpInfo($roles, $first_name = null, $last_name = null, $email = null, $maiden_name = null, $grad_year = null, $end_grad_year = null, $marker = null, string $contentType = self::contentTypes['v1usersget'][0])
    {
        $returnType = '\SKY\School\Model\UserReadCollection';
        $request = $this->v1usersgetRequest($roles, $first_name, $last_name, $email, $maiden_name, $grad_year, $end_grad_year, $marker, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1usersget'
     *
     * @param  string $roles Comma delimited list of role IDs to get users for. (required)
     * @param  string $first_name Filter results by first name. (optional)
     * @param  string $last_name Filter results by last name. (optional)
     * @param  string $email Filter results by e-mail. (optional)
     * @param  string $maiden_name Filter results by maiden name. (optional)
     * @param  string $grad_year The beginning date in a school year (ex. 2017). (optional)
     * @param  string $end_grad_year The end date in a school year (ex. 2018). Enter a grad_year and end_grad_year to find matching results in the date range. (optional)
     * @param  int $marker Format - int32. The record number start at to return the next batch of data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1usersget'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1usersgetRequest($roles, $first_name = null, $last_name = null, $email = null, $maiden_name = null, $grad_year = null, $end_grad_year = null, $marker = null, string $contentType = self::contentTypes['v1usersget'][0])
    {

        // verify the required parameter 'roles' is set
        if ($roles === null || (is_array($roles) && count($roles) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $roles when calling v1usersget'
            );
        }









        $resourcePath = '/v1/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $roles,
            'roles', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first_name,
            'first_name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_name,
            'last_name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $email,
            'email', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $maiden_name,
            'maiden_name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $grad_year,
            'grad_year', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_grad_year,
            'end_grad_year', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marker,
            'marker', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
