<?php
/**
 * MedicalApi
 * PHP version 7.4
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * School
 *
 * This API is used to provide access to school information such as users, academics, admissions, athletics, content, lists, and general school info.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SKY\School\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SKY\School\ApiException;
use SKY\School\Configuration;
use SKY\School\HeaderSelector;
use SKY\School\ObjectSerializer;

/**
 * MedicalApi Class Doc Comment
 *
 * @category Class
 * @package  SKY\School
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MedicalApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'v1MedicalAllergiesByAllergyIdDelete' => [
            'application/json',
        ],
        'v1MedicalAllergiesByAllergyIdPatch' => [
            'application/json',
        ],
        'v1MedicalAllergiesPost' => [
            'application/json',
        ],
        'v1MedicalAllergiesconditionsPost' => [
            'application/json',
        ],
        'v1MedicalAthleticclearancePost' => [
            'application/json',
        ],
        'v1MedicalConditionsByConditionIdDelete' => [
            'application/json',
        ],
        'v1MedicalConditionsByConditionIdPatch' => [
            'application/json',
        ],
        'v1MedicalConditionsPost' => [
            'application/json',
        ],
        'v1MedicalImmunizationsPost' => [
            'application/json',
        ],
        'v1MedicalMedicationsByMedicationIdDelete' => [
            'application/json',
        ],
        'v1MedicalMedicationsByMedicationIdPatch' => [
            'application/json',
        ],
        'v1MedicalMedicationsPost' => [
            'application/json',
        ],
        'v1MedicalSecurityrolesGet' => [
            'application/json',
        ],
        'v1MedicalUsersByUserIdAllergiesGet' => [
            'application/json',
        ],
        'v1MedicalUsersByUserIdAllergiesconditionsGet' => [
            'application/json',
        ],
        'v1MedicalUsersByUserIdAthleticrequirementsGet' => [
            'application/json',
        ],
        'v1MedicalUsersByUserIdConditionsGet' => [
            'application/json',
        ],
        'v1MedicalUsersByUserIdImmunizationsGet' => [
            'application/json',
        ],
        'v1MedicalUsersByUserIdMedicationsGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v1MedicalAllergiesByAllergyIdDelete
     *
     * Medical allergies delete (BETA)
     *
     * @param  int $allergyId Format - int32. The ID of the student&#39;s allergy. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAllergiesByAllergyIdDelete'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1MedicalAllergiesByAllergyIdDelete($allergyId, string $contentType = self::contentTypes['v1MedicalAllergiesByAllergyIdDelete'][0])
    {
        [$response] = $this->v1MedicalAllergiesByAllergyIdDeleteWithHttpInfo($allergyId, $contentType);
        return $response;
    }

    /**
     * Operation v1MedicalAllergiesByAllergyIdDeleteWithHttpInfo
     *
     * Medical allergies delete (BETA)
     *
     * @param  int $allergyId Format - int32. The ID of the student&#39;s allergy. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAllergiesByAllergyIdDelete'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MedicalAllergiesByAllergyIdDeleteWithHttpInfo($allergyId, string $contentType = self::contentTypes['v1MedicalAllergiesByAllergyIdDelete'][0])
    {
        $request = $this->v1MedicalAllergiesByAllergyIdDeleteRequest($allergyId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MedicalAllergiesByAllergyIdDeleteAsync
     *
     * Medical allergies delete (BETA)
     *
     * @param  int $allergyId Format - int32. The ID of the student&#39;s allergy. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAllergiesByAllergyIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalAllergiesByAllergyIdDeleteAsync($allergyId, string $contentType = self::contentTypes['v1MedicalAllergiesByAllergyIdDelete'][0])
    {
        return $this->v1MedicalAllergiesByAllergyIdDeleteAsyncWithHttpInfo($allergyId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MedicalAllergiesByAllergyIdDeleteAsyncWithHttpInfo
     *
     * Medical allergies delete (BETA)
     *
     * @param  int $allergyId Format - int32. The ID of the student&#39;s allergy. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAllergiesByAllergyIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalAllergiesByAllergyIdDeleteAsyncWithHttpInfo($allergyId, string $contentType = self::contentTypes['v1MedicalAllergiesByAllergyIdDelete'][0])
    {
        $returnType = 'int';
        $request = $this->v1MedicalAllergiesByAllergyIdDeleteRequest($allergyId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MedicalAllergiesByAllergyIdDelete'
     *
     * @param  int $allergyId Format - int32. The ID of the student&#39;s allergy. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAllergiesByAllergyIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MedicalAllergiesByAllergyIdDeleteRequest($allergyId, string $contentType = self::contentTypes['v1MedicalAllergiesByAllergyIdDelete'][0])
    {

        // verify the required parameter 'allergyId' is set
        if ($allergyId === null || (is_array($allergyId) && count($allergyId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $allergyId when calling v1MedicalAllergiesByAllergyIdDelete'
            );
        }


        $resourcePath = '/v1/medical/allergies/{allergy_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($allergyId !== null) {
            $resourcePath = str_replace(
                '{' . 'allergy_id' . '}',
                ObjectSerializer::toPathValue($allergyId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MedicalAllergiesByAllergyIdPatch
     *
     * Medical allergies update (BETA)
     *
     * @param  int $allergyId Format - int32. The ID of the student&#39;s allergy. (required)
     * @param  \SKY\School\Model\StudentAllergyUpdate $studentAllergyUpdate The allergy changes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAllergiesByAllergyIdPatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1MedicalAllergiesByAllergyIdPatch($allergyId, $studentAllergyUpdate = null, string $contentType = self::contentTypes['v1MedicalAllergiesByAllergyIdPatch'][0])
    {
        [$response] = $this->v1MedicalAllergiesByAllergyIdPatchWithHttpInfo($allergyId, $studentAllergyUpdate, $contentType);
        return $response;
    }

    /**
     * Operation v1MedicalAllergiesByAllergyIdPatchWithHttpInfo
     *
     * Medical allergies update (BETA)
     *
     * @param  int $allergyId Format - int32. The ID of the student&#39;s allergy. (required)
     * @param  \SKY\School\Model\StudentAllergyUpdate $studentAllergyUpdate The allergy changes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAllergiesByAllergyIdPatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MedicalAllergiesByAllergyIdPatchWithHttpInfo($allergyId, $studentAllergyUpdate = null, string $contentType = self::contentTypes['v1MedicalAllergiesByAllergyIdPatch'][0])
    {
        $request = $this->v1MedicalAllergiesByAllergyIdPatchRequest($allergyId, $studentAllergyUpdate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MedicalAllergiesByAllergyIdPatchAsync
     *
     * Medical allergies update (BETA)
     *
     * @param  int $allergyId Format - int32. The ID of the student&#39;s allergy. (required)
     * @param  \SKY\School\Model\StudentAllergyUpdate $studentAllergyUpdate The allergy changes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAllergiesByAllergyIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalAllergiesByAllergyIdPatchAsync($allergyId, $studentAllergyUpdate = null, string $contentType = self::contentTypes['v1MedicalAllergiesByAllergyIdPatch'][0])
    {
        return $this->v1MedicalAllergiesByAllergyIdPatchAsyncWithHttpInfo($allergyId, $studentAllergyUpdate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MedicalAllergiesByAllergyIdPatchAsyncWithHttpInfo
     *
     * Medical allergies update (BETA)
     *
     * @param  int $allergyId Format - int32. The ID of the student&#39;s allergy. (required)
     * @param  \SKY\School\Model\StudentAllergyUpdate $studentAllergyUpdate The allergy changes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAllergiesByAllergyIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalAllergiesByAllergyIdPatchAsyncWithHttpInfo($allergyId, $studentAllergyUpdate = null, string $contentType = self::contentTypes['v1MedicalAllergiesByAllergyIdPatch'][0])
    {
        $returnType = 'int';
        $request = $this->v1MedicalAllergiesByAllergyIdPatchRequest($allergyId, $studentAllergyUpdate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MedicalAllergiesByAllergyIdPatch'
     *
     * @param  int $allergyId Format - int32. The ID of the student&#39;s allergy. (required)
     * @param  \SKY\School\Model\StudentAllergyUpdate $studentAllergyUpdate The allergy changes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAllergiesByAllergyIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MedicalAllergiesByAllergyIdPatchRequest($allergyId, $studentAllergyUpdate = null, string $contentType = self::contentTypes['v1MedicalAllergiesByAllergyIdPatch'][0])
    {

        // verify the required parameter 'allergyId' is set
        if ($allergyId === null || (is_array($allergyId) && count($allergyId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $allergyId when calling v1MedicalAllergiesByAllergyIdPatch'
            );
        }



        $resourcePath = '/v1/medical/allergies/{allergy_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($allergyId !== null) {
            $resourcePath = str_replace(
                '{' . 'allergy_id' . '}',
                ObjectSerializer::toPathValue($allergyId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($studentAllergyUpdate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($studentAllergyUpdate));
            } else {
                $httpBody = $studentAllergyUpdate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MedicalAllergiesPost
     *
     * Medical allergies create (BETA)
     *
     * @param  \SKY\School\Model\StudentMedicalAllergy $studentMedicalAllergy The medical allergy to be created for student (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAllergiesPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1MedicalAllergiesPost($studentMedicalAllergy = null, string $contentType = self::contentTypes['v1MedicalAllergiesPost'][0])
    {
        [$response] = $this->v1MedicalAllergiesPostWithHttpInfo($studentMedicalAllergy, $contentType);
        return $response;
    }

    /**
     * Operation v1MedicalAllergiesPostWithHttpInfo
     *
     * Medical allergies create (BETA)
     *
     * @param  \SKY\School\Model\StudentMedicalAllergy $studentMedicalAllergy The medical allergy to be created for student (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAllergiesPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MedicalAllergiesPostWithHttpInfo($studentMedicalAllergy = null, string $contentType = self::contentTypes['v1MedicalAllergiesPost'][0])
    {
        $request = $this->v1MedicalAllergiesPostRequest($studentMedicalAllergy, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MedicalAllergiesPostAsync
     *
     * Medical allergies create (BETA)
     *
     * @param  \SKY\School\Model\StudentMedicalAllergy $studentMedicalAllergy The medical allergy to be created for student (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAllergiesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalAllergiesPostAsync($studentMedicalAllergy = null, string $contentType = self::contentTypes['v1MedicalAllergiesPost'][0])
    {
        return $this->v1MedicalAllergiesPostAsyncWithHttpInfo($studentMedicalAllergy, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MedicalAllergiesPostAsyncWithHttpInfo
     *
     * Medical allergies create (BETA)
     *
     * @param  \SKY\School\Model\StudentMedicalAllergy $studentMedicalAllergy The medical allergy to be created for student (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAllergiesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalAllergiesPostAsyncWithHttpInfo($studentMedicalAllergy = null, string $contentType = self::contentTypes['v1MedicalAllergiesPost'][0])
    {
        $returnType = 'int';
        $request = $this->v1MedicalAllergiesPostRequest($studentMedicalAllergy, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MedicalAllergiesPost'
     *
     * @param  \SKY\School\Model\StudentMedicalAllergy $studentMedicalAllergy The medical allergy to be created for student (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAllergiesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MedicalAllergiesPostRequest($studentMedicalAllergy = null, string $contentType = self::contentTypes['v1MedicalAllergiesPost'][0])
    {



        $resourcePath = '/v1/medical/allergies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($studentMedicalAllergy)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($studentMedicalAllergy));
            } else {
                $httpBody = $studentMedicalAllergy;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MedicalAllergiesconditionsPost
     *
     * Medical allergies/conditions create (BETA)
     *
     * @param  \SKY\School\Model\StudentMedicalAllergyCondition $studentMedicalAllergyCondition The medical allergy/condition to be created for student (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAllergiesconditionsPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1MedicalAllergiesconditionsPost($studentMedicalAllergyCondition = null, string $contentType = self::contentTypes['v1MedicalAllergiesconditionsPost'][0])
    {
        [$response] = $this->v1MedicalAllergiesconditionsPostWithHttpInfo($studentMedicalAllergyCondition, $contentType);
        return $response;
    }

    /**
     * Operation v1MedicalAllergiesconditionsPostWithHttpInfo
     *
     * Medical allergies/conditions create (BETA)
     *
     * @param  \SKY\School\Model\StudentMedicalAllergyCondition $studentMedicalAllergyCondition The medical allergy/condition to be created for student (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAllergiesconditionsPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MedicalAllergiesconditionsPostWithHttpInfo($studentMedicalAllergyCondition = null, string $contentType = self::contentTypes['v1MedicalAllergiesconditionsPost'][0])
    {
        $request = $this->v1MedicalAllergiesconditionsPostRequest($studentMedicalAllergyCondition, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MedicalAllergiesconditionsPostAsync
     *
     * Medical allergies/conditions create (BETA)
     *
     * @param  \SKY\School\Model\StudentMedicalAllergyCondition $studentMedicalAllergyCondition The medical allergy/condition to be created for student (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAllergiesconditionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalAllergiesconditionsPostAsync($studentMedicalAllergyCondition = null, string $contentType = self::contentTypes['v1MedicalAllergiesconditionsPost'][0])
    {
        return $this->v1MedicalAllergiesconditionsPostAsyncWithHttpInfo($studentMedicalAllergyCondition, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MedicalAllergiesconditionsPostAsyncWithHttpInfo
     *
     * Medical allergies/conditions create (BETA)
     *
     * @param  \SKY\School\Model\StudentMedicalAllergyCondition $studentMedicalAllergyCondition The medical allergy/condition to be created for student (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAllergiesconditionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalAllergiesconditionsPostAsyncWithHttpInfo($studentMedicalAllergyCondition = null, string $contentType = self::contentTypes['v1MedicalAllergiesconditionsPost'][0])
    {
        $returnType = 'int';
        $request = $this->v1MedicalAllergiesconditionsPostRequest($studentMedicalAllergyCondition, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MedicalAllergiesconditionsPost'
     *
     * @param  \SKY\School\Model\StudentMedicalAllergyCondition $studentMedicalAllergyCondition The medical allergy/condition to be created for student (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAllergiesconditionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MedicalAllergiesconditionsPostRequest($studentMedicalAllergyCondition = null, string $contentType = self::contentTypes['v1MedicalAllergiesconditionsPost'][0])
    {



        $resourcePath = '/v1/medical/allergiesconditions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($studentMedicalAllergyCondition)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($studentMedicalAllergyCondition));
            } else {
                $httpBody = $studentMedicalAllergyCondition;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MedicalAthleticclearancePost
     *
     * Athletic requirements update (BETA)
     *
     * @param  \SKY\School\Model\StudentAthleticRequirementUpdate $studentAthleticRequirementUpdate The athletics requirements to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAthleticclearancePost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function v1MedicalAthleticclearancePost($studentAthleticRequirementUpdate = null, string $contentType = self::contentTypes['v1MedicalAthleticclearancePost'][0])
    {
        [$response] = $this->v1MedicalAthleticclearancePostWithHttpInfo($studentAthleticRequirementUpdate, $contentType);
        return $response;
    }

    /**
     * Operation v1MedicalAthleticclearancePostWithHttpInfo
     *
     * Athletic requirements update (BETA)
     *
     * @param  \SKY\School\Model\StudentAthleticRequirementUpdate $studentAthleticRequirementUpdate The athletics requirements to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAthleticclearancePost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MedicalAthleticclearancePostWithHttpInfo($studentAthleticRequirementUpdate = null, string $contentType = self::contentTypes['v1MedicalAthleticclearancePost'][0])
    {
        $request = $this->v1MedicalAthleticclearancePostRequest($studentAthleticRequirementUpdate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'string[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MedicalAthleticclearancePostAsync
     *
     * Athletic requirements update (BETA)
     *
     * @param  \SKY\School\Model\StudentAthleticRequirementUpdate $studentAthleticRequirementUpdate The athletics requirements to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAthleticclearancePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalAthleticclearancePostAsync($studentAthleticRequirementUpdate = null, string $contentType = self::contentTypes['v1MedicalAthleticclearancePost'][0])
    {
        return $this->v1MedicalAthleticclearancePostAsyncWithHttpInfo($studentAthleticRequirementUpdate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MedicalAthleticclearancePostAsyncWithHttpInfo
     *
     * Athletic requirements update (BETA)
     *
     * @param  \SKY\School\Model\StudentAthleticRequirementUpdate $studentAthleticRequirementUpdate The athletics requirements to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAthleticclearancePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalAthleticclearancePostAsyncWithHttpInfo($studentAthleticRequirementUpdate = null, string $contentType = self::contentTypes['v1MedicalAthleticclearancePost'][0])
    {
        $returnType = 'string[]';
        $request = $this->v1MedicalAthleticclearancePostRequest($studentAthleticRequirementUpdate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MedicalAthleticclearancePost'
     *
     * @param  \SKY\School\Model\StudentAthleticRequirementUpdate $studentAthleticRequirementUpdate The athletics requirements to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalAthleticclearancePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MedicalAthleticclearancePostRequest($studentAthleticRequirementUpdate = null, string $contentType = self::contentTypes['v1MedicalAthleticclearancePost'][0])
    {



        $resourcePath = '/v1/medical/athleticclearance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($studentAthleticRequirementUpdate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($studentAthleticRequirementUpdate));
            } else {
                $httpBody = $studentAthleticRequirementUpdate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MedicalConditionsByConditionIdDelete
     *
     * Medical conditions delete (BETA)
     *
     * @param  int $conditionId Format - int32. The ID of the student&#39;s condition. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalConditionsByConditionIdDelete'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1MedicalConditionsByConditionIdDelete($conditionId, string $contentType = self::contentTypes['v1MedicalConditionsByConditionIdDelete'][0])
    {
        [$response] = $this->v1MedicalConditionsByConditionIdDeleteWithHttpInfo($conditionId, $contentType);
        return $response;
    }

    /**
     * Operation v1MedicalConditionsByConditionIdDeleteWithHttpInfo
     *
     * Medical conditions delete (BETA)
     *
     * @param  int $conditionId Format - int32. The ID of the student&#39;s condition. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalConditionsByConditionIdDelete'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MedicalConditionsByConditionIdDeleteWithHttpInfo($conditionId, string $contentType = self::contentTypes['v1MedicalConditionsByConditionIdDelete'][0])
    {
        $request = $this->v1MedicalConditionsByConditionIdDeleteRequest($conditionId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MedicalConditionsByConditionIdDeleteAsync
     *
     * Medical conditions delete (BETA)
     *
     * @param  int $conditionId Format - int32. The ID of the student&#39;s condition. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalConditionsByConditionIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalConditionsByConditionIdDeleteAsync($conditionId, string $contentType = self::contentTypes['v1MedicalConditionsByConditionIdDelete'][0])
    {
        return $this->v1MedicalConditionsByConditionIdDeleteAsyncWithHttpInfo($conditionId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MedicalConditionsByConditionIdDeleteAsyncWithHttpInfo
     *
     * Medical conditions delete (BETA)
     *
     * @param  int $conditionId Format - int32. The ID of the student&#39;s condition. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalConditionsByConditionIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalConditionsByConditionIdDeleteAsyncWithHttpInfo($conditionId, string $contentType = self::contentTypes['v1MedicalConditionsByConditionIdDelete'][0])
    {
        $returnType = 'int';
        $request = $this->v1MedicalConditionsByConditionIdDeleteRequest($conditionId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MedicalConditionsByConditionIdDelete'
     *
     * @param  int $conditionId Format - int32. The ID of the student&#39;s condition. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalConditionsByConditionIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MedicalConditionsByConditionIdDeleteRequest($conditionId, string $contentType = self::contentTypes['v1MedicalConditionsByConditionIdDelete'][0])
    {

        // verify the required parameter 'conditionId' is set
        if ($conditionId === null || (is_array($conditionId) && count($conditionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conditionId when calling v1MedicalConditionsByConditionIdDelete'
            );
        }


        $resourcePath = '/v1/medical/conditions/{condition_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($conditionId !== null) {
            $resourcePath = str_replace(
                '{' . 'condition_id' . '}',
                ObjectSerializer::toPathValue($conditionId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MedicalConditionsByConditionIdPatch
     *
     * Medical conditions update (BETA)
     *
     * @param  int $conditionId Format - int32. The ID of the student&#39;s condition. (required)
     * @param  \SKY\School\Model\StudentConditionUpdate $studentConditionUpdate The condition changes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalConditionsByConditionIdPatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1MedicalConditionsByConditionIdPatch($conditionId, $studentConditionUpdate = null, string $contentType = self::contentTypes['v1MedicalConditionsByConditionIdPatch'][0])
    {
        [$response] = $this->v1MedicalConditionsByConditionIdPatchWithHttpInfo($conditionId, $studentConditionUpdate, $contentType);
        return $response;
    }

    /**
     * Operation v1MedicalConditionsByConditionIdPatchWithHttpInfo
     *
     * Medical conditions update (BETA)
     *
     * @param  int $conditionId Format - int32. The ID of the student&#39;s condition. (required)
     * @param  \SKY\School\Model\StudentConditionUpdate $studentConditionUpdate The condition changes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalConditionsByConditionIdPatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MedicalConditionsByConditionIdPatchWithHttpInfo($conditionId, $studentConditionUpdate = null, string $contentType = self::contentTypes['v1MedicalConditionsByConditionIdPatch'][0])
    {
        $request = $this->v1MedicalConditionsByConditionIdPatchRequest($conditionId, $studentConditionUpdate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MedicalConditionsByConditionIdPatchAsync
     *
     * Medical conditions update (BETA)
     *
     * @param  int $conditionId Format - int32. The ID of the student&#39;s condition. (required)
     * @param  \SKY\School\Model\StudentConditionUpdate $studentConditionUpdate The condition changes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalConditionsByConditionIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalConditionsByConditionIdPatchAsync($conditionId, $studentConditionUpdate = null, string $contentType = self::contentTypes['v1MedicalConditionsByConditionIdPatch'][0])
    {
        return $this->v1MedicalConditionsByConditionIdPatchAsyncWithHttpInfo($conditionId, $studentConditionUpdate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MedicalConditionsByConditionIdPatchAsyncWithHttpInfo
     *
     * Medical conditions update (BETA)
     *
     * @param  int $conditionId Format - int32. The ID of the student&#39;s condition. (required)
     * @param  \SKY\School\Model\StudentConditionUpdate $studentConditionUpdate The condition changes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalConditionsByConditionIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalConditionsByConditionIdPatchAsyncWithHttpInfo($conditionId, $studentConditionUpdate = null, string $contentType = self::contentTypes['v1MedicalConditionsByConditionIdPatch'][0])
    {
        $returnType = 'int';
        $request = $this->v1MedicalConditionsByConditionIdPatchRequest($conditionId, $studentConditionUpdate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MedicalConditionsByConditionIdPatch'
     *
     * @param  int $conditionId Format - int32. The ID of the student&#39;s condition. (required)
     * @param  \SKY\School\Model\StudentConditionUpdate $studentConditionUpdate The condition changes (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalConditionsByConditionIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MedicalConditionsByConditionIdPatchRequest($conditionId, $studentConditionUpdate = null, string $contentType = self::contentTypes['v1MedicalConditionsByConditionIdPatch'][0])
    {

        // verify the required parameter 'conditionId' is set
        if ($conditionId === null || (is_array($conditionId) && count($conditionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conditionId when calling v1MedicalConditionsByConditionIdPatch'
            );
        }



        $resourcePath = '/v1/medical/conditions/{condition_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($conditionId !== null) {
            $resourcePath = str_replace(
                '{' . 'condition_id' . '}',
                ObjectSerializer::toPathValue($conditionId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($studentConditionUpdate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($studentConditionUpdate));
            } else {
                $httpBody = $studentConditionUpdate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MedicalConditionsPost
     *
     * Medical conditions create (BETA)
     *
     * @param  \SKY\School\Model\StudentMedicalCondition $studentMedicalCondition The medical condition to be created for student (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalConditionsPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1MedicalConditionsPost($studentMedicalCondition = null, string $contentType = self::contentTypes['v1MedicalConditionsPost'][0])
    {
        [$response] = $this->v1MedicalConditionsPostWithHttpInfo($studentMedicalCondition, $contentType);
        return $response;
    }

    /**
     * Operation v1MedicalConditionsPostWithHttpInfo
     *
     * Medical conditions create (BETA)
     *
     * @param  \SKY\School\Model\StudentMedicalCondition $studentMedicalCondition The medical condition to be created for student (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalConditionsPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MedicalConditionsPostWithHttpInfo($studentMedicalCondition = null, string $contentType = self::contentTypes['v1MedicalConditionsPost'][0])
    {
        $request = $this->v1MedicalConditionsPostRequest($studentMedicalCondition, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MedicalConditionsPostAsync
     *
     * Medical conditions create (BETA)
     *
     * @param  \SKY\School\Model\StudentMedicalCondition $studentMedicalCondition The medical condition to be created for student (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalConditionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalConditionsPostAsync($studentMedicalCondition = null, string $contentType = self::contentTypes['v1MedicalConditionsPost'][0])
    {
        return $this->v1MedicalConditionsPostAsyncWithHttpInfo($studentMedicalCondition, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MedicalConditionsPostAsyncWithHttpInfo
     *
     * Medical conditions create (BETA)
     *
     * @param  \SKY\School\Model\StudentMedicalCondition $studentMedicalCondition The medical condition to be created for student (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalConditionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalConditionsPostAsyncWithHttpInfo($studentMedicalCondition = null, string $contentType = self::contentTypes['v1MedicalConditionsPost'][0])
    {
        $returnType = 'int';
        $request = $this->v1MedicalConditionsPostRequest($studentMedicalCondition, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MedicalConditionsPost'
     *
     * @param  \SKY\School\Model\StudentMedicalCondition $studentMedicalCondition The medical condition to be created for student (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalConditionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MedicalConditionsPostRequest($studentMedicalCondition = null, string $contentType = self::contentTypes['v1MedicalConditionsPost'][0])
    {



        $resourcePath = '/v1/medical/conditions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($studentMedicalCondition)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($studentMedicalCondition));
            } else {
                $httpBody = $studentMedicalCondition;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MedicalImmunizationsPost
     *
     * Medical immunizations update (BETA)
     *
     * @param  \SKY\School\Model\StudentImmunizationUpdate $studentImmunizationUpdate The immunizations to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalImmunizationsPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1MedicalImmunizationsPost($studentImmunizationUpdate = null, string $contentType = self::contentTypes['v1MedicalImmunizationsPost'][0])
    {
        $this->v1MedicalImmunizationsPostWithHttpInfo($studentImmunizationUpdate, $contentType);
    }

    /**
     * Operation v1MedicalImmunizationsPostWithHttpInfo
     *
     * Medical immunizations update (BETA)
     *
     * @param  \SKY\School\Model\StudentImmunizationUpdate $studentImmunizationUpdate The immunizations to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalImmunizationsPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MedicalImmunizationsPostWithHttpInfo($studentImmunizationUpdate = null, string $contentType = self::contentTypes['v1MedicalImmunizationsPost'][0])
    {
        $request = $this->v1MedicalImmunizationsPostRequest($studentImmunizationUpdate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1MedicalImmunizationsPostAsync
     *
     * Medical immunizations update (BETA)
     *
     * @param  \SKY\School\Model\StudentImmunizationUpdate $studentImmunizationUpdate The immunizations to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalImmunizationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalImmunizationsPostAsync($studentImmunizationUpdate = null, string $contentType = self::contentTypes['v1MedicalImmunizationsPost'][0])
    {
        return $this->v1MedicalImmunizationsPostAsyncWithHttpInfo($studentImmunizationUpdate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MedicalImmunizationsPostAsyncWithHttpInfo
     *
     * Medical immunizations update (BETA)
     *
     * @param  \SKY\School\Model\StudentImmunizationUpdate $studentImmunizationUpdate The immunizations to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalImmunizationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalImmunizationsPostAsyncWithHttpInfo($studentImmunizationUpdate = null, string $contentType = self::contentTypes['v1MedicalImmunizationsPost'][0])
    {
        $returnType = '';
        $request = $this->v1MedicalImmunizationsPostRequest($studentImmunizationUpdate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MedicalImmunizationsPost'
     *
     * @param  \SKY\School\Model\StudentImmunizationUpdate $studentImmunizationUpdate The immunizations to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalImmunizationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MedicalImmunizationsPostRequest($studentImmunizationUpdate = null, string $contentType = self::contentTypes['v1MedicalImmunizationsPost'][0])
    {



        $resourcePath = '/v1/medical/immunizations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($studentImmunizationUpdate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($studentImmunizationUpdate));
            } else {
                $httpBody = $studentImmunizationUpdate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MedicalMedicationsByMedicationIdDelete
     *
     * Medical medications delete (BETA)
     *
     * @param  int $medicationId Format - int32. The ID of the student&#39;s medication. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalMedicationsByMedicationIdDelete'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1MedicalMedicationsByMedicationIdDelete($medicationId, string $contentType = self::contentTypes['v1MedicalMedicationsByMedicationIdDelete'][0])
    {
        [$response] = $this->v1MedicalMedicationsByMedicationIdDeleteWithHttpInfo($medicationId, $contentType);
        return $response;
    }

    /**
     * Operation v1MedicalMedicationsByMedicationIdDeleteWithHttpInfo
     *
     * Medical medications delete (BETA)
     *
     * @param  int $medicationId Format - int32. The ID of the student&#39;s medication. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalMedicationsByMedicationIdDelete'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MedicalMedicationsByMedicationIdDeleteWithHttpInfo($medicationId, string $contentType = self::contentTypes['v1MedicalMedicationsByMedicationIdDelete'][0])
    {
        $request = $this->v1MedicalMedicationsByMedicationIdDeleteRequest($medicationId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MedicalMedicationsByMedicationIdDeleteAsync
     *
     * Medical medications delete (BETA)
     *
     * @param  int $medicationId Format - int32. The ID of the student&#39;s medication. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalMedicationsByMedicationIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalMedicationsByMedicationIdDeleteAsync($medicationId, string $contentType = self::contentTypes['v1MedicalMedicationsByMedicationIdDelete'][0])
    {
        return $this->v1MedicalMedicationsByMedicationIdDeleteAsyncWithHttpInfo($medicationId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MedicalMedicationsByMedicationIdDeleteAsyncWithHttpInfo
     *
     * Medical medications delete (BETA)
     *
     * @param  int $medicationId Format - int32. The ID of the student&#39;s medication. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalMedicationsByMedicationIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalMedicationsByMedicationIdDeleteAsyncWithHttpInfo($medicationId, string $contentType = self::contentTypes['v1MedicalMedicationsByMedicationIdDelete'][0])
    {
        $returnType = 'int';
        $request = $this->v1MedicalMedicationsByMedicationIdDeleteRequest($medicationId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MedicalMedicationsByMedicationIdDelete'
     *
     * @param  int $medicationId Format - int32. The ID of the student&#39;s medication. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalMedicationsByMedicationIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MedicalMedicationsByMedicationIdDeleteRequest($medicationId, string $contentType = self::contentTypes['v1MedicalMedicationsByMedicationIdDelete'][0])
    {

        // verify the required parameter 'medicationId' is set
        if ($medicationId === null || (is_array($medicationId) && count($medicationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $medicationId when calling v1MedicalMedicationsByMedicationIdDelete'
            );
        }


        $resourcePath = '/v1/medical/medications/{medication_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($medicationId !== null) {
            $resourcePath = str_replace(
                '{' . 'medication_id' . '}',
                ObjectSerializer::toPathValue($medicationId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MedicalMedicationsByMedicationIdPatch
     *
     * Medical medication update (BETA)
     *
     * @param  int $medicationId Format - int32. &gt;The student medication ID (required)
     * @param  \SKY\School\Model\StudentMedicationUpdate $studentMedicationUpdate The medication changes to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalMedicationsByMedicationIdPatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1MedicalMedicationsByMedicationIdPatch($medicationId, $studentMedicationUpdate = null, string $contentType = self::contentTypes['v1MedicalMedicationsByMedicationIdPatch'][0])
    {
        [$response] = $this->v1MedicalMedicationsByMedicationIdPatchWithHttpInfo($medicationId, $studentMedicationUpdate, $contentType);
        return $response;
    }

    /**
     * Operation v1MedicalMedicationsByMedicationIdPatchWithHttpInfo
     *
     * Medical medication update (BETA)
     *
     * @param  int $medicationId Format - int32. &gt;The student medication ID (required)
     * @param  \SKY\School\Model\StudentMedicationUpdate $studentMedicationUpdate The medication changes to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalMedicationsByMedicationIdPatch'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MedicalMedicationsByMedicationIdPatchWithHttpInfo($medicationId, $studentMedicationUpdate = null, string $contentType = self::contentTypes['v1MedicalMedicationsByMedicationIdPatch'][0])
    {
        $request = $this->v1MedicalMedicationsByMedicationIdPatchRequest($medicationId, $studentMedicationUpdate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MedicalMedicationsByMedicationIdPatchAsync
     *
     * Medical medication update (BETA)
     *
     * @param  int $medicationId Format - int32. &gt;The student medication ID (required)
     * @param  \SKY\School\Model\StudentMedicationUpdate $studentMedicationUpdate The medication changes to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalMedicationsByMedicationIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalMedicationsByMedicationIdPatchAsync($medicationId, $studentMedicationUpdate = null, string $contentType = self::contentTypes['v1MedicalMedicationsByMedicationIdPatch'][0])
    {
        return $this->v1MedicalMedicationsByMedicationIdPatchAsyncWithHttpInfo($medicationId, $studentMedicationUpdate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MedicalMedicationsByMedicationIdPatchAsyncWithHttpInfo
     *
     * Medical medication update (BETA)
     *
     * @param  int $medicationId Format - int32. &gt;The student medication ID (required)
     * @param  \SKY\School\Model\StudentMedicationUpdate $studentMedicationUpdate The medication changes to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalMedicationsByMedicationIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalMedicationsByMedicationIdPatchAsyncWithHttpInfo($medicationId, $studentMedicationUpdate = null, string $contentType = self::contentTypes['v1MedicalMedicationsByMedicationIdPatch'][0])
    {
        $returnType = 'int';
        $request = $this->v1MedicalMedicationsByMedicationIdPatchRequest($medicationId, $studentMedicationUpdate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MedicalMedicationsByMedicationIdPatch'
     *
     * @param  int $medicationId Format - int32. &gt;The student medication ID (required)
     * @param  \SKY\School\Model\StudentMedicationUpdate $studentMedicationUpdate The medication changes to update (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalMedicationsByMedicationIdPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MedicalMedicationsByMedicationIdPatchRequest($medicationId, $studentMedicationUpdate = null, string $contentType = self::contentTypes['v1MedicalMedicationsByMedicationIdPatch'][0])
    {

        // verify the required parameter 'medicationId' is set
        if ($medicationId === null || (is_array($medicationId) && count($medicationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $medicationId when calling v1MedicalMedicationsByMedicationIdPatch'
            );
        }



        $resourcePath = '/v1/medical/medications/{medication_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($medicationId !== null) {
            $resourcePath = str_replace(
                '{' . 'medication_id' . '}',
                ObjectSerializer::toPathValue($medicationId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($studentMedicationUpdate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($studentMedicationUpdate));
            } else {
                $httpBody = $studentMedicationUpdate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MedicalMedicationsPost
     *
     * Medical medications create (BETA)
     *
     * @param  \SKY\School\Model\StudentMedicationCreate $studentMedicationCreate The medication to be created for student (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalMedicationsPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function v1MedicalMedicationsPost($studentMedicationCreate = null, string $contentType = self::contentTypes['v1MedicalMedicationsPost'][0])
    {
        [$response] = $this->v1MedicalMedicationsPostWithHttpInfo($studentMedicationCreate, $contentType);
        return $response;
    }

    /**
     * Operation v1MedicalMedicationsPostWithHttpInfo
     *
     * Medical medications create (BETA)
     *
     * @param  \SKY\School\Model\StudentMedicationCreate $studentMedicationCreate The medication to be created for student (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalMedicationsPost'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MedicalMedicationsPostWithHttpInfo($studentMedicationCreate = null, string $contentType = self::contentTypes['v1MedicalMedicationsPost'][0])
    {
        $request = $this->v1MedicalMedicationsPostRequest($studentMedicationCreate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MedicalMedicationsPostAsync
     *
     * Medical medications create (BETA)
     *
     * @param  \SKY\School\Model\StudentMedicationCreate $studentMedicationCreate The medication to be created for student (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalMedicationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalMedicationsPostAsync($studentMedicationCreate = null, string $contentType = self::contentTypes['v1MedicalMedicationsPost'][0])
    {
        return $this->v1MedicalMedicationsPostAsyncWithHttpInfo($studentMedicationCreate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MedicalMedicationsPostAsyncWithHttpInfo
     *
     * Medical medications create (BETA)
     *
     * @param  \SKY\School\Model\StudentMedicationCreate $studentMedicationCreate The medication to be created for student (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalMedicationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalMedicationsPostAsyncWithHttpInfo($studentMedicationCreate = null, string $contentType = self::contentTypes['v1MedicalMedicationsPost'][0])
    {
        $returnType = 'int';
        $request = $this->v1MedicalMedicationsPostRequest($studentMedicationCreate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MedicalMedicationsPost'
     *
     * @param  \SKY\School\Model\StudentMedicationCreate $studentMedicationCreate The medication to be created for student (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalMedicationsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MedicalMedicationsPostRequest($studentMedicationCreate = null, string $contentType = self::contentTypes['v1MedicalMedicationsPost'][0])
    {



        $resourcePath = '/v1/medical/medications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($studentMedicationCreate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($studentMedicationCreate));
            } else {
                $httpBody = $studentMedicationCreate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MedicalSecurityrolesGet
     *
     * Medical Security Roles (BETA)
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalSecurityrolesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\SecurityRoleCollection
     */
    public function v1MedicalSecurityrolesGet(string $contentType = self::contentTypes['v1MedicalSecurityrolesGet'][0])
    {
        [$response] = $this->v1MedicalSecurityrolesGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation v1MedicalSecurityrolesGetWithHttpInfo
     *
     * Medical Security Roles (BETA)
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalSecurityrolesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\SecurityRoleCollection, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MedicalSecurityrolesGetWithHttpInfo(string $contentType = self::contentTypes['v1MedicalSecurityrolesGet'][0])
    {
        $request = $this->v1MedicalSecurityrolesGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\SecurityRoleCollection' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\SecurityRoleCollection' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\SecurityRoleCollection', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\SecurityRoleCollection';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\SecurityRoleCollection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MedicalSecurityrolesGetAsync
     *
     * Medical Security Roles (BETA)
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalSecurityrolesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalSecurityrolesGetAsync(string $contentType = self::contentTypes['v1MedicalSecurityrolesGet'][0])
    {
        return $this->v1MedicalSecurityrolesGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MedicalSecurityrolesGetAsyncWithHttpInfo
     *
     * Medical Security Roles (BETA)
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalSecurityrolesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalSecurityrolesGetAsyncWithHttpInfo(string $contentType = self::contentTypes['v1MedicalSecurityrolesGet'][0])
    {
        $returnType = '\SKY\School\Model\SecurityRoleCollection';
        $request = $this->v1MedicalSecurityrolesGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MedicalSecurityrolesGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalSecurityrolesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MedicalSecurityrolesGetRequest(string $contentType = self::contentTypes['v1MedicalSecurityrolesGet'][0])
    {


        $resourcePath = '/v1/medical/securityroles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MedicalUsersByUserIdAllergiesGet
     *
     * Medical allergies for a student (BETA)
     *
     * @param  int $userId Format - int32. ID of the student (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdAllergiesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\StudentAllergiesView[]
     */
    public function v1MedicalUsersByUserIdAllergiesGet($userId, string $contentType = self::contentTypes['v1MedicalUsersByUserIdAllergiesGet'][0])
    {
        [$response] = $this->v1MedicalUsersByUserIdAllergiesGetWithHttpInfo($userId, $contentType);
        return $response;
    }

    /**
     * Operation v1MedicalUsersByUserIdAllergiesGetWithHttpInfo
     *
     * Medical allergies for a student (BETA)
     *
     * @param  int $userId Format - int32. ID of the student (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdAllergiesGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\StudentAllergiesView[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MedicalUsersByUserIdAllergiesGetWithHttpInfo($userId, string $contentType = self::contentTypes['v1MedicalUsersByUserIdAllergiesGet'][0])
    {
        $request = $this->v1MedicalUsersByUserIdAllergiesGetRequest($userId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\StudentAllergiesView[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\StudentAllergiesView[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\StudentAllergiesView[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\StudentAllergiesView[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\StudentAllergiesView[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MedicalUsersByUserIdAllergiesGetAsync
     *
     * Medical allergies for a student (BETA)
     *
     * @param  int $userId Format - int32. ID of the student (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdAllergiesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalUsersByUserIdAllergiesGetAsync($userId, string $contentType = self::contentTypes['v1MedicalUsersByUserIdAllergiesGet'][0])
    {
        return $this->v1MedicalUsersByUserIdAllergiesGetAsyncWithHttpInfo($userId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MedicalUsersByUserIdAllergiesGetAsyncWithHttpInfo
     *
     * Medical allergies for a student (BETA)
     *
     * @param  int $userId Format - int32. ID of the student (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdAllergiesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalUsersByUserIdAllergiesGetAsyncWithHttpInfo($userId, string $contentType = self::contentTypes['v1MedicalUsersByUserIdAllergiesGet'][0])
    {
        $returnType = '\SKY\School\Model\StudentAllergiesView[]';
        $request = $this->v1MedicalUsersByUserIdAllergiesGetRequest($userId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MedicalUsersByUserIdAllergiesGet'
     *
     * @param  int $userId Format - int32. ID of the student (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdAllergiesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MedicalUsersByUserIdAllergiesGetRequest($userId, string $contentType = self::contentTypes['v1MedicalUsersByUserIdAllergiesGet'][0])
    {

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling v1MedicalUsersByUserIdAllergiesGet'
            );
        }


        $resourcePath = '/v1/medical/users/{user_id}/allergies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MedicalUsersByUserIdAllergiesconditionsGet
     *
     * Medical allergies/conditions for a student (BETA)
     *
     * @param  int $userId Format - int32. ID of the student (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdAllergiesconditionsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\AllergiesAndConditionsView[]
     */
    public function v1MedicalUsersByUserIdAllergiesconditionsGet($userId, string $contentType = self::contentTypes['v1MedicalUsersByUserIdAllergiesconditionsGet'][0])
    {
        [$response] = $this->v1MedicalUsersByUserIdAllergiesconditionsGetWithHttpInfo($userId, $contentType);
        return $response;
    }

    /**
     * Operation v1MedicalUsersByUserIdAllergiesconditionsGetWithHttpInfo
     *
     * Medical allergies/conditions for a student (BETA)
     *
     * @param  int $userId Format - int32. ID of the student (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdAllergiesconditionsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\AllergiesAndConditionsView[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MedicalUsersByUserIdAllergiesconditionsGetWithHttpInfo($userId, string $contentType = self::contentTypes['v1MedicalUsersByUserIdAllergiesconditionsGet'][0])
    {
        $request = $this->v1MedicalUsersByUserIdAllergiesconditionsGetRequest($userId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\AllergiesAndConditionsView[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\AllergiesAndConditionsView[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\AllergiesAndConditionsView[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\AllergiesAndConditionsView[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\AllergiesAndConditionsView[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MedicalUsersByUserIdAllergiesconditionsGetAsync
     *
     * Medical allergies/conditions for a student (BETA)
     *
     * @param  int $userId Format - int32. ID of the student (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdAllergiesconditionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalUsersByUserIdAllergiesconditionsGetAsync($userId, string $contentType = self::contentTypes['v1MedicalUsersByUserIdAllergiesconditionsGet'][0])
    {
        return $this->v1MedicalUsersByUserIdAllergiesconditionsGetAsyncWithHttpInfo($userId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MedicalUsersByUserIdAllergiesconditionsGetAsyncWithHttpInfo
     *
     * Medical allergies/conditions for a student (BETA)
     *
     * @param  int $userId Format - int32. ID of the student (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdAllergiesconditionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalUsersByUserIdAllergiesconditionsGetAsyncWithHttpInfo($userId, string $contentType = self::contentTypes['v1MedicalUsersByUserIdAllergiesconditionsGet'][0])
    {
        $returnType = '\SKY\School\Model\AllergiesAndConditionsView[]';
        $request = $this->v1MedicalUsersByUserIdAllergiesconditionsGetRequest($userId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MedicalUsersByUserIdAllergiesconditionsGet'
     *
     * @param  int $userId Format - int32. ID of the student (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdAllergiesconditionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MedicalUsersByUserIdAllergiesconditionsGetRequest($userId, string $contentType = self::contentTypes['v1MedicalUsersByUserIdAllergiesconditionsGet'][0])
    {

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling v1MedicalUsersByUserIdAllergiesconditionsGet'
            );
        }


        $resourcePath = '/v1/medical/users/{user_id}/allergiesconditions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MedicalUsersByUserIdAthleticrequirementsGet
     *
     * Medical athletic requirements for a student (BETA)
     *
     * @param  int $userId Format - int32. The ID of the student (required)
     * @param  string $schoolYear The description of the school year (optional)
     * @param  string $season The description of the season (optional)
     * @param  string $include Show all athletic requirements or only those completed or missing. School year and season are required if not set to completed. Allowed values: all, completed, missing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdAthleticrequirementsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\StudentAthleticRequirementRead[]
     */
    public function v1MedicalUsersByUserIdAthleticrequirementsGet($userId, $schoolYear = null, $season = null, $include = null, string $contentType = self::contentTypes['v1MedicalUsersByUserIdAthleticrequirementsGet'][0])
    {
        [$response] = $this->v1MedicalUsersByUserIdAthleticrequirementsGetWithHttpInfo($userId, $schoolYear, $season, $include, $contentType);
        return $response;
    }

    /**
     * Operation v1MedicalUsersByUserIdAthleticrequirementsGetWithHttpInfo
     *
     * Medical athletic requirements for a student (BETA)
     *
     * @param  int $userId Format - int32. The ID of the student (required)
     * @param  string $schoolYear The description of the school year (optional)
     * @param  string $season The description of the season (optional)
     * @param  string $include Show all athletic requirements or only those completed or missing. School year and season are required if not set to completed. Allowed values: all, completed, missing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdAthleticrequirementsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\StudentAthleticRequirementRead[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MedicalUsersByUserIdAthleticrequirementsGetWithHttpInfo($userId, $schoolYear = null, $season = null, $include = null, string $contentType = self::contentTypes['v1MedicalUsersByUserIdAthleticrequirementsGet'][0])
    {
        $request = $this->v1MedicalUsersByUserIdAthleticrequirementsGetRequest($userId, $schoolYear, $season, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\StudentAthleticRequirementRead[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\StudentAthleticRequirementRead[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\StudentAthleticRequirementRead[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\StudentAthleticRequirementRead[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\StudentAthleticRequirementRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MedicalUsersByUserIdAthleticrequirementsGetAsync
     *
     * Medical athletic requirements for a student (BETA)
     *
     * @param  int $userId Format - int32. The ID of the student (required)
     * @param  string $schoolYear The description of the school year (optional)
     * @param  string $season The description of the season (optional)
     * @param  string $include Show all athletic requirements or only those completed or missing. School year and season are required if not set to completed. Allowed values: all, completed, missing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdAthleticrequirementsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalUsersByUserIdAthleticrequirementsGetAsync($userId, $schoolYear = null, $season = null, $include = null, string $contentType = self::contentTypes['v1MedicalUsersByUserIdAthleticrequirementsGet'][0])
    {
        return $this->v1MedicalUsersByUserIdAthleticrequirementsGetAsyncWithHttpInfo($userId, $schoolYear, $season, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MedicalUsersByUserIdAthleticrequirementsGetAsyncWithHttpInfo
     *
     * Medical athletic requirements for a student (BETA)
     *
     * @param  int $userId Format - int32. The ID of the student (required)
     * @param  string $schoolYear The description of the school year (optional)
     * @param  string $season The description of the season (optional)
     * @param  string $include Show all athletic requirements or only those completed or missing. School year and season are required if not set to completed. Allowed values: all, completed, missing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdAthleticrequirementsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalUsersByUserIdAthleticrequirementsGetAsyncWithHttpInfo($userId, $schoolYear = null, $season = null, $include = null, string $contentType = self::contentTypes['v1MedicalUsersByUserIdAthleticrequirementsGet'][0])
    {
        $returnType = '\SKY\School\Model\StudentAthleticRequirementRead[]';
        $request = $this->v1MedicalUsersByUserIdAthleticrequirementsGetRequest($userId, $schoolYear, $season, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MedicalUsersByUserIdAthleticrequirementsGet'
     *
     * @param  int $userId Format - int32. The ID of the student (required)
     * @param  string $schoolYear The description of the school year (optional)
     * @param  string $season The description of the season (optional)
     * @param  string $include Show all athletic requirements or only those completed or missing. School year and season are required if not set to completed. Allowed values: all, completed, missing (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdAthleticrequirementsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MedicalUsersByUserIdAthleticrequirementsGetRequest($userId, $schoolYear = null, $season = null, $include = null, string $contentType = self::contentTypes['v1MedicalUsersByUserIdAthleticrequirementsGet'][0])
    {

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling v1MedicalUsersByUserIdAthleticrequirementsGet'
            );
        }





        $resourcePath = '/v1/medical/users/{user_id}/athleticrequirements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $schoolYear,
            'schoolYear', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $season,
            'season', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MedicalUsersByUserIdConditionsGet
     *
     * Medical conditions for a student (BETA)
     *
     * @param  int $userId Format - int32. ID of the student (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdConditionsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\StudentConditionView[]
     */
    public function v1MedicalUsersByUserIdConditionsGet($userId, string $contentType = self::contentTypes['v1MedicalUsersByUserIdConditionsGet'][0])
    {
        [$response] = $this->v1MedicalUsersByUserIdConditionsGetWithHttpInfo($userId, $contentType);
        return $response;
    }

    /**
     * Operation v1MedicalUsersByUserIdConditionsGetWithHttpInfo
     *
     * Medical conditions for a student (BETA)
     *
     * @param  int $userId Format - int32. ID of the student (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdConditionsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\StudentConditionView[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MedicalUsersByUserIdConditionsGetWithHttpInfo($userId, string $contentType = self::contentTypes['v1MedicalUsersByUserIdConditionsGet'][0])
    {
        $request = $this->v1MedicalUsersByUserIdConditionsGetRequest($userId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\StudentConditionView[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\StudentConditionView[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\StudentConditionView[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\StudentConditionView[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\StudentConditionView[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MedicalUsersByUserIdConditionsGetAsync
     *
     * Medical conditions for a student (BETA)
     *
     * @param  int $userId Format - int32. ID of the student (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdConditionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalUsersByUserIdConditionsGetAsync($userId, string $contentType = self::contentTypes['v1MedicalUsersByUserIdConditionsGet'][0])
    {
        return $this->v1MedicalUsersByUserIdConditionsGetAsyncWithHttpInfo($userId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MedicalUsersByUserIdConditionsGetAsyncWithHttpInfo
     *
     * Medical conditions for a student (BETA)
     *
     * @param  int $userId Format - int32. ID of the student (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdConditionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalUsersByUserIdConditionsGetAsyncWithHttpInfo($userId, string $contentType = self::contentTypes['v1MedicalUsersByUserIdConditionsGet'][0])
    {
        $returnType = '\SKY\School\Model\StudentConditionView[]';
        $request = $this->v1MedicalUsersByUserIdConditionsGetRequest($userId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MedicalUsersByUserIdConditionsGet'
     *
     * @param  int $userId Format - int32. ID of the student (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdConditionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MedicalUsersByUserIdConditionsGetRequest($userId, string $contentType = self::contentTypes['v1MedicalUsersByUserIdConditionsGet'][0])
    {

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling v1MedicalUsersByUserIdConditionsGet'
            );
        }


        $resourcePath = '/v1/medical/users/{user_id}/conditions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MedicalUsersByUserIdImmunizationsGet
     *
     * Medical immunizations for a student (BETA)
     *
     * @param  int $userId Format - int32. The ID of the student (required)
     * @param  string $include Show all required immunizations or just those completed or missing. Allowed values: all, completed, missing. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdImmunizationsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\StudentImmunizationRead[]
     */
    public function v1MedicalUsersByUserIdImmunizationsGet($userId, $include = null, string $contentType = self::contentTypes['v1MedicalUsersByUserIdImmunizationsGet'][0])
    {
        [$response] = $this->v1MedicalUsersByUserIdImmunizationsGetWithHttpInfo($userId, $include, $contentType);
        return $response;
    }

    /**
     * Operation v1MedicalUsersByUserIdImmunizationsGetWithHttpInfo
     *
     * Medical immunizations for a student (BETA)
     *
     * @param  int $userId Format - int32. The ID of the student (required)
     * @param  string $include Show all required immunizations or just those completed or missing. Allowed values: all, completed, missing. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdImmunizationsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\StudentImmunizationRead[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MedicalUsersByUserIdImmunizationsGetWithHttpInfo($userId, $include = null, string $contentType = self::contentTypes['v1MedicalUsersByUserIdImmunizationsGet'][0])
    {
        $request = $this->v1MedicalUsersByUserIdImmunizationsGetRequest($userId, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\StudentImmunizationRead[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\StudentImmunizationRead[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\StudentImmunizationRead[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\StudentImmunizationRead[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\StudentImmunizationRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MedicalUsersByUserIdImmunizationsGetAsync
     *
     * Medical immunizations for a student (BETA)
     *
     * @param  int $userId Format - int32. The ID of the student (required)
     * @param  string $include Show all required immunizations or just those completed or missing. Allowed values: all, completed, missing. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdImmunizationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalUsersByUserIdImmunizationsGetAsync($userId, $include = null, string $contentType = self::contentTypes['v1MedicalUsersByUserIdImmunizationsGet'][0])
    {
        return $this->v1MedicalUsersByUserIdImmunizationsGetAsyncWithHttpInfo($userId, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MedicalUsersByUserIdImmunizationsGetAsyncWithHttpInfo
     *
     * Medical immunizations for a student (BETA)
     *
     * @param  int $userId Format - int32. The ID of the student (required)
     * @param  string $include Show all required immunizations or just those completed or missing. Allowed values: all, completed, missing. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdImmunizationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalUsersByUserIdImmunizationsGetAsyncWithHttpInfo($userId, $include = null, string $contentType = self::contentTypes['v1MedicalUsersByUserIdImmunizationsGet'][0])
    {
        $returnType = '\SKY\School\Model\StudentImmunizationRead[]';
        $request = $this->v1MedicalUsersByUserIdImmunizationsGetRequest($userId, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MedicalUsersByUserIdImmunizationsGet'
     *
     * @param  int $userId Format - int32. The ID of the student (required)
     * @param  string $include Show all required immunizations or just those completed or missing. Allowed values: all, completed, missing. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdImmunizationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MedicalUsersByUserIdImmunizationsGetRequest($userId, $include = null, string $contentType = self::contentTypes['v1MedicalUsersByUserIdImmunizationsGet'][0])
    {

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling v1MedicalUsersByUserIdImmunizationsGet'
            );
        }



        $resourcePath = '/v1/medical/users/{user_id}/immunizations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1MedicalUsersByUserIdMedicationsGet
     *
     * Medical medications for a student (BETA)
     *
     * @param  int $userId Format - int32. ID of the student (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdMedicationsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SKY\School\Model\StudentMedicationRead[]
     */
    public function v1MedicalUsersByUserIdMedicationsGet($userId, string $contentType = self::contentTypes['v1MedicalUsersByUserIdMedicationsGet'][0])
    {
        [$response] = $this->v1MedicalUsersByUserIdMedicationsGetWithHttpInfo($userId, $contentType);
        return $response;
    }

    /**
     * Operation v1MedicalUsersByUserIdMedicationsGetWithHttpInfo
     *
     * Medical medications for a student (BETA)
     *
     * @param  int $userId Format - int32. ID of the student (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdMedicationsGet'] to see the possible values for this operation
     *
     * @throws \SKY\School\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SKY\School\Model\StudentMedicationRead[], HTTP status code, HTTP response headers (array of strings)
     */
    public function v1MedicalUsersByUserIdMedicationsGetWithHttpInfo($userId, string $contentType = self::contentTypes['v1MedicalUsersByUserIdMedicationsGet'][0])
    {
        $request = $this->v1MedicalUsersByUserIdMedicationsGetRequest($userId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SKY\School\Model\StudentMedicationRead[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SKY\School\Model\StudentMedicationRead[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SKY\School\Model\StudentMedicationRead[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\SKY\School\Model\StudentMedicationRead[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SKY\School\Model\StudentMedicationRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v1MedicalUsersByUserIdMedicationsGetAsync
     *
     * Medical medications for a student (BETA)
     *
     * @param  int $userId Format - int32. ID of the student (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdMedicationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalUsersByUserIdMedicationsGetAsync($userId, string $contentType = self::contentTypes['v1MedicalUsersByUserIdMedicationsGet'][0])
    {
        return $this->v1MedicalUsersByUserIdMedicationsGetAsyncWithHttpInfo($userId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1MedicalUsersByUserIdMedicationsGetAsyncWithHttpInfo
     *
     * Medical medications for a student (BETA)
     *
     * @param  int $userId Format - int32. ID of the student (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdMedicationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1MedicalUsersByUserIdMedicationsGetAsyncWithHttpInfo($userId, string $contentType = self::contentTypes['v1MedicalUsersByUserIdMedicationsGet'][0])
    {
        $returnType = '\SKY\School\Model\StudentMedicationRead[]';
        $request = $this->v1MedicalUsersByUserIdMedicationsGetRequest($userId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1MedicalUsersByUserIdMedicationsGet'
     *
     * @param  int $userId Format - int32. ID of the student (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['v1MedicalUsersByUserIdMedicationsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1MedicalUsersByUserIdMedicationsGetRequest($userId, string $contentType = self::contentTypes['v1MedicalUsersByUserIdMedicationsGet'][0])
    {

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling v1MedicalUsersByUserIdMedicationsGet'
            );
        }


        $resourcePath = '/v1/medical/users/{user_id}/medications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Bb-Api-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Bb-Api-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
